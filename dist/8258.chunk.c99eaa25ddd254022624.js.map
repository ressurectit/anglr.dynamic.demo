{"version":3,"file":"8258.chunk.c99eaa25ddd254022624.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/components/matrixGrid/matrixGrid.component.ts","webpack://ng-universal-demo/../../../../src/directives/contentCellTemplate/contentCellTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/contentContainerTemplate/contentContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/contentRowContainerTemplate/contentRowContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/footerContainerTemplate/footerContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/footerRowContainerTemplate/footerRowContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/gridContainerTemplate/gridContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/headerCellTemplate/headerCellTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/headerContainerTemplate/headerContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/headerRowContainerTemplate/headerRowContainerTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/footerCellTemplate/footerCellTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/directives/matrixGridColumn/matrixGridColumn.directive.ts","webpack://ng-universal-demo/../../../src/modules/matrixGrid.module.ts","webpack://ng-universal-demo/../../../../src/plugins/contentRenderer/matrix/matrixContentRenderer.component.ts","webpack://ng-universal-demo/../../../../src/components/renderableContent/renderableContent.component.ts","webpack://ng-universal-demo/../../../../src/components/gridContainer/gridContainer.component.ts","webpack://ng-universal-demo/../../../../src/components/contentContainer/contentContainer.component.ts","webpack://ng-universal-demo/../../../../src/plugins/contentRenderer/matrix/misc/components/baseDefaultTemplates/baseDefaultTemplates.component.ts","webpack://ng-universal-demo/../../../../src/components/headerContainer/headerContainer.component.ts","webpack://ng-universal-demo/../../../../src/components/footerContainer/footerContainer.component.ts","webpack://ng-universal-demo/../../../../src/components/headerRowContainer/headerRowContainer.component.ts","webpack://ng-universal-demo/../../../../src/components/contentRowContainer/contentRowContainer.component.ts","webpack://ng-universal-demo/../../../../src/components/footerRowContainer/footerRowContainer.component.ts","webpack://ng-universal-demo/../../../../src/pipes/cssGridTemplateColumns/cssGridTemplateColumns.pipe.ts","webpack://ng-universal-demo/../../../../src/plugins/contentRenderer/matrix/misc/components/cssGridDefaultTemplates/cssGridDefaultTemplates.component.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, forwardRef, FactoryProvider, ExistingProvider, ValueProvider, AfterContentInit, ContentChildren, QueryList, WritableSignal, signal, Signal} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CommonDynamicModule} from '@anglr/common';\n\nimport {GridSAComponent} from '../grid/grid.component';\nimport {AsyncDataLoaderSAComponent, BasicPagingSAComponent, MatrixContentRendererSAComponent, NoGridInitializerSAComponent, NoMetadataSelectorSAComponent, NoRowSelectorSAComponent, SimpleNoDataRendererSAComponent, SingleOrderingSAComponent} from '../../plugins';\nimport {DEFAULT_OPTIONS, GRID_INSTANCE, GRID_PLUGIN_INSTANCES} from '../../misc/tokens';\nimport {ResolveForwardRefSAPipe} from '../../pipes';\nimport {Grid, GridOptions, MatrixGridMetadata, MetadataGatherer} from '../../interfaces';\nimport {ContentContainerTemplateSADirective, ContentRowContainerTemplateSADirective, FooterContainerTemplateSADirective, FooterRowContainerTemplateSADirective, GridContainerTemplateSADirective, HeaderContainerTemplateSADirective, HeaderRowContainerTemplateSADirective, MatrixGridColumnSADirective} from '../../directives';\nimport {GridPluginInstancesDef} from '../../misc/gridPluginInstancesDef';\n\n/**\n * Default 'GridOptions'\n */\nconst defaultOptions: GridOptions =\n{\n    autoInitialize: true,\n    plugins:\n    {\n        contentRenderer:\n        {\n            type: forwardRef(() => MatrixContentRendererSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        dataLoader:\n        {\n            type: forwardRef(() => AsyncDataLoaderSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        gridInitializer:\n        {\n            type: forwardRef(() => NoGridInitializerSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        metadataSelector:\n        {\n            type: forwardRef(() => NoMetadataSelectorSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        noDataRenderer:\n        {\n            type: forwardRef(() => SimpleNoDataRendererSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        ordering:\n        {\n            type: forwardRef(() => SingleOrderingSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        paging:\n        {\n            type: forwardRef(() => BasicPagingSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n        rowSelector:\n        {\n            type: forwardRef(() => NoRowSelectorSAComponent),\n            instance: null,\n            instanceCallback: null,\n            options: null,\n        },\n    }\n};\n\n/**\n * Grid component used for rendering grid, configured with special content renderer and metadata gatherer\n */\n@Component(\n{\n    selector: '[ngGrid]',\n    templateUrl: '../grid/grid.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        CommonDynamicModule,\n        ResolveForwardRefSAPipe,\n    ],\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: GRID_INSTANCE,\n            useExisting: forwardRef(() => MatrixGridSAComponent),\n        },\n        <FactoryProvider>\n        {\n            provide: GRID_PLUGIN_INSTANCES,\n            useFactory: () => {return new GridPluginInstancesDef();}\n        },\n        <ValueProvider>\n        {\n            provide: DEFAULT_OPTIONS,\n            useValue: defaultOptions,\n        },\n    ]\n})\nexport class MatrixGridSAComponent extends GridSAComponent implements Grid, MetadataGatherer<MatrixGridMetadata>, AfterContentInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Signal for metadata value\n     */\n    protected metadataValue: WritableSignal<MatrixGridMetadata> = signal(\n    {\n        columns: [],\n        gridContainer: null,\n        headerContainer: null,\n        contentContainer: null,\n        footerContainer: null,\n        headerRowContainer: [],\n        contentRowContainer: [],\n        footerRowContainer: [],\n    });\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get metadataGatherer(): MetadataGatherer|undefined|null\n    {\n        return this;\n    }\n\n    //######################### public properties - implementation of MetadataGatherer #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get metadata(): Signal<MatrixGridMetadata>\n    {\n        return this.metadataValue.asReadonly();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Grid container template\n     */\n    @ContentChildren(GridContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected gridContainer: QueryList<GridContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Header container template\n     */\n    @ContentChildren(HeaderContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected headerContainer: QueryList<HeaderContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Content container template\n     */\n    @ContentChildren(ContentContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected contentContainer: QueryList<ContentContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Footer container template\n     */\n    @ContentChildren(FooterContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected footerContainer: QueryList<FooterContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Header container template\n     */\n    @ContentChildren(HeaderRowContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected headerRowContainer: QueryList<HeaderRowContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Content container template\n     */\n    @ContentChildren(ContentRowContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected contentRowContainer: QueryList<ContentRowContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Footer container template\n     */\n    @ContentChildren(FooterRowContainerTemplateSADirective, {emitDistinctChangesOnly: true})\n    protected footerRowContainer: QueryList<FooterRowContainerTemplateSADirective>|undefined|null;\n\n    /**\n     * Obtains definition of columns\n     */\n    @ContentChildren(MatrixGridColumnSADirective, {emitDistinctChangesOnly: true})\n    protected columns: QueryList<MatrixGridColumnSADirective>|undefined|null;\n\n    //######################### public methods - implementation of AfterContentInit #########################\n\n    /**\n     * Called when content was initialized\n     */\n    public ngAfterContentInit(): void\n    {\n        this.gridContainer?.changes.subscribe(() => this.setMetadata());\n        this.headerContainer?.changes.subscribe(() => this.setMetadata());\n        this.contentContainer?.changes.subscribe(() => this.setMetadata());\n        this.footerContainer?.changes.subscribe(() => this.setMetadata());\n        this.headerRowContainer?.changes.subscribe(() => this.setMetadata());\n        this.contentRowContainer?.changes.subscribe(() => this.setMetadata());\n        this.footerRowContainer?.changes.subscribe(() => this.setMetadata());\n        this.columns?.changes.subscribe(() => this.setMetadata());\n\n        this.setMetadata();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets metadata\n     */\n    public setMetadata(): void\n    {\n        this.metadataValue.set(\n        {\n            columns: this.columns?.toArray() ?? [],\n            gridContainer: this.gridContainer?.first,\n            headerContainer: this.headerContainer?.first,\n            contentContainer: this.contentContainer?.first,\n            footerContainer: this.footerContainer?.first,\n            headerRowContainer: this.headerRowContainer?.toArray() ?? [],\n            contentRowContainer: this.contentRowContainer?.toArray() ?? [],\n            footerRowContainer: this.footerRowContainer?.toArray() ?? [],\n        });\n    }\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridDataCellContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for content cell\n */\n@Directive(\n{\n    selector: '[contentCellTemplate]',\n    standalone: true,\n})\nexport class ContentCellTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridDataCellContext> = inject(TemplateRef<GridDataCellContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: ContentCellTemplateSADirective, _ctx: unknown): _ctx is GridDataCellContext<any>\n    {\n        return true;\n    }\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for grid content renderer content (body) container\n */\n@Directive(\n{\n    selector: '[contentContainerTemplate]',\n    standalone: true,\n})\nexport class ContentContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridContext> = inject(TemplateRef<GridContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: ContentContainerTemplateSADirective, _ctx: unknown): _ctx is GridContext<any>\n    {\n        return true;\n    }\n}","import {Directive, Input, TemplateRef, inject} from '@angular/core';\nimport {Func1} from '@jscrpt/common';\n\nimport {GridDataRowContext} from '../../interfaces';\nimport {rowColumnsAttribute} from '../../misc/utils';\n\n/**\n * Directive used for obtaining template for grid content renderer content (body) row container\n */\n@Directive(\n{\n    selector: '[contentRowContainerTemplate]',\n    standalone: true,\n})\nexport class ContentRowContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridDataRowContext> = inject(TemplateRef<GridDataRowContext>);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Predicate which controls rendering of row template, if not specified row is rendered\n     */\n    @Input('contentRowContainerTemplatePredicate')\n    public predicate: Func1<boolean, GridDataRowContext>|undefined|null;\n\n    /**\n     * Array of column ids to be rendered in this row, if not specified or null all available columns will be rendered\n     */\n    @Input({alias: 'contentRowContainerTemplate', transform: rowColumnsAttribute})\n    public columns: string[]|undefined|null;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: ContentRowContainerTemplateSADirective, _ctx: unknown): _ctx is GridDataRowContext<any>\n    {\n        return true;\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `predicate` input\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public static ngAcceptInputType_predicate: Func1<boolean, GridDataRowContext<any>>|undefined|null;\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for grid content renderer footer container\n */\n@Directive(\n{\n    selector: '[footerContainerTemplate]',\n    standalone: true,\n})\nexport class FooterContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridContext> = inject(TemplateRef<GridContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: FooterContainerTemplateSADirective, _ctx: unknown): _ctx is GridContext<any>\n    {\n        return true;\n    }\n}","import {Directive, Input, TemplateRef, inject} from '@angular/core';\nimport {Func1} from '@jscrpt/common';\n\nimport {GridRowContext} from '../../interfaces';\nimport {rowColumnsAttribute} from '../../misc/utils';\n\n/**\n * Directive used for obtaining template for grid content renderer footer row container\n */\n@Directive(\n{\n    selector: '[footerRowContainerTemplate]',\n    standalone: true,\n})\nexport class FooterRowContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridRowContext> = inject(TemplateRef<GridRowContext>);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Predicate which controls rendering of row template, if not specified row is rendered\n     */\n    @Input('footerRowContainerTemplatePredicate')\n    public predicate: Func1<boolean, GridRowContext>|undefined|null;\n\n    /**\n     * Array of column ids to be rendered in this row, if not specified or null all available columns will be rendered\n     */\n    @Input({alias: 'footerRowContainerTemplate', transform: rowColumnsAttribute})\n    public columns: string[]|undefined|null;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: FooterRowContainerTemplateSADirective, _ctx: unknown): _ctx is GridRowContext<any>\n    {\n        return true;\n    }\n\n    /**\n     * Custom input type for `predicate` input\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public static ngAcceptInputType_predicate: Func1<boolean, GridRowContext<any>>|undefined|null;\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for grid content renderer container\n */\n@Directive(\n{\n    selector: '[gridContainerTemplate]',\n    standalone: true,\n})\nexport class GridContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridContext> = inject(TemplateRef<GridContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: GridContainerTemplateSADirective, _ctx: unknown): _ctx is GridContext<any>\n    {\n        return true;\n    }\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridCellContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for header cell\n */\n@Directive(\n{\n    selector: '[headerCellTemplate]',\n    standalone: true,\n})\nexport class HeaderCellTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridCellContext> = inject(TemplateRef<GridCellContext>);\n\n    //######################### ng language server #########################\n\n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: HeaderCellTemplateSADirective, _ctx: unknown): _ctx is GridCellContext<any>\n    {\n        return true;\n    }\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for grid content renderer header container\n */\n@Directive(\n{\n    selector: '[headerContainerTemplate]',\n    standalone: true,\n})\nexport class HeaderContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridContext> = inject(TemplateRef<GridContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: HeaderContainerTemplateSADirective, _ctx: unknown): _ctx is GridContext<any>\n    {\n        return true;\n    }\n}","import {Directive, Input, TemplateRef, inject} from '@angular/core';\nimport {Func1} from '@jscrpt/common';\n\nimport {GridRowContext} from '../../interfaces';\nimport {rowColumnsAttribute} from '../../misc/utils';\n\n/**\n * Directive used for obtaining template for grid content renderer header row container\n */\n@Directive(\n{\n    selector: '[headerRowContainerTemplate]',\n    standalone: true,\n})\nexport class HeaderRowContainerTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridRowContext> = inject(TemplateRef<GridRowContext>);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Predicate which controls rendering of row template, if not specified row is rendered\n     */\n    @Input('headerRowContainerTemplatePredicate')\n    public predicate: Func1<boolean, GridRowContext>|undefined|null;\n\n    /**\n     * Array of column ids to be rendered in this row, if not specified or null all available columns will be rendered\n     */\n    @Input({alias: 'headerRowContainerTemplate', transform: rowColumnsAttribute})\n    public columns: string[]|undefined|null;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: HeaderRowContainerTemplateSADirective, _ctx: unknown): _ctx is GridRowContext<any>\n    {\n        return true;\n    }\n\n    /**\n     * Custom input type for `predicate` input\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public static ngAcceptInputType_predicate: Func1<boolean, GridRowContext<any>>|undefined|null;\n}","import {Directive, TemplateRef, inject} from '@angular/core';\n\nimport {GridCellContext} from '../../interfaces';\n\n/**\n * Directive used for obtaining template for footer cell\n */\n@Directive(\n{\n    selector: '[footerCellTemplate]',\n    standalone: true,\n})\nexport class FooterCellTemplateSADirective\n{\n    //######################### public properties #########################\n\n    /**\n     * Obtained template by this directive\n     */\n    public template: TemplateRef<GridCellContext> = inject(TemplateRef<GridCellContext>);\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static ngTemplateContextGuard(_dir: FooterCellTemplateSADirective, _ctx: unknown): _ctx is GridCellContext<any>\n    {\n        return true;\n    }\n}","import {Input, TemplateRef, Directive, ContentChild} from '@angular/core';\n\nimport {MatrixGridColumn, GridCellContext, GridDataCellContext} from '../../interfaces';\nimport {HeaderCellTemplateSADirective} from '../headerCellTemplate/headerCellTemplate.directive';\nimport {FooterCellTemplateSADirective} from '../footerCellTemplate/footerCellTemplate.directive';\nimport {ContentCellTemplateSADirective} from '../contentCellTemplate/contentCellTemplate.directive';\n\n/**\n * Directive for gathering information about matrix grid column\n */\n@Directive(\n{\n    selector: '[matrixGridColumn]',\n    standalone: true,\n})\nexport class MatrixGridColumnSADirective<TData = unknown> implements MatrixGridColumn<TData>\n{\n    //######################### public properties - implementation of TableGridColumn #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input({required: true, alias: 'matrixGridColumn'})\n    public id: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public title: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public visible: boolean = true;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public width: string|undefined|null = '1fr';\n\n    /**\n     * @inheritdoc\n     */\n    @ContentChild(HeaderCellTemplateSADirective, {static: true, read: TemplateRef})\n    public headerTemplate: TemplateRef<GridCellContext<TData, MatrixGridColumn<TData>>>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @ContentChild(ContentCellTemplateSADirective, {static: true, read: TemplateRef})\n    public bodyTemplate: TemplateRef<GridDataCellContext<TData, MatrixGridColumn<TData>>>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @ContentChild(FooterCellTemplateSADirective, {static: true, read: TemplateRef})\n    public footerTemplate: TemplateRef<GridCellContext<TData, MatrixGridColumn<TData>>>|undefined|null;\n}","import {NgModule} from '@angular/core';\n\nimport {ContentContainerSAComponent, ContentRowContainerSAComponent, FooterContainerSAComponent, FooterRowContainerSAComponent, GridContainerSAComponent, HeaderContainerSAComponent, HeaderRowContainerSAComponent, MatrixGridSAComponent} from '../components';\nimport {ContentCellTemplateSADirective, ContentContainerTemplateSADirective, ContentRowContainerTemplateSADirective, FooterCellTemplateSADirective, FooterContainerTemplateSADirective, FooterRowContainerTemplateSADirective, GridContainerTemplateSADirective, HeaderCellTemplateSADirective, HeaderContainerTemplateSADirective, HeaderRowContainerTemplateSADirective, MatrixGridColumnSADirective, OrderableSADirective} from '../directives';\n\n/**\n * Module for matrix grid components and directives\n */\n@NgModule(\n{\n    imports:\n    [\n        MatrixGridSAComponent,\n        ContentContainerSAComponent,\n        ContentRowContainerSAComponent,\n        FooterContainerSAComponent,\n        FooterRowContainerSAComponent,\n        GridContainerSAComponent,\n        HeaderContainerSAComponent,\n        HeaderRowContainerSAComponent,\n        ContentCellTemplateSADirective,\n        ContentContainerTemplateSADirective,\n        ContentRowContainerTemplateSADirective,\n        FooterCellTemplateSADirective,\n        FooterContainerTemplateSADirective,\n        FooterRowContainerTemplateSADirective,\n        GridContainerTemplateSADirective,\n        HeaderCellTemplateSADirective,\n        HeaderContainerTemplateSADirective,\n        HeaderRowContainerTemplateSADirective,\n        MatrixGridColumnSADirective,\n        OrderableSADirective,\n    ],\n    exports:\n    [\n        MatrixGridSAComponent,\n        ContentContainerSAComponent,\n        ContentRowContainerSAComponent,\n        FooterContainerSAComponent,\n        FooterRowContainerSAComponent,\n        GridContainerSAComponent,\n        HeaderContainerSAComponent,\n        HeaderRowContainerSAComponent,\n        ContentCellTemplateSADirective,\n        ContentContainerTemplateSADirective,\n        ContentRowContainerTemplateSADirective,\n        FooterCellTemplateSADirective,\n        FooterContainerTemplateSADirective,\n        FooterRowContainerTemplateSADirective,\n        GridContainerTemplateSADirective,\n        HeaderCellTemplateSADirective,\n        HeaderContainerTemplateSADirective,\n        HeaderRowContainerTemplateSADirective,\n        MatrixGridColumnSADirective,\n        OrderableSADirective,\n    ],\n})\nexport class MatrixGridModule\n{\n}","import {Component, ChangeDetectionStrategy, inject, ElementRef, Inject, Optional, ValueProvider, ViewChild, ViewContainerRef, OnDestroy, FactoryProvider, Injector, ComponentRef, Provider, EmbeddedViewRef, TemplateRef} from '@angular/core';\nimport {toObservable} from '@angular/core/rxjs-interop';\nimport {Action4, Func1, Func2, NoopAction, RecursivePartial, extend} from '@jscrpt/common';\nimport {Subscription, skip} from 'rxjs';\n\nimport {MatrixContentRenderer, MatrixContentRendererDefautTemplates, MatrixContentRendererOptions} from './matrixContentRenderer.interface';\nimport {CurrentViewContainer, DataLoader, DataResponse, Grid, GridCellContext, GridContext, GridDataRowContext, GridOrderableCell, GridPlugin, GridPluginInstances, GridRowContext, MatrixGridColumn, MatrixGridMetadata, MetadataSelector, Paging, RowSelector} from '../../../interfaces';\nimport {CONTENT_RENDERER_CURRENT_VIEW_CONTAINER, CONTENT_RENDERER_OPTIONS, DEFAULT_OPTIONS, GRID_INSTANCE, GRID_PLUGIN_INSTANCES, ORDERABLE_CELL} from '../../../misc/tokens';\nimport {CssGridDefaultTemplatesSAComponent} from './misc/components';\nimport type {FooterRowContainerTemplateSADirective} from '../../../directives/footerRowContainerTemplate/footerRowContainerTemplate.directive';\nimport type {HeaderRowContainerTemplateSADirective} from '../../../directives/headerRowContainerTemplate/headerRowContainerTemplate.directive';\nimport type {ContentRowContainerTemplateSADirective} from '../../../directives/contentRowContainerTemplate/contentRowContainerTemplate.directive';\n\n/**\n * Default 'GridOptions'\n */\nconst defaultOptions: MatrixContentRendererOptions =\n{\n    defaults: CssGridDefaultTemplatesSAComponent,\n    cssClasses:\n    {\n        gridContainerClass: 'grid-container-css-grid',\n        headerContainerClass: 'grid-header-css-grid',\n        contentContainerClass: 'grid-body-css-grid',\n        footerContainerClass: 'grid-footer-css-grid',\n        headerRowContainerClass: 'grid-header-row-css-grid',\n        contentRowContainerClass: 'grid-content-row-css-grid',\n        footerRowContainerClass: 'grid-footer-row-css-grid',\n    },\n};\n\n/**\n * Component used for rendering content using new 'matrix' metadata gatherer\n */\n@Component(\n{\n    selector: 'div.matrix-content-renderer',\n    templateUrl: 'matrixContentRenderer.component.html',\n    standalone: true,\n    providers:\n    [\n        <ValueProvider>\n        {\n            provide: DEFAULT_OPTIONS,\n            useValue: defaultOptions,\n        },\n        <FactoryProvider>\n        {\n            provide: CONTENT_RENDERER_CURRENT_VIEW_CONTAINER,\n            useFactory: () =>\n            {\n                return <CurrentViewContainer> {\n                    viewContainer: null,\n                };\n            }\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatrixContentRendererSAComponent implements MatrixContentRenderer, GridPlugin<MatrixContentRendererOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of current view container\n     */\n    protected currentViewContainer: CurrentViewContainer = inject(CONTENT_RENDERER_CURRENT_VIEW_CONTAINER);\n\n    /**\n     * Options for matrix content renderer\n     */\n    protected ɵoptions: MatrixContentRendererOptions;\n\n    /**\n     * Instance of grid itself\n     */\n    protected grid: Grid = inject(GRID_INSTANCE);\n\n    /**\n     * Instance of injector used for DI\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Gets plugins instances safely\n     */\n    protected get gridPluginsSafe(): GridPluginInstances\n    {\n        if(!this.gridPlugins)\n        {\n            throw new Error('MatrixContentRendererSAComponent: missing gridPlugins!');\n        }\n\n        return this.gridPlugins;\n    }\n\n    /**\n     * Metadata selector currently used\n     */\n    protected metadataSelector: MetadataSelector<MatrixGridMetadata<MatrixGridColumn>>|undefined|null;\n\n    /**\n     * Data loader currently used\n     */\n    protected dataLoader: DataLoader<DataResponse>|undefined|null;\n\n    /**\n     * Paging currently used\n     */\n    protected paging: Paging|undefined|null;\n\n    /**\n     * Row selector currently used\n     */\n    protected rowSelector: RowSelector|undefined|null;\n\n    /**\n     * Subscription for metadata changes\n     */\n    protected metadataChangeSubscription: Subscription|undefined|null;\n\n    /**\n     * Subscription for data changes\n     */\n    protected dataChangeSubscription: Subscription|undefined|null;\n\n    /**\n     * Instance with default templates\n     */\n    protected defaults: MatrixContentRendererDefautTemplates|undefined|null;\n\n    /**\n     * Gets instance with default templates safely\n     */\n    protected get defaultsSafe(): MatrixContentRendererDefautTemplates\n    {\n        if(!this.defaults)\n        {\n            throw new Error('MatrixContentRendererSAComponent: missing default templates!');\n        }\n\n        return this.defaults;\n    }\n\n    //######################### public properties - implementation of MatrixContentRenderer #########################\n\n    /**\n     * @inheritdoc\n     */\n    public gridPlugins: GridPluginInstances|undefined|null = inject(GRID_PLUGIN_INSTANCES);\n\n    /**\n     * @inheritdoc\n     */\n    readonly pluginElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * @inheritdoc\n     */\n    public get options(): MatrixContentRendererOptions\n    {\n        return this.ɵoptions;\n    }\n    public set options(value: RecursivePartial<MatrixContentRendererOptions>)\n    {\n        this.ɵoptions = extend(true, this.ɵoptions, value);\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Container used for rendering defaults component\n     */\n    @ViewChild('defaults', {static: true, read: ViewContainerRef})\n    protected defaultsContainer!: ViewContainerRef;\n\n    /**\n     * Default container used for rendering content\n     */\n    @ViewChild('container', {static: true, read: ViewContainerRef})\n    protected container!: ViewContainerRef;\n\n    //######################### constructor #########################\n    constructor(@Inject(DEFAULT_OPTIONS) defaultOptions: MatrixContentRendererOptions,\n                @Inject(CONTENT_RENDERER_OPTIONS) @Optional() options?: RecursivePartial<MatrixContentRendererOptions>,)\n    {\n        this.ɵoptions = extend(true, {}, defaultOptions, options);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.metadataChangeSubscription?.unsubscribe();\n        this.metadataChangeSubscription = null;\n\n        this.dataChangeSubscription?.unsubscribe();\n        this.dataChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of MatrixContentRenderer #########################\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(force: boolean): void\n    {\n        const metadataSelector: MetadataSelector<MatrixGridMetadata<MatrixGridColumn>> = this.gridPluginsSafe.metadataSelector as MetadataSelector<MatrixGridMetadata<MatrixGridColumn>>;\n\n        //metadata selector obtained and its different instance\n        if(force || (this.metadataSelector && this.metadataSelector != metadataSelector))\n        {\n            this.metadataChangeSubscription?.unsubscribe();\n            this.metadataChangeSubscription = null;\n\n            this.metadataSelector = null;\n        }\n\n        //no metadata selector obtained\n        if(!this.metadataSelector)\n        {\n            this.metadataSelector = metadataSelector;\n\n            this.metadataChangeSubscription = toObservable(this.metadataSelector.metadata, {injector: this.injector})\n                .pipe(skip(1))\n                .subscribe(() => this.renderGridContainer());\n        }\n\n        const dataLoader: DataLoader<DataResponse> = this.gridPluginsSafe.dataLoader as DataLoader<DataResponse>;\n\n        //data loader obtained and its different instance\n        if(force || (this.dataLoader && this.dataLoader != dataLoader))\n        {\n            this.dataChangeSubscription?.unsubscribe();\n            this.dataChangeSubscription = null;\n\n            this.dataLoader = null;\n        }\n\n        //no data loader obtained\n        if(!this.dataLoader)\n        {\n            this.dataLoader = dataLoader;\n\n            this.dataChangeSubscription = toObservable(this.dataLoader.result, {injector: this.injector})\n                .pipe(skip(1))\n                .subscribe(() => this.renderGridContainer());\n        }\n\n        const paging: Paging = this.gridPluginsSafe.paging;\n\n        //paging obtained and its different instance\n        if(force || (this.paging && this.paging != paging))\n        {\n            this.paging = null;\n        }\n\n        //no paging obtained\n        if(!this.paging)\n        {\n            this.paging = paging;\n        }\n\n        const rowSelector: RowSelector = this.gridPluginsSafe.rowSelector;\n\n        //row selector obtained and its different instance\n        if(force || (this.rowSelector && this.rowSelector != rowSelector))\n        {\n            this.rowSelector = null;\n        }\n\n        //no row selector obtained\n        if(!this.rowSelector)\n        {\n            this.rowSelector = rowSelector;\n        }\n\n        this.renderGridContainer();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initOptions(): void\n    {\n        this.defaultsContainer.clear();\n\n        const defaultsComponent: ComponentRef<MatrixContentRendererDefautTemplates> = this.defaultsContainer.createComponent(this.ɵoptions.defaults,\n                                                                                                                             {\n                                                                                                                                 injector: this.injector,\n                                                                                                                             });\n\n        this.defaults = defaultsComponent.instance;\n        defaultsComponent.changeDetectorRef.detectChanges();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.renderGridContainer();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Renders grid container\n     */\n    protected renderGridContainer(): void\n    {\n        //remove existing\n        this.container.clear();\n\n        const view: EmbeddedViewRef<GridContext<unknown, MatrixGridColumn<unknown>>> = this.container.createEmbeddedView(this.metadataSelector?.metadata()?.gridContainer?.template ?? this.defaultsSafe.gridContainer,\n                                                                                                                         this.getGridContext(),\n                                                                                                                         {\n                                                                                                                             injector: this.createInjector(this.container.injector),\n                                                                                                                         });\n\n        view.detectChanges();\n\n        //removing renderable content\n        this.currentViewContainer.viewContainer?.clear();\n\n        //grid container is renderable\n        if(this.currentViewContainer.viewContainer)\n        {\n            //render header\n            this.renderContainer(this.metadataSelector?.metadata()?.headerContainer?.template ?? this.defaultsSafe.headerContainer, this.renderHeaderRowsContainers);\n\n            //render content\n            this.renderContainer(this.metadataSelector?.metadata()?.contentContainer?.template ?? this.defaultsSafe.contentContainer, this.renderContentRowsContainers);\n\n            //render footer\n            this.renderContainer(this.metadataSelector?.metadata()?.contentContainer?.template ?? this.defaultsSafe.footerContainer, this.renderFooterRowsContainers);\n        }\n\n        this.clearCurrentViewContainer();\n    }\n\n    /**\n     * Renders header rows containers\n     */\n    protected renderHeaderRowsContainers(): void\n    {\n        const metadata = this.metadataSelector?.metadata();\n\n        this.renderRowContainer(metadata?.headerRowContainer?.length ? metadata?.headerRowContainer : [{template: this.defaultsSafe.headerRowContainer, predicate: null, columns: null}],\n                                column => column.headerTemplate,\n                                this.renderHeaderCell,\n                                (index, columns) => this.getGridRowContext(index, columns));\n    }\n\n    /**\n     * Renders content rows containers\n     */\n    protected renderContentRowsContainers(): void\n    {\n        const data = this.dataLoader?.result();\n        const dataLength = data?.data?.length ?? 0;\n        const metadata = this.metadataSelector?.metadata();\n\n        for(let datumIndex = 0; datumIndex < dataLength; datumIndex++)\n        {\n            const datum = data?.data[datumIndex];\n\n            this.renderRowContainer(metadata?.contentRowContainer?.length ? metadata?.contentRowContainer : [{template: this.defaultsSafe.contentRowContainer, predicate: null, columns: null}],\n                                    column => column.bodyTemplate,\n                                    this.renderContentOrFooterCell,\n                                    (_, columns) => this.getGridDataRowContext(datumIndex, datum, columns));\n        }\n    }\n\n    /**\n     * Renders footer rows containers\n     */\n    protected renderFooterRowsContainers(): void\n    {\n        const metadata = this.metadataSelector?.metadata();\n\n        this.renderRowContainer(metadata?.footerRowContainer?.length ? metadata?.footerRowContainer : [{template: this.defaultsSafe.footerRowContainer, predicate: null, columns: null}],\n                                column => column.footerTemplate,\n                                this.renderContentOrFooterCell,\n                                (index, columns) => this.getGridRowContext(index, columns));\n    }\n\n    /**\n     * Gets grid context\n     */\n    protected getGridContext(): GridContext\n    {\n        return <GridContext>{\n            grid: this.grid,\n            plugins: this.gridPluginsSafe,\n            columns: this.metadataSelector?.metadata()?.columns ?? [],\n            data: this.dataLoader?.result()?.data ?? [],\n            contentCssClasses: this.ɵoptions.cssClasses,\n        };\n    }\n\n    /**\n     * Gets grid row context\n     * @param index - Current index to be used for creation of grid row context\n     * @param rowColumns - Array of row columns rendered in current row\n     */\n    protected getGridRowContext(index: number, rowColumns: MatrixGridColumn[]): GridRowContext\n    {\n        return <GridRowContext>{\n            ...this.getGridContext(),\n            index,\n            rowColumns: rowColumns,\n        };\n    }\n\n    /**\n     * Gets grid data row context\n     * @param index - Current index to be used for creation of grid row context\n     * @param datum - Datum for current row\n     * @param rowColumns - Array of row columns rendered in current row\n     */\n    protected getGridDataRowContext(index: number, datum: unknown, rowColumns: MatrixGridColumn[]): GridDataRowContext\n    {\n        const rowSelector = this.rowSelector;\n\n        if(!this.paging)\n        {\n            throw new Error('MatrixContentRendererSAComponent: missing paging plugin');\n        }\n\n        return <GridDataRowContext>{\n            ...this.getGridRowContext(index, rowColumns),\n            datum,\n            rowIndex: this.paging.firstItemIndex + index,\n            startingIndex: this.paging.firstItemIndex,\n            get isSelected(): boolean\n            {\n                return rowSelector?.isSelected(datum) ?? false;\n            },\n        };\n    }\n\n    /**\n     * Creates new injector with content renderer inner structure\n     * @param injector - Injector used as parent injector\n     * @param additionalProviders - Array of additional providers\n     */\n    protected createInjector(injector: Injector, additionalProviders: Provider[] = []): Injector\n    {\n        return Injector.create(\n        {\n            providers:\n            [\n                ...additionalProviders,\n            ],\n            parent: injector,\n        });\n    }\n\n    /**\n     * Clears current view container\n     */\n    protected clearCurrentViewContainer(): void\n    {\n        this.currentViewContainer.viewContainer = null;\n    }\n\n    /**\n     * Renders one of containers, head, content or foot\n     * @param template - Template to be rendered\n     * @param rowsContainerRenderFn - Function to be called if container is renderable\n     */\n    protected renderContainer(template: TemplateRef<GridContext<unknown, MatrixGridColumn<unknown>>>, rowsContainerRenderFn: NoopAction): void\n    {\n        const viewContainer = this.currentViewContainer.viewContainer;\n\n        const view: EmbeddedViewRef<GridContext<unknown, MatrixGridColumn<unknown>>> | undefined = viewContainer?.createEmbeddedView(template,\n                                                                                                                                     this.getGridContext(),\n                                                                                                                                     {\n                                                                                                                                         injector: this.createInjector(viewContainer.injector),\n                                                                                                                                     });\n\n        this.clearCurrentViewContainer();\n        view?.detectChanges();\n\n        //container is renderable\n        if(this.currentViewContainer.viewContainer)\n        {\n            //render rows\n            rowsContainerRenderFn.bind(this)();\n        }\n\n        //restore parents view container\n        this.currentViewContainer.viewContainer = viewContainer;\n    }\n\n    /**\n     * Renders row container\n     * @param rowTemplates - Array of row templates directives\n     * @param cellTemplateGetter - Function for obtaining template for cell for column definition\n     * @param cellRenderer - Function that renders\n     * @param contextGetter - Function used for obtaining grid context\n     */\n    protected renderRowContainer(rowTemplates: Array<FooterRowContainerTemplateSADirective|HeaderRowContainerTemplateSADirective|ContentRowContainerTemplateSADirective>,\n                                 cellTemplateGetter: Func1<TemplateRef<GridCellContext<unknown, MatrixGridColumn>>|null|undefined, MatrixGridColumn>,\n                                 cellRenderer: Action4<ViewContainerRef, TemplateRef<GridCellContext<unknown, MatrixGridColumn>>, GridRowContext<unknown, MatrixGridColumn>, MatrixGridColumn>,\n                                 contextGetter: Func2<GridRowContext|GridDataRowContext, number, MatrixGridColumn[]>): void\n    {\n        const viewContainer = this.currentViewContainer.viewContainer;\n\n        for(let index = 0; index < rowTemplates.length; index++)\n        {\n            const row = rowTemplates[index];\n            const rowColumns = row\n                .columns\n                ?.map(id => this.metadataSelector\n                    ?.metadata()\n                    ?.columns\n                    ?.find(itm => itm.id == id) as MatrixGridColumn)\n                ?.filter(itm => itm) ?? this.metadataSelector?.metadata()?.columns ?? [];\n            const context = contextGetter(index, rowColumns);\n\n            //skip rendering of this row\n            if(row.predicate && !row.predicate(context as GridDataRowContext<unknown, MatrixGridColumn>))\n            {\n                continue;\n            }\n\n            const view: EmbeddedViewRef<GridRowContext<unknown, MatrixGridColumn<unknown>>> | undefined = viewContainer?.createEmbeddedView(row.template,\n                                                                                                                                            context,\n                                                                                                                                            {\n                                                                                                                                                injector: this.createInjector(viewContainer.injector),\n                                                                                                                                            });\n\n            this.clearCurrentViewContainer();\n            view?.detectChanges();\n\n            const columnViewContainer = this.currentViewContainer.viewContainer;\n\n            if(!columnViewContainer)\n            {\n                this.currentViewContainer.viewContainer = viewContainer;\n\n                continue;\n            }\n\n            for(const column of rowColumns)\n            {\n                const cellTemplate = cellTemplateGetter(column);\n\n                if(!cellTemplate)\n                {\n                    continue;\n                }\n\n                cellRenderer.bind(this)(columnViewContainer, cellTemplate, context, column);\n            }\n\n            this.currentViewContainer.viewContainer = viewContainer;\n        }\n    }\n\n    /**\n     * Renders header cell\n     * @param viewContainer - View container used for rendering cell\n     * @param template - Template used for rendering cell\n     * @param context - Context passed to rendered cell\n     * @param column - Instance of column metadata\n     */\n    protected renderHeaderCell(viewContainer: ViewContainerRef,\n                               template: TemplateRef<GridCellContext<unknown, MatrixGridColumn>>,\n                               context: GridRowContext<unknown, MatrixGridColumn>,\n                               column: MatrixGridColumn,): void\n    {\n        const orderable: GridOrderableCell = {};\n\n        const view = viewContainer.createEmbeddedView(template,\n                                                      {\n                                                          ...context,\n                                                          metadata: column,\n                                                      },\n                                                      {\n                                                          injector: this.createInjector(viewContainer.injector, \n                                                          [\n                                                              <FactoryProvider>\n                                                              {\n                                                                  provide: ORDERABLE_CELL,\n                                                                  useFactory: () => orderable\n                                                              },\n                                                          ]),\n                                                      });\n\n        if(orderable.orderable)\n        {\n            orderable.orderable.orderable = true;\n            orderable.orderable.orderById = column.id;\n        }\n\n        view.detectChanges();\n    }\n\n    /**\n     * Renders content or footer cell\n     * @param viewContainer - View container used for rendering cell\n     * @param template - Template used for rendering cell\n     * @param context - Context passed to rendered cell\n     * @param column - Instance of column metadata\n     */\n    protected renderContentOrFooterCell(viewContainer: ViewContainerRef,\n                                        template: TemplateRef<GridCellContext<unknown, MatrixGridColumn>>,\n                                        context: GridRowContext<unknown, MatrixGridColumn>,\n                                        column: MatrixGridColumn,): void\n    {\n        viewContainer.createEmbeddedView(template,\n                                         {\n                                             ...context,\n                                             metadata: column,\n                                         },\n                                         {\n                                             injector: this.createInjector(viewContainer.injector),\n                                         })?.detectChanges();\n    }\n}","import {ViewContainerRef, ViewChild, inject, Directive, OnInit} from '@angular/core';\n\nimport {CurrentViewContainer} from '../../interfaces';\nimport {CONTENT_RENDERER_CURRENT_VIEW_CONTAINER} from '../../misc/tokens';\n\n/**\n * Base class for all renderable content components\n */\n@Directive()\nexport abstract class RenderableContentComponent implements OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of class that is used for sharing content renderers current view container\n     */\n    protected currentViewContainer: CurrentViewContainer = inject(CONTENT_RENDERER_CURRENT_VIEW_CONTAINER);\n\n    //######################### protected properties - children #########################\n\n    /**\n     * View container available for container element\n     */\n    @ViewChild('container', {static: true, read: ViewContainerRef})\n    protected viewContainer!: ViewContainerRef;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.currentViewContainer.viewContainer = this.viewContainer;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents grid container\n */\n@Component(\n{\n    selector: '[gridContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridContainerSAComponent extends RenderableContentComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents content container\n */\n@Component(\n{\n    selector: '[contentContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContentContainerSAComponent extends RenderableContentComponent\n{\n}","import {TemplateRef, ViewChild, Directive} from '@angular/core';\n\nimport {MatrixContentRendererDefautTemplates} from '../../../matrixContentRenderer.interface';\nimport {GridContext, GridDataRowContext, GridRowContext} from '../../../../../../interfaces';\nimport {GridContainerTemplateSADirective} from '../../../../../../directives/gridContainerTemplate/gridContainerTemplate.directive';\nimport {ContentContainerTemplateSADirective} from '../../../../../../directives/contentContainerTemplate/contentContainerTemplate.directive';\nimport {HeaderContainerTemplateSADirective} from '../../../../../../directives/headerContainerTemplate/headerContainerTemplate.directive';\nimport {FooterContainerTemplateSADirective} from '../../../../../../directives/footerContainerTemplate/footerContainerTemplate.directive';\nimport {HeaderRowContainerTemplateSADirective} from '../../../../../../directives/headerRowContainerTemplate/headerRowContainerTemplate.directive';\nimport {ContentRowContainerTemplateSADirective} from '../../../../../../directives/contentRowContainerTemplate/contentRowContainerTemplate.directive';\nimport {FooterRowContainerTemplateSADirective} from '../../../../../../directives/footerRowContainerTemplate/footerRowContainerTemplate.directive';\n\n/**\n * Base component that stores default templates for content renderig\n */\n@Directive()\nexport abstract class BaseDefaultTemplatesSAComponent implements MatrixContentRendererDefautTemplates\n{\n    //######################### public properties - implementation of MatrixContentRendererDefautTemplates #########################\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(GridContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public gridContainer!: TemplateRef<GridContext>;\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(HeaderContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public headerContainer!: TemplateRef<GridContext>; \n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(ContentContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public contentContainer!: TemplateRef<GridContext>;\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(FooterContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public footerContainer!: TemplateRef<GridContext>;\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(HeaderRowContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public headerRowContainer!: TemplateRef<GridRowContext>;\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(ContentRowContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public contentRowContainer!: TemplateRef<GridDataRowContext>;\n\n    /**\n     * @inheritdoc\n     */\n    @ViewChild(FooterRowContainerTemplateSADirective, {static: true, read: TemplateRef})\n    public footerRowContainer!: TemplateRef<GridRowContext>;\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents header container\n */\n@Component(\n{\n    selector: '[headerContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderContainerSAComponent extends RenderableContentComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents footer container\n */\n@Component(\n{\n    selector: '[footerContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FooterContainerSAComponent extends RenderableContentComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents header row container\n */\n@Component(\n{\n    selector: '[headerRowContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderRowContainerSAComponent extends RenderableContentComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents content row container\n */\n@Component(\n{\n    selector: '[contentRowContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContentRowContainerSAComponent extends RenderableContentComponent\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\nimport {RenderableContentComponent} from '../renderableContent/renderableContent.component';\n\n/**\n * Component that represents footer row container\n */\n@Component(\n{\n    selector: '[footerRowContainer]',\n    templateUrl: '../renderableContent/renderableContent.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FooterRowContainerSAComponent extends RenderableContentComponent\n{\n}","import {Pipe, PipeTransform} from '@angular/core';\n\nimport {MatrixGridColumn} from '../../interfaces';\n\n/**\n * Creates css value for 'grid-template-columns' property\n */\n@Pipe({name: 'cssGridTemplateColumns', standalone: true,})\nexport class CssGridTemplateColumnsSAPipe implements PipeTransform\n{\n    /**\n     * Creates css value for 'grid-template-columns' property\n     * @param value - Array of columns that will be rendered\n     */\n    public transform(value: MatrixGridColumn[]): string \n    {\n        return value.map(col => col.width).join(' ');\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {MatrixContentRendererDefautTemplates} from '../../../matrixContentRenderer.interface';\nimport {GridContainerSAComponent} from '../../../../../../components/gridContainer/gridContainer.component';\nimport {ContentContainerSAComponent} from '../../../../../../components/contentContainer/contentContainer.component';\nimport {GridContainerTemplateSADirective} from '../../../../../../directives/gridContainerTemplate/gridContainerTemplate.directive';\nimport {ContentContainerTemplateSADirective} from '../../../../../../directives/contentContainerTemplate/contentContainerTemplate.directive';\nimport {BaseDefaultTemplatesSAComponent} from '../baseDefaultTemplates/baseDefaultTemplates.component';\nimport {HeaderContainerSAComponent} from '../../../../../../components/headerContainer/headerContainer.component';\nimport {FooterContainerSAComponent} from '../../../../../../components/footerContainer/footerContainer.component';\nimport {FooterContainerTemplateSADirective} from '../../../../../../directives/footerContainerTemplate/footerContainerTemplate.directive';\nimport {HeaderContainerTemplateSADirective} from '../../../../../../directives/headerContainerTemplate/headerContainerTemplate.directive';\nimport {HeaderRowContainerSAComponent} from '../../../../../../components/headerRowContainer/headerRowContainer.component';\nimport {ContentRowContainerSAComponent} from '../../../../../../components/contentRowContainer/contentRowContainer.component';\nimport {FooterRowContainerSAComponent} from '../../../../../../components/footerRowContainer/footerRowContainer.component';\nimport {HeaderRowContainerTemplateSADirective} from '../../../../../../directives/headerRowContainerTemplate/headerRowContainerTemplate.directive';\nimport {ContentRowContainerTemplateSADirective} from '../../../../../../directives/contentRowContainerTemplate/contentRowContainerTemplate.directive';\nimport {FooterRowContainerTemplateSADirective} from '../../../../../../directives/footerRowContainerTemplate/footerRowContainerTemplate.directive';\nimport {CssGridTemplateColumnsSAPipe} from '../../../../../../pipes/cssGridTemplateColumns/cssGridTemplateColumns.pipe';\n\n/**\n * Component that stores default templates for css grid content renderig\n */\n@Component(\n{\n    selector: 'css-grid-defaults',\n    templateUrl: 'cssGridDefaultTemplates.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        GridContainerSAComponent,\n        HeaderContainerSAComponent,\n        ContentContainerSAComponent,\n        FooterContainerSAComponent,\n        HeaderRowContainerSAComponent,\n        ContentRowContainerSAComponent,\n        FooterRowContainerSAComponent,\n        GridContainerTemplateSADirective,\n        HeaderContainerTemplateSADirective,\n        ContentContainerTemplateSADirective,\n        FooterContainerTemplateSADirective,\n        HeaderRowContainerTemplateSADirective,\n        ContentRowContainerTemplateSADirective,\n        FooterRowContainerTemplateSADirective,\n        CssGridTemplateColumnsSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssGridDefaultTemplatesSAComponent extends BaseDefaultTemplatesSAComponent implements MatrixContentRendererDefautTemplates\n{\n}"],"names":["_c0","defaultOptions","autoInitialize","plugins","contentRenderer","type","forwardRef","MatrixContentRendererSAComponent","instance","instanceCallback","options","dataLoader","AsyncDataLoaderSAComponent","gridInitializer","NoGridInitializerSAComponent","metadataSelector","NoMetadataSelectorSAComponent","noDataRenderer","SimpleNoDataRendererSAComponent","ordering","SingleOrderingSAComponent","paging","BasicPagingSAComponent","rowSelector","NoRowSelectorSAComponent","MatrixGridSAComponent","GridSAComponent","metadataValue","signal","columns","gridContainer","headerContainer","contentContainer","footerContainer","headerRowContainer","contentRowContainer","footerRowContainer","metadataGatherer","this","metadata","asReadonly","ngAfterContentInit","changes","subscribe","setMetadata","set","toArray","first","t","selectors","contentQueries","rf","ctx","dirIndex","GridContainerTemplateSADirective","HeaderContainerTemplateSADirective","ContentContainerTemplateSADirective","FooterContainerTemplateSADirective","HeaderRowContainerTemplateSADirective","ContentRowContainerTemplateSADirective","FooterRowContainerTemplateSADirective","MatrixGridColumnSADirective","_t","provide","GRID_INSTANCE","useExisting","GRID_PLUGIN_INSTANCES","useFactory","GridPluginInstancesDef","DEFAULT_OPTIONS","useValue","dependencies","CommonModule","CommonDynamicModule","encapsulation","changeDetection","ContentCellTemplateSADirective","template","inject","TemplateRef","ngTemplateContextGuard","_dir","_ctx","standalone","predicate","static","inputs","rowColumnsAttribute","features","HeaderCellTemplateSADirective","FooterCellTemplateSADirective","id","title","visible","width","headerTemplate","bodyTemplate","footerTemplate","MatrixGridModule","_c1","_c2","defaults","CssGridDefaultTemplatesSAComponent","cssClasses","gridContainerClass","headerContainerClass","contentContainerClass","footerContainerClass","headerRowContainerClass","contentRowContainerClass","footerRowContainerClass","currentViewContainer","CONTENT_RENDERER_CURRENT_VIEW_CONTAINER","ɵoptions","grid","injector","Injector","gridPluginsSafe","gridPlugins","Error","metadataChangeSubscription","dataChangeSubscription","defaultsSafe","pluginElement","ElementRef","value","extend","defaultsContainer","container","constructor","ngOnDestroy","unsubscribe","initialize","force","toObservable","pipe","skip","renderGridContainer","result","initOptions","clear","defaultsComponent","createComponent","changeDetectorRef","detectChanges","invalidateVisuals","createEmbeddedView","getGridContext","createInjector","viewContainer","renderContainer","renderHeaderRowsContainers","renderContentRowsContainers","renderFooterRowsContainers","clearCurrentViewContainer","renderRowContainer","length","column","renderHeaderCell","index","getGridRowContext","data","dataLength","datumIndex","datum","renderContentOrFooterCell","_","getGridDataRowContext","contentCssClasses","rowColumns","rowIndex","firstItemIndex","startingIndex","isSelected","additionalProviders","create","providers","parent","rowsContainerRenderFn","view","bind","rowTemplates","cellTemplateGetter","cellRenderer","contextGetter","row","map","find","itm","filter","context","columnViewContainer","cellTemplate","orderable","ORDERABLE_CELL","orderById","CONTENT_RENDERER_OPTIONS","viewQuery","ViewContainerRef","RenderableContentComponent","ngOnInit","GridContainerSAComponent","ContentContainerSAComponent","BaseDefaultTemplatesSAComponent","HeaderContainerSAComponent","FooterContainerSAComponent","HeaderRowContainerSAComponent","ContentRowContainerSAComponent","FooterRowContainerSAComponent","CssGridTemplateColumnsSAPipe","transform","col","join","pure","CssGridDefaultTemplatesSAComponent_div_0_Template","cssClasses_r7","columns_r8","CssGridDefaultTemplatesSAComponent_div_1_Template","cssClasses_r9","CssGridDefaultTemplatesSAComponent_div_2_Template","cssClasses_r10","CssGridDefaultTemplatesSAComponent_div_3_Template","cssClasses_r11","CssGridDefaultTemplatesSAComponent_div_4_Template","cssClasses_r12","CssGridDefaultTemplatesSAComponent_div_5_Template","cssClasses_r13","CssGridDefaultTemplatesSAComponent_div_6_Template","cssClasses_r14","i1"],"sourceRoot":""}