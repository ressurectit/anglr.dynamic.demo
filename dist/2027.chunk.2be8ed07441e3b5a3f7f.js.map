{"version":3,"file":"2027.chunk.2be8ed07441e3b5a3f7f.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tab/tab.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tab/tab.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/tab/tab.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tab/type.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialTabGroupComponentOptions} from './tabGroup.options';\n\n/**\n * Material tab group layout metadata loader\n */\nexport const MaterialTabGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTabGroupComponentOptions>> = async () => new (await import('./metadata/tabGroup.layoutMetadata')).MaterialTabGroupLayoutEditorMetadata();","<mat-tab-group [mat-stretch-tabs]=\"false\">\n    <mat-tab #tabComponent=\"matTab\" [label]=\"tab.title\" *ngFor=\"let tab of options?.tabs; let i = index;\" [labelClass]=\"tabComponent.disabled ? 'hidden': ''\" [bodyClass]=\"tabComponent.disabled ? 'hidden': ''\">\n        <ng-container *layoutComponentRenderer=\"tab.content\" (layoutComponentRendererComponentChange)=\"onTabComponentChange($any($event), i)\"/>\n    </mat-tab>\n</mat-tab-group>","import {Component, ChangeDetectionStrategy, InjectionToken, ComponentRef, ViewChild} from '@angular/core';\nimport {MatTabGroup, MatTabsModule} from '@angular/material/tabs';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {generateId, isPresent} from '@jscrpt/common';\n\nimport {MaterialTabGroupComponentOptions} from './tabGroup.options';\nimport {MaterialTabGroupLayoutMetadataLoader} from './tabGroup.metadata';\nimport {MaterialTabSAComponent} from '../tab/tab.component';\n\n/**\n * Injection token used for injecting current scope id\n */\nexport const MATERIAL_TAB_GROUP: InjectionToken<string> = new InjectionToken<string>('MATERIAL_TAB_GROUP');\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-tab-group',\n    templateUrl: 'tabGroup.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatTabsModule,\n        MaterialTabSAComponent,\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        {\n            provide: MATERIAL_TAB_GROUP,\n            useExisting: MaterialTabGroupSAComponent,\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<MaterialTabGroupComponentOptions>(options => options?.tabs ? options?.tabs.map(datum => <LayoutComponentMetadata>datum.content) : [])\n@LayoutEditorMetadata(MaterialTabGroupLayoutMetadataLoader)\nexport class MaterialTabGroupSAComponent extends LayoutComponentBase<MaterialTabGroupComponentOptions> implements LayoutComponent<MaterialTabGroupComponentOptions>, RelationsComponent\n{\n    \n    //######################### protected properties - view children #########################\n\n    /**\n     * Material tab group component\n     */\n    @ViewChild(MatTabGroup)\n    protected tabGroup: MatTabGroup|null|undefined;\n\n    //######################### public properties - Implementation of RelationsComponent #########################\n\n    /**\n     * Relation options for material tab group\n     */\n    public relationsOptions: MaterialTabGroupComponentOptions|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if (this.relationsOptions)\n        {\n            this.relationsOptions.tabs = this.options?.tabs;\n        }\n    }\n\n    /**\n     * Handles tab content change\n     * @param componentRef Tab component ref\n     * @param index index in tab group\n     */\n    protected onTabComponentChange(componentRef: ComponentRef<MaterialTabSAComponent>|null, index: number): void\n    {\n        if (componentRef?.instance)\n        {\n            componentRef.instance.tabGroupIndex = index; \n            componentRef.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Handles tab visibility in group\n     * @param index \n     * @returns \n     */\n    public onHideTab(index: number|null|undefined)\n    {\n        if ((!isPresent(index) || this.tabGroup?.selectedIndex === index) &&\n            this.tabGroup?._tabs)\n        {\n            for (let i = 0; i < this.tabGroup._tabs.length; i++)\n            {\n                const tab = this.tabGroup._tabs.get(i);\n\n                if (!tab?.disabled)\n                {\n                    this.tabGroup.selectedIndex = i;\n                    break;\n                }\n            }\n        }\n\n        this.invalidateVisuals();\n    }\n\n    public onShowTab()\n    {\n        if (this.tabGroup?._tabs)\n        {\n            const selectedTab = this.tabGroup.selectedIndex ? this.tabGroup._tabs.get(this.tabGroup.selectedIndex) : null;\n\n            if (!selectedTab || selectedTab.disabled)\n            {\n                for (let i = 0; i < this.tabGroup._tabs.length; i++)\n                {\n                    const tab = this.tabGroup._tabs.get(i);\n\n                    if (!tab?.disabled)\n                    {\n                        this.tabGroup.selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.invalidateVisuals();\n    }\n\n    public override onInit()\n    {\n        if (this.options &&\n            !this.options?.tabs)\n        {\n            this.options.tabs = [\n                {\n                    title: 'Tab',\n                    content: {\n                        id: `${generateId(6)}-tab`,\n                        package: 'material-components',\n                        name: 'tab',\n                        options: {}\n                    }\n                }\n            ];\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialTabComponentOptions} from './tab.options';\n\n/**\n * Material tab layout metadata loader\n */\nexport const MaterialTabLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTabComponentOptions>> = async () => new (await import('./metadata/tab.layoutMetadata')).MaterialTabLayoutEditorMetadata();\n\n/**\n * Material tab relations metadata loader\n */\nexport const MaterialTabRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/tab.relationsMetadata')).MaterialTabRelationsEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-container *layoutComponentRenderer=\"type\"/>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input, inject} from '@angular/core';\nimport {MAT_TAB, MatTab, MatTabsModule} from '@angular/material/tabs';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {MaterialTabComponentOptions} from './tab.options';\nimport {MaterialTabLayoutMetadataLoader, MaterialTabRelationsMetadataLoader} from './tab.metadata';\nimport {MATERIAL_TAB_GROUP} from '../tabGroup/tabGroup.component';\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-tab',\n    templateUrl: 'tab.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatTabsModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<MaterialTabComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(MaterialTabLayoutMetadataLoader)\n@RelationsEditorMetadata(MaterialTabRelationsMetadataLoader)\nexport class MaterialTabSAComponent extends LayoutComponentBase<MaterialTabComponentOptions> implements LayoutComponent<MaterialTabComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether tab is visible\n     */\n    protected visibleValue: boolean|null|undefined;\n    \n    /**\n     * Closes tab group\n     */\n    protected closestTabGroup: any = inject(MATERIAL_TAB_GROUP, {optional: true});\n\n    /**\n     * Instance of closest tab\n     */\n    protected closestTab: MatTab = inject(MAT_TAB, {optional: true});\n\n    //######################### public properties #########################\n\n    /**\n     * Material tab relation options\n     */\n    public relationsOptions: any;\n\n    /**\n     * Material tab index in parent tab group\n     */\n    public tabGroupIndex: number|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether tab is visible\n     */\n    @Input()\n    public set visible(visible: boolean|null|undefined)\n    {\n        this.visibleValue = visible;\n        if (this.visible)\n        {\n            this.showTab();\n        }\n        else\n        {\n            this.hideTab();\n        }\n    }\n    public get visible(): boolean|null|undefined\n    {\n        return this.visibleValue;\n    }\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {}\n\n    /**\n     * Hides tab content\n     */\n    protected hideTab()\n    {\n        if (this.closestTab)\n        {\n            this.closestTab.disabled = true;\n        }\n            \n        this.closestTabGroup?.onHideTab(this.tabGroupIndex);\n    }\n\n    /**\n     * Shows tab content\n     */\n    protected showTab()\n    {\n        if (this.closestTab)\n        {\n            this.closestTab.disabled = false;\n        }\n\n        this.closestTabGroup?.onShowTab();\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialTabSAComponent} from './tab.component';\n\nexport default MaterialTabSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","constructor","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","this","options","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LayoutComponentRendererSADirective","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","selectors","inputs","standalone","features","i0","provide","useValue","ComponentStylingExtension","DynamicItemExtensionBase","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialTabGroupLayoutMetadataLoader","_ref","MaterialTabGroupLayoutEditorMetadata","apply","arguments","$event","_r7","i_r2","index","ctx_r5","onTabComponentChange","MaterialTabGroupSAComponent_mat_tab_1_ng_container_2_Template","tab_r1","title","_r3","disabled","content","MATERIAL_TAB_GROUP","InjectionToken","MaterialTabGroupSAComponent","relationsOptions","tabs","componentRef","instance","tabGroupIndex","onHideTab","tabGroup","selectedIndex","_tabs","i","length","tab","get","onShowTab","selectedTab","package","name","t","viewQuery","rf","ctx","MatTabGroup","useExisting","decls","vars","consts","template","MaterialTabGroupSAComponent_mat_tab_1_Template","CommonModule","i1","MatTabsModule","i2","styles","changeDetection","__decorate","DescendantsGetter","map","datum","MaterialTabLayoutMetadataLoader","MaterialTabLayoutEditorMetadata","MaterialTabRelationsMetadataLoader","_ref2","MaterialTabRelationsEditorMetadata","MaterialTabSAComponent_ng_container_0_ng_container_1_Template","type_r1","MaterialTabSAComponent","closestTabGroup","closestTab","MAT_TAB","visible","visibleValue","showTab","hideTab","MaterialTabSAComponent_ng_container_0_Template","children","RelationsEditorMetadata","RelationsRegistrationExtension","relationsProcessor","componentManager","RelationsProcessor","RelationsComponentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}