{"version":3,"file":"613.chunk.85c2243baa21548bd20b.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {{@name}}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<FormGroupComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected _formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        this._formInjector = Injector.create(\n            {\n                parent: this.injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: FORM_COMPONENT_CONTROL,\n                        useValue: this.options?.controlName ? this._parentControl?.get(this.options.controlName) : null,\n                    }\n                ]\n            }\n        );\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","value","oldValue","this","valueOutput","control","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","FormControl","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","FormGroupLayoutMetadataLoader","_ref","FormGroupLayoutEditorMetadata","apply","arguments","FormGroupSAComponent_ng_container_0_ng_template_1_Template","type_r1","ctx_r0","_formInjector","FormGroupSAComponent","onInit","Injector","create","parent","injector","providers","provide","useValue","get","t","selectors","standalone","decls","vars","consts","template","rf","ctx","FormGroupSAComponent_ng_container_0_Template","children","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","styles","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","type","package","createComponent","Ignore","ThrowError","Error","usedInjector","SCOPE_ID","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}