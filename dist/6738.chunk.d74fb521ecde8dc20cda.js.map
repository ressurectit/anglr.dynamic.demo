{"version":3,"file":"6738.chunk.d74fb521ecde8dc20cda.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/misc/pipes/getControls/getControls.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/misc/components/contentOptionsPropertiesControl/contentOptionsPropertiesControl.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/misc/components/contentOptionsPropertiesControl/contentOptionsPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/metadata/customComponent.model.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/metadata/customComponent.layoutMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {{@type}}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {{@type}}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CastPipesModule, FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n        CastPipesModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Pipe, PipeTransform, Type} from '@angular/core';\nimport {PropertiesControl} from '@anglr/dynamic/layout-editor';\n\nimport {ContentComponentData} from '../../../../../components';\n\n/**\n * Gets properties controls that are used for setting model value\n */\n@Pipe({name: 'getControls', standalone: true})\nexport class GetControlsSAPipe implements PipeTransform\n{\n    /**\n     * Gets properties controls that are used for setting model value\n     * @param value - Name of model class\n     * @param metadata - Metadata containing properties controls for model\n     */\n    public transform(value: string, metadata: ContentComponentData|undefined|null,): Type<PropertiesControl>[]\n    {\n        return metadata?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata?.find(itm => itm.modelType.name == value)?.propertiesControls ?? [];\n    }\n}","<ng-container *ngFor=\"let cmp of usedProperties | keyvalue\">\n    <div class=\"dynamic-margin-top-small dynamic-bold dynamic-text-uppercase dynamic-margin-left-extra-small\">{{customComponentContentMetadata[cmp.key]?.metadata?.displayName}}</div>\n\n    <ng-container *ngFor=\"let modelName of cmp.value | keyvalue\">\n        <ng-container *ngFor=\"let ctrl of modelName.key | getControls: customComponentContentMetadata[cmp.key]\">\n            <ng-container [propertiesControl]=\"ctrl\" [form]=\"usedComponentsForms[cmp.key][modelName.key]\" [propertiesMetadata]=\"modelName.key | getModel: customComponentContentMetadata[cmp.key] | propertiesMetadata\"></ng-container>\n        </ng-container>\n    </ng-container>\n\n    <div class=\"component-separator\"></div>\n</ng-container>","import {ChangeDetectionStrategy, Component, inject, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {PropertiesControl, PropertiesControlBase, PropertiesControlsModule} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions} from '../../../customComponent.options';\nimport {GetControlsSAPipe} from '../../pipes/getControls/getControls.pipe';\nimport {ContentComponentData} from '../../../../../components';\nimport {GetModelSAPipe, PropertiesMetadataSAPipe} from '../../../../../pipes';\nimport {getCustomComponentMeta} from '../../../../../misc/utils';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '../../../../../services';\n\n/**\n * Component used for displaying editation of content options\n */\n@Component(\n{\n    selector: 'content-options',\n    templateUrl: 'contentOptionsPropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        PropertiesControlsModule,\n        GetControlsSAPipe,\n        GetModelSAPipe,\n        PropertiesMetadataSAPipe,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContentOptionsPropertiesControlSAComponent<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> extends PropertiesControlBase<CustomComponentComponentOptions> implements PropertiesControl<CustomComponentComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of injector for this component\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Form model builder\n     */\n    protected formModelBuilder: FormModelBuilder = inject(FormModelBuilder);\n\n    /**\n     * Instance of custom components register\n     */\n    protected customComponentsRegister: CustomComponentsRegister<TConfig> = inject(CustomComponentsRegister);\n\n    /**\n     * Metadata for each component in custom component\n     */\n    protected customComponentContentMetadata: Dictionary<ContentComponentData|undefined|null> = {};\n\n    /**\n     * Custom component layout metadata\n     */\n    protected customComponentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Represents used properties\n     */\n    protected usedProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Stores components and their form groups\n     */\n    protected usedComponentsForms: Dictionary<Dictionary<FormGroup>> = {};\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _initialize(): Promise<void>\n    {\n        if(!this.form)\n        {\n            return;\n        }\n\n        const options: Partial<CustomComponentComponentOptions> = this.form.value;\n        \n        const name = options.name ?? '';\n        const result = (await getCustomComponentMeta(name, this.injector));\n\n        if(!result)\n        {\n            return;\n        }\n\n        this.customComponentContentMetadata = result.contentMetadata;\n        this.customComponentMetadata = result.metadata;\n\n        const configuration = this.customComponentsRegister.getConfigurationForComponent(name);\n\n        if(!configuration)\n        {\n            return;\n        }\n\n        this.usedProperties = configuration.configurableProperties ?? {};\n\n        for(const id in this.usedProperties)\n        {\n            if(!this.customComponentContentMetadata[id])\n            {\n                delete this.usedProperties[id];\n            }\n\n            //TODO: remove models that are not present in metadata, and also properties\n            // for(const modelName in this.usedProperties[id])\n            // {\n            //     if(!this.customComponentContentMetadata[id]?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata)\n            // }\n        }\n\n        this.initForms();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize forms for properties\n     */\n    protected initForms(): void\n    {\n        this.usedComponentsForms = {};\n\n        for(const cmpId in this.usedProperties)\n        {\n            for(const modelName in this.usedProperties[cmpId])\n            {\n                const model = this.customComponentContentMetadata[cmpId]?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata.find(itm => itm.modelType.name == modelName)?.modelType;\n                const usedProperties = this.usedProperties[cmpId][modelName];\n\n                if(!model)\n                {\n                    continue;\n                }\n\n                const options = extend(true,\n                                       {},\n                                       this.customComponentContentMetadata[cmpId]?.editorMetadata.metaInfo?.defaultOptions,\n                                       this.customComponentContentMetadata[cmpId]?.metadata.options,\n                                       this.form?.controls.contentOptions.value[cmpId]);\n\n                this.usedComponentsForms[cmpId] ??= {};\n\n                const modelInstance = new model(options);\n\n                for(const property of Object.keys(modelInstance))\n                {\n                    //remove property if not used\n                    if(usedProperties.indexOf(property) < 0)\n                    {\n                        delete modelInstance[property];\n                    }\n                }\n\n                const form = this.usedComponentsForms[cmpId][modelName] = this.formModelBuilder\n                    .build(modelInstance);\n\n                console.log(form);\n\n                form.valueChanges.subscribe(value =>\n                {\n                    const currentOpts = this.form?.controls.contentOptions.value ?? {};\n                    currentOpts[cmpId] ??= {};\n\n                    extend(currentOpts[cmpId], value);\n\n                    this.form?.controls.contentOptions.patchValue(currentOpts);\n                });\n            }\n        }\n    }\n}\n","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, mapValuesToThis} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions} from '../customComponent.options';\n\n/**\n * Custom component model for properties editor\n */\nexport class CustomComponentModel implements CustomComponentComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public placeholderContainers: Dictionary<LayoutComponentMetadata>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public contentOptions: Dictionary<unknown> = {};\n\n    //######################### constructor #########################\n    constructor(value: CustomComponentComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {CustomComponentComponentOptions} from '../customComponent.options';\nimport {ContentOptionsPropertiesControlSAComponent} from '../misc';\nimport {CustomComponentModel} from './customComponent.model';\n\n/**\n * Custom component layout metadata\n */\nexport class CustomComponentLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<CustomComponentComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<CustomComponentComponentOptions> =\n    {\n        group: 'Components',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: CustomComponentModel,\n                    propertiesControls: \n                    [\n                        ContentOptionsPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["PropertiesControlRendererDirective","constructor","_viewContainerRef","_logger","_componentRef","propertiesMetadata","ngOnChanges","_this","debug","type","name","ngOnDestroy","clear","injector","createComponent","component","instance","form","initialize","invalidateVisuals","this","destroy","i0","LOGGER","selectors","inputs","features","PropertiesControlsModule","CommonModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","CastPipesModule","ReactiveFormsModule","NumberInputModule","GetControlsSAPipe","transform","value","metadata","editorMetadata","metaInfo","optionsMetadata","find","itm","modelType","propertiesControls","pure","standalone","ctrl_r5","ctx_r4","usedComponentsForms","cmp_r1","key","modelName_r3","customComponentContentMetadata","ContentOptionsPropertiesControlSAComponent_ng_container_0_ng_container_3_ng_container_1_Template","ctx_r2","ContentOptionsPropertiesControlSAComponent_ng_container_0_ng_container_3_Template","ctx_r0","displayName","ContentOptionsPropertiesControlSAComponent","PropertiesControlBase","inject","Injector","formModelBuilder","FormModelBuilder","customComponentsRegister","CustomComponentsRegister","usedProperties","_initialize","result","getCustomComponentMeta","contentMetadata","customComponentMetadata","configuration","getConfigurationForComponent","configurableProperties","id","initForms","cmpId","modelName","model","options","extend","defaultOptions","controls","contentOptions","_a","modelInstance","property","Object","keys","indexOf","build","console","log","valueChanges","subscribe","currentOpts","patchValue","t","decls","vars","consts","template","rf","ctx","ContentOptionsPropertiesControlSAComponent_ng_container_0_Template","i1","i2","GetModelSAPipe","PropertiesMetadataSAPipe","encapsulation","changeDetection","CustomComponentModel","mapValuesToThis","bind","CustomComponentLayoutEditorMetadata","group","ComponentStylingModel","ComponentStylingPropertiesControlComponent","freeze","AsFormControlPipe","_valueHash","isBlank","FormControl","warn"],"sourceRoot":""}