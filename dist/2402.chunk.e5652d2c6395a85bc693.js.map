{"version":3,"file":"2402.chunk.e5652d2c6395a85bc693.js","mappings":"0jBASO,MAAMA,EAA6B,oBAAqF,mBAAY,WAAW,0DAA+CC,8BAAtE,IAArF,qDAK7BC,EAAgC,oBAA6D,mBAAY,WAAW,oEAAkDC,iCAAzE,IAA7D,qD,wLCWhCC,EAAoB,cAASC,EAAAA,EA6BhBC,YAAYC,GAAsB,I,EAAA,sC,EAAA,kBAE9C,WAAkBA,IAErBC,EAAAA,EAAAA,GAA6B,UAAWD,IAEvC,EAAKE,SAASC,cAAcC,UAAY,EAAKC,mBAAmB,EAAKC,OAAS,GAN9B,E,gLAQvD,CAOkBC,gBAEXC,KAAKC,eAKND,KAAKE,SAASC,WAEbH,KAAKH,iBAAmBO,IAAAA,QAAmBJ,KAAKE,QAAQC,WAG5DH,KAAKN,SAASC,cAAcC,UAAYI,KAAKH,mBAAmBG,KAAKF,OAAS,GACjF,G,6DAzDQT,KAAoBgB,GAApBhB,EAAoB,E,qBAApBA,EAAoBiB,UAAAA,CAAAA,CAAAA,eAAAC,OAAAA,CAAAT,KAAAA,QAAAU,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAR,SAAAA,SAAAA,EAAAA,GAAAA,EAAAS,OAAAA,CAAAA,qCAAAC,gBAAAA,IAApBxB,GAAoB,UAFhCyB,EAAAA,EAAAA,GAAwB3B,IACxB4B,EAAAA,EAAAA,GAAqB9B,IACTI,GCrBb,UAEa2B,EAAa,CAACC,EAAAA,E,kDCErB,SAAUF,EAAqBG,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBACzG,C,qcCAK,MAAgB5B,EA6ClB8B,YAAsBC,EACA3B,EACA4B,EAC4BC,GAH5B,KAAAF,gBAAAA,EACA,KAAA3B,SAAAA,EACA,KAAA4B,UAAAA,EAC4B,KAAAC,QAAAA,EAzCxC,KAAAC,YAAgD,GAKhD,KAAAvB,cAAwB,EAKxB,KAAAwB,WAAqB,CAiC9B,CA1BaC,cAEV,OAAO1B,KAAKN,QACf,CAKaiC,wBAEV,OAAO3B,KAAKE,OACf,CAsBM0B,cAEH,IAAG5B,KAAKyB,UAAR,CAKAzB,KAAKyB,WAAY,EAEjB,IAAI,MAAMI,KAAO7B,KAAKwB,YAElBK,EAAIC,UAGR9B,KAAK+B,YATJ,CAUJ,CAOYC,WAAQ,iCAEjB,GAAG,EAAK/B,aAEJ,OAGJ,EAAKA,cAAe,EACpB,MAAM0B,EAAoB,EAAKA,kBAK/B,SAHMM,EAAAA,EAAAA,GAAiB,EAAKC,iBACtBD,EAAAA,EAAAA,GAAiB,EAAKlC,iBAEzB4B,EAEC,IAAI,MAAMQ,KAAa,EAAKX,kBAElBS,EAAAA,EAAAA,GAAiBE,EAAUC,WAAW,EAAKd,UAAW,EAAKI,QAAS,GAjBjE,KAoBpB,CAKYnC,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACUyC,EAAAA,EAAAA,GAAiB,EAAKlC,iBAE5B,MAAM4B,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMQ,KAAa,EAAKX,kBAElBS,EAAAA,EAAAA,GAAiBE,EAAUE,cAAcV,IAIvD,IAAI,EAAK1B,aAEL,aAGEgC,EAAAA,EAAAA,GAAiB,EAAKK,mBAC/B,CAxB0C,KAyB9C,CAKMC,mBAAmBvB,GAEtBhB,KAAKwB,YAAcR,CACtB,CAKMwB,oBAEHxC,KAAKqB,gBAAgBoB,eACxB,CAOSP,UAET,CAKSI,mBAET,CAKSvC,gBAET,CAKSgC,aAET,E,iCA/KiBzC,GAAmBoD,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBC,EAAAA,GAAM,K,kBAhDRrD,EAAmBmB,SAAAA,CAAAA,EAAAA,I,iMCHnC,MAAOQ,UAAuC2B,EAAAA,EAOvBV,UAAO,I,EAAA,c,EAAA,YAE5B,IAAI,EAAKZ,YAAc,EAAKuB,YAAc,EAAKC,UAE3C,OAGJ,MAAMC,EAA8C,EAAKzB,UAAU0B,IAAIC,EAAAA,EAAoB,MACrFC,EAAmD,EAAK5B,UAAU0B,IAAIG,EAAAA,EAA2B,MAEnGJ,GAAuBG,IAK3BA,EAAiBE,kBAAkB,EAAKP,UAAUQ,GAAI,EAAKP,iBACrDC,EAAmBO,YACzBP,EAAmBQ,gBAAgB,EAAKV,UAAUQ,IAjBtB,E,gLAkB/B,CAKkBtB,aAEf,IAAI/B,KAAKsB,YAActB,KAAK6C,UAExB,OAGJ,MAAME,EAA8C/C,KAAKsB,UAAU0B,IAAIC,EAAAA,EAAoB,MACrFC,EAAmDlD,KAAKsB,UAAU0B,IAAIG,EAAAA,EAA2B,MAEnGJ,GAAuBG,IAK3BH,EAAmBS,iBAAiBxD,KAAK6C,UAAUQ,IACnDH,EAAiBO,oBAAoBzD,KAAK6C,UAAUQ,IACvD,E,8WC/CC,MAAgBT,EA8BlBxB,YAAsByB,GAAA,KAAAA,UAAAA,EAHZ,KAAA5C,cAAwB,CAKjC,CAOYmC,WAAWsB,EAAoBhC,EAAkCiC,GAAmB,iCAE7F,EAAK1D,cAAe,EAEpB,EAAKqB,UAAYoC,EACjB,EAAKhE,SAAWgC,EAChB,EAAKoB,UAAYa,QAEX1B,EAAAA,EAAAA,GAAiB,EAAKC,UARiE,KAShG,CAKYG,cAAcnC,GAAiB,iCAExC,EAAK0D,SAAW1D,EAEZ,EAAKD,qBAKHgC,EAAAA,EAAAA,GAAiB,EAAKK,oBATY,KAU3C,CAKMR,UAEH9B,KAAK+B,YACR,CAOSG,UAET,CAKSI,mBAET,CAKSP,aAET,E","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.metadata.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\n\n/**\n * Data block layout metadata loader\n */\nexport const DataBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DataBlockComponentOptions>> = async () => new (await import('./metadata/dataBlock.layoutMetadata')).DataBlockLayoutEditorMetadata();\n\n/**\n * Data block relations metadata loader\n */\nexport const DataBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/dataBlock.relationsMetadata')).DataBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\nimport Handlebars from 'handlebars';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\nimport {DataBlockLayoutMetadataLoader, DataBlockRelationsMetadataLoader} from './dataBlock.metadata';\n\n/**\n * Component used for displaying data block\n */\n@Component(\n{\n    selector: 'data-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(DataBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(DataBlockLayoutMetadataLoader)\nexport class DataBlockSAComponent extends LayoutComponentBase<DataBlockComponentOptions> implements LayoutComponent<DataBlockComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of compiled template\n     */\n    protected compiledTemplate: HandlebarsTemplateDelegate|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of data to be set to template\n     */\n    @Input()\n    public data: any;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public override async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.ngOnChanges(changes);\n\n        if(nameof<DataBlockSAComponent>('data') in changes)\n        {\n            this._element.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        if(this.options?.template)\n        {\n            this.compiledTemplate = Handlebars.compile(this.options.template);\n        }\n\n        this._element.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {DataBlockSAComponent} from './dataBlock.component';\n\nexport default DataBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await resolvePromiseOr(this._onInit());\n        await resolvePromiseOr(this._onOptionsSet());\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await resolvePromiseOr(extension.initialize(this._injector, this.element, this));\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await resolvePromiseOr(this._onOptionsSet());\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await resolvePromiseOr(extension.optionsChange(extensionsOptions));\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await resolvePromiseOr(this._onOptionsChange());\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        const relationsProcessor: RelationsProcessor|null = this._injector.get(RelationsProcessor, null);\n        const componentManager: RelationsComponentManager|null = this._injector.get(RelationsComponentManager, null);\n\n        if(!relationsProcessor || !componentManager)\n        {\n            return;\n        }\n\n        componentManager.registerComponent(this._metadata.id, this._instance);\n        await relationsProcessor.initialized;\n        relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        const relationsProcessor: RelationsProcessor|null = this._injector.get(RelationsProcessor, null);\n        const componentManager: RelationsComponentManager|null = this._injector.get(RelationsComponentManager, null);\n\n        if(!relationsProcessor || !componentManager)\n        {\n            return;\n        }\n\n        relationsProcessor.destroyComponent(this._metadata.id);\n        componentManager.unregisterComponent(this._metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await resolvePromiseOr(this._onInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await resolvePromiseOr(this._onOptionsChange());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["DataBlockLayoutMetadataLoader","DataBlockLayoutEditorMetadata","DataBlockRelationsMetadataLoader","DataBlockRelationsEditorMetadata","DataBlockSAComponent","LayoutComponentBase","ngOnChanges","changes","nameof","_element","nativeElement","innerHTML","compiledTemplate","data","_onOptionsSet","this","_initialized","options","template","Handlebars","t","selectors","inputs","standalone","features","decls","vars","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_injector","_logger","_extensions","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","resolvePromiseOr","_onInit","extension","initialize","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","i0","LOGGER","DynamicItemExtensionBase","_metadata","_instance","relationsProcessor","get","RelationsProcessor","componentManager","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent","injector","instance","_options"],"sourceRoot":""}