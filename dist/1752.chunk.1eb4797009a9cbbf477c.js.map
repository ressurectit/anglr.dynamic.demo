{"version":3,"file":"1752.chunk.1eb4797009a9cbbf477c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox-config.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/../../../../src/material/checkbox/module.ts"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /** Default theme color palette to be used for checkboxes. */\n  color?: ThemePalette;\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  Attribute,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatRipple} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  MatCheckboxDefaultOptions,\n} from './checkbox-config';\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/** Change event object emitted by checkbox. */\nexport class MatCheckboxChange {\n  /** The source checkbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[class.mdc-checkbox--disabled]': 'disabled',\n    '[id]': 'id',\n    // Add classes that users can use to more easily target disabled or checked checkboxes.\n    '[class.mat-mdc-checkbox-disabled]': 'disabled',\n    '[class.mat-mdc-checkbox-checked]': 'checked',\n    '[class]': 'color ? \"mat-\" + color : \"mat-accent\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox implements AfterViewInit, ControlValueAccessor, FocusableOption {\n  /** Focuses the checkbox. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected _getAnimationTargetElement() {\n    return this._inputElement?.nativeElement;\n  }\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected _animationClasses = {\n    uncheckedToChecked: 'mdc-checkbox--anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mdc-checkbox--anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mdc-checkbox--anim-checked-unchecked',\n    checkedToIndeterminate: 'mdc-checkbox--anim-checked-indeterminate',\n    indeterminateToChecked: 'mdc-checkbox--anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mdc-checkbox--anim-indeterminate-unchecked',\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input({transform: booleanAttribute}) required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** Whether the checkbox has a ripple. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Tabindex for the checkbox. */\n  @Input({transform: (value: unknown) => (value == null ? undefined : numberAttribute(value))})\n  tabIndex: number;\n\n  // TODO(crisbeto): this should be a ThemePalette, but some internal apps were abusing\n  // the lack of type checking previously and assigning random strings.\n  /** Palette color of the checkbox. */\n  @Input() color: string | undefined;\n\n  /**\n   * Reference to the MatRipple instance of the checkbox.\n   * @deprecated Considered an implementation detail. To be removed.\n   * @breaking-change 17.0.0\n   */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS) private _options?: MatCheckboxDefaultOptions,\n  ) {\n    this._options = this._options || defaults;\n    this.color = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `mat-mdc-checkbox-${++nextUniqueId}`;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input({transform: booleanAttribute})\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input({transform: booleanAttribute})\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  _onInputClick() {\n    this._handleInputClick();\n  }\n\n  _onTouchTargetClick() {\n    this._handleInputClick();\n\n    if (!this.disabled) {\n      // Normally the input should be focused already, but if the click\n      // comes from the touch target, then we might have to focus it ourselves.\n      this._inputElement.nativeElement.focus();\n    }\n  }\n\n  /**\n   *  Prevent click events that come from the `<label/>` element from bubbling. This prevents the\n   *  click handler on the host from triggering twice when clicking on the `<label/>` element. After\n   *  the click event on the `<label/>` propagates, the browsers dispatches click on the associated\n   *  `<input/>`. By preventing clicks on the label by bubbling, we ensure only one click event\n   *  bubbles when the label is clicked.\n   */\n  _preventBubblingFromLabel(event: MouseEvent) {\n    if (!!event.target && this._labelElement.nativeElement.contains(event.target as HTMLElement)) {\n      event.stopPropagation();\n    }\n  }\n}\n","<div class=\"mdc-form-field\"\n     [class.mdc-form-field--align-end]=\"labelPosition == 'before'\"\n     (click)=\"_preventBubblingFromLabel($event)\">\n  <div #checkbox class=\"mdc-checkbox\">\n    <!-- Render this element first so the input is on top. -->\n    <div class=\"mat-mdc-checkbox-touch-target\" (click)=\"_onTouchTargetClick()\"></div>\n    <input #input\n           type=\"checkbox\"\n           class=\"mdc-checkbox__native-control\"\n           [class.mdc-checkbox--selected]=\"checked\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           [attr.aria-checked]=\"indeterminate ? 'mixed' : null\"\n           [attr.name]=\"name\"\n           [attr.value]=\"value\"\n           [checked]=\"checked\"\n           [indeterminate]=\"indeterminate\"\n           [disabled]=\"disabled\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"disabled ? -1 : tabIndex\"\n           (blur)=\"_onBlur()\"\n           (click)=\"_onInputClick()\"\n           (change)=\"_onInteractionEvent($event)\"/>\n    <div class=\"mdc-checkbox__ripple\"></div>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           focusable=\"false\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mdc-checkbox__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n    <div class=\"mat-mdc-checkbox-ripple mat-mdc-focus-indicator\" mat-ripple\n      [matRippleTrigger]=\"checkbox\"\n      [matRippleDisabled]=\"disableRipple || disabled\"\n      [matRippleCentered]=\"true\"></div>\n  </div>\n  <!--\n    Avoid putting a click handler on the <label/> to fix duplicate navigation stop on Talk Back\n    (#14385). Putting a click handler on the <label/> caused this bug because the browser produced\n    an unnecessary accessibility tree node.\n  -->\n  <label class=\"mdc-label\"\n         #label\n         [for]=\"inputId\">\n    <ng-content></ng-content>\n  </label>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n"],"names":["AsFormControlPipe","_logger","constructor","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","pure","CastPipesModule","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","color","clickAction","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","nextUniqueId","defaults","focus","_inputElement","nativeElement","_createChangeEvent","isChecked","event","source","checked","_getAnimationTargetElement","inputId","id","_uniqueId","_elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","_animationClasses","uncheckedToChecked","uncheckedToIndeterminate","checkedToUnchecked","checkedToIndeterminate","indeterminateToChecked","indeterminateToUnchecked","ariaLabel","ariaLabelledby","labelPosition","name","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","ngAfterViewInit","_syncIndeterminate","markForCheck","disabled","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","newState","oldState","element","classList","remove","_getAnimationClassForCheckStateTransition","length","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","toggle","_handleInputClick","Promise","resolve","then","_onInteractionEvent","stopPropagation","_onBlur","nativeCheckbox","_onInputClick","_onTouchTargetClick","_preventBubblingFromLabel","target","_labelElement","contains","i0","ANIMATION_MODULE_TYPE","selectors","viewQuery","rf","ctx","MatRipple","_t","booleanAttribute","undefined","numberAttribute","outputs","exportAs","features","$event","_r0","required","ariaDescribedby","dependencies","i1","styles","encapsulation","changeDetection","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatCommonModule","MatRippleModule"],"sourceRoot":""}