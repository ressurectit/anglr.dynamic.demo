{"version":3,"file":"7428.chunk.b55c4d9c65fbf41371a1.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../src/services/materialComponentsDynamicModuleItemsProvider/materialComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../material-components/src/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    // styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider for all built-in types in dynamic\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Injector} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n * @param injector - Injector used for obtaining dependencies\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata, injector: Injector): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n */\nexport function provideLayoutEditor(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(),\n            ]\n        };\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentMetadata|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parentMetadata, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - Metadata for parent layout component\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parentMetadata: LayoutComponentMetadata<TOptions>|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        this._items.push(\n        {\n            metadata,\n            parentMetadata,\n            levelIndex,\n            level\n        });\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], metadata, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = type.data;\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager} from '../services';\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        }\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        }\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(),\n                provideLayoutEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister),\n                provideLayoutEditor(),\n            ]\n        };\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in material-components\n */\n@Injectable()\nexport class MaterialComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with material-components\n        if(source.package != 'material-components' && source.package != '@anglr/dynamic/material-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('MaterialComponentsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/material-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialComponentsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {BasicComponentsDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor, MaterialComponentsDynamicModuleItemsProvider} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for basic components package layout components provider\n */\nexport const BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material components package layout components provider\n */\nexport const MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MaterialComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER, MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? id : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: (item.metadata.singleton ? item.itemSource.name : _newCompnentId): item.metadata.singleton\"\n                 (cdkDragDropped)=\"_generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? item.itemSource.name : item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this._initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    protected async loadNodes(): Promise<void>\n    {\n        this._allItems = [];\n        this._groupedItems = {};\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components', 'static-components', 'layout-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n    }\n}","<div class=\"flex-row flex-1\">\n    <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {BasicComponentsDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for basic components package relations components provider\n */\nexport const BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t93833,\n\t\t294,\n\t\t3833\n\t],\n\t\"./datepicker/type\": [\n\t\t23489,\n\t\t3167,\n\t\t9101,\n\t\t4262,\n\t\t6038,\n\t\t3489\n\t],\n\t\"./numberField/type\": [\n\t\t62459,\n\t\t3167,\n\t\t4262,\n\t\t2459\n\t],\n\t\"./period/type\": [\n\t\t94391,\n\t\t3167,\n\t\t4262,\n\t\t4391\n\t],\n\t\"./radio/type\": [\n\t\t7570,\n\t\t5613,\n\t\t7570\n\t],\n\t\"./select/type\": [\n\t\t79838,\n\t\t3167,\n\t\t5887,\n\t\t9838\n\t],\n\t\"./textField/type\": [\n\t\t28945,\n\t\t3167,\n\t\t4262,\n\t\t8945\n\t],\n\t\"./textarea/type\": [\n\t\t13702,\n\t\t3167,\n\t\t4262,\n\t\t3702\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 13680;\nmodule.exports = webpackAsyncContext;","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["LayoutEditorSAComponent","constructor","metadata","selectors","inputs","standalone","features","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","i0","decls","vars","consts","template","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","MatTabsModule","i1","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","_logger","tryToGet","source","package","debug","name","e","warn","LOGGER","factory","DefaultDynamicModuleTypesProvider","moduleName","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","LAYOUT_COMPONENT_TRANSFORM","useValue","injector","id","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","useFactory","logger","DynamicModuleDataExtractor","defaultExportExtractor","deps","Optional","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","optional","undefined","Symbol","provideLayoutEditor","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","LayoutEditorMetadataManager","data","isBlank","Array","isArray","DynamicLayoutEditorModule","ngModule","providers","DynamicLayoutModule","LayoutComponentsIterator","_layoutMetadata","_extractor","_items","_initialized","_initPromise","asyncIterator","x","initPromise","this","_getInitPromise","items","next","length","value","done","forEach","callback","item","parentMetadata","levelIndex","level","_getComponents","_getComponent","push","meta","extractMetadata","getDescendants","childrenMeta","LayoutComponentsIteratorService","getIteratorFor","layoutMetadata","LayoutComponentsRegister","_layoutManager","_loader","_iteratorSvc","_initSubscriptions","Subscription","_definedTypes","add","layoutChange","subscribe","types","_initializeTypes","then","Object","keys","ngOnDestroy","unsubscribe","getType","layout","layoutComponents","component","type","loadItem","LAYOUT_COMPONENTS_LOADER","LayoutComponentsRelationsNodesProvider","_componentsRegister","default","LayoutComponentsRelationsTypesProvider","resultTypes","RELATIONS_NODES_LOADER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","provideLayoutRelationsEditor","provideRelationsEditor","LayoutManager","REFRESH_PALETTE_OBSERVABLES","layoutManager","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","DynamicLayoutRelationsEditorModule","DynamicRelationsEditorModule","_layout","_layoutChange","Subject","asObservable","setLayout","MaterialComponentsDynamicModuleItemsProvider","extensionsExportsExtractor","module","localModule","extensionsObject","extensions","isJsObject","childExtensions","BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","BasicComponentsDynamicModuleItemsProvider","MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_LOADER_PROVIDER","isLayoutComponentDef","isType","isPresent","some","itm","ToRelationsDragDataSAPipe","transform","singleton","newId","itemSource","displayName","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","y","pure","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_changeDetector","_metadataManager","_refreshObservables","_allItems","_groupedItems","_newCompnentId","generateId","_isDragOverPalette","ngOnInit","obs","loadNodes","packageName","group","_a","detectChanges","_generateNewId","RELATIONS_MODULE_TYPES_LOADER","canvasDropList","CommonModule","i2","DragDropModule","i3","RelationsEditorSAComponent","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","ctx","RelationsCanvasSAComponent","provideRelationsEditorWithStatic","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","relationsExportExtractor","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","isRelationsComponentDef","provideRelations","RelationsComponentManager","RelationsManager","RelationsProcessor","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","Error","code","ids","all","slice","exports","GoBackDirective","_location","goBack","preventDefault","stopPropagation","back","GoBackModule"],"sourceRoot":""}