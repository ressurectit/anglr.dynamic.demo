{"version":3,"file":"1863.chunk.96b89d4ba829fae70128.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations/src/directives/scopedRelations/scopedRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/misc/directives/listBlockScopeRelations/listBlockScopeRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/extensions/listBlockData.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts"],"sourcesContent":["import {Directive, FactoryProvider, Inject, inject, Injector, OnDestroy} from '@angular/core';\nimport {SCOPE_ID} from '@anglr/dynamic';\n\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Creates scoped relations component manager and processor\n */\n@Directive(\n{\n    selector: '[scopedRelations]',\n    standalone: true,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n        }\n    ],\n})\nexport class ScopedRelationsSADirective implements OnDestroy\n{\n    //######################### constructor #########################\n    constructor(protected componentManager: RelationsComponentManager,\n                protected relationsProcessor: RelationsProcessor,\n                @Inject(SCOPE_ID) protected scopeId: string,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.componentManager.ngOnDestroy();\n        this.relationsProcessor.destroyScope();\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {ListBlockComponentOptions} from './listBlock.options';\n\n/**\n * List block layout metadata loader\n */\nexport const ListBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ListBlockComponentOptions>> = async () => new (await import('./metadata/listBlock.layoutMetadata')).ListBlockLayoutEditorMetadata();\n\n/**\n * List block relations metadata loader\n */\nexport const ListBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/listBlock.relationsMetadata')).ListBlockRelationsEditorMetadata();\n\n/**\n * List block layout designer type loader\n */\nexport const ListBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/listBlockDesigner.component')).ListBlockDesignerSAComponent;\n","import {Directive} from '@angular/core';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\n\nimport {ListBlockRelationsOptions} from './listBlock.options';\n\n/**\n * List block scoped relations component\n */\n@Directive()\nexport class ListBlockRelations<TDatum = any> implements RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @DynamicOutput()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @DynamicOutput()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @DynamicOutput()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @DynamicOutput()\n    public last: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Directive, inject, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelations} from '../../../listBlock.relations';\n\n/**\n * Directive that creates list block scoped relations component\n */\n@Directive(\n{\n    selector: '[listBlockScope]',\n    standalone: true,\n})\nexport class ListBlockScopeRelationsSADirective<TDatum = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager = inject(RelationsComponentManager);\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor = inject(RelationsProcessor);\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: ListBlockRelations = new ListBlockRelations();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @Input()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @Input()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @Input()\n    public last: boolean = false;\n\n    /**\n     * Id of component that is being created\n     */\n    @Input()\n    public componentId: string = '';\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<ListBlockScopeRelationsSADirective>('componentId') in changes && !this.initialized && this.componentId)\n        {\n            this.initialized = true;\n\n            this.componentManager.registerComponent(this.componentId, this.relations);\n            await this.relationsProcessor.initialized;\n            this.relationsProcessor.updateRelations(this.componentId);\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('datum') in changes)\n        {\n            this.relations.datum = this.datum;\n        }\n        \n        if(nameof<ListBlockScopeRelationsSADirective>('index') in changes)\n        {\n            this.relations.index = this.index;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('first') in changes)\n        {\n            this.relations.first = this.first;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('last') in changes)\n        {\n            this.relations.last = this.last;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n}","<ng-container *ngFor=\"let datum of data; let index=index; let first=first; let last=last\">\n    <ng-template [layoutComponentRenderer]=\"options?.template\" scopedRelations listBlockScope [datum]=\"datum\" [first]=\"first\" [last]=\"last\" [index]=\"index\" [componentId]=\"id\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent, ScopedRelationsSADirective} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from './listBlock.options';\nimport {ListBlockLayoutDesignerTypeLoader, ListBlockLayoutMetadataLoader, ListBlockRelationsMetadataLoader} from './listBlock.metadata';\nimport {ListBlockScopeRelationsSADirective} from './misc/directives';\n\n/**\n * Component used for displaying list block\n */\n@Component(\n{\n    selector: 'list-block',\n    templateUrl: 'listBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n        ScopedRelationsSADirective,\n        ListBlockScopeRelationsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(ListBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(ListBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(ListBlockLayoutMetadataLoader)\nexport class ListBlockSAComponent<TDatum = any> extends LayoutComponentBase<ListBlockComponentOptions> implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Id of current component\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of data to be rendered in for cycle\n     */\n    @Input()\n    public data: Array<TDatum> = [];\n\n    //######################### public methods #########################\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ListBlockSAComponent} from '../listBlock.component';\nimport {ListBlockDataExtensionOptions} from '../listBlockExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class ListBlockDataExtension extends DynamicItemExtensionBase<ListBlockDataExtensionOptions, ListBlockSAComponent> implements DynamicItemExtension<ListBlockDataExtensionOptions, ListBlockSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ListBlockDataExtension} from './extensions';\nimport {ListBlockSAComponent} from './listBlock.component';\n\nexport default ListBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension, ListBlockDataExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this.element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this.element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}"],"names":["ScopedRelationsSADirective","constructor","componentManager","relationsProcessor","scopeId","ngOnDestroy","this","destroyScope","i0","SCOPE_ID","selectors","standalone","features","provide","RelationsComponentManager","useFactory","inject","skipSelf","openScope","RelationsProcessor","Injector","ListBlockLayoutMetadataLoader","ListBlockLayoutEditorMetadata","ListBlockRelationsMetadataLoader","ListBlockRelationsEditorMetadata","ListBlockLayoutDesignerTypeLoader","ListBlockDesignerSAComponent","ListBlockRelations","datum","index","first","last","invalidateVisuals","__decorate","DynamicOutput","ListBlockScopeRelationsSADirective","initialized","relations","componentId","ngOnChanges","changes","nameof","registerComponent","updateRelations","destroyComponent","unregisterComponent","inputs","datum_r1","first_r3","last_r4","index_r2","ctx_r0","ListBlockSAComponent","LayoutComponentBase","id","data","setId","t","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","ListBlockDataExtension","DynamicItemExtensionBase","onInit","instance","metadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","injector","logger","destroyed","element","extensionsOptions","options","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","viewContainerRef","loader","childExtensions","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","ɵComponentRef","componentRef","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","parent","providers","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","_applyStyling","style","nativeElement","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","get","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","PACKAGE_SOURCES","packages","packagesChange","NEVER","refresh","multi","getJson","jsonString","JSON","parse","Observable","noop"],"sourceRoot":""}