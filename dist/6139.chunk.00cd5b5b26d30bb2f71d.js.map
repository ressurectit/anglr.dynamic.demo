{"version":3,"file":"6139.chunk.00cd5b5b26d30bb2f71d.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/sampleSource/node/sampleSourceNode.component.ts","webpack://ng-universal-demo/../basic-components/src/sampleSource/node/sampleSourceNode.component.html","webpack://ng-universal-demo/../basic-components/src/sampleSource/metadata/sampleSource.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../src/misc/utils.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations node component for sample source\n */\n@Component(\n{\n    selector: 'sample-source-node',\n    templateUrl: 'sampleSourceNode.component.html',\n    styleUrls: ['sampleSourceNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SampleSourceNodeSAComponent extends RelationsNodeBase implements RelationsNode\n{\n}","<div class=\"node-header\">\n    Sample source\n</div>\n\n<div class=\"node-content\">\n    <div class=\"inputs margin-right-small\">\n    </div>\n\n    <div class=\"outputs margin-left-small\">\n        <div class=\"flex-row\">\n            <div class=\"margin-right-extra-small\">v√Ωstup</div>\n            <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"vystup\" [parent]=\"this\"></relation-node-output>\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {SampleSourceNodeSAComponent} from '../node/sampleSourceNode.component';\n\n/**\n * Sample source relations metadata\n */\nexport class SampleSourceRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Sample source',\n        description: 'Sample source node',\n        group: 'Sample',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = SampleSourceNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected …µAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected …µInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected …µOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.…µAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.…µInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.…µOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.…µInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.…µInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.…µInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.…µAllOutputs = this.outputsChildren.toArray();\n            this.…µOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.…µOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.…µOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}"],"names":["SampleSourceNodeSAComponent","RelationsNodeBase","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationNodeOutputSAComponent","styles","changeDetection","SampleSourceRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","changeDetector","element","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","destroySubject","Subject","zoomLevel","updatePosition","id","metadata","allOutputs","…µAllOutputs","inputs","…µInputs","outputs","…µOutputs","destroy","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","updateRelations","onMouseUp","updateInputs","inputsChildren","forEach","input","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","nativeElement","style","left","top","viewQuery","RelationNodeInputSAComponent","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","ngOnDestroy","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","hostBindings","CommonModule","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","addSimpleChange","key","currentValue","previousValue","firstChange","isFirstChange"],"sourceRoot":""}