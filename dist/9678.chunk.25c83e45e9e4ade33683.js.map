{"version":3,"file":"9678.chunk.25c83e45e9e4ade33683.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.model.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toColor/toColor.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether user moved node during drag\n     */\n    protected moved: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.moved = false;\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.moved = true;\n\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            if(this.moved)\n            {\n                this.history.getNewState();\n            }\n\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected _isHighlighted: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this._isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this._isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RelationsNodeProperties} from './relationsNodePropertiesEditor.interface';\n\n/**\n * Relations node properties model\n */\nexport class RelationsNodePropertiesModel implements RelationsNodeProperties\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public displayName: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public scope: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RelationsNodeProperties|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div class=\"dynamic-form-group\" [formGroup]=\"form\">\n    <label class=\"dynamic-control-label\">display name</label>\n    <input class=\"dynamic-form-control\" type=\"text\" formControlName=\"displayName\">\n\n    <label class=\"dynamic-control-label\">scope</label>\n    <input class=\"dynamic-form-control\" type=\"text\" formControlName=\"scope\" [readonly]=\"true\" *ngIf=\"!data.scopeConfigurable\">\n\n    <select class=\"dynamic-form-control\" formControlName=\"scope\" *ngIf=\"data.scopeConfigurable\">\n        <option value=\"\">---</option>\n        <option *ngFor=\"let scope of scopes\" [value]=\"scope\">{{scope}}</option>\n    </select>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-margin-top-small\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"form.value\">\n        <span>ok</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\n\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from './relationsNodePropertiesEditor.interface';\nimport {RelationsNodePropertiesModel} from './relationsNodePropertiesEditor.model';\n\n/**\n * Component used for editing display name of relations node\n */\n@Component(\n{\n    selector: 'relations-node-properties-editor',\n    templateUrl: 'relationsNodePropertiesEditor.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodePropertiesEditorSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control for editation of display name\n     */\n    protected form: FormGroup<FormModelGroup<RelationsNodeProperties>>;\n\n    /**\n     * Array of available scopes\n     */\n    protected scopes: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: RelationsNodePropertiesEditorData,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.form = formModelBuilder.build<RelationsNodeProperties>(new RelationsNodePropertiesModel(data.properties));\n        this.scopes = data.scopeRegister.scopes;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\nimport {stringToColour} from '../../misc/utils';\n\n/**\n * Converts string to color code\n */\n@Pipe({name: 'toColor', standalone: true})\nexport class ToColorSAPipe implements PipeTransform\n{\n    /**\n     * Converts string to color code\n     * @param value - String to be converted\n     */\n    public transform(value: string|undefined|null): string|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        return stringToColour(value);\n    }\n}","<div class=\"header-content\">{{parent?.metadata?.displayName || name || parent?.metadata?.id}}</div>\n\n<span *ngIf=\"parent?.metadata?.scope\" [tooltip]=\"parent?.metadata?.scope\" [style.color]=\"parent?.metadata?.scope | toColor\" class=\"dynamic-margin-horizontal-extra-small dynamic-bold\">&#123;&#125;</span>\n\n<button type=\"button\" class=\"dynamic-btn-icon edit-icon\" (click)=\"editProperties()\">\n    <span class=\"fas fa-pen\"></span>\n</button>\n\n<button type=\"button\" *ngIf=\"destroySubject\" class=\"dynamic-btn-icon destroy-icon\" (click)=\"destroySubject.next()\">\n    <span class=\"fas fa-times\"></span>\n</button>","import {Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {TooltipModule} from '@anglr/common';\nimport {lastValueFrom, Subject} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodePropertiesEditorSAComponent} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.component';\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.interface';\nimport {ToColorSAPipe} from '../../pipes/toColor/toColor.pipe';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\nimport {ScopeRegister} from '../../services';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        ToColorSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent relations node of node header\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    /**\n     * Subject used for destroying relations node\n     */\n    @Input()\n    public destroySubject: Subject<void>|undefined|null;\n\n    /**\n     * Name of node to be displayed\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected dialog: TitledDialogService,\n                protected changeDetector: ChangeDetectorRef,\n                protected scopeRegister: ScopeRegister,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens editation of properties\n     */\n    protected async editProperties(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RelationsNodePropertiesEditorSAComponent, RelationsNodePropertiesEditorData, RelationsNodeProperties|undefined|null>(RelationsNodePropertiesEditorSAComponent,\n        {\n            title: 'edit properties',\n            width: '30vw',\n            data: \n            {\n                properties: \n                {\n                    displayName: this.parent?.metadata?.displayName || this.name || this.parent?.metadata?.id || '',\n                    scope: this.parent?.metadata?.scope ?? '',\n                },\n                scopeConfigurable: this.parent?.metadata?.nodeMetadata?.scopeConfigurable ?? false,\n                scopeRegister: this.scopeRegister,\n            }\n        }).afterClosed());\n\n        if(result && this.parent?.metadata)\n        {\n            this.parent.metadata.displayName = result.displayName ?? undefined;\n            this.parent.metadata.scope = result.scope ?? undefined;\n            this.history.getNewState();\n\n            this.changeDetector.detectChanges();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n\n        this._relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n\n        this._relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["RelationsNodeBase","constructor","changeDetector","element","history","inject","RELATIONS_HISTORY_MANAGER","initialized","isDragging","moved","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","destroySubject","Subject","zoomLevel","this","nativeElement","classList","add","updatePosition","observer","ResizeObserver","updateRelations","observe","id","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","destroy","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","ngOnDestroy","disconnect","invalidateVisuals","detectChanges","initEndpoints","initialize","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","i0","viewQuery","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","ctx","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_isHighlighted","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","highlight","cancelHighlight","hostVars","hostBindings","RelationsNodePropertiesModel","value","displayName","scope","mapValuesToThis","RelationsNodePropertiesEditorSAComponent","data","formModelBuilder","scopes","form","build","properties","scopeRegister","TITLED_DIALOG_DATA","selectors","standalone","features","FormModelBuilder","decls","vars","consts","template","CommonModule","i2","MatDialogModule","i3","ReactiveFormsModule","i4","encapsulation","changeDetection","ToColorSAPipe","transform","stringToColour","pure","RelationsNodeHeaderSAComponent","dialog","editProperties","result","lastValueFrom","open","title","width","scopeConfigurable","afterClosed","undefined","TooltipModule","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","t","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}