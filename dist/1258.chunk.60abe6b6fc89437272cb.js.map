{"version":3,"file":"1258.chunk.60abe6b6fc89437272cb.js","mappings":"wWAMO,MAAMA,EAAoC,e,EAAA,G,EAA6D,mBAAY,WAAW,kGAAsDC,qCAA7E,E,+KAA7D,qD,yHCQjD,IAAaC,EAAb,MA6CIC,YAAsBC,GAAA,KAAAA,SAAAA,EAjCZ,KAAAC,aAA6BC,KAAKF,SAASG,IAAIC,EAAAA,EAmCxD,CA5BUC,uBAEP,OAAOH,KAAKI,iBACf,CACUD,qBAAiBE,GAExBL,KAAKI,kBAAoBC,CAC5B,CA4BYC,YAAYC,GAAsB,I,EAAA,c,EAAA,YAE3C,IAAGC,EAAAA,EAAAA,GAA+B,UAAWD,EAC7C,CACI,IAAI,EAAKJ,iBAEL,OAGJ,MAAMM,QAAoB,EAAKV,aAAaW,SAAwB,EAAKP,iBAAiBQ,GAAI,EAAKR,iBAAiBS,MAEpH,IAAIH,EAEA,OAGJ,IAEI,EAAKI,gBAAkBJ,EAAY,EAAKK,KAK3C,CAHD,MAAMC,GAEFC,QAAQC,MAAMF,EACjB,CACJ,CAxB0C,E,gLAyB9C,CAOMG,oBAEN,IAtDDC,EAAAA,EAAAA,IAAAA,EADCC,EAAAA,EAAAA,OACD,2DAQAD,EAAAA,EAAAA,IAAAA,EADCE,EAAAA,EAAAA,MACD,qEA1CSzB,GAAsB,UAFlC0B,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwB7B,IACU,6BA6CC8B,EAAAA,KA7CvB5B,GCZb,S,kBCiBM,SAAU6B,EAAyBC,GAIrC,QAFaA,EAECC,sBACjB,CAKK,SAAUL,IAEZ,OAAO,SAAuCM,GAM1C,OAJaA,EAERD,wBAAyB,EAEvBC,CACV,CACJ,C,oOC/BK,MAAO1B,EAUTL,YAAwCgC,GAAA,KAAAA,SAAAA,EAH9B,KAAAC,gBAAmC,CAAC,CAK7C,CASYpB,SAAkBqB,EAAqBnB,GAAY,I,EAAA,c,EAAA,YAE5D,GAAG,EAAKkB,gBAAgBC,GAEpB,OAAO,EAAKD,gBAAgBC,GAGhC,MAAMC,EAAgB,EAAKH,SAASI,cAAc,UAC5CC,EAAa,YAAWC,EAAAA,EAAAA,IAAW,MACzC,IAAIC,EAAuB,KA2B3B,OAzBAJ,EAAcK,UAAY,2EAGpBzB,uDAGGsB,eAAwBA,cAEhCI,OAAeJ,GAChB,CACIK,SAAWC,GAAwBJ,EAASI,EAAIC,SAAW,KAC3DC,QAAUC,IAEN3B,QAAQ4B,IAAID,GAEL,OAIf,EAAKd,SAASgB,qBAAqB,QAAQ,GAAGC,YAAYd,UAClDM,OAAeJ,GACvBF,EAAce,SAEd,EAAKjB,gBAAgBC,GAAeK,EAE7BA,CApCqD,E,gLAqC/D,E,iCA1DQlC,GAAY8C,EAAAA,GAUDC,EAAAA,GAAQ,E,oBAVnB/C,EAAYgD,QAAZhD,EAAY,M","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/type.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/services/codeExecutor/codeExecutor.service.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Transform data relations metadata loader\n */\nexport const TransformDataRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/transformData.relationsMetadata')).TransformDataRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {TransformDataRelationsMetadataLoader} from './transformData.metadata';\nimport {TransformDataRelationsOptions} from './transformData.options';\nimport {TransformData} from './transformData.interface';\n\n/**\n * Transform data relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(TransformDataRelationsMetadataLoader)\nexport class TransformDataRelations<TData = any, TTransformedData = any> implements RelationsComponent<TransformDataRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: TransformDataRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor = this.injector.get(CodeExecutor);\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): TransformDataRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: TransformDataRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be transformed\n     */\n    @Input()\n    public data: TData|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Transformed data\n     */\n    @DynamicOutput()\n    public transformedData: TTransformedData|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<TransformDataRelations>('data') in changes)\n        {\n            if(!this.relationsOptions)\n            {\n                return;\n            }\n\n            const transformer = await this.codeExecutor.loadData<TransformData>(this.relationsOptions.id, this.relationsOptions.code);\n\n            if(!transformer)\n            {\n                return;\n            }\n\n            try\n            {\n                this.transformedData = transformer(this.data);\n            }\n            catch(e)\n            {\n                console.error(e);\n            }\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {TransformDataRelations} from './transformData.relations';\n\nexport default TransformDataRelations;","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Injectable, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {generateId, Dictionary} from '@jscrpt/common';\n\n/**\n * Class used for executing javascript code and obtaining types from executed javascript code\n */\n@Injectable()\nexport class CodeExecutor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Loaded data cache for relations id\n     */\n    protected loadedDataCache: Dictionary<any> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads data from dynamicaly executed code\n     * @param relationsId - Id of relations for which is data loaded from code\n     * @param code - Code used for obtaining data\n     */\n    public async loadData<TResult>(relationsId: string, code: string): Promise<TResult|null>\n    {\n        if(this.loadedDataCache[relationsId])\n        {\n            return this.loadedDataCache[relationsId];\n        }\n\n        const scriptElement = this.document.createElement('script');\n        const loadHelper = `loadType${generateId(12)}`;\n        let result: TResult|null = null;\n\n        scriptElement.innerText = `\n        (function(exports, loadType, require)\n        {\n            ${code}\n\n            loadType(exports);\n        })({}, ${loadHelper}.loadType, ${loadHelper}.require);`;\n\n        (window as any)[loadHelper] =\n        {\n            loadType: (exp: {default: any}) => result = exp.default ?? null,\n            require: (requireName: string) =>\n            {\n                console.log(requireName);\n\n                return null;\n            }\n        };\n\n        this.document.getElementsByTagName('head')[0].appendChild(scriptElement);\n        delete (window as any)[loadHelper];\n        scriptElement.remove();\n\n        this.loadedDataCache[relationsId] = result;\n\n        return result;\n    }\n}"],"names":["TransformDataRelationsMetadataLoader","TransformDataRelationsEditorMetadata","TransformDataRelations","constructor","injector","codeExecutor","this","get","CodeExecutor","relationsOptions","ɵRelationsOptions","value","ngOnChanges","changes","nameof","transformer","loadData","id","code","transformedData","data","e","console","error","invalidateVisuals","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","isRelationsComponentType","obj","__ɵɵRelationsComponent","target","document","loadedDataCache","relationsId","scriptElement","createElement","loadHelper","generateId","result","innerText","window","loadType","exp","default","require","requireName","log","getElementsByTagName","appendChild","remove","i0","DOCUMENT","factory"],"sourceRoot":""}