{"version":3,"file":"3234.chunk.42b2ca0165bda2fc867a.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n\n/**\n * If block layout designer type loader\n */\nexport const IfBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/ifBlockDesigner.component')).IfBlockDesignerSAComponent;\n","<ng-container *ngIf=\"condition\">\n    <ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutDesignerTypeLoader, IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<IfBlockSAComponent>('condition'),\n    ],\n})\n@DescendantsGetter<IfBlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorDesignerType(IfBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.condition = this.options?.condition ?? false;\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["IfBlockLayoutMetadataLoader","_ref","_asyncToGenerator","IfBlockLayoutEditorMetadata","apply","arguments","IfBlockRelationsMetadataLoader","_ref2","IfBlockRelationsEditorMetadata","IfBlockLayoutDesignerTypeLoader","_ref3","IfBlockDesignerSAComponent","i0","IfBlockSAComponent_ng_container_0_ng_template_1_Template","ctx_r0","options","content","IfBlockSAComponent","LayoutComponentBase","constructor","condition","onOptionsSet","this","t","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","IfBlockSAComponent_ng_container_0_Template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DebugData","nameof","DescendantsGetter","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","get","RelationsProcessor","RelationsComponentManager","registerComponent","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}