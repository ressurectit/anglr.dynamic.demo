{"version":3,"file":"4023.chunk.38ebf9aa840516ea0382.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeaderDisplayNameEditor/relationsNodeHeaderDisplayNameEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeaderDisplayNameEditor/relationsNodeHeaderDisplayNameEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.history.getNewState();\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected _isHighlighted: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this._isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this._isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component used for editing display name of relations node\n */\n@Component(\n{\n    selector: 'relations-node-header-display-name-editor',\n    templateUrl: 'relationsNodeHeaderDisplayNameEditor.component.html',\n    // styleUrls: ['relationsNodeHeader.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderDisplayNameEditorSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control for editation of display name\n     */\n    protected control: FormControl<string> = new FormControl(inject(TITLED_DIALOG_DATA));\n}","<div class=\"form-group\">\n    <label class=\"control-label\"></label>\n    <input class=\"form-control\" type=\"text\" [formControl]=\"control\">\n</div>\n\n<div class=\"flex-row flex-end margin-top-small\">\n    <button type=\"button\" class=\"btn btn-info margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" [mat-dialog-close]=\"control.value\">\n        <span>ok</span>\n    </button>\n</div>","<div class=\"header-content\">{{parent?.metadata?.displayName || name || parent?.metadata?.id}}</div>\n\n<button type=\"button\" class=\"btn-icon edit-icon\" (click)=\"editDisplayName()\">\n    <span class=\"fas fa-pen\"></span>\n</button>\n\n<button type=\"button\" *ngIf=\"destroySubject\" class=\"btn-icon destroy-icon\" (click)=\"destroySubject.next()\">\n    <span class=\"fas fa-times\"></span>\n</button>","import {Component, ChangeDetectionStrategy, Input, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {lastValueFrom, Subject} from 'rxjs';\n\nimport {RelationsNode} from '../../interfaces';\nimport {RelationsNodeHeaderDisplayNameEditorSAComponent} from '../relationsNodeHeaderDisplayNameEditor/relationsNodeHeaderDisplayNameEditor.component';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    // styleUrls: ['relationsNodeHeader.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent relations node of node header\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    /**\n     * Subject used for destroying relations node\n     */\n    @Input()\n    public destroySubject: Subject<void>|undefined|null;\n\n    /**\n     * Name of node to be displayed\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected dialog: TitledDialogService,\n                protected changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens editation of display name\n     */\n    protected async editDisplayName(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RelationsNodeHeaderDisplayNameEditorSAComponent, string, string|undefined|null>(RelationsNodeHeaderDisplayNameEditorSAComponent,\n        {\n            title: 'edit display name',\n            width: '30vw',\n            data: this.parent?.metadata?.displayName || this.name || this.parent?.metadata?.id || ''\n        }).afterClosed());\n\n        if(result && this.parent?.metadata)\n        {\n            this.parent.metadata.displayName = result;\n\n            this.changeDetector.detectChanges();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n\n        this._relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n\n        this._relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this._relations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["RelationsNodeBase","constructor","changeDetector","element","history","inject","RELATIONS_HISTORY_MANAGER","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","destroySubject","Subject","zoomLevel","this","nativeElement","classList","add","updatePosition","observer","ResizeObserver","updateRelations","observe","id","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","destroy","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","ngOnDestroy","disconnect","invalidateVisuals","detectChanges","initEndpoints","initialize","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","i0","viewQuery","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","ctx","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_isHighlighted","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","highlight","cancelHighlight","hostVars","hostBindings","RelationsNodeHeaderDisplayNameEditorSAComponent","control","FormControl","TITLED_DIALOG_DATA","selectors","standalone","features","decls","vars","consts","template","MatDialogModule","i1","ReactiveFormsModule","i2","encapsulation","changeDetection","RelationsNodeHeaderSAComponent","dialog","editDisplayName","result","lastValueFrom","open","title","width","data","displayName","afterClosed","CommonModule","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","t","styles","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}