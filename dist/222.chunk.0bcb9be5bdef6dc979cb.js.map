{"version":3,"file":"222.chunk.0bcb9be5bdef6dc979cb.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../interfaces';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.id}}</span>","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {AsyncProperties} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '../interfaces';\n\n/**\n * Generic implementation of layout editor metadata descriptor, async version\n */\nexport abstract class GenericLayoutAsyncMetadata<TOptions> implements AsyncProperties<LayoutEditorMetadataDescriptor<TOptions>>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of obtained layout editor metadata descriptor\n     */\n    protected _instance?: LayoutEditorMetadataDescriptor<TOptions>;\n\n    //######################### public properties - implementation of async LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * Meta information about layout component\n     */\n    public get metaInfo(): Promise<LayoutEditorMetadataInfo|undefined>\n    {\n        return this._getValue<LayoutEditorMetadataInfo|undefined>('metaInfo');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get addDescendant(): Promise<Action<[LayoutComponentMetadata, TOptions, number]>|undefined>\n    {\n        return this._getValue<Action<[LayoutComponentMetadata, TOptions, number]>|undefined>('addDescendant');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get applyDesignerStyles(): Promise<Action<[TOptions|null|undefined, CSSStyleDeclaration]>|undefined>\n    {\n        return this._getValue<Action<[TOptions|null|undefined, CSSStyleDeclaration]>|undefined>('applyDesignerStyles');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canDropMetadata(): Promise<Func<boolean, [TOptions|undefined|null]>|undefined>\n    {\n        return this._getValue<Func<boolean, [TOptions|undefined|null]>|undefined>('canDropMetadata');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get removeDescendant(): Promise<Action<[string, TOptions]>|undefined>\n    {\n        return this._getValue<Action<[string, TOptions]>|undefined>('removeDescendant');\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets value from layout editor metadata descriptor property\n     * @param property - Property which value should be obtained\n     */\n    protected async _getValue<TValue>(property: keyof LayoutEditorMetadataDescriptor): Promise<TValue>\n    {\n        const instance = this._instance ??= await this._getInstance();\n\n        return instance[property] as any;\n    }\n\n    /**\n     * Gets instance of layout editor metadata descriptor\n     */\n    protected abstract _getInstance(): Promise<LayoutEditorMetadataDescriptor<TOptions>>;\n}\n\n/**\n * Implementation of layout editor metadata descriptor\n */\nexport class LayoutEditorMetadataData<TOptions = any> implements LayoutEditorMetadataDescriptor<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether component was initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo;\n    \n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, TOptions, number]>;\n\n    /**\n     * @inheritdoc\n     */\n    public applyDesignerStyles?: Action<[TOptions|null|undefined, CSSStyleDeclaration]>;\n    \n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [TOptions|undefined|null]>;\n\n    /**\n     * @inheritdoc\n     */\n    public isHorizontalDrop?: Func<boolean, [TOptions|undefined|null]>;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, TOptions]>;\n\n    //######################### constructor #########################\n    constructor(protected _asyncMetadata: AsyncProperties<LayoutEditorMetadataDescriptor<TOptions>>)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize object loads async data and freezes object\n     */\n    public async initialize(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this.metaInfo = await this._asyncMetadata.metaInfo;\n        this.addDescendant = await this._asyncMetadata.addDescendant;\n        this.applyDesignerStyles = await this._asyncMetadata.applyDesignerStyles;\n        this.canDropMetadata = await this._asyncMetadata.canDropMetadata;\n        this.isHorizontalDrop = await this._asyncMetadata.isHorizontalDrop;\n        this.removeDescendant = await this._asyncMetadata.removeDescendant;\n\n        this._initialized = true;\n\n        Object.freeze(this);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../interfaces';\nimport {LayoutEditorMetadataData} from '../../misc/types';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(protected _loader: DynamicItemLoader,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.type as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = new LayoutEditorMetadataData(metadataType.layoutEditorMetadata);\n        await metadataData.initialize();\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components id\n     */\n    protected _idChanges: Subject<string> = new Subject<string>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when id of component changes\n     */\n    public get idChange(): Observable<string>\n    {\n        return this._idChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id].component;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Updated id of registered component\n     * @param oldId - Old id that was already registered\n     * @param newId - New id that is going to be set\n     */\n    public updatedLayoutDesignerComponentId(oldId: string, newId: string): void\n    {\n        const component = this._components[oldId];\n\n        if(component)\n        {\n            this._components[newId] = component;\n            delete this._components[oldId];\n\n            if(oldId === this._rootComponentId)\n            {\n                this._rootComponentId = newId;\n            }\n\n            this._idChanges.next(oldId);\n        }\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this._logger?.debug('LayoutComponentRendererSADirective: setting component options {@id}', {id: componentMetadata?.id});\n                this.component.options = componentMetadata.options;\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}"],"names":["LayoutEditorDragPlaceholderSAComponent","selectors","standalone","features","decls","vars","template","styles","changeDetection","LayoutEditorDragPreviewSAComponent","inputs","editorMetadata","layoutMetadata","consts","i0","GenericLayoutAsyncMetadata","metaInfo","this","_getValue","addDescendant","applyDesignerStyles","canDropMetadata","removeDescendant","property","_instance","_getInstance","LayoutEditorMetadataData","constructor","_asyncMetadata","_initialized","initialize","isHorizontalDrop","Object","freeze","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","LOGGER","factory","providedIn","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_idChanges","_flatTree","selectedComponent","highlightedComponent","root","isBlank","layoutChange","asObservable","selectedChange","highlightedChange","idChange","flatTree","_buildFlatTree","selectComponent","id","next","unselectComponent","highlightComponent","cancelHighlightedComponent","registerLayoutDesignerComponent","component","parentId","error","parent","componentItem","children","splice","length","getComponent","unregisterLayoutDesignerComponent","index","indexOf","updatedLayoutDesignerComponentId","oldId","newId","getMetadata","options","typeMetadata","_buildFlatTreeForComponent","result","child","concat","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_viewContainerRef","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","LayoutComponentRendererDirectiveOptions","instance","ngOnChanges","changes","ngOnDestroy","clear","nameof","injector","customInjector","layoutComponentType","missingTypeBehavior","createComponent","MissingTypeBehavior","Error","invalidateVisuals","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","isPresent","DynamicItemLoader","_providers","_extractors","_cachedDynamicItems","Array","isArray","source","dynamicModule","verbose","provider","asyncDynamicModule","tryToGet","resolvePromiseOr","extractor","dynamicItemType","tryToExtract","isType","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS"],"sourceRoot":""}