{"version":3,"file":"7964.chunk.4b71e6f7ac0f08686b55.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\n\n/**\n * Toggle button layout metadata loader\n */\nexport const ToggleButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ToggleButtonComponentOptions>> = async () => new (await import('./metadata/toggleButton.layoutMetadata')).ToggleButtonLayoutEditorMetadata();\n\n/**\n * Toggle button relations metadata loader\n */\nexport const ToggleButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/toggleButton.relationsMetadata')).ToggleButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\nimport {ToggleButtonLayoutMetadataLoader, ToggleButtonRelationsMetadataLoader} from './toggleButton.metadata';\n\n/**\n * Component used for displaying toggle button\n */\n@Component(\n{\n    selector: 'toggle-button',\n    templateUrl: 'toggleButton.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(ToggleButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ToggleButtonLayoutMetadataLoader)\nexport class ToggleButtonSAComponent extends LayoutComponentBase<ToggleButtonComponentOptions> implements LayoutComponent<ToggleButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is toggle button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting on/off state of toggle button\n     */\n    @DynamicOutput()\n    public toggle: boolean|null = null;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n\n        if(this.options?.state)\n        {\n            this.toggle = this.options.state;\n        }\n    }\n}","<button type=\"button\" class=\"btn btn-primary\" [disabled]=\"disabled\" (click)=\"toggle = !toggle\">\n    <span>{{toggle ? options?.onText : options?.offText}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ToggleButtonSAComponent} from './toggleButton.component';\n\nexport default ToggleButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this._injector.get(RelationsProcessor, null);\n        this.componentManager ??= this._injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this._metadata.id, this._instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this._metadata.id);\n        this.componentManager.unregisterComponent(this._metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["ToggleButtonLayoutMetadataLoader","ToggleButtonLayoutEditorMetadata","ToggleButtonRelationsMetadataLoader","ToggleButtonRelationsEditorMetadata","ToggleButtonSAComponent","LayoutComponentBase","disabled","toggle","_onOptionsSet","this","options","state","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","LOGGER","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","_metadata","_instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent","injector","instance"],"sourceRoot":""}