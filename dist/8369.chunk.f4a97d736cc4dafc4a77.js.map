{"version":3,"file":"8369.chunk.f4a97d736cc4dafc4a77.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-debugger/src/pipes/jsonFormatted/jsonFormatted.pipe.ts","webpack://ng-universal-demo/../relations-debugger/src/components/relationsNodeInputDebug/relationsNodeInputDebug.component.ts","webpack://ng-universal-demo/../relations-debugger/src/components/relationsNodeOutputDebug/relationsNodeOutputDebug.component.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/node/debuggerNode.component.html","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/node/debuggerNode.component.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/metadata/debuggerNode.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms data into formatted json\n */\n@Pipe({name: 'jsonFormatted', standalone: true,})\nexport class JsonFormattedSAPipe<TValue = unknown> implements PipeTransform\n{\n    /**\n     * Transforms data into formatted json\n     * @param value - Data to be formatted\n     */\n    public transform(value: TValue): string\n    {\n        return JSON.stringify(value, undefined, 2);\n    }\n}","import {Component, ChangeDetectionStrategy, ExistingProvider, forwardRef, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {NodeRelationPath, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {NodeRelationPathDebug} from '../../misc/nodeRelationPathDebug';\n\n/**\n * Component used to display relation node input for debugging\n */\n@Component(\n{\n    selector: 'relation-node-input-debug',\n    template: '',\n    standalone: true,\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: RelationNodeInputSAComponent,\n            useExisting: forwardRef(() => RelationNodeInputDebugSAComponent),\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputDebugSAComponent extends RelationNodeInputSAComponent implements OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Debug relation instance\n     */\n    protected get relationDebug(): NodeRelationPathDebug|undefined|null\n    {\n        return this.relation as NodeRelationPathDebug;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets native html element for node\n     */\n    public get htmlElement(): HTMLElement\n    {\n        return this.element.nativeElement;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether highlight relations connected to this input\n     */\n    @Input()\n    public transferHighlight: boolean = false;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationNodeInputDebugSAComponent>('transferHighlight') in changes)\n        {\n            if(this.transferHighlight)\n            {\n                this.relation?.highlight();\n                this.relationDebug?.createTransferOverlay();\n            }\n            else\n            {\n                this.relation?.cancelHighlight();\n                this.relationDebug?.destroyTransferOverlay();\n            }\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override addRelation(relation: NodeRelationPath): boolean\n    {\n        const result = super.addRelation(relation);\n\n        if(this.transferHighlight)\n        {\n            this.relation?.highlight();\n            this.relationDebug?.createTransferOverlay();\n        }\n        else\n        {\n            this.relation?.cancelHighlight();\n            this.relationDebug?.destroyTransferOverlay();\n        }\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, ExistingProvider} from '@angular/core';\nimport {RelationNodeOutputSAComponent} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component used to display relation node output for debugging\n */\n@Component(\n{\n    selector: 'relation-node-output-debug',\n    template: '',\n    standalone: true,\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: RelationNodeOutputSAComponent,\n            useExisting: RelationNodeOutputDebugSAComponent,\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputDebugSAComponent extends RelationNodeOutputSAComponent\n{\n    //######################### public properties #########################\n\n    /**\n     * Gets native html element for node\n     */\n    public get htmlElement(): HTMLElement\n    {\n        return this.element.nativeElement;\n    }\n}","<div class=\"relations-node-header\">\n    <div class=\"header-content\" tooltip=\"id: {{metadata?.id}}\">{{metadata?.name}}</div>\n</div>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\" *ngIf=\"registered\">\n        <div class=\"inputs\">\n            <div class=\"input\" [class.transfer-endpoint]=\"transferInput == input\" *ngFor=\"let input of componentDef?.inputs\">\n                <relation-node-input-debug [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"input\" [parent]=\"this\" [transferHighlight]=\"transferInput == input\"/>\n                <div>{{input}}</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" [class.transfer-endpoint]=\"transferOutput == output\" *ngFor=\"let output of componentDef?.outputs\">\n                <ng-container *ngIf=\"transferOutput == output\">\n                    <div *bodyRender class=\"endpoint-transfer-detail\" [positionTo]=\"outNode.htmlElement\" [autoUpdate]=\"true\" placement=\"Right\">\n                        <div class=\"dynamic-bold dynamic-margin-bottom-small\">{{output}}</div>\n\n                        <div><span class=\"dynamic-semi-bold\">scope:</span> {{step?.dataTransfer?.scope}}</div>\n                        <div><span class=\"dynamic-semi-bold\">initial:</span> {{step?.dataTransfer?.change?.firstChange}}</div>\n                        <div class=\"dynamic-semi-bold\">previous value:</div>\n                        <div class=\"formatted-json\">{{step?.dataTransfer?.change?.previousValue | jsonFormatted}}</div>\n                        <div class=\"dynamic-semi-bold\">current value:</div>\n                        <div class=\"formatted-json\">{{step?.dataTransfer?.change?.currentValue | jsonFormatted}}</div>\n                    </div>\n                </ng-container>\n\n                <div>{{output}}</div>\n                <relation-node-output-debug #outNode [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"output\" [parent]=\"this\"/>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"debugger-node-overlay\" tooltip [tooltipOptions]=\"tooltipOptions\">\n    <div *tooltipTemplate class=\"relations-debugger-node-detail dynamic-thin-scrollbar\">\n        <div class=\"dynamic-bold\">{{this.metadata?.id}}</div>\n\n        <div *ngFor=\"let stat of state\">\n            <div class=\"dynamic-semi-bold\">#{{stat.componentInternalId}}</div>\n\n            <div class=\"dynamic-text-uppercase dynamic-bold dynamic-margin-top-small dynamic-margin-bottom-extra-small\">relations options</div>\n\n            <div class=\"formatted-json\">{{metadata?.relationsOptions | jsonFormatted}}</div>\n\n            <div class=\"inputs-outputs-grid\">\n                <div class=\"dynamic-text-uppercase dynamic-bold dynamic-margin-bottom-extra-small\">inputs</div>\n                <div class=\"dynamic-text-uppercase dynamic-bold dynamic-margin-bottom-extra-small\">outputs</div>\n\n                <div>\n                    <div *ngFor=\"let input of stat.inputs | keyvalue\" class=\"dynamic-margin-bottom-extra-small\">\n                        <div class=\"dynamic-semi-bold\">{{input.key}}:</div>\n                        <div class=\"formatted-json\">{{input.value | jsonFormatted}}</div>\n                    </div>\n                </div>\n\n                <div>\n                    <div *ngFor=\"let output of stat.outputs | keyvalue\" class=\"dynamic-margin-bottom-extra-small\">\n                        <div class=\"dynamic-semi-bold dynamic-flex-row dynamic-align-items-center\">\n                            <div>{{output.key}}:</div>\n                            <div tooltip=\"skip init\" class=\"dynamic-margin-left-extra-small fas fa-forward\" [class.inactive-flag]=\"!output.value.skipInit\"></div>\n                            <div tooltip=\"assigned\" class=\"dynamic-margin-left-extra-small fas fa-check-to-slot\" [class.inactive-flag]=\"!output.value.assigned\"></div>\n                        </div>\n\n                        <div class=\"formatted-json\">{{output.value.value | jsonFormatted}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, inject, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BodyRenderSADirective, PositionPlacement, PositionToSADirective, TooltipModule, TooltipOptions} from '@anglr/common';\nimport {RelationsComponentEndpoints, RelationsComponentStateDebugInfo, RelationsDebugger, RelationsStepDebugInfo} from '@anglr/dynamic/relations';\nimport {RelationsNode, RelationsNodeBase} from '@anglr/dynamic/relations-editor';\nimport {Subscription} from 'rxjs';\n\nimport {JsonFormattedSAPipe} from '../../../pipes';\nimport {RelationNodeInputDebugSAComponent, RelationNodeOutputDebugSAComponent} from '../../../components';\n\n/**\n * Relations node component for debugger node\n */\n@Component(\n{\n    selector: 'debugger-node',\n    templateUrl: 'debuggerNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        RelationNodeInputDebugSAComponent,\n        RelationNodeOutputDebugSAComponent,\n        JsonFormattedSAPipe,\n        PositionToSADirective,\n        BodyRenderSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DebuggerNodeSAComponent extends RelationsNodeBase implements RelationsNode, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Instance of relations debugger\n     */\n    protected relationsDebugger: RelationsDebugger = inject(RelationsDebugger);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether was this relations component already registered\n     */\n    protected registered: boolean = false;\n\n    /**\n     * Name of input that is currently part of data transfer\n     */\n    protected transferInput: string|undefined|null;\n\n    /**\n     * Name of output that is currently part of data transfer\n     */\n    protected transferOutput: string|undefined|null;\n\n    /**\n     * Instance of component definition\n     */\n    protected componentDef: RelationsComponentEndpoints|undefined|null;\n\n    /**\n     * Array of component ids\n     */\n    protected components: string[] = [];\n\n    /**\n     * Information about currently displayed step\n     */\n    protected step: RelationsStepDebugInfo|undefined|null;\n\n    /**\n     * Current state of all components\n     */\n    protected state: RelationsComponentStateDebugInfo[] = [];\n\n    /**\n     * Tooltip options\n     */\n    protected tooltipOptions: Partial<TooltipOptions> =\n    {\n        position:\n        {\n            placement: PositionPlacement.TopStart,\n            offset: 'None',\n        },\n        allowSelection: true,\n        tooltipCssClass: 'relations-debugger-tooltip',\n    };\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override ngOnDestroy(): void\n    {\n        super.ngOnDestroy();\n\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override initialize(): void\n    {\n        this.initSubscriptions.add(this.relationsDebugger.stepChange.subscribe(() => this.readNodesData()));\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        this.componentDef = this.relationsDebugger.getComponentDef(this.metadata.id);\n        this.readNodesData();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Reads node data for current step\n     */\n    protected readNodesData(): void\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        const components = this.relationsDebugger.getCurrentComponents();\n\n        //unregistered\n        if(!components[this.metadata.id])\n        {\n            this.element.nativeElement.classList.add('unregistered');\n            this.registered = false;\n\n            return;\n        }\n\n        this.registered = true;\n        this.element.nativeElement.classList.remove('unregistered');\n        this.step = this.relationsDebugger.getCurrentStep();\n\n        //registration step\n        if(this.step?.componentRegistration?.componentId == this.metadata.id)\n        {\n            this.element.nativeElement.classList.add('registration-step');\n        }\n        else\n        {\n            this.element.nativeElement.classList.remove('registration-step');\n        }\n\n        //input transfer data step\n        if(this.step?.dataTransfer?.inputComponentId == this.metadata.id)\n        {\n            this.transferInput = this.step.dataTransfer.inputName;\n        }\n        else\n        {\n            this.transferInput = null;\n        }\n\n        //output transfer data step\n        if(this.step?.dataTransfer?.outputComponentId == this.metadata.id)\n        {\n            this.transferOutput = this.step.dataTransfer.outputName;\n        }\n        else\n        {\n            this.transferOutput = null;\n        }\n\n        this.state = this.relationsDebugger.getComponentState(this.metadata.id);\n        this.components = components[this.metadata.id] ?? [];\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DebuggerNodeSAComponent} from '../node/debuggerNode.component';\n\n/**\n * Debugger node relations metadata\n */\nexport class DebuggerNodeRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Debugger node',\n        description: 'Displaying debug info for node',\n        group: 'Debug',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DebuggerNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    protected canvas: RelationsCanvasSAComponent = inject(RelationsCanvasSAComponent);\n\n    /**\n     * Canvas position change subscription\n     */\n    protected canvasPositionChangeSubscription: Subscription|null|undefined = null;\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether user moved node during drag\n     */\n    protected moved: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseMovePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Last mouse down offset position\n     */\n    protected lastMouseDownOffset: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    /**\n     * Node bounding box\n     */\n    public get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.moved = false;\n        this.isDragging = true;\n\n        this.lastMouseDownOffset =\n        {\n            x: event.clientX - this.boundingBox.left,\n            y: event.clientY - this.boundingBox.top\n        };\n\n        this.canvasPositionChangeSubscription = this.canvas.convasPositionChanged.subscribe(() => \n        {\n            this.nodePosition = this.canvas.getPositionInCanvas({\n                x: this.lastMouseMovePosition.x - this.lastMouseDownOffset.x,\n                y: this.lastMouseMovePosition.y - this.lastMouseDownOffset.y,\n            });\n\n            this.invalidateVisuals();\n\n            this.updatePosition();\n            this.updateRelations();\n        });\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.moved = true;\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            this.nodePosition = this.canvas.getPositionInCanvas({\n                x: this.lastMouseMovePosition.x - this.lastMouseDownOffset.x,\n                y: this.lastMouseMovePosition.y - this.lastMouseDownOffset.y,\n            });\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            if(this.moved)\n            {\n                this.history.getNewState();\n            }\n\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Canvas position change subscription\n     */\n    protected canvasPositionChangeSubscription: Subscription|null = null;\n\n    /**\n     * Node relation\n     */\n    protected relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected isHighlighted: boolean = false;\n\n    /**\n     * Last mouse move position\n     */\n    protected lastMouseMovePosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>,\n                protected relationManager: RelationsNodeManager,\n                protected canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this.element.nativeElement.offsetLeft + this.element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this.element.nativeElement.offsetTop + this.element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this.isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this.isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.relation)\n        {\n            this.relation.destroy();\n        }\n\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this.relation)\n        {\n            //Same relation\n            if (this.relation.start?.x === relation.start?.x &&\n                this.relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this.relation.destroy();\n        }\n\n        this.relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this.relation)\n        {\n            return;\n        }\n\n        this.relation.end = this.getCoordinates();\n        this.relation.input = this;\n        this.relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this.relationManager.setActiveInput(this);\n        }\n\n        this.relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this.relationManager.setActiveInput(null);\n        }\n\n        this.relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._tempRelation = this.relation;\n        this.relation = null;\n        this.isDragging = true;\n\n        this.canvasPositionChangeSubscription = this.canvas?.convasPositionChanged.subscribe(() => \n        {\n            if (this._tempRelation)\n            {\n                this._tempRelation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n\n                this._tempRelation.invalidateVisuals();\n            }\n        });\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n//TODO: optimize window events, do not register for all time\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected ɵrelations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this.ɵrelations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵrelations)\n        {\n            const relations = [...this.ɵrelations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this.canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this.ɵrelations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this.ɵrelations.splice(index, 1);\n            }\n        });\n\n        this.ɵrelations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this.ɵrelations)\n        {\n            return;\n        }\n\n        for (const relation of this.ɵrelations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.isDragging = true;\n        this.canvasPositionChangeSubscription = this.canvas?.convasPositionChanged.subscribe(() => \n        {\n            if (this.relation)\n            {\n                this.relation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n                this.relation.invalidateVisuals();\n            }\n        });\n\n        this.relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this.ɵrelations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this.ɵrelations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this.isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            if (this.relation)\n            {\n                this.relation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n                this.relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["JsonFormattedSAPipe","transform","value","JSON","stringify","undefined","pure","standalone","RelationNodeInputDebugSAComponent","RelationNodeInputSAComponent","constructor","transferHighlight","relationDebug","this","relation","htmlElement","element","nativeElement","ngOnChanges","changes","nameof","highlight","createTransferOverlay","cancelHighlight","destroyTransferOverlay","addRelation","result","super","t","selectors","inputs","features","i0","provide","useExisting","forwardRef","decls","vars","template","rf","ctx","encapsulation","changeDetection","RelationNodeOutputDebugSAComponent","RelationNodeOutputSAComponent","ctx_r2","transferInput","input_r4","nodePosition","zoomLevel","_r7","output_r5","ctx_r8","step","dataTransfer","scope","change","firstChange","previousValue","currentValue","DebuggerNodeSAComponent_div_4_div_4_ng_container_1_div_1_Template","DebuggerNodeSAComponent_div_4_div_4_ng_container_1_Template","ctx_r3","transferOutput","DebuggerNodeSAComponent_div_4_div_2_Template","DebuggerNodeSAComponent_div_4_div_4_Template","ctx_r0","componentDef","outputs","input_r14","key","output_r15","skipInit","assigned","DebuggerNodeSAComponent_div_6_div_3_div_14_Template","DebuggerNodeSAComponent_div_6_div_3_div_17_Template","stat_r11","componentInternalId","ctx_r10","metadata","relationsOptions","DebuggerNodeSAComponent_div_6_div_3_Template","ctx_r1","id","state","DebuggerNodeSAComponent","RelationsNodeBase","initSubscriptions","Subscription","relationsDebugger","inject","RelationsDebugger","registered","components","tooltipOptions","position","placement","PositionPlacement","TopStart","offset","allowSelection","tooltipCssClass","ngOnDestroy","unsubscribe","initialize","add","stepChange","subscribe","readNodesData","metadataSet","getComponentDef","getCurrentComponents","classList","remove","getCurrentStep","componentRegistration","componentId","inputComponentId","inputName","outputComponentId","outputName","getComponentState","consts","DebuggerNodeSAComponent_div_4_Template","DebuggerNodeSAComponent_div_6_Template","name","CommonModule","i1","TooltipModule","i2","PositionToSADirective","BodyRenderSADirective","DebuggerNodeRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","allOutputs","ɵAllOutputs","ɵInputs","ɵOutputs","destroy","destroySubject","asObservable","boundingBox","getBoundingClientRect","changeDetector","canvas","RelationsCanvasSAComponent","canvasPositionChangeSubscription","history","RELATIONS_HISTORY_MANAGER","initialized","isDragging","moved","lastMouseMovePosition","x","y","lastMouseDownOffset","Subject","updatePosition","observer","ResizeObserver","updateRelations","observe","nodeMetadata","coordinates","disconnect","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","left","clientY","top","convasPositionChanged","getPositionInCanvas","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","updateOutputs","outputsChildren","toArray","output","updateRelation","style","viewQuery","$event","RelationNodeEndpointBase","parentId","parent","relationManager","isHighlighted","parentCoordiantes","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","hostVars","hostBindings","start","endRelation","end","_onMouseEnter","buttons","MouseButton","LEFT","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","ɵrelations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}