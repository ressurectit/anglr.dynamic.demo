{"version":3,"file":"43.chunk.4fc26c5e3b6fb68bcd40.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts"],"sourcesContent":["import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\n\n/**\n * If block model for properties editor\n */\nexport class IfBlockModel implements IfBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Condition')\n    @LayoutPropertyDescription('Initial value of condition used for displaying content of if block')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public condition: boolean|undefined|null = true;\n    \n    //######################### constructor #########################\n    constructor(value: IfBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {genericPropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\nimport {IfBlockModel} from './ifBlock.model';\n\n/**\n * If block layout metadata\n */\nexport class IfBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<IfBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<IfBlockComponentOptions> =\n    {\n        name: 'If',\n        description: 'If block - conditionally displays content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: IfBlockModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<IfBlockModel>(['condition']),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            condition: true,\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, IfBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [IfBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [IfBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, IfBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Dictionary, extend, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}",null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n"],"names":["IfBlockModel","constructor","value","condition","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","IfBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","genericPropertiesControlFor","defaultOptions","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","DynamicPropertyMetadata","LayoutPropertyMetadata","type","InputBooleanComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","Symbol","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","LOGGER","inputs","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","standalone","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","detectChanges","form","_control","_controlSet","val_r1","ReactiveFormsModule","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","extractMetadata","cacheId","package","loadItem","metadataType","data","layoutEditorMetadata","warn","metadataData","LAYOUT_COMPONENTS_LOADER","property","ngDesignerMetadata","target","propertyKey","Reflect","get","propertyMetadata","extend","has","defineProperty","noop","AsFormControlPipe","transform","_valueHash","isBlank","FormControl","AsRequiredTypePipe","defaultValue","TooltipComponent","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","cssClass","nativeElement","classList","add","mouseEnter","mouseLeave","TOOLTIP_OPTIONS","TooltipTemplateDirective","_dir","_ctx","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_injector","_animationsPlayer","_document","_position","_showRequest","_keepOpen","_timeout","_options","_enterAnimation","build","_exitAnimation","tooltipOptions","changes","nameof","tooltipVisible","_showTooltip","_hideTooltip","clearTimeout","_destroyTooltip","event","setTimeout","mouseMove","_tooltipComponent","isPresent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","element","create","onDone","undefined","play","hostView","rootNodes","body","appendChild","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","assign","style","top","left","x","y"],"sourceRoot":""}