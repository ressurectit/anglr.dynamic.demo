{"version":3,"file":"4423.chunk.cc491770564bc632380c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/cdk/coercion/boolean-property.ts","webpack://ng-universal-demo/../../../../src/cdk/collections/unique-selection-dispatcher.ts","webpack://ng-universal-demo/../../../../src/material/core/common-behaviors/tabindex.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-animations.ts","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion-module.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-module.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-header.ts","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion.ts","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion-item.ts","webpack://ng-universal-demo/../../../../src/material/expansion/accordion-base.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-base.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-content.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel.html"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Constructor, AbstractConstructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n\n  /** Tabindex to which to fall back to if no value is set. */\n  defaultTabIndex: number;\n}\n\ntype HasTabIndexCtor = Constructor<HasTabIndex> & AbstractConstructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends AbstractConstructor<CanDisable>>(\n  base: T,\n  defaultTabIndex?: number,\n): HasTabIndexCtor & T;\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(\n  base: T,\n  defaultTabIndex = 0,\n): HasTabIndexCtor & T {\n  return class extends base implements HasTabIndex {\n    private _tabIndex: number = defaultTabIndex;\n    defaultTabIndex = defaultTabIndex;\n\n    get tabIndex(): number {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    // Clear the `visibility` while open, otherwise the content will be visible when placed in\n    // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n    // that have a `visibility` of their own (see #27436).\n    state('expanded', style({height: '*', visibility: ''})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input({transform: booleanAttribute}) multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  booleanAttribute,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input({transform: booleanAttribute})\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n"],"names":["coerceBooleanProperty","value","UniqueSelectionDispatcher","constructor","_listeners","notify","id","name","listener","this","listen","push","filter","registered","ngOnDestroy","factory","ɵfac","providedIn","mixinTabIndex","base","defaultTabIndex","tabIndex","disabled","_tabIndex","coerceNumberProperty","args","super","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","CdkAccordionModule","MatExpansionModule","MatCommonModule","PortalModule","MatExpansionPanelHeader_Conditional_4_Template","rf","ctx","ctx_r0","_c0","_c1","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","_changeDetectorRef","defaultOptions","_animationMode","_parentChangeSubscription","Subscription","EMPTY","accordionHideToggleChange","accordion","_stateChanges","pipe","changes","parseInt","merge","opened","closed","_inputChanges","subscribe","markForCheck","_containsFocus","focusVia","expandedHeight","collapsedHeight","_toggle","toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_getHeaderHeight","isExpanded","_keydown","event","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","nativeElement","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","i1","i0","i2","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","ANIMATION_MODULE_TYPE","selectors","hostAttrs","hostVars","hostBindings","$event","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelDescription","MatExpansionPanelTitle","nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","Subject","_openCloseAllActions","multi","openAll","next","closeAll","ngOnChanges","complete","inputs","booleanAttribute","exportAs","features","provide","useExisting","CdkAccordionItem","_expanded","expandedChange","emit","accordionId","_expansionDispatcher","_openCloseAllSubscription","EventEmitter","destroyed","_removeUniqueSelectionListener","_subscribeToOpenCloseAllActions","close","open","outputs","useValue","undefined","MAT_ACCORDION","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","MatExpansionPanel_ng_template_5_Template","_c2","uniqueId","MatExpansionPanel","_hideToggle","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","afterExpand","afterCollapse","_headerId","_bodyAnimationDone","distinctUntilChanged","x","y","fromState","toState","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","_portal","take","TemplatePortal","_body","focusedElement","activeElement","bodyElement","contains","DOCUMENT","contentQueries","dirIndex","_t","dependencies","MatExpansionPanelActionRow"],"sourceRoot":""}