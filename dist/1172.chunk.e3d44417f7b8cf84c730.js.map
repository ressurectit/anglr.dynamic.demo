{"version":3,"file":"1172.chunk.e3d44417f7b8cf84c730.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/metadata/syncValues.relationsMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\n\n/**\n * Rest relations options model\n */\nexport class SyncValuesRelationsOptionsModel implements SyncValuesRelationsOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public triggerSync: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public idleTimeout: number|undefined|null = 0;\n\n    /**\n     * @inheritdoc\n     */\n    public syncProperties: string[]|null|undefined;\n    \n    //######################### constructor #########################\n    constructor(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component used for displaying configuration of sync property\n */\n@Component(\n{\n    selector: 'configure-sync-property',\n    templateUrl: 'configureSyncProperty.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureSyncPropertySAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is bound sync property name\n     */\n    protected control: FormControl<string> = new FormControl();\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) data: string,)\n    {\n        this.control.setValue(data);\n    }\n}","<div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n    <label class=\"dynamic-control-label dynamic-text-uppercase\">name</label>\n    <input type=\"text\" class=\"dynamic-form-control\" [formControl]=\"control\">\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"control.value\">\n        <span>ok</span>\n    </button>\n</div>","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"sync values\"></relations-node-header>\n\n<div class=\"node-content\" [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">sync on</label>\n        \n        <select class=\"dynamic-form-control\" formControlName=\"triggerSync\">\n            <option [ngValue]=\"false\">idle</option>\n            <option [ngValue]=\"true\">trigger</option>\n        </select>\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"!metadata?.relationsOptions?.triggerSync\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">idle timeout</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"idleTimeout\" number required>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addProperty()\">\n        <span class=\"fas fa-plus\"></span>\n    </button>\n\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <ng-container *ngFor=\"let property of metadata?.relationsOptions?.syncProperties; let index=index\">\n                <div class=\"input\">\n                    <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"property\" [parent]=\"this\"></relation-node-input>\n                    <div>{{property}}</div>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); configureSyncProperty(index)\">\n                        <span class=\"fas fa-cog\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeProperty(index)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n            </ng-container>\n\n            <div class=\"input\" *ngIf=\"metadata?.relationsOptions?.triggerSync\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"trigger\" [parent]=\"this\"></relation-node-input>\n                <div>trigger</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <ng-container *ngFor=\"let property of metadata?.relationsOptions?.syncProperties\">\n                <div class=\"output\">\n                    <div>{{property}}</div>\n                    <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"property\" [parent]=\"this\"></relation-node-output>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup, NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\nimport {SyncValuesRelationsOptionsModel} from './syncValuesNode.model';\nimport {ConfigureSyncPropertySAComponent} from '../misc/components';\n\n/**\n * Sync values node component for negation\n */\n@Component(\n{\n    selector: 'sync-values-node',\n    templateUrl: 'syncValuesNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncValuesNodeSAComponent extends RelationsNodeBase<SyncValuesRelationsOptions> implements RelationsNode<SyncValuesRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form that is being used\n     */\n    protected form: FormGroup<FormModelGroup<SyncValuesRelationsOptions>>;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n        super(changeDetector, element);\n\n        this.form = formModelBuilder.build<SyncValuesRelationsOptions>(new SyncValuesRelationsOptionsModel(null));\n        this.form.valueChanges.subscribe(value =>\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                extend(this.metadata.relationsOptions, value);\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new property\n     */\n    protected async addProperty(): Promise<void>\n    {\n        await this.configureSyncProperty(this.metadata?.relationsOptions?.syncProperties?.length ?? 0);\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Removes property\n     * @param index - Index of property to be removed\n     */\n    protected removeProperty(index: number): void\n    {\n        if(!this.metadata?.relationsOptions?.syncProperties)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.syncProperties.splice(index, 1);\n        this.history.getNewState();\n    }\n\n    /**\n     * Configures sync property\n     * @param index - Index of sync property to be configured\n     */\n    protected async configureSyncProperty(index: number): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<ConfigureSyncPropertySAComponent, string, string|undefined|null>(ConfigureSyncPropertySAComponent,\n        {\n            title: 'configure sync property',\n            width: '60vw',\n            data: this.metadata?.relationsOptions?.syncProperties?.[index] ?? ''\n        }).afterClosed());\n\n        if(isPresent(result) && this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.syncProperties ??= [];\n            this.metadata.relationsOptions.syncProperties[index] = result;\n            this.history.getNewState();\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        this.form.patchValue(this.metadata.relationsOptions);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {SyncValuesNodeSAComponent} from '../node/syncValuesNode.component';\n\n/**\n * Sync values relations metadata\n */\nexport class SyncValuesRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Sync values',\n        description: 'Sync values, allowing triggered changes run at once',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = SyncValuesNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()'\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * Sets value to select\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * Registers callback that is called when value of select changes\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * Registers callback that is called when select is closed\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}"],"names":["SyncValuesRelationsOptionsModel","constructor","value","triggerSync","idleTimeout","mapValuesToThis","this","ConfigureSyncPropertySAComponent","data","control","FormControl","setValue","i0","TITLED_DIALOG_DATA","selectors","standalone","features","decls","vars","consts","template","ReactiveFormsModule","i1","MatDialogModule","i2","encapsulation","changeDetection","$event","preventDefault","stopPropagation","ctx_r1","property_r4","ctx_r2","ctx_r3","property_r9","SyncValuesNodeSAComponent","RelationsNodeBase","changeDetector","element","dialog","formModelBuilder","super","form","build","valueChanges","subscribe","metadata","relationsOptions","extend","history","getNewState","addProperty","configureSyncProperty","syncProperties","length","detectChanges","removeProperty","index","splice","result","lastValueFrom","open","title","width","afterClosed","isPresent","_a","metadataSet","patchValue","FormModelBuilder","ctx","CommonModule","i3","i4","NumberInputModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","SyncValuesRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","writeValue","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","isNaN","max","min","number","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","defaultValue","undefined","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","_injector","injector"],"sourceRoot":""}