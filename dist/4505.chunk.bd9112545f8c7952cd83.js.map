{"version":3,"file":"4505.chunk.bd9112545f8c7952cd83.js","mappings":"4VAMO,MAAMA,EAAuC,e,EAAAC,G,EAA6D,mBAAY,WAAW,uFAAyDC,wCAAyC,E,+KAAA,kBAAtL,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,yHCO7C,IAAMC,EAAN,MAgCHC,WAAAA,CAAsBC,GAAA,KAAAA,SAAAA,EAzBZ,KAAAC,mBAA8CC,KAAKF,SAASG,IAAIC,EAAAA,EAAoB,MAKpF,KAAAC,iBAAmDH,KAAKF,SAASG,IAAIG,EAAAA,EAA2B,MAKhG,KAAAC,GAAa,EAiBvB,CAOOC,WAAAA,CAAYC,GAEf,IAAI,MAAMC,KAAOC,OAAOC,KAAKH,GAEzBP,KAAKW,gBAAgBH,GAAOD,EAAQC,GAAKI,YAEjD,CAKOC,iBAAAA,GAEP,CAOOC,WAAAA,GAEAd,KAAKK,KAEJL,KAAKD,oBAAoBgB,iBAAiBf,KAAKK,IAC/CL,KAAKG,kBAAkBa,oBAAoBhB,KAAKK,IAExD,CASaY,WAAAA,CAAYC,EACAb,EACAM,GAAoB,I,EAAAQ,EAAA,Y,EAAA,YAKzC,GAHAA,EAAKd,GAAKA,EACVc,EAAKR,gBAAkBA,EAEnBQ,EAAKhB,kBAAqBgB,EAAKpB,mBAAnC,CAKA,IAAI,MAAMqB,KAAUF,EAAgBG,kBAAkBC,SAAW,GAE7Db,OAAOc,eAAeJ,EAAKR,gBACLS,EAAOI,KACP,CACIvB,IAAK,WAED,OAAOD,KAAK,IAAIoB,EAAOI,OAC3B,EACAC,IAAK,SAASC,GAEV1B,KAAK,IAAIoB,EAAOI,QAAUE,GAC1BC,EAAAA,EAAAA,IAAmB3B,KAAMoB,EAAOI,MAEhC,MAAM1B,EAAYE,KAA+B4B,WAEjD,IAAI9B,EAEA,OAGJ,MAAMK,EAAmBL,EAASG,IAAIG,EAAAA,GAChCyB,EAAiB/B,EAASG,IAAI6B,EAAAA,GAC9BzB,EAAKF,EAAiB4B,MAAM/B,MAE9BK,GAKJwB,EAAeG,aACf,CACIC,YAAa5B,EACb6B,WAAYd,EAAOI,MAE3B,IAG1Bf,OAAOc,eAAeJ,EAAKR,gBACL,GAAGS,EAAOI,aACV,CACIE,MAAO,IAAIS,EAAAA,SAIVC,IAAxBhB,EAAOiB,eAELlB,EAAoBC,EAAOI,MAAQJ,EAAOiB,cAG5CjB,EAAOkB,WAENC,EAAAA,EAAAA,IAAmBpB,EAAKR,gBAAiBS,EAAOI,MAIxDL,EAAKhB,iBAAiBqC,kBAAkBrB,EAAKd,GAAIc,SAC3CA,EAAKpB,mBAAmB0C,YAC9BtB,EAAKpB,mBAAmB2C,gBAAgBvB,EAAKd,G,CAAI,E,gLACrD,GApJST,GAAyB+C,EAAAA,EAAAA,IAAA,EADrCC,EAAAA,EAAAA,GAAwBrD,IAAwC,6BAiC7BsD,EAAAA,KAhCvBjD,E,gDCXb,Q,SAAwC,C","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsProcessor, RelationsWithInjector} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: output.name,\n                                          });\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {ComponentOutputsRelations} from './componentOutputs.relations';\n\nexport default ComponentOutputsRelations;\n"],"names":["ComponentOutputsRelationsMetadataLoader","_ref","ComponentOutputsRelationsEditorMetadata","apply","arguments","ComponentOutputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","customComponent","currentValue","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initOutputs","outputRelations","_this","output","relationsOptions","outputs","defineProperty","name","set","value","defineAssignedProp","ɵɵinjector","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","__decorate","RelationsEditorMetadata","Injector"],"sourceRoot":""}