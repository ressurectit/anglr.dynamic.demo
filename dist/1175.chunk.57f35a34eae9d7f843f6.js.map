{"version":3,"file":"1175.chunk.57f35a34eae9d7f843f6.js","mappings":"oUAAAA,EAAAA,GAAA,E,CCyBM,MAAOC,UAAqCC,EAAAA,EAZlDC,WAAAA,G,oBAmBc,KAAAC,UAAsCC,EAAAA,EAAAA,IAAOC,EAAAA,E,CAOpCC,MAAAA,G,MAEXC,KAAKJ,SAASK,WAKlBC,EAAAF,KAAKJ,SAASK,QAAQE,cAAaC,QAAKF,EAALE,OAAUC,EAAAA,EAAAA,IAAW,KAC5D,E,wDAtBSZ,KAA4Ba,GAA5Bb,EAA4B,G,qBAA5BA,EAA4Bc,UAAA,0BAAAC,YAAA,EAAAC,SAAA,CAAAjB,EAAAA,EAAAA,EAAAA,GAAAkB,MAAA,EAAAC,KAAA,EAAAC,OAAA,gCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GDzBzCtB,EAAAA,EAAA,EAAAwB,EAAA,sB,KAAexB,EAAAA,EAAA,gCAAAuB,EAAAd,QAAA,KAAAc,EAAAd,QAAAY,S,gBCqBPI,EAAAA,GAAkCC,OAAA,sCAAAC,gBAAA,G,6FCRpC,MAAOC,EAkBTzB,WAAAA,CAAsB0B,EACAC,GADA,KAAAD,YAAAA,EACA,KAAAC,QAAAA,EAZZ,KAAAC,kBAAkC,IAAIC,EAAAA,GAQzC,KAAAC,YAAsB,CAM7B,CAOOC,QAAAA,GAEH1B,KAAKuB,kBAAkBI,IAAI3B,KAAKqB,YAAYO,eAAeC,WAAU,IAAM7B,KAAK8B,qBACpF,CAOOC,WAAAA,GAEH/B,KAAKuB,kBAAkBS,aAC3B,CAOUF,gBAAAA,GAING,YAAW,KAEJjC,KAAKqB,YAAYa,UAAYlC,KAAKyB,WAEjCzB,KAAKsB,QAAQa,cAAcC,UAAUT,IAAI,eAIzC3B,KAAKsB,QAAQa,cAAcC,UAAUC,OAAO,c,GAGxD,E,iCA/DSjB,GAA2B5B,EAAAA,EAAA8C,EAAAA,GAAA9C,EAAAA,EAAAA,EAAAA,IAAA,E,kBAA3B4B,EAA2Bb,UAAA,6BAAAgC,OAAA,CAAAd,WAAA,cAAAjB,YAAA,G,6DCclC,MAAOgC,G,iCAAAA,EAAmB,E,kBAAnBA,I,2EClBP,MAAOC,EADb9C,WAAAA,GAQc,KAAA+C,sBAAiD,IAAIC,EAAAA,EAKrD,KAAAC,uBAAsD,KAKtD,KAAAC,iCAAoE,IAAIF,EAAAA,EAKxE,KAAAG,iCAAoE,IAAIH,EAAAA,C,CAOlF,kBAAWI,GAEP,OAAO/C,KAAK0C,sBAAsBM,cACtC,CAKA,mCAAWC,GAEP,OAAOjD,KAAK6C,iCACPG,cACT,CAKA,mCAAWE,GAEP,OAAOlD,KAAK8C,iCACPE,cACT,CAKA,+BAAWG,GAEP,OAAOnD,KAAK4C,wBAAwBQ,OAAS,IACjD,CAQOC,WAAAA,CAAYC,GAEftD,KAAK0C,sBAAsBa,KAAKD,EACpC,CAMOE,yBAAAA,CAA0BF,GAG1BA,GAAMF,QAAUpD,KAAK4C,wBAAwBQ,OAASE,GAAMG,WAAazD,KAAK4C,wBAAwBa,WAKtGzD,KAAK4C,wBAEJ5C,KAAK8C,iCAAiCS,KAAKvD,KAAK4C,wBAGpD5C,KAAK4C,uBAAyBU,EAE3BtD,KAAK4C,wBAEJ5C,KAAK6C,iCAAiCU,KAAKvD,KAAK4C,wBAExD,E,iCA9FSH,EAAa,E,oBAAbA,EAAaiB,QAAbjB,EAAakB,M","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/designer/listBlockDesigner.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/designer/listBlockDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts"],"sourcesContent":["<ng-container *layoutComponentRenderer=\"options?.template\"/>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutDesignerSAComponent} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from '../listBlock.options';\nimport {ListBlockSAComponent} from '../listBlock.component';\n\n/**\n * Component used for displaying list block designer\n */\n@Component(\n{\n    selector: 'list-block-designer',\n    templateUrl: 'listBlockDesigner.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListBlockDesignerSAComponent extends ListBlockSAComponent implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of designer component\n     */\n    protected designer: LayoutDesignerSAComponent = inject(LayoutDesignerSAComponent);\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        if(!this.designer.options)\n        {\n            return;\n        }\n\n        this.designer.options.typeMetadata.scope ??= generateId(10);\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}"],"names":["i0","ListBlockDesignerSAComponent","ListBlockSAComponent","constructor","designer","inject","LayoutDesignerSAComponent","onInit","this","options","_a","typeMetadata","scope","generateId","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ListBlockDesignerSAComponent_ng_container_0_Template","LayoutComponentRendererSADirective","styles","changeDetection","DesignerDropzoneSADirective","draggingSvc","element","initSubscriptions","Subscription","isDropZone","ngOnInit","add","draggingChange","subscribe","processDragValue","ngOnDestroy","unsubscribe","setTimeout","dragging","nativeElement","classList","remove","i1","inputs","LayoutDndCoreModule","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","dropDataChange","asObservable","newDropPlaceholderPreviewChange","oldDropPlaceholderPreviewChange","dropPlaceholderPreviewIndex","index","setDropData","data","next","setDropPlaceholderPreview","parentId","factory","ɵfac"],"sourceRoot":""}