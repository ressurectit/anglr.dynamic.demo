{"version":3,"file":"3036.chunk.46d17c2152094a985017.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/metadata/ifBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts"],"sourcesContent":["import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\n\n/**\n * If block model for properties editor\n */\nexport class IfBlockModel implements IfBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Condition')\n    @LayoutPropertyDescription('Initial value of condition used for displaying content of if block')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public condition: boolean|undefined|null = true;\n    \n    //######################### constructor #########################\n    constructor(value: IfBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {genericPropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from '../ifBlock.options';\nimport {IfBlockModel} from './ifBlock.model';\n\n/**\n * If block layout metadata\n */\nexport class IfBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<IfBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<IfBlockComponentOptions> =\n    {\n        name: 'If',\n        description: 'If block - conditionally displays content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: IfBlockModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<IfBlockModel>(['condition']),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            condition: true,\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, IfBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [IfBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [IfBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, IfBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}",null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n"],"names":["IfBlockModel","constructor","value","condition","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","IfBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","genericPropertiesControlFor","defaultOptions","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","AsFormControlPipe","_logger","transform","_valueHash","isBlank","FormControl","warn","LOGGER","AsRequiredTypePipe","defaultValue","TooltipComponent","_changeDetector","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","invalidateVisuals","cssClass","nativeElement","classList","add","detectChanges","mouseEnter","mouseLeave","i0","i1","TOOLTIP_OPTIONS","InjectionToken","TooltipTemplateDirective","template","_dir","_ctx","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_viewContainerRef","_injector","_animationsPlayer","_document","_position","_showRequest","_keepOpen","_timeout","_options","extend","_enterAnimation","build","_exitAnimation","tooltipOptions","ngOnChanges","changes","nameof","tooltipVisible","_showTooltip","_hideTooltip","ngOnDestroy","clearTimeout","_destroyTooltip","event","setTimeout","mouseMove","_tooltipComponent","isPresent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","component","element","create","onDone","destroy","undefined","play","createComponent","injector","hostView","rootNodes","body","appendChild","instance","data","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","assign","target","style","top","left","x","y"],"sourceRoot":""}