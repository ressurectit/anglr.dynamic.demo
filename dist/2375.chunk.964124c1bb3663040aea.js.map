{"version":3,"file":"2375.chunk.964124c1bb3663040aea.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts"],"sourcesContent":["import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject, LayoutPropertyType} from '../../decorators';\nimport {DefaultKnownPropertyTypes, LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    @LayoutPropertyName('Css class')\n    @LayoutPropertyDescription('Css class that should be applied to component')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public cssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\nimport {LayoutComponentMetadata} from '../../../layout/src';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number [control]=\"_value\"></input-number> <select-value [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<div>Margin</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div class=\"form-group\">\n    <label class=\"control-label\">{{propertiesMetadata?.cssClass?.name ?? 'cssClass'}} <span *ngIf=\"propertiesMetadata?.cssClass?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.cssClass?.description\"></span></label>\n    <input-string [control]=\"form?.controls?.cssClass | asRequired\"></input-string>\n</div>\n\n<margin-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","<div>Padding</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"form-group\">\n        <label class=\"control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Dictionary, extend, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}"],"names":["LayoutPropertyDescription","description","DynamicPropertyMetadata","LayoutPropertyMetadata","LayoutPropertyName","name","LayoutPropertyType","type","LayoutPropertyObject","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","object","MarginModel","constructor","value","top","right","bottom","left","mapValuesToThis","this","__decorate","PaddingModel","ComponentStylingModel","cssClass","margin","padding","textStyling","FormGroupProperty","InputBooleanComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","Symbol","InputNumberComponent","InputSizeComponent","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","control","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ComponentStylingPropertiesControlComponent","ctx","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","resolvePromiseOr","initialize","invalidateVisuals","destroy","LOGGER","inputs","DefaultGenericPropertiesControlComponent","properties","genericPropertiesControlFor","GenericPropertiesControl","standalone","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","detectChanges","val_r1","ReactiveFormsModule","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","extractMetadata","metadata","cacheId","package","loadItem","metadataType","data","layoutEditorMetadata","warn","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","property","ngDesignerMetadata","target","propertyKey","propertyMetadata","has","defineProperty","noop"],"sourceRoot":""}