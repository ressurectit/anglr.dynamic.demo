{"version":3,"file":"2081.chunk.99eb6869943a11139c72.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/pages/+layout/formPreview/formPreview.component.html","webpack://ng-universal-demo/./app/pages/+layout/formPreview/formPreview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+layout/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+layout/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+layout/layout.routes.ts","webpack://ng-universal-demo/./app/pages/+layout/layout.module.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleItemsProvider/defaultDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../material-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t4999,\n\t\t4999\n\t],\n\t\"./gridPanel/type\": [\n\t\t28229,\n\t\t8229\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t24229,\n\t\t4229\n\t],\n\t\"./htmlBlock/type\": [\n\t\t57195,\n\t\t7195\n\t],\n\t\"./ifBlock/type\": [\n\t\t23234,\n\t\t3234\n\t],\n\t\"./negation/type\": [\n\t\t82937,\n\t\t2937\n\t],\n\t\"./rest/type\": [\n\t\t97496,\n\t\t7496\n\t],\n\t\"./sampleChange/type\": [\n\t\t37243,\n\t\t7243\n\t],\n\t\"./sampleSource/type\": [\n\t\t36736,\n\t\t6736\n\t],\n\t\"./stackPanel/type\": [\n\t\t54335,\n\t\t4335\n\t],\n\t\"./templateBlock/type\": [\n\t\t14243,\n\t\t4243\n\t],\n\t\"./textBlock/type\": [\n\t\t88127,\n\t\t8127\n\t],\n\t\"./toggleButton/type\": [\n\t\t77964,\n\t\t7964\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 78391;\nmodule.exports = webpackAsyncContext;","import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_formGroup\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button class=\"button\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\n\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'formPreview.component.html',\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _injector: Injector,\n                private _formComponentControlBuilder: FormComponentControlBuilder,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(async ({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n                this._formGroup = await this._formComponentControlBuilder.build(this._metadata);\n        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n                this._changeDetector.detectChanges();\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/layout', 'form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Form submission\n     */\n    protected _submit(): void\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/layout/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {FormPreviewComponent} from './formPreview/formPreview.component';\nimport {PreviewComponent} from './preview/preview.component';\n\nexport const components =\n[\n    PreviewComponent,\n    FormPreviewComponent,\n];","import {FactoryProvider, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {DynamicLayoutModule, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {provideCssLayout} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayout} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayout} from '@anglr/dynamic/handlebars-components';\nimport {provideFormLayout} from '@anglr/dynamic/form';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {components} from './layout.routes';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout preview samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NgSelectModule,\n        LayoutComponentRendererSADirective,\n        DynamicLayoutModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideCssLayout(),\n        provideTinyMceLayout(),\n        provideHandlebarsLayout(),\n        provideFormLayout(),\n    ],\n})\n@ModuleRoutes(components)\nexport class LayoutModule\n{\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/form/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('@anglr/dynamic/form/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in module items\n */\n@Injectable()\nexport class DefaultDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'basic-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/basic-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            case 'material-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n        \n                    const dynamicItemModule = await import(`@anglr/dynamic/material-components/dynamicItems/${source.name}/type`);\n        \n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger?: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger?.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger?.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await asyncDynamicModule;\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await fn(module, this._logger));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}",null,"var map = {\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./checkbox/type\": [\n\t\t67309,\n\t\t7701,\n\t\t7309\n\t],\n\t\"./datepicker/type\": [\n\t\t2229,\n\t\t4855,\n\t\t9101,\n\t\t4262,\n\t\t6038,\n\t\t5175,\n\t\t2229\n\t],\n\t\"./expansionPanel/type\": [\n\t\t52868,\n\t\t6594,\n\t\t2868\n\t],\n\t\"./numberField/type\": [\n\t\t39310,\n\t\t4855,\n\t\t4262,\n\t\t5175,\n\t\t9310\n\t],\n\t\"./period/type\": [\n\t\t40059,\n\t\t4855,\n\t\t4262,\n\t\t5175,\n\t\t59\n\t],\n\t\"./radio/type\": [\n\t\t84978,\n\t\t1752,\n\t\t4978\n\t],\n\t\"./select/type\": [\n\t\t68235,\n\t\t4855,\n\t\t5887,\n\t\t5175,\n\t\t8235\n\t],\n\t\"./textField/type\": [\n\t\t98865,\n\t\t4855,\n\t\t4262,\n\t\t5175,\n\t\t8865\n\t],\n\t\"./textarea/type\": [\n\t\t18226,\n\t\t4855,\n\t\t4262,\n\t\t5175,\n\t\t8226\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 15033;\nmodule.exports = webpackAsyncContext;","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","FormComponentControlBuilder","constructor","_iteratorsSvc","build","layoutMetadata","formGroup","FormGroup","activeGroup","getIteratorFor","iteratorItem","controlName","_getControlName","metadata","control","_getControlForMetadata","_getActiveGroup","parent","addControl","parentIterator","group","parentControlName","this","get","options","controlType","FormComponentControlType","FormArray","FormControl","i0","factory","val_r2","ctx_r1","FormPreviewComponent","_store","_router","_route","_injector","_formComponentControlBuilder","_changeDetector","_available","_metadata","_availableNames","ngOnInit","getStored","params","subscribe","setValue","getData","_formGroup","_formInjector","Injector","providers","provide","FORM_COMPONENT_CONTROL","useValue","detectChanges","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","val_r1","selectors","features","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","decls","vars","consts","template","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","defineProperty","enumerable","configurable","writable","path","push","pathMatch","ComponentRoute","StoreDataService","Router","ActivatedRoute","ChangeDetectorRef","PreviewComponent","components","LayoutModule","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","createStoreDataServiceFactory","provideCssLayout","provideTinyMceLayout","provideHandlebarsLayout","provideFormLayout","imports","CommonModule","ReactiveFormsModule","NgSelectModule","DynamicLayoutModule","ModuleRoutes","InjectionToken","FormDynamicModuleItemsProvider","_logger","tryToGet","source","package","debug","name","LOGGER","FormDynamicModuleTypesProvider","moduleName","FORM_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideFormLayoutEditor","provideStaticPackageSource","getFormControl","parentControl","defaultControlType","defaultValue","getControlForType","type","_loader","_cache","extractMetadata","cacheId","loadItem","metadataType","data","layoutEditorMetadata","metadataData","freeze","LAYOUT_COMPONENTS_LOADER","DefaultDynamicModuleItemsProvider","DynamicItemLoader","extractors","validatorFn","logger","noCache","cachedDynamicItems","Array","isArray","error","dynamicModule","verbose","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","DynamicModuleDataExtractor","_extractorFunctions","result","fn","extend","isEmptyObject","NEVER","Observable","noop","all","slice","route","rt","component","AsRequiredTypePipe","transform","_valueHash"],"sourceRoot":""}