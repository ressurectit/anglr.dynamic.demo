{"version":3,"file":"1185.chunk.73ccd7da380442a7093c.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/textBlock/textBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/textBlock/textBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/textBlock/textBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/textBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\n\n/**\n * Text block layout metadata loader\n */\nexport const TextBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TextBlockComponentOptions>> = async () => new (await import('./metadata/textBlock.layoutMetadata')).TextBlockLayoutEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\nimport {TextBlockLayoutMetadataLoader} from './textBlock.metadata';\n\n/**\n * Component used for displaying text block\n */\n@Component(\n{\n    selector: 'text-block',\n    templateUrl: 'textBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(TextBlockLayoutMetadataLoader)\nexport class TextBlockSAComponent extends LayoutComponentBase<TextBlockComponentOptions> implements LayoutComponent<TextBlockComponentOptions>\n{\n}","{{options?.text ?? ''}}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TextBlockSAComponent} from './textBlock.component';\n\nexport default TextBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TextBlockLayoutMetadataLoader","_ref","TextBlockLayoutEditorMetadata","apply","arguments","TextBlockSAComponent","LayoutComponentBase","t","selectors","standalone","features","i0","decls","vars","template","rf","ctx","tmp_0_0","options","text","undefined","__decorate","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","this","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata","initialized","instance"],"sourceRoot":""}