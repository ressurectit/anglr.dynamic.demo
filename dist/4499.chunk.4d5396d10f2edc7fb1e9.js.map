{"version":3,"file":"4499.chunk.4d5396d10f2edc7fb1e9.js","mappings":"qUA6BM,MAAOA,EAGTC,WAAAA,CAAsBC,EACAC,GADA,KAAAD,iBAAAA,EACA,KAAAC,mBAAAA,CAEtB,CAOOC,WAAAA,GAEHC,KAAKH,iBAAiBE,cACtBC,KAAKF,mBAAmBG,cAC5B,E,iCAjBSN,GAA0BO,EAAAA,EAAAC,EAAAA,GAAAD,EAAAA,EAAAC,EAAAA,GAAA,E,kBAA1BR,EAA0BS,UAAA,4BAAAC,YAAA,EAAAC,SAAA,CAAAJ,EAAAA,EAfnC,CAEI,CACIK,QAASC,EAAAA,EACTC,WAAYA,KAAMC,EAAAA,EAAAA,IAAOF,EAAAA,EAA2B,CAACG,UAAU,IAAOC,WAAUF,EAAAA,EAAAA,IAAOG,EAAAA,MAG3F,CACIN,QAASO,EAAAA,EACTL,WAAYA,KAAMC,EAAAA,EAAAA,IAAOI,EAAAA,EAAoB,CAACH,UAAU,IAAOC,WAAUF,EAAAA,EAAAA,IAAOG,EAAAA,KAAWH,EAAAA,EAAAA,IAAOF,EAAAA,IAA4BE,EAAAA,EAAAA,IAAOK,EAAAA,KAEzIC,EAAAA,EACAC,EAAAA,O,gWCfD,MAAMC,EAA6B,eAAAC,EAAAC,GAAqF,mBAAY,WAAW,0DAA+CC,8BAA+B,sBAA1L,OAAAF,EAAAG,MAAA,KAAAC,UAAA,KAK7BC,EAAgC,eAAAC,EAAAL,GAA6D,mBAAY,WAAW,8EAAkDM,iCAAkC,sBAAxK,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAKhCI,EAAiC,eAAAC,EAAAR,GAAiD,yBAAmB,wDAAkDS,4BAA4B,sBAAlJ,OAAAD,EAAAN,MAAA,KAAAC,UAAA,K,eCHvC,IAAMO,EAAN,MAAAlC,WAAAA,GAeI,KAAAmC,MAAqB,KAMrB,KAAAC,MAAgB,EAMhB,KAAAC,OAAiB,EAMjB,KAAAC,MAAgB,CAQ3B,CAHWC,iBAAAA,GAEP,IAzBOC,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,4DAOTD,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,4DAOTD,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,6DAOTD,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,2DAhCPP,GAAkBM,EAAAA,EAAAA,IAAA,EAV9BE,EAAAA,EAAAA,GACD,CACIC,QACA,EACIC,EAAAA,EAAAA,IAA2B,UAC3BA,EAAAA,EAAAA,IAA2B,UAC3BA,EAAAA,EAAAA,IAA2B,UAC3BA,EAAAA,EAAAA,IAA2B,YAGtBV,G,wICJP,MAAOW,EALb7C,WAAAA,GAYc,KAAA8C,aAAuB,EAKvB,KAAA7C,kBAA8Ca,EAAAA,EAAAA,IAAOF,EAAAA,GAKrD,KAAAV,oBAAyCY,EAAAA,EAAAA,IAAOI,EAAAA,GAKhD,KAAA6B,UAAgC,IAAIb,EAQvC,KAAAC,MAAqB,KAMrB,KAAAC,MAAgB,EAMhB,KAAAC,OAAiB,EAMjB,KAAAC,MAAgB,EAMhB,KAAAU,YAAsB,E,CAOhBC,WAAAA,CAAYC,GAAsB,I,EAAAC,EAAA,Y,EAAA,aAExCP,EAAAA,EAAAA,IAA2C,iBAAkBM,IAAYC,EAAKL,aAAeK,EAAKH,cAEjGG,EAAKL,aAAc,EAEnBK,EAAKlD,iBAAiBmD,kBAAkBD,EAAKH,YAAaG,EAAKJ,iBACzDI,EAAKjD,mBAAmB4C,YAC9BK,EAAKjD,mBAAmBmD,gBAAgBF,EAAKH,eAG9CJ,EAAAA,EAAAA,IAA2C,WAAYM,IAEtDC,EAAKJ,UAAUZ,MAAQgB,EAAKhB,QAG7BS,EAAAA,EAAAA,IAA2C,WAAYM,IAEtDC,EAAKJ,UAAUX,MAAQe,EAAKf,QAG7BQ,EAAAA,EAAAA,IAA2C,WAAYM,IAEtDC,EAAKJ,UAAUV,MAAQc,EAAKd,QAG7BO,EAAAA,EAAAA,IAA2C,UAAWM,IAErDC,EAAKJ,UAAUT,KAAOa,EAAKb,KAC9B,E,gLACL,CAOOnC,WAAAA,GAEHC,KAAKF,mBAAmBoD,iBAAiBlD,KAAK4C,aAC9C5C,KAAKH,iBAAiBsD,oBAAoBnD,KAAK4C,YACnD,E,iCAtGSH,EAAkC,E,kBAAlCA,EAAkCrC,UAAA,2BAAAgD,OAAA,CAAArB,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,KAAA,OAAAU,YAAA,eAAAvC,YAAA,EAAAC,SAAA,CAAAJ,EAAAA,K,wGCZ3CA,EAAAA,GAAA,K,uDAAcA,EAAAA,EAAA,gCAAAmD,EAAAC,QAAA,KAAAD,EAAAC,QAAAC,SAAArD,CAA6C,QAAAsD,EAA7CtD,CAA6C,YAAAuD,EAA7CvD,CAA6C,OAAAuD,IAAAC,EAAA,EAA7CxD,CAA6C,QAAAuD,EAA7CvD,CAA6C,cAAAmD,EAAAM,G,ECwCxD,IAAMC,EAAN,cAAiDC,EAAAA,EAAjDjE,WAAAA,G,oBAOO,KAAA+D,GAAa,GAehB,KAAAG,KAAsB,E,CAQtBC,KAAAA,CAAMJ,GAET3D,KAAK2D,GAAKA,CACd,G,wDAjCSC,KAAoBI,GAApBJ,EAAoB,G,qBAApBA,EAAoBxD,UAAA,iBAAAgD,OAAA,CAAAU,KAAA,QAAAzD,YAAA,EAAAC,SAAA,CAAAJ,EAAAA,EAAAA,EAAAA,GAAA+D,MAAA,EAAAC,KAAA,EAAAC,OAAA,sHAAAZ,SAAA,SAAAa,EAAAC,GAAA,EAAAD,GD1CjClE,EAAAA,GAAA,EAAAoE,EAAA,qBAAApE,EAAAA,I,KAAAA,EAAAA,GAAAmE,EAAAP,K,gBCwBQS,EAAAA,EACAC,EAAAA,EACA7E,EACA8C,GAAkCgC,OAAA,sCAAAC,gBAAA,IAe7Bd,GAAoBxB,EAAAA,EAAAA,IAAA,EAXhCE,EAAAA,EAAAA,GACD,CACIc,OACA,EACIZ,EAAAA,EAAAA,IAA6B,YAGpCmC,EAAAA,EAAAA,IAA6CrB,GAAWA,GAASC,SAAW,CAACD,GAASC,UAAY,MAClGqB,EAAAA,EAAAA,GAAyBjD,IACzBkD,EAAAA,EAAAA,GAAwBrD,IACxBsD,EAAAA,EAAAA,GAAqB5D,IACT0C,E,+NChCP,MAAOmB,UAA+BC,EAAAA,EAOfC,MAAAA,GAAM,I,EAAAlC,EAAA,Y,EAAC,YAEzBA,EAAKmC,UAEJnC,EAAKmC,SAASnB,MAAMhB,EAAKoC,SAASxB,GACrC,E,gLACL,ECjBJ,Q,QAAmC,EAEtByB,EAAa,CAACC,EAAAA,EAA2BC,EAAAA,EAAgCP,E,iDCEhF,SAAUH,EAAyBW,GAErC,OAAOC,EAAAA,EAAAA,GAA0ED,EAAgB,2BACrG,C,kDCLM,SAAUT,EAAqBS,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,gbCAM,MAAgB1B,EADtBjE,WAAAA,GAQc,KAAAwF,WAA+C,GAO/C,KAAAK,WAAqB,EAoCrB,KAAAC,gBAAoChF,EAAAA,EAAAA,IAAOiF,EAAAA,GAK3C,KAAAC,kBAA4ClF,EAAAA,EAAAA,IAAOmF,EAAAA,IAKnD,KAAAC,UAAqBpF,EAAAA,EAAAA,IAAOK,EAAAA,GAK5B,KAAAgF,QAAiBrF,EAAAA,EAAAA,IAAOsF,EAAAA,G,CA9ClC,eAAcC,GAEV,IAAIjG,KAAKsD,QAEL,MAAM,IAAI4C,MAAM,wCAGpB,OAAOlG,KAAKsD,OAChB,CAOA,WAAc6C,GAEV,OAAOnG,KAAK4F,gBAChB,CAKA,qBAAcQ,GAEV,OAAOpG,KAAKsD,OAChB,CAkCOvD,WAAAA,GAKH,GAFAC,KAAK+F,OAAOM,MAAM,uEAAwE,CAACZ,UAAWzF,KAAKyF,aAExGzF,KAAKyF,UAAR,CAKAzF,KAAKyF,WAAY,EAEjB,IAAI,MAAMa,KAAOtG,KAAKoF,WAElBkB,EAAIC,UAGRvG,KAAKwG,W,CACT,CAOaC,aAAAA,GAAa,IAAA1D,EAAA,YAAA3B,GAAC,YAEvB,MAAMgF,EAAoBrD,EAAKqD,kBAK/B,SAHMrD,EAAKkC,eACLlC,EAAK2D,eAERN,EAEC,IAAI,MAAMO,KAAa5D,EAAKqC,iBAElBuB,EAAUC,WAAW7D,EAAK+C,SAAU/C,EAAKoD,QAASpD,SAI1DA,EAAK8D,WAAY,GAfDzF,EAgB1B,CAKa0F,gBAAAA,CAAiBhE,GAAsB,IAAAiE,EAAA,YAAA3F,GAAA,YAGhD,IAAGoB,EAAAA,EAAAA,IAAsC,aAAcM,EACvD,CAEQA,GAAQN,EAAAA,EAAAA,IAAsC,YAAYwE,oBAEpDD,EAAKL,gBAGf,MAAMN,EAAoBW,EAAKX,kBAG/B,GAAGA,EAEC,IAAI,MAAMO,KAAaI,EAAK3B,iBAElBuB,EAAUM,cAAcb,GAItC,GAAGtD,GAAQN,EAAAA,EAAAA,IAAsC,YAAYwE,YAEzD,aAGED,EAAKG,iB,QAGRpE,GAAQN,EAAAA,EAAAA,IAAsC,aAEjD2E,EAAAA,EAAAA,IAAcrE,IAEdiE,EAAKK,UAAUtE,EAClB,GAnC+C1B,EAoCpD,CAKOiG,kBAAAA,CAAmBjC,GAEtBpF,KAAKoF,WAAaA,CACtB,CAKOjD,iBAAAA,GAEHnC,KAAK0F,eAAe4B,eACxB,CAOUrC,MAAAA,GAEV,CAKU4B,SAAAA,GAEV,CAKUK,eAAAA,GAEV,CAMUE,SAAAA,CAAUG,GAEpB,CAKUb,YAAAA,GAEV,CAKUF,SAAAA,GAEV,E,iCA9NkB3C,EAAmB,E,kBAAnBA,G,qJCehB,MAAOW,EAdb5E,WAAAA,GAqBc,KAAA+D,IAAa6D,EAAAA,EAAAA,IAAW,IAKxB,KAAAC,eAAkC/G,EAAAA,EAAAA,IAAOgH,EAAAA,IAKzC,KAAAC,UAA2BjH,EAAAA,EAAAA,IAAOO,EAAAA,GAKlC,KAAA2G,yBAA0BlH,EAAAA,EAAAA,IAAO8D,EAAoC,CAACqD,UAAU,EAAMlH,UAAU,IAKhG,KAAAoF,QAAiBrF,EAAAA,EAAAA,IAAOsF,EAAAA,IAKxB,KAAA8B,SAAiCpH,EAAAA,EAAAA,IAAOG,EAAAA,GAAU,CAACgH,UAAU,IAK7D,KAAAE,iBAA6DrH,EAAAA,EAAAA,IAAOsH,EAAAA,GAAmC,CAACH,UAAU,EAAMlH,UAAU,G,CA2BrIkC,WAAAA,CAAYC,GAEf,IAAGN,EAAAA,EAAAA,IAA2C,uBAAwBM,EACtE,CACI,MAAMmF,EAASnF,GAAQN,EAAAA,EAAAA,IAA2C,sBAGlE,IAAG0F,EAAAA,EAAAA,IAAUD,EAAOE,gBAAiBC,EAAAA,EAAAA,IAAQH,EAAOI,eACpD,CACI,MAAMlD,EAAW8C,EAAOE,aAExBnI,KAAK+F,OAAOM,MAAM,yMAClB,CACI1C,GAAIwB,EAASxB,GACb2E,WAAYtI,KAAK2D,GACjB4E,eAAgBvI,KAAK4H,yBAAyBjE,GAC9C6E,gBAAiBxI,KAAK4H,yBAAyBa,mBAAmB9E,KAItE3D,KAAK2H,SAASe,iBAAiB1I,KAAK2D,GACL3D,KAAK4H,yBAAyBjE,GAC9B3D,KAAKyH,cACLtC,EACAnF,KAAK4H,yBAAyBa,kBAC9BzI,KAAK8H,QACL9H,KAAK+H,gBACL/H,KAAK2I,iBACL3I,KAAK4I,e,MAGnC,IAAGV,EAAAA,EAAAA,IAAUD,EAAOE,gBAAiBD,EAAAA,EAAAA,IAAUD,EAAOI,eAC3D,CACIrI,KAAK+F,OAAOM,MAAM,sFAAuF,CAAC1C,GAAI3D,KAAK2D,KAEnH3D,KAAK2H,SAASkB,mBAAmB7I,KAAK2D,IAEtC,MAAMwB,EAAW8C,EAAOE,aAExBnI,KAAK+F,OAAOM,MAAM,yMAClB,CACI1C,GAAIwB,EAASxB,GACb2E,WAAYtI,KAAK2D,GACjB4E,eAAgBvI,KAAK4H,yBAAyBjE,GAC9C6E,gBAAiBxI,KAAK4H,yBAAyBa,mBAAmB9E,KAItE3D,KAAK2H,SAASe,iBAAiB1I,KAAK2D,GACL3D,KAAK4H,yBAAyBjE,GAC9B3D,KAAKyH,cACLtC,EACAnF,KAAK4H,yBAAyBa,kBAC9BzI,KAAK8H,QACL9H,KAAK+H,gBACL/H,KAAK2I,iBACL3I,KAAK4I,e,MAGhCR,EAAAA,EAAAA,IAAQH,EAAOE,gBAAiBD,EAAAA,EAAAA,IAAUD,EAAOI,iBAErDrI,KAAK+F,OAAOM,MAAM,sFAAuF,CAAC1C,GAAI3D,KAAK2D,KAEnH3D,KAAK2H,SAASkB,mBAAmB7I,KAAK2D,I,CAGlD,CAOO5D,WAAAA,GAEHC,KAAK+F,OAAOM,MAAM,oGAClB,CACI1C,GAAI3D,KAAK2D,GACTf,YAAa5C,KAAKyI,mBAAmB9E,KAGzC3D,KAAK2H,SAASmB,gBAAgB9I,KAAK2D,GACvC,E,iCAlJSa,EAAkC,E,kBAAlCA,EAAkCpE,UAAA,oCAAAgD,OAAA,CAAAqF,kBAAA,gDAAAE,iBAAA,uDAAAC,eAAA,sDAAAvI,YAAA,EAAAC,SAAA,CAAAJ,EAAAA,EAV3C,CAEI,CACIK,QAASyH,EAAAA,GACTe,SAAU,QAGjB7I,EAAAA,I,6DCfC,MAAOmF,UAAkCL,EAAAA,EAcxBC,MAAAA,GAEfjF,KAAKgJ,cACT,CAKmB9B,eAAAA,GAEflH,KAAKgJ,cACT,CAOUA,YAAAA,GAEN,MAAM1F,EAAUtD,KAAKsD,QACf2F,EAAQjJ,KAAKmG,SAAS+C,cAAcD,MAE1C,GAAGjJ,KAAKmG,QACR,CACI,IAAG+B,EAAAA,EAAAA,IAAUlI,KAAKmJ,cAEd,IAAI,MAAMC,KAAYpJ,KAAKmJ,aAAaE,MAAM,KAEvCD,GAECpJ,KAAKmG,QAAQ+C,cAAcI,UAAUC,OAAOH,GAOxD,GAFApJ,KAAKmJ,aAAe7F,GAAS8F,SAE1B9F,GAAS8F,SAER,IAAI,MAAMA,KAAY9F,EAAQ8F,SAASC,MAAM,KAEtCD,GAECpJ,KAAKmG,SAAS+C,cAAcI,UAAUE,IAAIJ,E,EAMvDlB,EAAAA,EAAAA,IAAUe,KAEN3F,GAASmG,SAERR,EAAMS,aAAepG,EAAQmG,OAAOE,QAAU,GAC9CV,EAAMW,YAActG,EAAQmG,OAAOI,OAAS,GAC5CZ,EAAMa,UAAYxG,EAAQmG,OAAOM,KAAO,GACxCd,EAAMe,WAAa1G,EAAQmG,OAAOQ,MAAQ,IAG3C3G,GAAS4G,UAERjB,EAAMkB,cAAgB7G,EAAQ4G,QAAQP,QAAU,GAChDV,EAAMmB,aAAe9G,EAAQ4G,QAAQL,OAAS,GAC9CZ,EAAMoB,WAAa/G,EAAQ4G,QAAQH,KAAO,GAC1Cd,EAAMqB,YAAchH,EAAQ4G,QAAQD,MAAQ,IAG7C3G,GAASiH,cAERtB,EAAMuB,SAAWlH,EAAQiH,YAAYC,UAAY,GACjDvB,EAAMwB,WAAanH,EAAQiH,YAAYE,YAAYC,YAAc,IAG7E,E,iMCxFE,MAAOpF,UAAuCN,EAAAA,EAApDpF,WAAAA,G,oBAOc,KAAAE,mBAA8C,KAK9C,KAAAD,iBAAmD,IAwCjE,CAjC6BoF,MAAAA,GAAM,I,EAAAlC,EAAA,Y,EAAC,YAExBA,EAAK+C,UAAa/C,EAAKoC,UAAapC,EAAKmC,WAK7CnC,EAAKjD,qBAALiD,EAAKjD,mBAAuBiD,EAAK+C,SAAS6E,IAAI7J,EAAAA,EAAoB,OAClEiC,EAAKlD,mBAALkD,EAAKlD,iBAAqBkD,EAAK+C,SAAS6E,IAAInK,EAAAA,EAA2B,OAEnEuC,EAAKjD,oBAAuBiD,EAAKlD,mBAKrCkD,EAAKlD,iBAAiBmD,kBAAkBD,EAAKoC,SAASxB,GAAIZ,EAAKmC,gBACzDnC,EAAKjD,mBAAmB4C,YAC9BK,EAAKjD,mBAAmBmD,gBAAgBF,EAAKoC,SAASxB,KAAI,E,gLAC9D,CAKmB6C,SAAAA,GAEXxG,KAAKF,oBAAuBE,KAAKH,kBAAqBG,KAAKmF,WAK/DnF,KAAKF,mBAAmBoD,iBAAiBlD,KAAKmF,SAASxB,IACvD3D,KAAKH,iBAAiBsD,oBAAoBnD,KAAKmF,SAASxB,IAC5D,E,+VCnDE,MAAgBqB,EA8BlBpF,WAAAA,CAAsBuF,GAAA,KAAAA,SAAAA,EAHZ,KAAAzC,aAAuB,CAKjC,CAOakE,UAAAA,CAAWd,EAAoBK,EAAkCjB,GAAmB,IAAAnC,EAAA,YAAA3B,GAAA,YAE7F2B,EAAKL,aAAc,EAEnBK,EAAK+C,SAAWA,EAChB/C,EAAKoD,QAAUA,EACfpD,EAAKmC,SAAWA,QAEVnC,EAAKkC,QAAS,GARyE7D,EASjG,CAKa6F,aAAAA,CAAc3D,GAAiB,IAAAyD,EAAA,YAAA3F,GAAA,YAExC2F,EAAKzD,QAAUA,EAEXyD,EAAKrE,oBAKHqE,EAAKG,kBAAkB,GATW9F,EAU5C,CAKOmF,OAAAA,GAEHvG,KAAKwG,WACT,CAOUvB,MAAAA,GAEV,CAKUiC,eAAAA,GAEV,CAKUV,SAAAA,GAEV,E","sources":["webpack://ng-universal-demo/../relations/src/directives/scopedRelations/scopedRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/misc/directives/listBlockScopeRelations/listBlockScopeRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/extensions/listBlockData.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Directive, FactoryProvider, inject, Injector, OnDestroy} from '@angular/core';\nimport {SCOPE_ID} from '@anglr/dynamic';\nimport {LayoutRenderer} from '@anglr/dynamic/layout';\n\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Creates scoped relations component manager and processor\n */\n@Directive(\n{\n    selector: '[scopedRelations]',\n    standalone: true,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n        },\n        RelationsChangeDetector,\n        LayoutRenderer,\n    ],\n})\nexport class ScopedRelationsSADirective implements OnDestroy\n{\n    //######################### constructor #########################\n    constructor(protected componentManager: RelationsComponentManager,\n                protected relationsProcessor: RelationsProcessor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.componentManager.ngOnDestroy();\n        this.relationsProcessor.destroyScope();\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {ListBlockComponentOptions} from './listBlock.options';\n\n/**\n * List block layout metadata loader\n */\nexport const ListBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ListBlockComponentOptions>> = async () => new (await import('./metadata/listBlock.layoutMetadata')).ListBlockLayoutEditorMetadata();\n\n/**\n * List block relations metadata loader\n */\nexport const ListBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/listBlock.relationsMetadata')).ListBlockRelationsEditorMetadata();\n\n/**\n * List block layout designer type loader\n */\nexport const ListBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/listBlockDesigner.component')).ListBlockDesignerSAComponent;\n","import {DebugData, DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelationsOptions} from './listBlock.options';\n\n/**\n * List block scoped relations component\n */\n@DebugData(\n{\n    outputs: \n    [\n        nameof<ListBlockRelations>('datum'),\n        nameof<ListBlockRelations>('index'),\n        nameof<ListBlockRelations>('first'),\n        nameof<ListBlockRelations>('last'),\n    ],\n})\nexport class ListBlockRelations<TDatum = any> implements RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @DynamicOutput()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @DynamicOutput()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @DynamicOutput()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @DynamicOutput()\n    public last: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Directive, inject, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelations} from '../../../listBlock.relations';\n\n/**\n * Directive that creates list block scoped relations component\n */\n@Directive(\n{\n    selector: '[listBlockScope]',\n    standalone: true,\n})\nexport class ListBlockScopeRelationsSADirective<TDatum = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager = inject(RelationsComponentManager);\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor = inject(RelationsProcessor);\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: ListBlockRelations = new ListBlockRelations();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @Input()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @Input()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @Input()\n    public last: boolean = false;\n\n    /**\n     * Id of component that is being created\n     */\n    @Input()\n    public componentId: string = '';\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<ListBlockScopeRelationsSADirective>('componentId') in changes && !this.initialized && this.componentId)\n        {\n            this.initialized = true;\n\n            this.componentManager.registerComponent(this.componentId, this.relations);\n            await this.relationsProcessor.initialized;\n            this.relationsProcessor.updateRelations(this.componentId);\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('datum') in changes)\n        {\n            this.relations.datum = this.datum;\n        }\n        \n        if(nameof<ListBlockScopeRelationsSADirective>('index') in changes)\n        {\n            this.relations.index = this.index;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('first') in changes)\n        {\n            this.relations.first = this.first;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('last') in changes)\n        {\n            this.relations.last = this.last;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n}","@for(datum of data; track datum)\n{\n    <ng-container [layoutComponentRenderer]=\"options?.template\" scopedRelations listBlockScope [datum]=\"datum\" [first]=\"$first\" [last]=\"$last\" [index]=\"$index\" [componentId]=\"id\"/>\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, RelationsComponent, ScopedRelationsSADirective} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from './listBlock.options';\nimport {ListBlockLayoutDesignerTypeLoader, ListBlockLayoutMetadataLoader, ListBlockRelationsMetadataLoader} from './listBlock.metadata';\nimport {ListBlockScopeRelationsSADirective} from './misc/directives';\n\n/**\n * Component used for displaying list block\n */\n@Component(\n{\n    selector: 'list-block',\n    templateUrl: 'listBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n        ScopedRelationsSADirective,\n        ListBlockScopeRelationsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<ListBlockSAComponent>('data'),\n    ],\n})\n@DescendantsGetter<ListBlockComponentOptions>(options => options?.template ? [options?.template] : [])\n@LayoutEditorDesignerType(ListBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(ListBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(ListBlockLayoutMetadataLoader)\nexport class ListBlockSAComponent<TDatum = any> extends LayoutComponentBase<ListBlockComponentOptions> implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Id of current component\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of data to be rendered in for cycle\n     */\n    @Input()\n    public data: Array<TDatum> = [];\n\n    //######################### public methods #########################\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ListBlockSAComponent} from '../listBlock.component';\nimport {ListBlockDataExtensionOptions} from '../listBlockExtensions.options';\n\n//TODO: id use id setter extension\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class ListBlockDataExtension extends DynamicItemExtensionBase<ListBlockDataExtensionOptions, ListBlockSAComponent> implements DynamicItemExtension<ListBlockDataExtensionOptions, ListBlockSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ListBlockDataExtension} from './extensions';\nimport {ListBlockSAComponent} from './listBlock.component';\n\nexport default ListBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension, ListBlockDataExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ScopedRelationsSADirective","constructor","componentManager","relationsProcessor","ngOnDestroy","this","destroyScope","i0","i1","selectors","standalone","features","provide","RelationsComponentManager","useFactory","inject","skipSelf","openScope","SCOPE_ID","RelationsProcessor","Injector","RelationsChangeDetector","LayoutRenderer","ListBlockLayoutMetadataLoader","_ref","_asyncToGenerator","ListBlockLayoutEditorMetadata","apply","arguments","ListBlockRelationsMetadataLoader","_ref2","ListBlockRelationsEditorMetadata","ListBlockLayoutDesignerTypeLoader","_ref3","ListBlockDesignerSAComponent","ListBlockRelations","datum","index","first","last","invalidateVisuals","__decorate","DynamicOutput","DebugData","outputs","nameof","ListBlockScopeRelationsSADirective","initialized","relations","componentId","ngOnChanges","changes","_this","registerComponent","updateRelations","destroyComponent","unregisterComponent","inputs","ctx_r0","options","template","datum_r1","$index_r2","$count_r4","id","ListBlockSAComponent","LayoutComponentBase","data","setId","t","decls","vars","consts","rf","ctx","ListBlockSAComponent_For_1_Template","CommonModule","LayoutComponentRendererSADirective","styles","changeDetection","DescendantsGetter","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","ListBlockDataExtension","DynamicItemExtensionBase","onInit","instance","metadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","debug","ext","destroy","onDestroy","dynamicOnInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","detectChanges","_changes","generateId","viewContainer","ViewContainerRef","renderer","parentRendererDirective","optional","scopeId","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","change","isPresent","currentValue","isBlank","previousValue","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","destroyRenderer","useValue","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","get"],"sourceRoot":""}