{"version":3,"file":"56.chunk.6202d193afb8dc3a6e35.js","mappings":"iVAOM,MAAOA,UAAiCC,EAAAA,GAO1BC,eAAY,O,EAAA,YAExB,OAAO,WAAW,gEAAgDC,iC,wUChB1EC,EAAAA,GAAAA,GACIA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,GACJA,EAAAA,M,yBADiBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,0BAAAA,I,ICwBJC,EAAqB,cAASC,EAAAA,EAOpBC,cAEfC,KAAKC,aAQCA,aAEN,MAAMC,EAAQF,KAAKG,SAASC,cAAcF,MAE1CA,EAAMG,cAAgBL,KAAKM,UAAUC,WAAa,MAAQ,SAC1DL,EAAMM,SAAWR,KAAKM,UAAUG,KAAO,OAAS,W,6DAtB3CZ,KAAqBa,GAArBb,I,qBAAAA,EAAqBc,UAAAA,CAAAA,CAAAA,gBAAAC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAAAA,4BAAAC,SAAAA,SAAAA,EAAAA,GAAA,KDzBlCrB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,G,KAA+BA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,W,cCmBvBsB,EAAAA,EAAYC,EAAAA,EACZC,EAAAA,GAAkCC,OAAAA,CAAAA,8CAAAC,gBAAAA,IAK7BzB,GAAqB,UADjC0B,EAAAA,EAAAA,GAAqB/B,IACTK,GCvBb,W,2FCYM,MAAO2B,EA2BTC,YAAsBtB,GAAA,KAAAA,SAAAA,EAZXuB,cAEP,OAAO1B,KAAKM,SAELoB,YAAQC,GAEf3B,KAAKM,SAAWqB,EAEhB3B,KAAK4B,eAaCA,eAEN,MAAM1B,EAAQF,KAAKG,SAASC,cAAcF,MAEvCF,KAAKM,UAAUuB,UAEXC,EAAAA,EAAAA,IAAU9B,KAAKM,SAASuB,OAAOE,UAE9B7B,EAAM8B,aAAehC,KAAKM,SAASuB,OAAOE,SAG3CD,EAAAA,EAAAA,IAAU9B,KAAKM,SAASuB,OAAOI,SAE9B/B,EAAMgC,YAAclC,KAAKM,SAASuB,OAAOI,QAG1CH,EAAAA,EAAAA,IAAU9B,KAAKM,SAASuB,OAAOM,OAE9BjC,EAAMkC,UAAYpC,KAAKM,SAASuB,OAAOM,MAGxCL,EAAAA,EAAAA,IAAU9B,KAAKM,SAASuB,OAAOQ,QAE9BnC,EAAMoC,WAAatC,KAAKM,SAASuB,OAAOQ,OAI7CrC,KAAKM,UAAUiC,WAEXT,EAAAA,EAAAA,IAAU9B,KAAKM,SAASiC,QAAQR,UAE/B7B,EAAMsC,cAAgBxC,KAAKM,SAASiC,QAAQR,SAG7CD,EAAAA,EAAAA,IAAU9B,KAAKM,SAASiC,QAAQN,SAE/B/B,EAAMuC,aAAezC,KAAKM,SAASiC,QAAQN,QAG5CH,EAAAA,EAAAA,IAAU9B,KAAKM,SAASiC,QAAQJ,OAE/BjC,EAAMwC,WAAa1C,KAAKM,SAASiC,QAAQJ,MAG1CL,EAAAA,EAAAA,IAAU9B,KAAKM,SAASiC,QAAQF,QAE/BnC,EAAMyC,YAAc3C,KAAKM,SAASiC,QAAQF,OAI/CrC,KAAKM,UAAUsC,eAEXd,EAAAA,EAAAA,IAAU9B,KAAKM,SAASsC,YAAYC,YAEnC3C,EAAM2C,SAAW7C,KAAKM,SAASsC,YAAYC,WAG5Cf,EAAAA,EAAAA,IAAU9B,KAAKM,SAASsC,YAAYE,cAEnC5C,EAAM4C,WAAa9C,KAAKM,SAASsC,YAAYE,WAAWC,c,iCA/F3DvB,GAA2B5B,EAAAA,EAAAA,EAAAA,M,kBAA3B4B,EAA2Bb,UAAAA,CAAAA,CAAAA,GAAAA,mBAAAA,KAAAqC,OAAAA,CAAAtB,QAAAA,CAAAA,mBAAAA,YAAAuB,SAAAA,CAAAA,oBAAArC,YAAAA,I,gDCHlC,MAAgBd,UAA4CoD,EAAAA,EAW9DzB,YAAY0B,EACAC,EAC4BC,GAEpCC,MAAMH,EAAgBC,EAASC,GAP5B,KAAAE,kBAAiD,IAAI/B,EAA4BxB,KAAKG,UAe7EqD,oBAEZxD,KAAKuD,kBAAkB7B,QAAU1B,KAAK0B,QAEtC1B,KAAKyD,gBAAgBC,iB,iCA3BP5D,GAAyBF,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAavB+D,EAAAA,GAAM,K,kBAbR7D,EAAyB8D,SAAAA,EAAAC,aAAAA,SAAAA,EAAAA,GAAA,K,oGCRnCC,E,wDAAZ,SAAYA,GAKRA,EAAAA,EAAAA,aAAAA,GAAAA,eAKAA,EAAAA,EAAAA,OAAAA,GAAAA,SAKAA,EAAAA,EAAAA,WAAAA,GAAAA,aAfJ,CAAYA,IAAAA,EAAmB,KCIzB,MAAOC,EAUTtC,YAAYuC,GAHL,KAAAA,oBAA2CF,EAAoBG,cAK/DnC,EAAAA,EAAAA,IAAUkC,KAEThE,KAAKgE,oBAAsBA,I,gDCPjC,MAAOE,G,iCAAAA,I,kBAAAA,EAA6BvD,UAAAA,CAAAA,CAAAA,0BAAAC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,MAAAA,oBAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCd1CrB,EAAAA,GAAAA,EAAAA,OACIA,EAAAA,GAAAA,EAAAA,OAAAA,GACAA,EAAAA,GAAAA,EAAAA,QAAMA,EAAAA,EAAAA,EAAAA,aAASA,EAAAA,KACfA,EAAAA,GAAAA,EAAAA,OAAAA,GACJA,EAAAA,O,mPCgBM,MAAOwB,EA+DTK,YAAsB0C,EACAC,EACY9D,EACoC+D,EACpBC,GAJ5B,KAAAH,kBAAAA,EACA,KAAAC,QAAAA,EACY,KAAA9D,SAAAA,EACoC,KAAA+D,qBAAAA,EACpB,KAAAC,QAAAA,EA5DxC,KAAAC,cAA+C,KAQlD,KAAAC,kBAA+E,KAY/E,KAAAC,oBAA8B,EAQ9B,KAAAC,gBAA+D,IAAIC,EAAAA,EAkClE3E,KAAKM,UAAcN,KAAKM,oBAAoByD,IAE5C/D,KAAKM,SAAW,IAAIyD,GA7Bda,gBAEV,OAAI5E,KAAKuE,cAKFvE,KAAKuE,cAAcM,SAHf,KAWJC,mBAEP,OAAO9E,KAAKuE,cAqBHQ,YAAYC,GAAsB,I,EAAA,c,EAAA,YAQ3C,GANA,EAAKV,SAASW,MAAM,gEAAiE,CAACC,GAAI,EAAKV,mBAAmBU,KAElH,EAAKC,cACL,EAAKhB,kBAAkBiB,SAGpBC,EAAAA,EAAAA,GAA0E,uBAAwBL,GAAW,EAAKR,kBACrH,CACI,MAAMc,EAAW,EAAKC,gBAAkB,EAAKpB,kBAAkBmB,SAC/D,IAAId,EAAoB,EAAKA,kBAE1B,EAAKH,uBAAyB,EAAKI,qBAElCD,EAAoB,EAAKH,qBAAqB,EAAKG,kBAAmBc,IAM1E,MAAME,QAA4B,EAAKpB,QAAQqB,SAASjB,GAExD,IAAIgB,EACJ,CAGI,OAFA,EAAKlB,SAASoB,KAAK,mFAAoF,CAACC,KAAMnB,EAAkBmB,KAAMC,QAASpB,EAAkBoB,UAE1J,EAAKtF,UAAU0D,qBAElB,QAGI,EAAKG,kBAAkB0B,gBAAgB3B,GAEvC,MAEJ,KAAKJ,EAAoBgC,OAIrB,MAEJ,KAAKhC,EAAoBiC,WAErB,MAAM,IAAIC,MAAM,kFAAkFxB,EAAkBmB,iBAAiBnB,EAAkBoB,WAI/J,OAGJ,EAAKrB,cAAgB,EAAKJ,kBAAkB0B,gBAAgBL,EAAoBS,KACpB,CACIX,SAAAA,IAGhE,EAAKhB,SAASW,MAAM,+DAAgE,CAACC,GAAIV,GAAmBU,KAE5G,EAAKR,gBAAgBwB,KAAK,EAAK3B,eAE5B,EAAKK,YAEJ,EAAKN,SAASW,MAAM,gFAAiF,CAACC,GAAIV,GAAmBU,WACvHiB,EAAAA,EAAAA,GAAiB,EAAKvB,UAAUwB,aAAa5B,EAAkB9C,UAErE,EAAK4C,SAASW,MAAM,2EAA4E,CAACC,GAAIV,GAAmBU,KACxH,EAAKN,WAAWpB,uB,iLAYrB2B,cAEAnF,KAAKuE,gBAEJvE,KAAKsE,SAASW,MAAM,iEAAkE,CAACC,GAAIlF,KAAKwE,mBAAmBU,GAAImB,SAAUrG,KAAKyE,qBAUtIzE,KAAKuE,eAAe+B,UACpBtG,KAAKuE,cAAgB,KACrBvE,KAAK0E,gBAAgBwB,KAAK,Q,iCA9KzB9E,GAAkCxB,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAkEvB2G,EAAAA,EAA0B,GAAA3G,EAAAA,EAC1B+D,EAAAA,GAAM,K,kBAnEjBvC,EAAkCT,UAAAA,CAAAA,CAAAA,GAAAA,0BAAAA,KAAAqC,OAAAA,CAAAwB,kBAAAA,CAAAA,0BAAAA,qBAAAe,eAAAA,CAAAA,kCAAAA,kBAAAd,mBAAAA,CAAAA,4CAAAA,uBAAA+B,QAAAA,CAAA9B,gBAAAA,0CAAAzB,SAAAA,CAAAA,2BAAArC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,M,gOCRzC,MAAO4F,EAUThF,YAA6DiF,EACCC,EACZrC,GAFW,KAAAoC,WAAAA,EACC,KAAAC,YAAAA,EACZ,KAAArC,QAAAA,EALxC,KAAAsC,oBAAgE,GAQlEC,MAAMC,QAAQ9G,KAAK0G,cAEnB1G,KAAKsE,SAASyC,MAAM,yCAEpB/G,KAAK0G,WAAa,IAIlBG,MAAMC,QAAQ9G,KAAK2G,eAEnB3G,KAAKsE,SAASyC,MAAM,0CAEpB/G,KAAK2G,YAAc,IAUdlB,SAA0CuB,GAAyB,I,EAAA,c,EAAA,YAE5E,IAAIC,EAAoC,KACxC,MAAMC,EAAU,GAAGF,EAAOpB,WAAWoB,EAAOrB,OAG5C,GAAG,EAAKiB,oBAAoBM,GAIxB,OAFA,EAAK5C,SAAS6C,QAAQ,kDAAmD,CAACxB,KAAMqB,EAAOrB,KAAMC,QAASoB,EAAOpB,UAEtG,EAAKgB,oBAAoBM,GAIpC,IAAI,MAAME,KAAY,EAAKV,WAC3B,CACI,MAAMW,EAAqBD,EAASE,SAASN,GAW7C,GAPIC,EAFDI,QAEuBlB,EAAAA,EAAAA,GAAiBkB,GAIvB,KAGjBJ,EAEC,MAKR,IAAIA,EAIA,OAFA,EAAK3C,SAASW,MAAM,4DAA6D,CAACU,KAAMqB,EAAOrB,KAAMC,QAASoB,EAAOpB,UAE9G,KAIX,IAAI,MAAM2B,KAAa,EAAKZ,YAC5B,CACI,MAAMa,EAAkBD,EAAUE,aAAaR,GAE/C,GAAGO,IAAmBE,EAAAA,EAAAA,IAAOF,GAC7B,CACI,MAAMG,EACN,CACI1B,KAAMuB,GAGV,OAAO,EAAKZ,oBAAoBM,GAAWS,GAMnD,OAFA,EAAKrD,SAASW,MAAM,8DAA+D,CAACU,KAAMqB,EAAOrB,KAAMC,QAASoB,EAAOpB,UAEhH,M,mNAhGFa,GAAiB7G,EAAAA,GAUNgI,EAAAA,IAA6BhI,EAAAA,GAC7BiI,EAAAA,IAA8BjI,EAAAA,GAC9B+D,EAAAA,GAAM,K,oBAZjB8C,EAAiBqB,QAAjBrB,EAAiB,KAAAsB,WADL,U,4UCLlB,SAAe5B,EAAtB,kC,yBAAO,UAAyCxE,GAE5C,OAAGA,aAAiBqG,cAEHrG,EAGVA,M","sources":["webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/type.ts","webpack://ng-universal-demo/../layout/src/directives/componentStyling/componentStyling.directive.ts","webpack://ng-universal-demo/../layout/src/components/styledLayoutComponentBase/styledLayoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {GenericLayoutAsyncMetadata, LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata descriptor\n */\nexport class StackPanelLayoutMetadata extends GenericLayoutAsyncMetadata<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async _getInstance(): Promise<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>>\n    {\n        return new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n    }\n}","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponentRendererSADirective, StyledLayoutComponent, StyledLayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadata} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styleUrls: ['stackPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StackPanelLayoutMetadata)\nexport class StackPanelSAComponent extends StyledLayoutComponentBase<StackPanelComponentOptions> implements StyledLayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _optionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        style.flexDirection = this._options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this._options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","import {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;","import {Directive, ElementRef, Input} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from './componentStyling.options';\n\n/**\n * Directive that applies some styling to component\n */\n@Directive(\n{\n    selector: '[componentStyling]',\n    exportAs: 'componentStyling',\n    standalone: true\n})\nexport class ComponentStylingSADirective\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of styling options\n     */\n    protected _options: ComponentStylingOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets instance of styling options\n     */\n    @Input('componentStyling')\n    public get options(): ComponentStylingOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: ComponentStylingOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._applyStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies styles to layout component\n     */\n    protected _applyStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        if(this._options?.margin)\n        {\n            if(isPresent(this._options.margin.bottom))\n            {\n                style.marginBottom = this._options.margin.bottom;\n            }\n\n            if(isPresent(this._options.margin.right))\n            {\n                style.marginRight = this._options.margin.right;\n            }\n\n            if(isPresent(this._options.margin.top))\n            {\n                style.marginTop = this._options.margin.top;\n            }\n\n            if(isPresent(this._options.margin.left))\n            {\n                style.marginLeft = this._options.margin.left;\n            }\n        }\n\n        if(this._options?.padding)\n        {\n            if(isPresent(this._options.padding.bottom))\n            {\n                style.paddingBottom = this._options.padding.bottom;\n            }\n\n            if(isPresent(this._options.padding.right))\n            {\n                style.paddingRight = this._options.padding.right;\n            }\n\n            if(isPresent(this._options.padding.top))\n            {\n                style.paddingTop = this._options.padding.top;\n            }\n\n            if(isPresent(this._options.padding.left))\n            {\n                style.paddingLeft = this._options.padding.left;\n            }\n        }\n\n        if(this._options?.textStyling)\n        {\n            if(isPresent(this._options.textStyling.fontSize))\n            {\n                style.fontSize = this._options.textStyling.fontSize;\n            }\n\n            if(isPresent(this._options.textStyling.fontWeight))\n            {\n                style.fontWeight = this._options.textStyling.fontWeight.toString();\n            }\n        }\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, HostBinding, Inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {ComponentStylingOptions, ComponentStylingSADirective} from '../../directives';\nimport {StyledLayoutComponent} from '../../interfaces';\nimport {LayoutComponentBase} from '../layoutComponentBase/layoutComponentBase';\n\n/**\n * Base component for layout component which allows to be styled\n */\n@Directive()\nexport abstract class StyledLayoutComponentBase<TOptions> extends LayoutComponentBase<TOptions&ComponentStylingOptions> implements StyledLayoutComponent<TOptions&ComponentStylingOptions>\n{\n    //######################### public properties - host #########################\n\n    /**\n     * Instance of attached component styling directive\n     */\n    @HostBinding('attr.componentStyling')\n    public _componentStyling: ComponentStylingSADirective = new ComponentStylingSADirective(this._element);\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                @Inject(LOGGER) @Optional() logger?: Logger,)\n    {\n        super(changeDetector, element, logger);\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override invalidateVisuals(): void\n    {\n        this._componentStyling.options = this.options;\n\n        this._changeDetector.detectChanges();\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["StackPanelLayoutMetadata","GenericLayoutAsyncMetadata","_getInstance","StackPanelLayoutEditorMetadata","i0","StackPanelSAComponent","StyledLayoutComponentBase","_optionsSet","this","_setStyles","style","_element","nativeElement","flexDirection","_options","horizontal","flexWrap","wrap","t","selectors","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","ComponentStylingSADirective","constructor","options","value","_applyStyles","margin","isPresent","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","inputs","exportAs","LayoutComponentBase","changeDetector","element","logger","super","_componentStyling","invalidateVisuals","_changeDetector","detectChanges","LOGGER","hostVars","hostBindings","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_metadataTransformer","_logger","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","component","instance","componentRef","ngOnChanges","changes","debug","id","ngOnDestroy","clear","nameof","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","type","next","resolvePromiseOr","initialize","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","outputs","DynamicItemLoader","_providers","_extractors","_cachedDynamicItems","Array","isArray","error","source","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","tryToGet","extractor","dynamicItemType","tryToExtract","isType","result","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS","factory","providedIn","Promise"],"sourceRoot":""}