{"version":3,"file":"9289.chunk.75bbba64044d0929a9f6.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../../../../src/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../../../../packages/core/src/render3/instructions/property_interpolation.ts"],"sourcesContent":["import {Directive, EmbeddedViewRef, Inject, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {renderToBody} from '@jscrpt/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * String that defines element in which should be template rendered, if not specified, body is used\n     * \n     * Allows also css class to be specified (div.body-box)\n     */\n    @Input('bodyRender')\n    public targetElement: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n\n        renderToBody(this.document, this.element, this.targetElement);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {nameof, isPresent, isString, Func1, NoopAction} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions, PositionOffsetString, PositionOffsets, PositionArguments, AutoUpdateOptions} from '../../services/position';\nimport {POSITION} from '../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]',\n    standalone: true,\n})\nexport class PositionToSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected ɵPlacement: PositionPlacement|undefined|null;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected ɵSource: HTMLElement|undefined|null;\n\n    /**\n     * Method used for disposing auto positioning\n     */\n    protected dispose: NoopAction|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement|undefined|null\n    {\n        return this.ɵSource;\n    }\n    public set source(value: HTMLElement|undefined|null)\n    {\n        if(value instanceof ElementRef)\n        {\n            this.ɵSource = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this.ɵSource = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|undefined|null\n    {\n        return this.ɵPlacement;\n    }\n    public set placement(value: PositionPlacement|undefined|null)\n    {\n        if(isString(value))\n        {\n            this.ɵPlacement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this.ɵPlacement = value;\n    }\n\n    /**\n     * Offset which allows moving target element along the cross axis of placement, or any chosed direction\n     */\n    @Input()\n    public offset: PositionOffsetString|number|PositionOffsets|Func1<number|PositionOffsets, PositionArguments> = 'None';\n\n    /**\n     * Indication whether set up 'auto updating' of position\n     */\n    @Input()\n    public autoUpdate: boolean|AutoUpdateOptions = true;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Occurs when element was positioned\n     */\n    @Output()\n    public done: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToSADirective>('source') in changes ||\n            nameof<PositionToSADirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.dispose?.();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected _applyPosition(): void\n    {\n        if(!this.ɵSource)\n        {\n            return;\n        }\n\n        const options: Partial<PositionOptions> =\n        {\n            flip: true,\n            autoUpdate: this.autoUpdate,\n            offset: this.offset,\n        };\n\n        if(this.ɵPlacement)\n        {\n            options.placement = this.ɵPlacement;\n        }\n\n        this.dispose?.();\n\n        this.position.placeElement(this.target.nativeElement,\n                                    this.ɵSource,\n                                    options)\n            .subscribe(result =>\n            {\n                this.dispose = result.dispose;\n\n                applyPositionResult(result);\n\n                if(result.flip)\n                {\n                    this.flip.emit();\n                }\n\n                this.done.emit();\n            });\n    }\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `source` input\n     */\n    public static ngAcceptInputType_source: HTMLElement|ElementRef<HTMLElement>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n    propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n    propName: string, prefix: string, v0: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n    propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1,\n          ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n"],"names":["BodyRenderSADirective","template","viewContainer","document","view","element","targetElement","constructor","ngOnInit","this","createEmbeddedView","rootNodes","renderToBody","ngOnDestroy","remove","destroy","i0","DOCUMENT","selectors","inputs","standalone","PositionToSADirective","target","position","ɵPlacement","ɵSource","dispose","source","value","ElementRef","nativeElement","placement","isString","PositionPlacement","offset","autoUpdate","flip","EventEmitter","done","ngOnChanges","changes","nameof","isPresent","_applyPosition","options","placeElement","subscribe","result","applyPositionResult","emit","static","POSITION","outputs","features","ɵɵpropertyInterpolate","propName","v0","sanitizer","ɵɵpropertyInterpolate1","prefix","suffix","lView","getLView","interpolatedValue","interpolation1","NO_CHANGE","tView","getTView","tNode","getSelectedTNode","elementPropertyInternal","RENDERER","ɵɵpropertyInterpolate2","v1","interpolation2","ɵɵpropertyInterpolate3","i1","v2","interpolation3","ɵɵpropertyInterpolate4","i2","v3","interpolation4","ɵɵpropertyInterpolate5","i3","v4","interpolation5","ɵɵpropertyInterpolate6","i4","v5","interpolation6","ɵɵpropertyInterpolate7","i5","v6","interpolation7","ɵɵpropertyInterpolate8","i6","v7","interpolation8","ɵɵpropertyInterpolateV","values","interpolationV"],"sourceRoot":""}