{"version":3,"file":"565.chunk.1529b69d74b226371185.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/type.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts"],"sourcesContent":["import {LayoutDesignerSAComponent} from './layoutDesigner.component';\n\nexport default LayoutDesignerSAComponent;","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}"],"names":["DesignerDropzoneSADirective","constructor","draggingSvc","element","initSubscriptions","Subscription","isDropZone","ngOnInit","this","add","draggingChange","subscribe","processDragValue","ngOnDestroy","unsubscribe","setTimeout","dragging","nativeElement","classList","remove","i0","i1","selectors","inputs","standalone","LayoutDndCoreModule","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","dropDataChange","asObservable","newDropPlaceholderPreviewChange","oldDropPlaceholderPreviewChange","dropPlaceholderPreviewIndex","index","setDropData","data","next","setDropPlaceholderPreview","parentId","factory","ɵfac","LayoutComponentBase","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","options","Error","extensionsOptions","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LayoutComponentRendererSADirective","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","features","provide","useValue"],"sourceRoot":""}