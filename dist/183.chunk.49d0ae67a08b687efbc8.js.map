{"version":3,"file":"183.chunk.49d0ae67a08b687efbc8.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {optional: true}) :\n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true,}));\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout designer component transform function\n     */\n    public get layoutDesignerComponentTransform(): LayoutComponentTransform|null\n    {\n        //current transform\n        const transform = this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true});\n\n        //current or parent custom component transform\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {@id}', this.id);\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","IdSetterExtension","DynamicItemExtensionBase","onInit","instance","setId","metadata","id","PlaceholderHandler","this","ɵid","injector","get","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LAYOUT_COMPONENT_TRANSFORM","optional","skipSelf","placeholderContainer","layoutDesignerComponentTransform","findRelatedCustomComponentHandler","relationsComponentManager","getParentCustomComponentHandler","RelationsComponentManager","undefined","relationsProcessor","RelationsProcessor","relationsChangeDetector","RelationsChangeDetector","relationsManager","RelationsManager","constructor","customComponent","inject","Injector","logger","LOGGER","getOptions","options","placeholderContainers","initOptions","custom","containerId","name","package","displayName","error","placeholders","customComponents","Error","LayoutComponentBase","element","componentElement","extensionsOptions","changeDetector","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","features","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","selectors","standalone","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","component","ɵComponentRef","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","createComponent","Ignore","ThrowError","usedInjector","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","inputs","outputs","exportAs"],"sourceRoot":""}