{"version":3,"file":"2471.chunk.4f195ae69d10e476e49d.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/designer/listBlockDesigner.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/designer/listBlockDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutDesignerSAComponent} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from '../listBlock.options';\nimport {ListBlockSAComponent} from '../listBlock.component';\n\n/**\n * Component used for displaying list block designer\n */\n@Component(\n{\n    selector: 'list-block-designer',\n    templateUrl: 'listBlockDesigner.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ListBlockDesignerSAComponent extends ListBlockSAComponent implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of designer component\n     */\n    protected designer: LayoutDesignerSAComponent = inject(LayoutDesignerSAComponent);\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        if(!this.designer.options)\n        {\n            return;\n        }\n\n        this.designer.options.typeMetadata.scope ??= generateId(10);\n    }\n}","<ng-template [layoutComponentRenderer]=\"options?.template\"></ng-template>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n\n/**\n * Injection token for observables that allows refreshing of components palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n","import {NgModule} from '@angular/core';\n\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n    ],\n    exports:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        this._items.push(iteratorItem);\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected extractor: LayoutEditorMetadataExtractor,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const meta = await this.extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get metadata for children iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.extractor, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.extractor, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this._components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this._components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}"],"names":["ListBlockDesignerSAComponent","ListBlockSAComponent","constructor","designer","inject","LayoutDesignerSAComponent","onInit","this","options","typeMetadata","scope","_a","generateId","t","selectors","standalone","features","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","styles","changeDetection","InputBooleanComponent","PropertyTypeControlBase","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","REFRESH_PALETTE_OBSERVABLES","LayoutDndCoreModule","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","dropDataChange","asObservable","newDropPlaceholderPreviewChange","oldDropPlaceholderPreviewChange","dropPlaceholderPreviewIndex","index","setDropData","data","next","setDropPlaceholderPreview","parentId","_changeDetector","_initialized","values","control","_control","value","_controlSet","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","inputs","val_r1","DragActiveService","_dragging","_draggingChange","dragging","draggingChange","setDragging","LayoutComponentsIterator","_layoutMetadata","_extractor","_logger","_items","_initPromise","Symbol","asyncIterator","x","initPromise","_getInitPromise","items","length","done","forEach","callback","item","metadata","parent","levelIndex","level","_getComponents","_getComponent","iteratorItem","push","meta","extractMetadata","debug","package","name","getDescendants","childrenMeta","LayoutComponentsChildrenIterator","layoutMetadata","extractor","logger","initialized","getInitPromise","getChildren","getComponent","LayoutComponentsIteratorService","getIteratorFor","getChildrenIteratorFor","LOGGER","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","type","loadItem","metadataType","layoutEditorMetadata","warn","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","selectedComponent","highlightedComponent","root","isBlank","layoutChange","selectedChange","highlightedChange","displayNameChange","flatTree","_buildFlatTree","selectComponent","id","unselectComponent","highlightComponent","cancelHighlightedComponent","registerLayoutDesignerComponent","component","error","componentItem","children","getParent","getIndex","indexOf","getComponentDef","unregisterLayoutDesignerComponent","splice","displayNameUpdated","getMetadata","_buildFlatTreeForComponent","result","child","concat","AsRequiredTypePipe","transform","defaultValue","_valueHash","BindThis","_target","propertyKey","descriptor","originalValue","get","isFunction","Error","toString","configurable","bound","bind","defineProperty","writable"],"sourceRoot":""}