{"version":3,"file":"7006.chunk.7aa71bc2429e04126835.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/metadata/stackPanel.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/metadata/stackPanel.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Stack panel model for properties editor\n */\nexport class StackPanelModel implements StackPanelComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Horizontal')\n    @LayoutPropertyDescription('Indication whether display stacked elements horizontally')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public horizontal: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Wrap')\n    @LayoutPropertyDescription('Indication whether wrap children if there is not enough space')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public wrap: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public children: LayoutComponentMetadata[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}\n\n/**\n * Stack panel flex extension model for properties editor\n */\nexport class StackPanelFlexExtensionModel implements StackPanelFlexExtensionOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Flex')\n    @LayoutPropertyDescription('Definition of flex behavior')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public flex: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelFlexExtensionOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionModel, StackPanelModel} from './stackPanel.model';\n\n/**\n * Stack panel layout metadata\n */\nexport class StackPanelLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StackPanelComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo =\n    {\n        name: 'Stack',\n        description: 'Layout component that stacks items horizontally or vertically',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: StackPanelModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelModel>(['horizontal', 'wrap'])\n                    ],\n                },\n            ],\n            childPropertiesMetadata:\n            [\n                {\n                    modelType: StackPanelFlexExtensionModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelFlexExtensionModel>(['flex'])\n                    ],\n                },\n            ]\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StackPanelComponentOptions, number]> = (metadata, options, index) =>\n    {\n        options.children ??= [];\n        options.children.splice(index, 0, metadata);\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = () => true;\n\n    /**\n     * @inheritdoc\n     */\n    public isHorizontalDrop?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = options => !!options?.horizontal;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StackPanelComponentOptions]> = (id, options) =>\n    {\n        options.children ??= [];\n        const index = options.children.findIndex(itm => itm.id === id);\n        options.children.splice(index, 1);\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["StackPanelModel","constructor","value","horizontal","wrap","mapValuesToThis","bind","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","StackPanelFlexExtensionModel","flex","StackPanelLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","childPropertiesMetadata","addDescendant","metadata","options","index","children","splice","canDropMetadata","isHorizontalDrop","removeDescendant","id","findIndex","itm","Object","freeze","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","_this","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","ctx_r3","property_r1","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","undefined","form","get","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","ctx_r0","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","t","standalone","decls","vars","consts","template","rf","ctx","GenericPropertiesControl_ng_container_0_Template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","DefaultGenericPropertiesControlComponent_ng_container_0_Template","ReactiveFormsModule","CastPipesModule","NumberInputModule","AsFormControlPipe","transform","_valueHash","isBlank","FormControl","warn","pure"],"sourceRoot":""}