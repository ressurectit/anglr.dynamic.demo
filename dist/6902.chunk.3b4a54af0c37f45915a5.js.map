{"version":3,"file":"6902.chunk.3b4a54af0c37f45915a5.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/htmlBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/htmlBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\n\n/**\n * Html block layout metadata loader\n */\nexport const HtmlBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>> = async () => new (await import('./metadata/htmlBlock.layoutMetadata')).HtmlBlockLayoutEditorMetadata();\n\n/**\n * Html block relations metadata loader\n */\nexport const HtmlBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/htmlBlock.relationsMetadata')).HtmlBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input, SimpleChanges} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\nimport {HtmlBlockLayoutMetadataLoader, HtmlBlockRelationsMetadataLoader} from './htmlBlock.metadata';\n\n/**\n * Component used for displaying html block\n */\n@Component(\n{\n    selector: 'html-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<HtmlBlockSAComponent>('content'),\n    ],\n})\n@RelationsEditorMetadata(HtmlBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(HtmlBlockLayoutMetadataLoader)\nexport class HtmlBlockSAComponent extends LayoutComponentBase<HtmlBlockComponentOptions> implements LayoutComponent<HtmlBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public override async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.dynamicOnChanges(changes);\n\n        if(nameof<HtmlBlockSAComponent>('content') in changes)\n        {\n            this.componentElement.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        //TODO: check if required\n        // if(!this.initialized)\n        // {\n        //     return;\n        // }\n\n        if(this.options?.content)\n        {\n            this.content = this.options.content;\n            this.componentElement.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {HtmlBlockSAComponent} from './htmlBlock.component';\n\nexport default HtmlBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension, ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["HtmlBlockLayoutMetadataLoader","_ref","_asyncToGenerator","HtmlBlockLayoutEditorMetadata","apply","arguments","HtmlBlockRelationsMetadataLoader","_ref2","HtmlBlockRelationsEditorMetadata","HtmlBlockSAComponent","LayoutComponentBase","dynamicOnChanges","changes","_superprop_getDynamicOnChanges","_this","call","nameof","componentElement","nativeElement","innerHTML","content","onOptionsSet","this","options","t","selectors","inputs","standalone","features","i0","decls","vars","template","rf","ctx","styles","changeDetection","__decorate","DebugData","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onInit","extension","initialize","afterInit","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","applyStyling","style","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}