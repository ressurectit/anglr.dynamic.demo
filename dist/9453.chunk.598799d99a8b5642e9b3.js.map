{"version":3,"file":"9453.chunk.598799d99a8b5642e9b3.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/./app/boot/app.config.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.module.ts","webpack://ng-universal-demo/./app/boot/browser-app.module.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/loadSaveNew/loadSaveNew.component.html","webpack://ng-universal-demo/./app/pages/+default/misc/components/loadSaveNew/loadSaveNew.component.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsResult/relationsResult.metadata.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsResult/relationsResult.component.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsResult/relationsResult.component.html","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsSampleClick/relationsSampleClick.metadata.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsSampleClick/relationsSampleClick.component.ts","webpack://ng-universal-demo/./app/pages/+default/misc/components/relationsSampleClick/relationsSampleClick.component.html","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/constants.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/services/materialComponentsDynamicModuleItemsProvider/materialComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.ts","webpack://ng-universal-demo/../relations-editor/src/misc/factoryFns.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleRelationsProvider/defaultDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../relations/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/services/relationsComponentManager/relationsComponentManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsManager/relationsManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsProcessor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/services/basicComponentsDynamicModuleItemsProvider/basicComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../material-components/src/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t66249,\n\t\t6249\n\t],\n\t\"./gridPanel/type\": [\n\t\t49,\n\t\t49\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t9918,\n\t\t9918\n\t],\n\t\"./sampleChange/type\": [\n\t\t89354,\n\t\t9354\n\t],\n\t\"./sampleSource/type\": [\n\t\t51133,\n\t\t1133\n\t],\n\t\"./stackPanel/type\": [\n\t\t14433,\n\t\t4433\n\t],\n\t\"./textBlock/type\": [\n\t\t2252,\n\t\t2252\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 84635;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./en.json\": [\n\t\t79587,\n\t\t9587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t5930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {isFunction, isBlank, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\nglobalDefine(global =>\n{\n    if(!global.Document)\n    {\n        global.Document = function(){};\n    }\n\n    if(!global.ngDesignerMetadata)\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        // group(\n        // [\n        //     query('.loading-card', \n        //     [\n        //         animate('300ms', style(\n        //         {\n        //             transform: 'scale(4)'\n        //         }))\n        //     ]),\n        //     animate('200ms 100ms', style(\n        //     {\n        //         opacity: 0\n        //     }))\n            \n        // ])\n    ])\n]);","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div class=\"flex-row\">\r\n    <a routerLink=\"/\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Preview</a>\r\n    <a routerLink=\"/form-preview\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Form preview</a>\r\n    <a routerLink=\"/editor\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Editor</a>\r\n    <a routerLink=\"/relations-editor\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Relations editor</a>\r\n    <a routerLink=\"/relations\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Relations</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<!-- <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\"> -->\r\n<div class=\"content relative\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {consoleAnimationTrigger} from '@anglr/common/structured-log';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Subscription} from 'rxjs';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, null, 'Show console'));\n        }\n    }\n}","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Type} from '@angular/core';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const components: Type<any>[] =\n[\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        useHash: true\n        // preloadingStrategy: PreloadAllModules\n    },\n    staticRoutesBefore:\n    [\n        {\n            path: '',\n            loadChildren: () => import('../pages/+default/default.module').then(({DefaultModule}) => DefaultModule)\n        }\n    ],\n    staticRoutesAfter:\n    [\n        accessDeniedRoute,\n        notFoundRoute,\n    ]\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'en';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsResultComponent, RelationsSampleClickComponent} from '../../pages/+default/misc/components';\n\n/**\n * Static components register for demo app\n */\n@Injectable()\nexport class StaticComponentsRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[RelationsResultComponent.relationsId] = RelationsResultComponent;\n        result[RelationsSampleClickComponent.relationsId] = RelationsSampleClickComponent;\n\n        return result;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, Provider, ExistingProvider, Injector} from '@angular/core';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, handle400WithValidationsFunc, handle404Func, HttpClientErrorCustomHandler, HttpClientErrorResponseMapper, HttpClientValidationErrorResponseMapper, HTTP_CLIENT_ERROR_CUSTOM_HANDLER, HTTP_CLIENT_ERROR_RESPONSE_MAPPER, HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, METADATA_SELECTOR_TYPE, METADATA_SELECTOR_OPTIONS, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, GRID_INITIALIZER_TYPE, GRID_INITIALIZER_OPTIONS, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent} from '@anglr/grid';\nimport {DialogMetadataSelectorComponent, DialogMetadataSelectorOptions} from '@anglr/grid/material';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {ConfirmationDialogOptions, CONFIRMATION_DIALOG_OPTIONS, MovableTitledDialogComponent, TitledDialogServiceOptions} from '@anglr/common/material';\nimport {FLOATING_UI_POSITION} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {ClientErrorHandlingMiddleware, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {LoggerMiddleware, ReportProgressMiddleware, ResponseTypeMiddleware, REST_METHOD_MIDDLEWARES} from '@anglr/rest';\nimport {DATETIME_REST_DATE_API} from '@anglr/rest/datetime';\nimport {LayoutManager} from '@anglr/dynamic/layout';\nimport {provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {LayoutComponentsRegister, provideRelationsEditor, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\nimport {RelationsComponentManager} from '@anglr/dynamic/relations';\nimport {isString, isJsObject} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\nimport {sk} from 'date-fns/locale';\n\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\nimport {StaticComponentsRegister as DemoRegister} from '../services/staticComponentsRegister';\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers: Provider[] =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new NoConnectionInterceptorOptions('Server je mimo prevádzky.'),\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.'),\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### ERROR HANDLING #########################\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions>\n        {\n            texts:\n            {\n                loading: 'Loading data ...',\n                noData: 'No data for requested parameters',\n                notLoaded: 'Data have not been loaded yet'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_TYPE,\n        useValue: QueryGridInitializerComponent\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_TYPE,\n        useValue: DialogMetadataSelectorComponent\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_OPTIONS,\n        useValue: <DialogMetadataSelectorOptions>\n        {\n            showButtonVisible: false\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_OPTIONS,\n        useValue: <QueryPermanentStorageGridInitializerOptions>\n        {\n            storageIppName: 'all-grid-ipp'\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions<any>>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(null, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel]);\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n    ...isProduction ? \n        [] :\n        [\n            // <FactoryProvider>\n            // {\n            //     provide: LOGGER_SINKS,\n            //     useFactory: () => new ConsoleSink(),\n            //     multi: true\n            // }\n        ],\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    <ValueProvider>\n    {\n        provide: CONFIRMATION_DIALOG_OPTIONS,\n        useValue: <ConfirmationDialogOptions>\n        {\n            confirmationText: 'Prajete si pokračovať?',\n            dialogCancelText: 'Nie',\n            dialogConfirmText: 'Áno'\n        }\n    },\n\n    //######################### POSITION #########################\n    FLOATING_UI_POSITION,\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    DATETIME_REST_DATE_API,\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    <ValueProvider>\n    {\n        provide: REST_METHOD_MIDDLEWARES,\n        useValue:\n        [\n            LoggerMiddleware,\n            ResponseTypeMiddleware,\n            ReportProgressMiddleware,\n            ClientErrorHandlingMiddleware,\n        ]\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientErrorResponseMapper>(err => \n        {\n            if(err?.error?.errors)\n            {\n                return err?.error?.errors;\n            }\n\n            if(isString(err?.error))\n            {\n                return [err?.error];\n            }\n\n            if(isJsObject(err?.error))\n            {\n                return [JSON.stringify(err?.error)];\n            }\n            \n            return [err.message];\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientValidationErrorResponseMapper>(err => \n        {\n            if(err?.error?.validationErrors)\n            {\n                return err?.error?.validationErrors;\n            }\n\n            return null;\n        })\n    },\n    <FactoryProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_CUSTOM_HANDLER,\n        useFactory: injector =>\n        {\n            return <Record<number, HttpClientErrorCustomHandler<any>>>\n            {\n                400: err => handle400WithValidationsFunc(err, {injector}),\n                404: handle404Func\n            };\n        },\n        deps: [Injector]\n    },\n\n    //######################### DYNAMIC CONFIG #########################\n    ...provideLayoutEditor(),\n    ...provideRelations(),\n    ...provideRelationsEditor(),\n    RelationsComponentManager,\n    LayoutComponentsRegister,\n    LayoutManager,\n    <ClassProvider>\n    {\n        provide: StaticComponentsRegister,\n        useClass: DemoRegister,\n    },\n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return Observable.create(async (observer: Observer<any>) =>\n        {\n            const result = await import(`../../../content/l10n/${lang}.json`);\n\n            observer.next(result.default);\n            observer.complete();\n        });\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {TranslateModule, TranslateLoader, MissingTranslationHandler} from '@ngx-translate/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {MenuModule} from '../modules';\nimport {config} from '../config';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule.forRoot(),\n        RouterModule,\n        HotkeyModule,\n        MenuModule,\n        ConsoleLogModule.forRoot(),\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            },\n            ...config.configuration.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                    {\n                        provide: MissingTranslationHandler,\n                        useClass: ReportMissingTranslationService\n                    }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration.debugTranslations\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule,\n        HotkeyModule.forRoot(\n        {\n            cheatSheetCloseEsc: true\n        })\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: () => new AnglrExceptionHandlerOptions(config.configuration.debug, false)\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {simpleNotification} from '@jscrpt/common';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst platform = platformBrowser();\n\nrunWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) =>\n{\n    moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n    jsDevMode && simpleNotification(jsDevMode && import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralModule,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        DateTimeSelectorModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","<ng-select [formControl]=\"_available\" style=\"width: 180px\">\n    <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\n    <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\n</ng-select>\n\n<button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\n    <span>remove</span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\n    <span>load</span>\n</button>\n\n<input type=\"text\" [formControl]=\"_name\">\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\n    <span>save</span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\n    <span>new</span>\n</button>","import {Component, ChangeDetectionStrategy, Input, OnInit, EventEmitter, Output} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Func} from '@jscrpt/common';\n\nimport {LayoutDataService} from '../../../../../services/layoutData';\nimport {RelationsDataService} from '../../../../../services/relationsData';\n\n/**\n * Component used for loading saving and creating new layout/relations template\n */\n@Component(\n{\n    selector: 'load-save-new',\n    templateUrl: 'loadSaveNew.component.html',\n    styleUrls: ['loadSaveNew.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NgSelectModule,\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadSaveNewSAComponent<TMetadata extends (LayoutComponentMetadata|RelationsNodeMetadata) = any> implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: TMetadata|TMetadata[]|null = null;\n    \n    protected _available: FormControl = new FormControl('');\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    //######################### public properties - inputs #########################\n\n    @Input()\n    public store: LayoutDataService|RelationsDataService;\n\n    @Input()\n    public routePath: string;\n\n    @Input()\n    public getMetadataCallback: Func<TMetadata|TMetadata[]>;\n\n    //######################### public properties - outputs #########################\n\n    @Output()\n    public metadataChange: EventEmitter<TMetadata|TMetadata[]|null> = new EventEmitter<TMetadata|TMetadata[]|null>();\n\n    //######################### constructor #########################\n    constructor(private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this.store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata = null;\n                this.metadataChange.next(this._metadata);\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this.store.getData(this._available.value) as TMetadata|TMetadata[]|null;\n                this.metadataChange.next(this._metadata);\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this.store.getData(this._available.value) as TMetadata|TMetadata[]|null;\n        this.metadataChange.next(this._metadata);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate([this.routePath, this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this.store.setData(this._name.value, this.getMetadataCallback() as any);\n\n        this._availableNames = this.store.getStored();\n        this._router.navigate([this.routePath, this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _delete(): void\n    {\n        this.store.removeData(this._available.value);\n\n        this._availableNames = this.store.getStored();\n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata = null;\n        this.metadataChange.next(this._metadata);\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations result relations metadata loader\n */\nexport const RelationsResultRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsResult.relationsMetadata')).RelationsResultRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Input, ChangeDetectorRef, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsResultRelationsMetadataLoader} from './relationsResult.metadata';\n\n/**\n * Component used for displaying result binding of relations\n */\n@Component(\n{\n    selector: 'relations-result',\n    templateUrl: 'relationsResult.component.html',\n    // styleUrls: ['relationsResult.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsResultRelationsMetadataLoader)\nexport class RelationsResultComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-result';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsResultComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsResultComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsResultComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsResultComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsResultComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil v result', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations sample click relations metadata loader\n */\nexport const RelationsSampleClickRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsSampleClick.relationsMetadata')).RelationsSampleClickRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, ChangeDetectorRef, Input, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {DynamicOutput, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsSampleClickRelationsMetadataLoader} from './relationsSampleClick.metadata';\n\n/**\n * Sample relations click component\n */\n@Component(\n{\n    selector: 'relations-sample-click',\n    templateUrl: 'relationsSampleClick.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsSampleClickRelationsMetadataLoader)\nexport class RelationsSampleClickComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-sample-click';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Defines form control for vystup value\n     */\n    protected _vystupForm: FormControl<string> = new FormControl<string>('');\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Test output\n     */\n    @DynamicOutput()\n    public vystup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n        this._vystupForm.valueChanges.subscribe(value => this.vystup = value);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsSampleClickComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsSampleClickComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsSampleClickComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsSampleClickComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsSampleClickComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>\n<div>\n    <input type=\"text\" [formControl]=\"_vystupForm\">\n</div>","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicItemSource, DynamicModule} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n//TODO: maybe move into layout\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","/**\n * Suffix used for layout designer component id\n */\nexport const LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX = '-designer';\n","import {ClassProvider, FactoryProvider, Optional, ValueProvider} from '@angular/core';\nimport {DefaultDynamicModuleTypesProvider, defaultExportExtractor, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {LayoutDesignerDynamicModuleItemsProvider} from '../services';\nimport {LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider for all built-in types in dynamic\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};","import {Injector} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n * @param injector - Injector used for obtaining dependencies\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata, injector: Injector): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {inject, InjectFlags, InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {InputBooleanComponent, InputStringComponent, SelectValueComponent} from '../modules/propertyTypeControls';\nimport {LayoutPropertyMetadata} from './types';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {isLayoutModuleTypes} from './utils';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES', {providedIn: 'root', factory: () => [LayoutPropertyMetadata]});\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () =>\n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }});\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER', \n                                                                                                                                                         {\n                                                                                                                                                             providedIn: 'root',\n                                                                                                                                                             factory: () =>\n                                                                                                                                                             {\n                                                                                                                                                                 return new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                                                                                                                                                                              inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                                                                                                                                                                              isLayoutModuleTypes,\n                                                                                                                                                                                              inject(LOGGER, InjectFlags.Optional) ?? undefined);\n                                                                                                                                                             }\n                                                                                                                                                         });","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER} from './providers';\nimport {LayoutComponentsIteratorService} from '../services/layoutComponentsIterator/layoutComponentsIterator.service';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n */\nexport function provideLayoutEditor(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LayoutComponentsIteratorService,\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentMetadata|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parentMetadata, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - Metadata for parent layout component\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parentMetadata: LayoutComponentMetadata<TOptions>|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        this._items.push(\n        {\n            metadata,\n            parentMetadata,\n            levelIndex,\n            level\n        });\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], metadata, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {inject, InjectFlags, InjectionToken, Type} from '@angular/core';\nimport {LOGGER} from '@anglr/common';\nimport {DynamicItemExtension, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<Type<DynamicItemExtension>[]> = new InjectionToken<Type<DynamicItemExtension>[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER', \n                                                                                                                                                         {\n                                                                                                                                                             providedIn: 'root',\n                                                                                                                                                             factory: () =>\n                                                                                                                                                             {\n                                                                                                                                                                 return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                                                                                                                                                                              inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                                                                                                                                                                              isLayoutComponentDef,\n                                                                                                                                                                                              inject(LOGGER, InjectFlags.Optional) ?? undefined);\n                                                                                                                                                             }\n                                                                                                                                                         });\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in material-components\n */\n@Injectable()\nexport class MaterialComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with material-components\n        if(source.package != 'material-components' && source.package != '@anglr/dynamic/material-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('MaterialComponentsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/material-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialComponentsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {Type} from '@angular/core';\nimport {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtension, DynamicItemExtensions, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions<TExtension extends DynamicItemExtension = any> extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: Type<TExtension>[]|DynamicItemExtensions<TExtension>;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: Type<TExtension>[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as Type<DynamicItemExtension>[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {ClassProvider, FactoryProvider, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {BasicComponentsDynamicModuleItemsProvider, defaultExportExtractor, DynamicModuleDataExtractor, extensionsExportsExtractor, MaterialComponentsDynamicModuleItemsProvider} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\n\n/**\n * Provider for basic components package layout components provider\n */\nexport const BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material components package layout components provider\n */\n export const MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n {\n     provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n     useClass: MaterialComponentsDynamicModuleItemsProvider,\n     multi: true\n };\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n        MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setRelations(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataType} from './relationsEditorMetadata.interface';\n\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\nexport function RelationsEditorMetadata(metadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<RelationsEditorMetadataDescriptor, RelationsEditorMetadataType>(metadataLoader, 'relationsEditorMetadata');\n}","import {inject, InjectFlags} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\n\nimport {RELATIONS_NODES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_MODULE_TYPES_DATA_EXTRACTORS} from './tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Factory function for relations node loader provider\n */\nexport const relationsNodeLoaderFactory = (): DynamicItemLoader<RelationsNodeDef> =>\n{\n    return new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                 inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                 isRelationsNodeDef,\n                                 inject(LOGGER, InjectFlags.Optional) ?? undefined);\n};\n\n/**\n * Factory function for relations module types loader provider\n */\nexport const relationsModuleTypesLoaderFactory = (): DynamicItemLoader<RelationsModuleTypes> =>\n{\n    return new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                 inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                 isRelationsModuleTypes,\n                                 inject(LOGGER, InjectFlags.Optional) ?? undefined);\n};","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {relationsModuleTypesLoaderFactory, relationsNodeLoaderFactory} from './factoryFns';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER',\n                                                                                                                                                                  {\n                                                                                                                                                                      providedIn: 'root',\n                                                                                                                                                                      factory: relationsModuleTypesLoaderFactory,\n                                                                                                                                                                  });\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER',\n                                                                                                                                                   {\n                                                                                                                                                       providedIn: 'root',\n                                                                                                                                                       factory: relationsNodeLoaderFactory,\n                                                                                                                                                   });\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicItemSource, DynamicModule} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n//TODO: maybe move into relations\n\n/**\n * Default dynamic module relations types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/relations');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\nimport {resolvePromiseOr} from '@jscrpt/common';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await resolvePromiseOr(relationsExportExtractor(module, logger));\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider, FactoryProvider, Optional} from '@angular/core';\nimport {BasicComponentsDynamicModuleItemsProvider, DefaultDynamicModuleRelationsProvider, defaultExportExtractor, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for basic components package relations nodes provider\n */\nexport const BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for default dynamic relations types provider for all built-in types in dynamic\n */\nexport const DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static components relations nodes extractor\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isType} from '@jscrpt/common';\n\nimport {BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER, DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        STATIC_COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n    ];\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutManager, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = type.data;\n        }\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Subject} from 'rxjs';\n\n/**\n * Creates dynamic output for property\n */\nexport function DynamicOutput(): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value:any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      this[`${prop}Change`].next();\n                                  }\n                              });\n    };\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {inject, InjectFlags, InjectionToken} from '@angular/core';\nimport {LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {RelationsComponentDef} from './types';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Injection token for relations components module data extractors\n */\nexport const RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations components module providers\n */\nexport const RELATIONS_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<RelationsComponentDef>> = new InjectionToken<DynamicItemLoader<RelationsComponentDef>>('RELATIONS_COMPONENTS_LOADER', \n                                                                                                                                                                  {\n                                                                                                                                                                      providedIn: 'root',\n                                                                                                                                                                      factory: () =>\n                                                                                                                                                                      {\n                                                                                                                                                                          return new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                                                                                                                                                                                       inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                                                                                                                                                                                       isRelationsComponentDef,\n                                                                                                                                                                                                       inject(LOGGER, InjectFlags.Optional) ?? undefined);\n                                                                                                                                                                      }\n                                                                                                                                                                  });\n","import {ClassProvider, FactoryProvider, Optional} from '@angular/core';\nimport {BasicComponentsDynamicModuleItemsProvider, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\n\n/**\n * Provider for basic components package relations components provider\n */\nexport const BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR} from './providers';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n    ];\n}","import {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Manager used for managing all components used in relations\n */\n@Injectable()\nexport class RelationsComponentManager implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Registered components\n     */\n    protected _components: Dictionary<RelationsComponent> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Registers newly created component\n     * @param id - Id of component to be registered\n     * @param component - Instance of registered component\n     */\n    public registerComponent(id: string, component: RelationsComponent): void\n    {\n        if(this._components[id])\n        {\n            this._logger?.warn(`RelationsComponentManager: Component with id '${id}' is already registered, provide unique id.`);\n\n            return;\n        }\n\n        this._components[id] = component;\n    }\n\n    /**\n     * Unregisters component\n     * @param id - Id of component to be unregistered\n     */\n    public unregisterComponent(id: string): void\n    {\n        if(!this._components[id])\n        {\n            this._logger?.warn(`RelationsComponentManager: Component with id '${id}' has already been unregistered.`);\n\n            return;\n        }\n\n        delete this._components[id];\n    }\n\n    /**\n     * Gets instance of component or array of component instances or null\n     * @param id - Unique identification of component, or components\n     */\n    public get(id: string): RelationsComponent[]|RelationsComponent|null\n    {\n        return this._components[id];\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsComponentMetadata} from '../../interfaces';\n\n/**\n * Manager of relations metadata\n */\n@Injectable()\nexport class RelationsManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current relations value\n     */\n    protected _relations: RelationsComponentMetadata[] = [];\n    \n    /**\n     * Used for emitting relations changes\n     */\n    protected _relationsChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current relations value\n     */\n    public get relations(): RelationsComponentMetadata[]\n    {\n        return this._relations;\n    }\n    \n    /**\n     * Occurs when relations changes\n     */\n    public get relationsChange(): Observable<void>\n    {\n        return this._relationsChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets relations new value\n     * @param relations - Value of relations that changed\n     */\n    public setRelations(relations: RelationsComponentMetadata[]): void\n    {\n        if(this._relations == relations)\n        {\n            return;\n        }\n    \n        this._relations = relations;\n        this._relationsChange.next();\n    }\n}","import {Inject, Injectable, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {Dictionary, isBlank, noop, NoopAction} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {RelationsComponent, RelationsComponentMetadata} from '../../interfaces';\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsManager} from '../relationsManager/relationsManager.service';\nimport {RelationsProcessorComponentData, RelationsProcessorInputOutputData} from './relationsProcessor.interface';\nimport {RELATIONS_COMPONENTS_LOADER} from '../../misc/tokens';\nimport {RelationsComponentDef} from '../../misc/types';\n\n/**\n * Processor that applies relations to registered components\n */\n@Injectable()\nexport class RelationsProcessor implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Promise used for indication that processor was initialized\n     */\n    protected _initialized: Promise<void> = Promise.resolve();\n\n    /**\n     * Resolves initialized\n     */\n    protected _resolveInitialized: NoopAction = noop;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Relations metadata\n     */\n    protected _relations: Dictionary<RelationsProcessorComponentData> = {};\n\n    /**\n     * Array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected _backwardRelations: Dictionary<RelationsProcessorInputOutputData[]> = {};\n\n    //######################### public properties #########################\n\n    /**\n     * Gets promise that completes when processor was initialized\n     */\n    public get initialized(): Promise<void>\n    {\n        return this._initialized;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _relationsManager: RelationsManager,\n                protected _componentManager: RelationsComponentManager,\n                @Inject(RELATIONS_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<RelationsComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        this._initSubscriptions.add(this._relationsManager.relationsChange.subscribe(() => this._initializeRelations()));\n\n        this._initializeRelations();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n\n        this._destroyRelations();\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Updates relations\n     * @param id - Id of component to be registered\n     */\n    public updateRelations(id: string): void\n    {\n        const relations: RelationsProcessorComponentData = this._relations[id];\n        const backwardRelations = this._backwardRelations[id];\n        let components = this._componentManager.get(id);\n\n        //this component has no relations\n        if(!relations && !backwardRelations?.length || !components)\n        {\n            this._logger?.debug('RelationsProcessor: No relations for {@id}', {id});\n\n            return;\n        }\n\n        //initialize default value from connection to this\n        if(backwardRelations?.length)\n        {\n            backwardRelations.forEach(inputOutput =>\n            {\n                this._initBackwardRelation(inputOutput);\n            });\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            for(const inputOutput of relations.inputOutputs)\n            {\n                let inputComponents = this._componentManager.get(inputOutput.inputComponentId);\n\n                if(inputComponents && !Array.isArray(inputComponents))\n                {\n                    inputComponents = [inputComponents];\n                }\n\n                for(const outputComponent of components)\n                {\n                    const outputObservable = (outputComponent as any)[`${inputOutput.outputName}Change`] as Observable<any>;\n\n                    //check whether is observable output\n                    if(!(outputObservable instanceof Observable))\n                    {\n                        this._logger?.warn('RelationsProcessor: Output on component {@data} is not observable', inputOutput);\n\n                        continue;\n                    }\n\n                    //destroy existing subscriptions if there are any\n                    relations.outputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                    relations.outputsChangeSubscriptions = [];\n\n                    //set listening for output changes\n                    relations.outputsChangeSubscriptions.push(outputObservable.subscribe(() =>\n                    {\n                        let inputs = this._componentManager.get(inputOutput.inputComponentId);\n\n                        if(!inputs)\n                        {\n                            this._logger?.warn('RelationsProcessor: Missing input components {@data} on output change', inputOutput);\n\n                            return;\n                        }\n\n                        if(!Array.isArray(inputs))\n                        {\n                            inputs = [inputs];\n                        }\n\n                        for(const input of inputs)\n                        {\n                            this._transferData(outputComponent, inputOutput.outputName, input, inputOutput.inputName, false);\n                        }\n                    }));\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this._logger?.warn('RelationsProcessor: Missing input components {@data}', inputOutput);\n\n                        continue;\n                    }\n\n                    for(const inputComponent of inputComponents)\n                    {\n                        //initialize default value from this to its connections\n                        if(!inputOutput.initialized)\n                        {\n                            inputOutput.initialized = this._transferData(outputComponent, inputOutput.outputName, inputComponent, inputOutput.inputName, true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Method used for destroying component\n     */\n    public destroyComponent(id: string): void\n    {\n        const metadata: RelationsProcessorComponentData = this._relations[id];\n        const backwardRelations = this._backwardRelations[id];\n\n        //uninitialize backward relations\n        if(backwardRelations)\n        {\n            for(const relation of backwardRelations)\n            {\n                relation.initialized = false;\n            }\n        }\n\n        //destroy relations\n        if(metadata)\n        {\n            metadata.outputsChangeSubscriptions.forEach(subscription => subscription.unsubscribe());\n            metadata.outputsChangeSubscriptions = [];\n\n            if(metadata.inputOutputs && Array.isArray(metadata.inputOutputs))\n            {\n                for(const inputOutput of metadata.inputOutputs)\n                {\n                    inputOutput.initialized = false;\n                }\n            }\n\n            //destroy auto created components and unregister them\n            if(metadata.autoCreated)\n            {\n                let components = this._componentManager.get(id);\n\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                this._componentManager.unregisterComponent(id);\n\n                for(const cmp of components)\n                {\n                    cmp.ngOnDestroy?.();\n                }\n            }\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize relations from metadata\n     */\n    protected async _initializeRelations(): Promise<void>\n    {\n        await this._destroyRelations();\n        this._setInitializePromise();\n\n        this._logger?.debug('RelationsProcessor: initializing relations');\n\n        //empty relations\n        if(!this._relationsManager.relations.length)\n        {\n            this._resolveInitialized();\n\n            return;\n        }\n\n        for(const meta of this._relationsManager.relations)\n        {\n            const outputs: RelationsProcessorInputOutputData[] = [];\n\n            //no outputs metadata\n            if(!meta.outputs)\n            {\n                continue;\n            }\n\n            for(const output of meta.outputs)\n            {\n                //no inputs metadata\n                if(!output.inputs)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const inputOutput: RelationsProcessorInputOutputData = \n                    {\n                        inputComponentId: input.id,\n                        outputComponentId: meta.id,\n                        inputName: input.inputName,\n                        outputName: output.outputName,\n                        initialized: false,\n                    };\n\n                    outputs.push(inputOutput);\n\n                    if(!this._backwardRelations[input.id])\n                    {\n                        this._backwardRelations[input.id] = [];\n                    }\n\n                    this._backwardRelations[input.id].push(inputOutput);\n                }\n            }\n\n            //sets options for relations component\n            await this._initComponent(meta, outputs);\n        }\n\n        this._resolveInitialized();\n    }\n\n    /**\n     * Initialize backward relations\n     * @param inputOutput - Data for input and output\n     */\n    protected _initBackwardRelation(inputOutput: RelationsProcessorInputOutputData): void\n    {\n        let outputComponents = this._componentManager.get(inputOutput.outputComponentId);\n        let inputComponents = this._componentManager.get(inputOutput.inputComponentId);\n\n        if((isBlank(outputComponents) || Array.isArray(outputComponents) && !outputComponents.length) ||\n           (isBlank(inputComponents) || Array.isArray(inputComponents) && !inputComponents.length))\n        {\n            this._logger?.warn('RelationsProcessor: missing metadata for backward relations {@data}', inputOutput);\n\n            return;\n        }\n\n        if(!Array.isArray(inputComponents))\n        {\n            inputComponents = [inputComponents];\n        }\n\n        if(!Array.isArray(outputComponents))\n        {\n            outputComponents = [outputComponents];\n        }\n\n        for(const inputCmp of inputComponents)\n        {\n            for(const outputCmp of outputComponents)\n            {\n                if(!inputOutput.initialized)\n                {\n                    inputOutput.initialized = this._transferData(outputCmp, inputOutput.outputName, inputCmp, inputOutput.inputName, true);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transfers data from source property to target property\n     * @param source Instance of source object containing source property with data\n     * @param sourceProperty Name of source property with data that are transfered\n     * @param target Instance of target object containing target property for data\n     * @param targetProperty Name of target property which will be filled with data\n     * @param initial Indication whether is transfer of data initial, or on event\n     */\n    protected _transferData(source: RelationsComponent, sourceProperty: string, target: RelationsComponent, targetProperty: string, initial: boolean): boolean\n    {\n        if(!source || !target)\n        {\n            return false;\n        }\n\n        const previousValue = (target as any)[targetProperty];\n        const currentValue = (source as any)[sourceProperty];\n        (target as any)[targetProperty] = (source as any)[sourceProperty];\n        const changes: SimpleChanges = {};\n\n        changes[targetProperty] = \n        {\n            previousValue,\n            currentValue,\n            firstChange: initial,\n            isFirstChange: () => initial\n        };\n\n        target.ngOnChanges(changes);\n        target.invalidateVisuals();\n\n        return true;\n    }\n\n    /**\n     * Initialize relation component \n     * @param meta - Metadata for relations component\n     * @param outputs - Array of outputs data for relations component\n     */\n    protected async _initComponent(meta: RelationsComponentMetadata, outputs: RelationsProcessorInputOutputData[]): Promise<void>\n    {\n        const component = this._componentManager.get(meta.id);\n\n        if(component)\n        {\n            this._initRelation(component, false, meta, outputs);\n            this.updateRelations(meta.id);\n\n            return;\n        }\n\n        const componentMeta = await this._loader.loadItem(meta);\n\n        if(!componentMeta)\n        {\n            this._logger?.warn('RelationsProcessor: Unable to load relations component! {@meta}', {package: meta.package, name: meta.name});\n\n            return;\n        }\n\n        const instance = new componentMeta.data();\n        this._componentManager.registerComponent(meta.id, instance);\n\n        this._initRelation(instance, true, meta, outputs);\n        this.updateRelations(meta.id);\n    }\n\n    /**\n     * Initialize relation for metadata and component\n     * @param component - Instance of component which relation will be initialized\n     * @param autoCreated - Indication whether was component auto created or not\n     * @param meta - Metadata for relations component\n     * @param outputs - Array of outputs data for relations\n     */\n    protected _initRelation(component: RelationsComponent|RelationsComponent[], autoCreated: boolean, meta: RelationsComponentMetadata, outputs: RelationsProcessorInputOutputData[]): void\n    {\n        this._relations[meta.id] =\n        {\n            autoCreated,\n            inputOutputs: outputs,\n            outputsChangeSubscriptions: []\n        };\n\n        if(Array.isArray(component))\n        {\n            for(const comp of component)\n            {\n                comp.relationsOptions = meta.relationsOptions;\n            }\n        }\n        else\n        {\n            component.relationsOptions = meta.relationsOptions;\n        }\n    }\n\n    /**\n     * Sets initialized promise\n     */\n    protected _setInitializePromise(): void\n    {\n        this._initialized = new Promise(resolve => this._resolveInitialized = resolve);\n    }\n\n    /**\n     * Destroys initialized relations\n     */\n    protected async _destroyRelations(): Promise<void>\n    {\n        await this._initialized;\n\n        Object.keys(this._relations).forEach(id => this.destroyComponent(id));\n\n        this._relations = {};\n        this._backwardRelations = {};\n    }\n}","import {DynamicMetadataLoader} from './dynamicMetadata.interface';\n\ndeclare let ngDesignerMetadata: boolean;\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata<TMetadata, TDecoratedClass>(metadataLoader: DynamicMetadataLoader<TMetadata>, propertyName: keyof TDecoratedClass): ClassDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            (target as any)[propertyName] = metadataLoader();\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in basic-components\n */\n@Injectable()\nexport class BasicComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with basic-components\n        if(source.package != 'basic-components' && source.package != '@anglr/dynamic/basic-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/basic-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected _cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected _providers: DynamicModuleProvider[],\n                protected _extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected _validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this._cachedDynamicItems)\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this._cachedDynamicItems[cacheId] = this._validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this._cachedDynamicItems[cacheId])\n                {\n                    this._logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this._cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this._cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, resolvePromiseOr, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await resolvePromiseOr(fn(module, this._logger)));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t93833,\n\t\t1239,\n\t\t3833\n\t],\n\t\"./datepicker/type\": [\n\t\t23489,\n\t\t2245,\n\t\t4262,\n\t\t9101,\n\t\t6038,\n\t\t3489\n\t],\n\t\"./numberField/type\": [\n\t\t62459,\n\t\t2245,\n\t\t4262,\n\t\t2459\n\t],\n\t\"./period/type\": [\n\t\t94391,\n\t\t2245,\n\t\t4262,\n\t\t4391\n\t],\n\t\"./radio/type\": [\n\t\t7570,\n\t\t9221,\n\t\t7570\n\t],\n\t\"./select/type\": [\n\t\t79838,\n\t\t2245,\n\t\t5887,\n\t\t9838\n\t],\n\t\"./textField/type\": [\n\t\t28945,\n\t\t2245,\n\t\t4262,\n\t\t8945\n\t],\n\t\"./textarea/type\": [\n\t\t13702,\n\t\t2245,\n\t\t4262,\n\t\t3702\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 13680;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","t","UserSettingsSections","i0","theme_r5","lang_r6","level_r8","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","consoleConfig","debugDataEnabled","themes","config","languages","logLevels","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","generalSettingsForm","group","language","theme","debuggingSettingsForm","consoleEnabled","debugData","loggingSettingsForm","consoleLogLevel","LogEventLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","restrictToLevel","setLoggingSettings","forEach","val","isNaN","push","name","value","selectors","standalone","features","decls","vars","consts","template","DisplayingFeatureModule","i5","FormsFeatureModule","i2","styles","changeDetection","globalDefine","global","Document","ngDesignerMetadata","observableSubscribe","Observable","next","error","complete","isBlank","isFunction","err","console","log","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","width","height","transform","opacity","animate","loaderTrigger","MainMenuComponent","_dialog","openSettings","open","title","maxHeight","ctx","AppComponent","translateSvc","_changeDetector","_appHotkeys","logger","document","consoleVisible","routeComponentState","guiVersion","version","initialized","verbose","body","classList","add","_theme","_settingsChangeSubscription","settingsChange","itm","nameof","remove","use","detectChanges","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","ngOnInit","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","component","ngOnDestroy","unsubscribe","destroy","oldHelpHotkey","hotkeys","get","Hotkey","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","fadeInOutTrigger","consoleAnimationTrigger","routesOptions","rootModule","rootModuleConfig","enableTracing","useHash","staticRoutesBefore","path","loadChildren","DefaultModule","staticRoutesAfter","loadComponent","AccessDeniedComponent","NotFoundComponent","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","factory","StaticComponentsRegister","Register","getDefinedTypes","result","RelationsResultComponent","RelationsSampleClickComponent","providers","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","provide","HttpGatewayTimeoutInterceptorOptions","useClass","GlobalizationServiceImpl","ERROR_WITH_URL_EXTENDER","ANGLR_EXCEPTION_HANDLER_PROVIDER","DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER","NO_DATA_RENDERER_OPTIONS","useValue","texts","loading","noData","notLoaded","GRID_INITIALIZER_TYPE","QueryGridInitializerComponent","PAGING_OPTIONS","itemsPerPageValues","initialItemsPerPage","METADATA_SELECTOR_TYPE","DialogMetadataSelectorComponent","METADATA_SELECTOR_OPTIONS","showButtonVisible","GRID_INITIALIZER_OPTIONS","storageIppName","CONTENT_RENDERER_OPTIONS","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","PERMANENT_STORAGE","LocalPermanentStorageService","ConsoleSinkConfigService","deps","SettingsService","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogServiceOptions","MovableTitledDialogComponent","CONFIRMATION_DIALOG_OPTIONS","confirmationText","dialogCancelText","dialogConfirmText","FLOATING_UI_POSITION","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","DATETIME_REST_DATE_API","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","REST_METHOD_MIDDLEWARES","LoggerMiddleware","ResponseTypeMiddleware","ReportProgressMiddleware","ClientErrorHandlingMiddleware","HTTP_CLIENT_ERROR_RESPONSE_MAPPER","errors","isString","isJsObject","JSON","stringify","message","HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER","validationErrors","HTTP_CLIENT_ERROR_CUSTOM_HANDLER","injector","handle400WithValidationsFunc","handle404Func","Injector","provideLayoutEditor","provideRelations","provideRelationsEditor","RelationsComponentManager","LayoutComponentsRegister","LayoutManager","DemoRegister","WebpackTranslateLoaderService","getTranslation","lang","observer","default","ReportMissingTranslationService","_logger","handle","params","debug","key","AppModule","imports","BrowserModule","appId","HttpClientModule","InternalServerErrorModule","ProgressIndicatorModule","NotificationsGlobalModule","RouterModule","HotkeyModule","MenuModule","ConsoleLogModule","TranslateModule","loader","TranslateLoader","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","ModuleRoutes","BrowserAppModule","bootstrap","AnglrExceptionHandlerOptions","BrowserAnimationsModule","BrowserTransferStateModule","cheatSheetCloseEsc","enableProdMode","platform","platformBrowser","runWhenModuleStable","bootstrapModule","moduleRef","RestTransferStateService","clearAndDeactivate","InjectionToken","CommonModule","CommonUtilsModule","CommonLocalizeModule","NumeralModule","TooltipModule","DatePipesModule","AuthorizationModule","ReactiveFormsModule","MatSlideToggleModule","NumberInputModule","NgSelectModule","NgSelectEditModule","DateTimeSelectorModule","HasErrorModule","FormPipesModule","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","TitledDialogModule","val_r1","LoadSaveNewSAComponent","_router","_route","_metadata","_available","FormControl","_name","_availableNames","metadataChange","EventEmitter","store","getStored","setValue","getData","_load","navigate","routePath","skipLocationChange","replaceUrl","_save","setData","getMetadataCallback","_delete","removeData","_new","inputs","outputs","i3","i4","RelationsResultRelationsMetadataLoader","RelationsResultRelationsEditorMetadata","_relationsProcessor","_componentManager","relationsId","registerComponent","RelationsResultComponent_1","updateRelations","destroyComponent","unregisterComponent","ngOnChanges","changes","vstup","invalidateVisuals","RelationsEditorMetadata","ChangeDetectorRef","RelationsProcessor","RelationsSampleClickRelationsMetadataLoader","RelationsSampleClickRelationsEditorMetadata","_vystupForm","vystup","RelationsSampleClickComponent_1","__decorate","DynamicOutput","keyValueDiffers","_storage","_settings","_settingsDebugging","getDebugging","_settingsLogging","getLogging","_settingsChangeSubject","Subject","_settingsDebuggingChangeSubject","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","asObservable","extend","set","forEachChangedItem","setDebugging","setLogging","providedIn","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","DefaultDynamicModuleTypesProvider","tryToGet","source","moduleName","package","LayoutDesignerDynamicModuleItemsProvider","warn","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_TRANSFORM","metadata","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","DynamicModuleDataExtractor","defaultExportExtractor","Optional","InputStringComponent","PropertyTypeControlBase","InputBooleanComponent","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","SelectValueComponent","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","InjectFlags","undefined","Symbol","provideLayout","LayoutComponentsIteratorService","data","Array","isArray","_initialized","values","control","_control","_controlSet","resolvePromiseOr","_initialize","initialize","LayoutComponentsIterator","_layoutMetadata","_extractor","_items","_initPromise","asyncIterator","x","initPromise","_getInitPromise","items","length","done","callback","item","parentMetadata","levelIndex","level","_getComponents","_getComponent","meta","extractMetadata","getDescendants","childrenMeta","getIteratorFor","layoutMetadata","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","type","loadItem","metadataType","layoutEditorMetadata","metadataData","freeze","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","isLayoutComponentDef","MaterialComponentsDynamicModuleItemsProvider","extensionsExportsExtractor","localModule","extensionsObject","extensions","childExtensions","BASIC_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","BasicComponentsDynamicModuleItemsProvider","MATERIAL_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","isType","isPresent","some","_layout","_layoutChange","layout","layoutChange","setRelations","metadataLoader","DynamicClassMetadata","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","RELATIONS_MODULE_TYPES_PROVIDERS","RELATIONS_NODES_DATA_EXTRACTORS","isRelationsModuleTypes","RELATIONS_NODES_PROVIDERS","RELATIONS_NODES_LOADER","isRelationsNodeDef","DefaultDynamicModuleRelationsProvider","relationsNodeExtractor","relations","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","metaInfo","componentRelationsNodeExtractor","singleton","StaticComponentsRelationsNodesProvider","_componentsRegister","getType","LayoutComponentsRelationsNodesProvider","StaticComponentsRelationsTypesProvider","types","LayoutComponentsRelationsTypesProvider","resultTypes","BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","DEFAULT_RELATIONS_NODES_EXTRACTOR","STATIC_COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","clamp","num","min","max","Math","isBoolean","_layoutManager","_iteratorSvc","_initSubscriptions","Subscription","_definedTypes","_initializeTypes","layoutComponents","target","propertyKey","prop","defineProperty","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","RELATIONS_COMPONENTS_MODULE_PROVIDERS","RELATIONS_COMPONENTS_LOADER","isRelationsComponentDef","BASIC_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","_components","RelationsManager","_relations","_relationsChange","relationsChange","_relationsManager","_resolveInitialized","noop","_backwardRelations","_initializeRelations","_destroyRelations","backwardRelations","components","inputOutput","_initBackwardRelation","inputOutputs","inputComponents","inputComponentId","outputComponent","outputObservable","outputName","outputsChangeSubscriptions","subscription","input","_transferData","inputName","inputComponent","relation","autoCreated","cmp","_setInitializePromise","output","outputComponentId","_initComponent","outputComponents","inputCmp","outputCmp","sourceProperty","targetProperty","initial","previousValue","currentValue","firstChange","isFirstChange","_initRelation","componentMeta","instance","comp","relationsOptions","propertyName","_providers","_extractors","_validatorFn","_cachedDynamicItems","dynamicModule","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","_extractorFunctions","fn","isEmptyObject","all","slice"],"sourceRoot":""}