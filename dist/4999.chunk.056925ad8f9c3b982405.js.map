{"version":3,"file":"4999.chunk.056925ad8f9c3b982405.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ButtonComponentOptions} from './button.options';\n\n/**\n * Button layout metadata loader\n */\nexport const ButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ButtonComponentOptions>> = async () => new (await import('./metadata/button.layoutMetadata')).ButtonLayoutEditorMetadata();\n\n/**\n * Button relations metadata loader\n */\nexport const ButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/button.relationsMetadata')).ButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {ButtonComponentOptions} from './button.options';\nimport {ButtonLayoutMetadataLoader, ButtonRelationsMetadataLoader} from './button.metadata';\n\n/**\n * Component used for displaying button\n */\n@Component(\n{\n    selector: 'button-component',\n    templateUrl: 'button.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(ButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ButtonLayoutMetadataLoader)\nexport class ButtonSAComponent extends LayoutComponentBase<ButtonComponentOptions> implements LayoutComponent<ButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting new void object value when clicked\n     */\n    @DynamicOutput()\n    public click: VoidObject = {};\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n    }\n}","<button type=\"button\" class=\"btn btn-primary\" [disabled]=\"disabled\" (click)=\"click = {}\">\n    <span>{{options?.text}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ButtonSAComponent} from './button.component';\n\nexport default ButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this._injector.get(RelationsProcessor, null);\n        this.componentManager ??= this._injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this._metadata.id, this._instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this._metadata.id);\n        this.componentManager.unregisterComponent(this._metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["ButtonLayoutMetadataLoader","ButtonLayoutEditorMetadata","ButtonRelationsMetadataLoader","ButtonRelationsEditorMetadata","ButtonSAComponent","LayoutComponentBase","disabled","click","_onOptionsSet","this","options","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","LOGGER","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","_metadata","_instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent","injector","instance"],"sourceRoot":""}