{"version":3,"file":"992.chunk.51365a0de837a7ab593b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../../src/material/button/button-module.ts","webpack://ng-universal-demo/../../../../src/material/button/button.ts","webpack://ng-universal-demo/../../src/material/button/button.html","webpack://ng-universal-demo/../../../../src/material/button/button.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-config.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label-wrapper.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-animations.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-body.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-body.html","webpack://ng-universal-demo/../../../../src/material/tabs/ink-bar.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/paginated-tab-header.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-content.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label.ts","webpack://ng-universal-demo/../../src/material/tabs/tab.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'keyvalue', pure: false})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatButton, MatAnchor, MatCommonModule],\n  declarations: [MatButton, MatAnchor],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\nconst _MatButtonBase = mixinColor(\n  mixinDisabled(\n    mixinDisableRipple(\n      class {\n        constructor(public _elementRef: ElementRef) {}\n      },\n    ),\n  ),\n);\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Add a class for disabled button styling instead of the using attribute\n    // selector or pseudo-selector.  This allows users to create focusabled\n    // disabled buttons without recreating the styles.\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton\n  extends _MatButtonBase\n  implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption\n{\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(\n    elementRef: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n  ) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton implements AfterViewInit, OnDestroy {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    @Optional() private _ngZone?: NgZone,\n  ) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  override ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n\n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    if (this._ngZone) {\n      this._ngZone.runOutsideAngular(() => {\n        this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n      });\n    } else {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    }\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n",null,"<span class=\"mat-button-wrapper\"><ng-content></ng-content></span>\n<span matRipple class=\"mat-button-ripple\"\n      [class.mat-button-ripple-round]=\"isRoundButton || isIconButton\"\n      [matRippleDisabled]=\"_isRippleDisabled()\"\n      [matRippleCentered]=\"isIconButton\"\n      [matRippleTrigger]=\"_getHostElement()\"></span>\n<span class=\"mat-button-focus-overlay\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperBase = mixinDisabled(class {});\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state(\n      'left',\n      style({\n        transform: 'translate3d(-100%, 0, 0)',\n        minHeight: '1px',\n\n        // Normally this is redundant since we detach the content from the DOM, but if the user\n        // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.\n        visibility: 'hidden',\n      }),\n    ),\n    state(\n      'right',\n      style({\n        transform: 'translate3d(100%, 0, 0)',\n        minHeight: '1px',\n        visibility: 'hidden',\n      }),\n    ),\n\n    transition(\n      '* => left, * => right, left => center, right => center',\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'left-origin-center'\n  | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]',\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  readonly _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: CdkPortalOutlet;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number | null;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n          this._onCentered.emit();\n        }\n\n        if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n          this._afterLeavingCenter.emit();\n        }\n      });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState | string): boolean {\n    return (\n      position == 'center' || position == 'left-origin-center' || position == 'right-origin-center'\n    );\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(origin: number): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(CdkPortalOutlet) _portalHost: CdkPortalOutlet;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {take} from 'rxjs/operators';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      const positions = this._inkBarPositioner(element);\n      const inkBar: HTMLElement = this._elementRef.nativeElement;\n      inkBar.style.left = positions.left;\n      inkBar.style.width = positions.width;\n    });\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n  Directive,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  merge,\n  of as observableOf,\n  Subject,\n  EMPTY,\n  Observer,\n  Observable,\n  timer,\n  fromEvent,\n} from 'rxjs';\nimport {take, switchMap, startWith, skip, takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() private _dir: Directionality,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap();\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n    // can hold up tests that are in a background tab.\n    this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<void> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<void>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(() => {\n                observer.next();\n              });\n              tabItems.forEach(item => {\n                resizeObserver.observe(item.elementRef.nativeElement);\n              });\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n          this._itemSelected(event);\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) {\n      return true;\n    }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled =\n        this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n  Directive,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabHeaderBase\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n",null,"<button class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\"\n     #previousPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     tabindex=\"-1\"\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     [disabled]=\"_disableScrollBefore || null\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n\n<div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\">\n  <div\n    #tabList\n    class=\"mat-tab-list\"\n    [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n    role=\"tablist\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n    <mat-ink-bar></mat-ink-bar>\n  </div>\n</div>\n\n<button class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\"\n     #nextPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     [disabled]=\"_disableScrollAfter || null\"\n     tabindex=\"-1\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n  'primary',\n);\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabGroupBase\n  extends _MatTabGroupMixinBase\n  implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple\n{\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  abstract _allTabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean {\n    return this._dynamicHeight;\n  }\n  set dynamicHeight(value: BooleanInput) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n  set animationDuration(value: NumberInput) {\n    this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : (value as string);\n  }\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input()\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n  set contentTabIndex(value: NumberInput) {\n    this._contentTabIndex = coerceNumberProperty(value, null);\n  }\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input()\n  get preserveContent(): boolean {\n    return this._preserveContent;\n  }\n  set preserveContent(value: BooleanInput) {\n    this._preserveContent = coerceBooleanProperty(value);\n  }\n  private _preserveContent: boolean = false;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(\n    elementRef: ElementRef,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    this.contentTabIndex = defaultConfig?.contentTabIndex ?? null;\n    this.preserveContent = !!defaultConfig?.preserveContent;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, index: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  inputs: ['color', 'disableRipple'],\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","<mat-tab-header #tabHeader\n               [selectedIndex]=\"selectedIndex || 0\"\n               [disableRipple]=\"disableRipple\"\n               [disablePagination]=\"disablePagination\"\n               (indexFocused)=\"_focusChanged($event)\"\n               (selectFocusedIndex)=\"selectedIndex = $event\">\n  <div class=\"mat-tab-label mat-focus-indicator\" role=\"tab\" matTabLabelWrapper mat-ripple\n       cdkMonitorElementFocus\n       *ngFor=\"let tab of _tabs; let i = index\"\n       [id]=\"_getTabLabelId(i)\"\n       [attr.tabIndex]=\"_getTabIndex(tab, i)\"\n       [attr.aria-posinset]=\"i + 1\"\n       [attr.aria-setsize]=\"_tabs.length\"\n       [attr.aria-controls]=\"_getTabContentId(i)\"\n       [attr.aria-selected]=\"selectedIndex === i\"\n       [attr.aria-label]=\"tab.ariaLabel || null\"\n       [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n       [class.mat-tab-label-active]=\"selectedIndex === i\"\n       [ngClass]=\"tab.labelClass\"\n       [disabled]=\"tab.disabled\"\n       [matRippleDisabled]=\"tab.disabled || disableRipple\"\n       (click)=\"_handleClick(tab, tabHeader, i)\"\n       (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n\n\n    <div class=\"mat-tab-label-content\">\n      <!-- If there is a label template, use it. -->\n      <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n        <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n      </ng-template>\n\n      <!-- If there is not a label template, fall back to the text label. -->\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\n    </div>\n  </div>\n</mat-tab-header>\n\n<div\n  class=\"mat-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  <mat-tab-body role=\"tabpanel\"\n               *ngFor=\"let tab of _tabs; let i = index\"\n               [id]=\"_getTabContentId(i)\"\n               [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\"\n               [attr.aria-labelledby]=\"_getTabLabelId(i)\"\n               [class.mat-tab-body-active]=\"selectedIndex === i\"\n               [ngClass]=\"tab.bodyClass\"\n               [content]=\"tab.content!\"\n               [position]=\"tab.position!\"\n               [origin]=\"tab.origin\"\n               [animationDuration]=\"animationDuration\"\n               [preserveContent]=\"preserveContent\"\n               (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n               (_onCentering)=\"_setTabBodyWrapperHeight($event)\">\n  </mat-tab-body>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  constructor(/** Content for the tab. */ public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB) @Optional() public _closestTab: any,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MAT_TAB_CONTENT} from './tab-content';\nimport {MAT_TAB_LABEL, MatTabLabel, MAT_TAB} from './tab-label';\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabBase = mixinDisabled(class {});\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n@Component({\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n})\nexport class MatTab extends _MatTabBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MAT_TAB_LABEL)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n  protected _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MAT_TAB_CONTENT, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /**\n   * Classes to be passed to the tab label inside the mat-tab-header container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() labelClass: string | string[];\n\n  /**\n   * Classes to be passed to the tab mat-tab-body container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB_GROUP) @Optional() public _closestTabGroup: any,\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","constructor","_factoryFn","_args","valueOf","this","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","Object","keys","formGroup","map","validator","filter","itm","propertyName","metadata","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector","i0","ComponentRedirectRoute","redirectFrom","redirectTo","pathMatchFull","target","routeDecoratedComponent","isBlank","routeValues","console","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","defineProperty","enumerable","configurable","writable","value","path","pathMatch","ComponentRoute","route","rt","component","AsRequiredTypePipe","transform","_valueHash","DragDropModule","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","key","currentValue","sort","keyValueA","keyValueB","a","b","aString","String","bString","MatButtonModule","MatRippleModule","MatCommonModule","BUTTON_HOST_ATTRIBUTES","_MatButtonBase","mixinColor","mixinDisabled","mixinDisableRipple","_elementRef","MatButton","elementRef","_focusMonitor","_animationMode","super","isRoundButton","_hasHostAttributes","isIconButton","attr","_getHostElement","classList","add","nativeElement","color","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","origin","options","focusVia","_isRippleDisabled","disableRipple","attributes","some","attribute","hasAttribute","ANIMATION_MODULE_TYPE","MatRipple","i2","MatAnchor","focusMonitor","animationMode","_ngZone","_haltDisabledEvents","event","preventDefault","stopImmediatePropagation","runOutsideAngular","addEventListener","removeEventListener","i1","MAT_TABS_CONFIG","InjectionToken","_MatTabLabelWrapperBase","MatTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","matTabsAnimations","translateTab","trigger","state","style","minHeight","visibility","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","Subscription","_leavingSub","ngOnInit","_beforeCentering","pipe","startWith","_isCenterPosition","_position","subscribe","isCentering","hasAttached","attach","_content","_afterLeavingCenter","preserveContent","detach","unsubscribe","forwardRef","MatTabBody","DOCUMENT","_MatTabBodyBase","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","emit","position","_positionIndex","_computePositionFromOrigin","complete","_onTranslateTabStarted","clientHeight","_getLayoutDirection","_MAT_INK_BAR_POSITIONER","providedIn","factory","element","left","width","MatInkBar","_inkBarPositioner","alignToElement","show","onStable","take","positions","inkBar","hide","FocusKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","_pressedLetters","tabOut","QueryList","changes","newItems","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","withTypeAhead","debounceInterval","tap","letter","debounceTime","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","keyCode","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","hasModifierKey","toLocaleUpperCase","A","Z","ZERO","NINE","fromCharCode","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","_origin","setFocusOrigin","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","takeUntil","_stopInterval","disablePagination","coerceBooleanProperty","selectedIndex","coerceNumberProperty","_keyManager","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","observableOf","resize","realign","updatePagination","_alignInkBarToSelectedTab","merge","_itemsResized","run","Promise","resolve","then","Math","max","min","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ResizeObserver","EMPTY","switchMap","tabItems","Observable","observer","resizeObserver","forEach","observe","disconnect","skip","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","ENTER","SPACE","focusIndex","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tab","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","ngZone","platform","_disableRipple","MatTabHeader","i4","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","_MatTabGroupBase","defaultConfig","_tabs","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","_preserveContent","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","contentTabIndex","_animationDuration","test","_contentTabIndex","backgroundColor","_backgroundColor","remove","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","_closestTabGroup","notifyOnChanges","destroy","realignInkBar","_tabHeader","focusTab","header","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","_tabFocusChanged","focusOrigin","MatTabGroup","MatTab","provide","MAT_TAB_GROUP","useExisting","MAT_TAB_CONTENT","MatTabContent","template","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","templateRef","_closestTab","_MatTabBase","_viewContainerRef","textLabel","_contentPortal","templateLabel","_templateLabel","_setTemplateLabelInput","content","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","TemplateRef","MatTabsModule","CommonModule","PortalModule","ObserversModule","A11yModule","resolvePromiseOr"],"sourceRoot":""}