{"version":3,"file":"2937.chunk.38088fdd40386ab6af82.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/trigger/node/triggerNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/trigger/node/triggerNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/trigger/metadata/trigger.relationsMetadata.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" [name]=\"'trigger'|firstUppercaseLocalize\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"trigger\" [parent]=\"this\"></relation-node-input>\n                <div>{{'trigger'|firstUppercaseLocalize}}</div>\n            </div>\n\n            <div class=\"input\" *ngFor=\"let endpoint of endpoints\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"endpoint.name\" [parent]=\"this\"></relation-node-input>\n\n                <div class=\"dynamic-flex-row\">\n                    <div>{{endpoint.name}}</div>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); configureEndpoint(endpoint)\">\n                        <span class=\"fas fa-cog\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeEndpoint(endpoint)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"dynamic-flex-row\">\n                <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addEndpoint()\">\n                    <span class=\"fas fa-plus\"></span>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" *ngFor=\"let endpoint of endpoints\">\n                <div>{{endpoint.name}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"endpoint.name\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {ConfigureNodeEndpointData, ConfigureNodeEndpointSAComponent} from '@anglr/dynamic/layout-relations';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {extend} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {TriggerRelationsOptions} from '../trigger.options';\n\n/**\n * Trigger node component for negation\n */\n@Component(\n{\n    selector: 'trigger-node',\n    templateUrl: 'triggerNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TriggerNodeSAComponent extends RelationsNodeBase<TriggerRelationsOptions> implements RelationsNode<TriggerRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets component outputs\n     */\n    protected get endpoints(): ConfigureNodeEndpointData[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            endpoints: []\n        };\n\n        return (this.metadata.relationsOptions.endpoints ??= []);\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new output endpoint\n     */\n    protected async addEndpoint(): Promise<void>\n    {\n        const param: ConfigureNodeEndpointData = \n        {\n            name: '',\n            defaultValue: null,\n            skipInit: true,\n            allowSkipInit: true,\n        };\n\n        if(await this.configureEndpoint(param))\n        {\n            this.endpoints.push(param);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Removes endpoint\n     * @param endpoint - Endpoint to be removed\n     */\n    protected removeEndpoint(endpoint: ConfigureNodeEndpointData): void\n    {\n        const index = this.endpoints.indexOf(endpoint);\n\n        if(index >= 0)\n        {\n            this.endpoints.splice(index, 1);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Configures endpoint\n     * @param endpoint - Endpoint to be configured\n     */\n    protected async configureEndpoint(endpoint: ConfigureNodeEndpointData): Promise<boolean>\n    {\n        const original = JSON.parse(JSON.stringify(endpoint));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ConfigureNodeEndpointData, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure endpoint',\n            width: '60vw',\n            data: endpoint\n        }).afterClosed());\n\n        if(!result)\n        {\n            extend(endpoint, original);\n        }\n        else\n        {\n            this.history.getNewState();\n        }\n\n        return result ?? false;\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {TriggerNodeSAComponent} from '../node/triggerNode.component';\n\n/**\n * Trigger relations metadata\n */\nexport class TriggerRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Trigger',\n        description: 'Allows sending data on trigger input',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = TriggerNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">{{'name'|firstUppercaseLocalize}}</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"name\">\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"data.allowSkipInit\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\"><input type=\"checkbox\" formControlName=\"skipInit\"> {{'skip init'|firstUppercaseLocalize}} </label>\n    </div>\n\n    <div class=\"dynamic-flex-column dynamic-margin-bottom-extra-small\" *ngIf=\"!data.noDefaultValue\">\n        <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-align-self-center\" (click)=\"showCodeEditor()\">\n            <span>{{'default value'|firstUppercaseLocalize}}</span>\n        </button>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"true\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n//TODO: sideeffect\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}"],"names":["i0","$event","endpoint_r2","_r4","$implicit","ctx_r3","preventDefault","stopPropagation","configureEndpoint","ctx_r5","removeEndpoint","ctx_r0","nodePosition","zoomLevel","name","endpoint_r6","ctx_r1","TriggerNodeSAComponent","RelationsNodeBase","endpoints","this","metadata","_a","relationsOptions","_b","constructor","changeDetector","element","dialog","super","addEndpoint","_this","_asyncToGenerator","param","defaultValue","skipInit","allowSkipInit","push","history","getNewState","endpoint","index","indexOf","splice","_this2","original","JSON","parse","stringify","result","lastValueFrom","open","ConfigureNodeEndpointSAComponent","title","width","data","afterClosed","extend","i1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","TriggerNodeSAComponent_div_10_Template","TriggerNodeSAComponent_div_15_Template","destroySubject","CommonModule","i2","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","TriggerRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","ComponentEndpointModel","value","mapValuesToThis","bind","_r3","ctx_r2","showCodeEditor","formModelBuilder","form","build","valueChanges","subscribe","content","isPresent","CodeEditorDialogComponent","height","languageModel","JsonLanguageModel","getJson","TITLED_DIALOG_DATA","FormModelBuilder","ConfigureNodeEndpointSAComponent_div_6_Template","ConfigureNodeEndpointSAComponent_div_7_Template","noDefaultValue","ReactiveFormsModule","i3","MatDialogModule","i4","i5","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","typescript","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","inputs","outputs","editorContent","saveAndClose","close","_r1","_r0","LanguageModel","getModel"],"sourceRoot":""}