{"version":3,"file":"2363.chunk.aa79693c3d3ec1643e60.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/type.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["var map = {\n\t\"./checkbox/type\": [\n\t\t27614,\n\t\t7614\n\t],\n\t\"./datepicker/type\": [\n\t\t80902,\n\t\t902\n\t],\n\t\"./formGroup/type\": [\n\t\t66556,\n\t\t6556\n\t],\n\t\"./numberField/type\": [\n\t\t98092,\n\t\t8092\n\t],\n\t\"./period/type\": [\n\t\t38938,\n\t\t8938\n\t],\n\t\"./radio/type\": [\n\t\t54501,\n\t\t4501\n\t],\n\t\"./select/type\": [\n\t\t35742,\n\t\t5742\n\t],\n\t\"./textField/type\": [\n\t\t73813,\n\t\t3813\n\t],\n\t\"./textarea/type\": [\n\t\t82299,\n\t\t2299\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;","import {Directive, Input, inject} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    /**\n     * Instance of parent control\n     */\n    protected parentControl: AbstractControl|undefined|null = inject(FORM_COMPONENT_CONTROL, {optional: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this.parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|undefined|null, parentControl: AbstractControl|undefined|null, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {{@name}}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module relations provider for form module types\n */\n@Injectable()\nexport class FormDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic relations types provider\n */\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations nodes provider\n */\nexport const FORM_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations components provider\n */\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormRelations(): Provider[]\n{\n    return [\n        FORM_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage layout\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n/**\n * Default providers for form subpackage relations\n */\nexport function provideFormRelationsEditor(): Provider[]\n{\n    return [\n        FORM_RELATIONS_MODULE_TYPES_PROVIDER,\n        FORM_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n \n/**\n * Providers for layout relations editor form subpackage\n */\nexport function provideFormLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideFormRelationsEditor(),\n        ...provideFormLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations form subpackage\n */\nexport function provideFormLayoutRelations(): Provider[]\n{\n    return [\n        ...provideFormLayout(),\n        ...provideFormRelations(),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|undefined|null, parentControl: AbstractControl|undefined|null, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Material checkbox layout metadata loader\n */\nexport const MaterialCheckboxLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialCheckboxComponentOptions>> = async () => new (await import('./metadata/checkbox.layoutMetadata')).MaterialCheckboxLayoutEditorMetadata();\n\n/**\n * Material checkbox relations metadata loader\n */\nexport const MaterialCheckboxRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/checkbox.relationsMetadata')).MaterialCheckboxRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialCheckboxLayoutMetadataLoader, MaterialCheckboxRelationsMetadataLoader} from './checkbox.metadata';\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Component used for displaying material checkbox\n */\n@Component(\n{\n    selector: 'material-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatCheckboxModule,\n        ReactiveFormsModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialCheckboxRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialCheckboxLayoutMetadataLoader)\nexport class MaterialCheckboxSAComponent extends FormComponentBase<MaterialCheckboxComponentOptions, boolean> implements FormComponent<MaterialCheckboxComponentOptions>\n{}","<mat-checkbox [formControl]=\"control|asFormControl|asRequired\">{{options?.label}}</mat-checkbox>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialCheckboxSAComponent} from './checkbox.component';\n\n\nexport default MaterialCheckboxSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","FormComponentBase","LayoutComponentBase","constructor","control","FormControl","parentControl","inject","FORM_COMPONENT_CONTROL","optional","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","t","inputs","features","i0","__decorate","DynamicOutput","InjectionToken","FormDynamicModuleItemsProvider","_logger","tryToGet","source","_this","package","debug","item","LOGGER","factory","ɵfac","FormDynamicModuleTypesProvider","moduleName","FormDynamicModuleRelationsProvider","FORM_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","FORM_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideFormLayout","provideFormLayoutEditor","provideStaticPackageSource","provideFormLayoutRelationsEditor","provideFormLayoutRelations","defaultValue","get","type","FormArray","FormGroup","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","extensions","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","optionsSafe","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","dynamicOnInit","_asyncToGenerator","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","ComponentStylingExtension","DynamicItemExtensionBase","applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialCheckboxLayoutMetadataLoader","_ref","MaterialCheckboxLayoutEditorMetadata","apply","arguments","MaterialCheckboxRelationsMetadataLoader","_ref2","MaterialCheckboxRelationsEditorMetadata","MaterialCheckboxSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","label","FormPipesModule","i1","CastPipesModule","i2","MatCheckboxModule","i3","ReactiveFormsModule","i4","styles","changeDetection","RelationsEditorMetadata","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","RelationsProcessor","RelationsComponentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}