{"version":3,"file":"8229.chunk.6fc0f556a6faf0b91750.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Grid panel layout metadata loader\n */\nexport const GridPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>> = async () => new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.cells\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId, PromiseOr} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadataLoader} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    styleUrls: ['gridPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(GridPanelLayoutMetadataLoader)\nexport class GridPanelSAComponent extends LayoutComponentBase<GridPanelComponentOptions> implements LayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): PromiseOr<void>\n    {\n        this._fixCells();\n\n        const style = this._element.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this.options?.rows && Array.isArray(this.options?.rows))\n        {\n            for(const row of this.options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this.options?.columns && Array.isArray(this.options?.columns))\n        {\n            for(const column of this.options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this.options.rows ?? []).length; y++)\n        for(let x = 0; x < (this.options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this.options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this.options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this.options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this.options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}"],"names":["GridPanelLayoutMetadataLoader","GridPanelLayoutEditorMetadata","i0","GridPanelSAComponent","LayoutComponentBase","_onOptionsSet","this","_fixCells","style","_element","nativeElement","gridTemplateRows","gridTemplateColumns","options","rows","Array","isArray","row","height","columns","column","width","trim","cells","_a","grid","y","length","x","cell","package","name","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","t","selectors","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_injector","_logger","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","debug","clear","injector","customInjector","layoutComponentType","loadItem","warn","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","_metadata","_instance","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","PACKAGE_SOURCES","packages","packagesChange","NEVER","refresh","multi","Observable","noop"],"sourceRoot":""}