{"version":3,"file":"8632.chunk.be2d30e833b03300d5b7.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\n\n/**\n * Block layout metadata loader\n */\nexport const BlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<BlockComponentOptions>> = async () => new (await import('./metadata/block.layoutMetadata')).BlockLayoutEditorMetadata();\n","<ng-container *layoutComponentRenderer=\"options?.content\"/>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\nimport {BlockLayoutMetadataLoader} from './block.metadata';\n\n/**\n * Component used for displaying block\n */\n@Component(\n{\n    selector: 'block',\n    templateUrl: 'block.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<BlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorMetadata(BlockLayoutMetadataLoader)\nexport class BlockSAComponent extends LayoutComponentBase<BlockComponentOptions> implements LayoutComponent<BlockComponentOptions>\n{\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {BlockSAComponent} from './block.component';\n\nexport default BlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["BlockLayoutMetadataLoader","_ref","BlockLayoutEditorMetadata","apply","arguments","i0","BlockSAComponent","LayoutComponentBase","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","BlockSAComponent_ng_container_0_Template","options","content","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","this","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","provide","useValue","DynamicItemExtensionBase","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","initialized","instance"],"sourceRoot":""}