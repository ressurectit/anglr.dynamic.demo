{"version":3,"file":"9634.chunk.bcf0308577b6d424408b.js","mappings":";8iBAKYA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,sBAAAA,GACAA,EAAAA,GAAAA,EAAAA,OAAKA,EAAAA,EAAAA,GAAkBA,EAAAA,IAAAA,qCADFA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,aAAAA,CAAkC,YAAAC,EAAAA,UAAlCD,CAAkC,OAAAE,EAAAA,KAAlCF,CAAkC,SAAAC,GAClDD,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,gCAKTA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAsF,SAC7EA,EAAAA,EAAAA,GAAmBA,EAAAA,KACxBA,EAAAA,GAAAA,EAAAA,uBAAAA,GACJA,EAAAA,uCAFSA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MACiBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,aAAAA,CAAkC,YAAAG,EAAAA,UAAlCH,CAAkC,OAAAI,EAAAA,KAAlCJ,CAAkC,SAAAG,ICgBlE,MAAOE,UAAuCC,EAAAA,EAfpDC,kCAsBc,KAAAC,0BAAqEC,EAAAA,EAAAA,IAAOC,EAAAA,IAK5E,KAAAC,0BAAqDF,EAAAA,EAAAA,IAAOG,EAAAA,EA2CzE,CAxByBC,aAAU,wCAE5B,IAAI,EAAKC,SAEL,QAGJ,IAAKA,UAASC,mBAAgBC,EAAhBD,iBACd,CACIE,KAAM,KAGV,MAAMC,QAAsB,EAAKP,yBAAyBQ,iBAAiB,EAAKL,SAASG,MAEzF,IAAIC,EAEA,OAGJ,EAAKJ,SAASC,iBAAiBE,KAAO,EAAKH,SAASG,KACpD,MAAMG,SAAkB,EAAKZ,0BAA0Ba,YAAYH,KAAkB,GACrF,EAAKI,YAAaC,EAAAA,EAAAA,GAAUH,GAC5B,EAAKI,aAAcC,EAAAA,EAAAA,GAAWL,EAtBF,kLAuB/B,+DAtDQf,KAA8BqB,GAA9BrB,EAA8B,uBAA9BA,EAA8BsB,UAAAA,CAAAA,CAAAA,0BAAAC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,OAAAA,SAAAA,EAAAA,SAAAA,kBAAAA,CAAAA,EAAAA,gBAAAA,CAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,UAAAA,CAAAA,QAAAA,QAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAAAA,WAAAA,CAAAA,QAAAA,SAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAAAA,SAAAA,CAAAA,EAAAA,oBAAAA,YAAAA,OAAAA,UAAAA,CAAAA,EAAAA,WAAAC,SAAAA,SAAAA,EAAAA,GAAA,MD9B3CjC,EAAAA,GAAAA,EAAAA,wBAAAA,GAEAA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAA0B,UAA1BA,CAA0B,WAGdA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAIJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAIJA,EAAAA,IAAAA,YAhBeA,EAAAA,EAAAA,SAAAA,EAAAA,CAAe,iBAAAkC,EAAAA,gBAKelC,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,YAAAA,MAAAA,EAAAA,WAAAA,iBAAAA,KAAAA,EAAAA,WAAAA,iBAAAA,QAOEA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,aAAAA,MAAAA,EAAAA,YAAAA,iBAAAA,KAAAA,EAAAA,YAAAA,iBAAAA,yBCW/CmC,EAAAA,EAAYC,EAAAA,EACZC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAA6BC,cAAAA,EAAAC,gBAAAA,IClB/B,MAAOC,EAkBTnC,cAXO,KAAAoC,SACP,CACIC,MAAO,cAMJ,KAAAC,eAAsCxC,EAKzCyC,OAAOC,OAAOC,KACjB,oDCwBC,SAAUC,EAAoBC,EAAuBC,GACzD,MAAMC,EAA8B,iBAAXD,EACzB,OAAO,IAAIE,SAAe,CAACC,EAASC,KAClC,IACIC,EADAC,GAAY,EAEhBP,EAAOQ,UAAU,CACfC,KAAOC,IACLJ,EAASI,EACTH,GAAY,CAAZ,EAEFI,MAAON,EACPO,SAAU,KACJL,EACFH,EAAQE,GACCJ,EACTE,EAAQH,EAAQY,cAEhBR,EAAO,IAAIS,EAAAA,EACZ,GAbL,GAiBH,sJCtDD,IAAIC,EAAmB,EAcjB,MAAOC,EAYX3D,YAQqB4D,EACXC,EACAC,GAFW,KAAAF,UAAAA,EACX,KAAAC,YAAAA,EACA,KAAAC,QAAAA,EAjBD,KAAAC,KAAsC,QAkB3C,CAEJC,WACOvB,KAAKmB,YAMRnB,KAAKmB,UAAYK,EAAiBxB,KAAKoB,YAAapB,KAAKqB,QAAQI,aAEpE,CAEDC,YAAYC,GACV,MAAMC,EAAgBD,EAAO,iBAAuBA,EAAO,sBAEvDC,IACF5B,KAAK6B,aAAeD,EAAcE,aAErC,CAEDC,eAAeC,IAKbC,EAAAA,EAAAA,GACEjC,KAAKmB,UACa,IAAlBa,EAAME,SAAmC,IAAlBF,EAAMG,QAAgB,WAAa,QAC1DnC,KAAK6B,aAER,mCAtDUX,GAAAA,EAAAA,EAAc9B,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,wBAAd8B,6IAAA,6RAoEP,MAAOkB,EAIX7E,YAGsB8E,EACZjB,EACAC,GAFY,KAAAgB,WAAAA,EACZ,KAAAjB,YAAAA,EACA,KAAAC,QAAAA,EAPD,KAAAiB,GAAa,oBAAoBrB,GAQtC,CAEJM,WACOvB,KAAKqC,aACRrC,KAAKqC,WAAab,EAAiBxB,KAAKoB,YAAapB,KAAKqB,QAAQI,cAGhEzB,KAAKqC,YACPhC,QAAQC,UAAUiC,MAAK,KACrB,MAAMC,EAAYxC,KAAKqC,WAAWI,mBAE9BD,IAAcA,EAAUE,kBAC1BF,EAAUE,gBAAkB1C,KAAKsC,GAClC,GAGN,mCA1BUF,GAAAA,EAAAA,EAAchD,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,wBAAdgD,6MAoCP,MAAOO,oCAAAA,sBAAAA,kIAcP,MAAOC,EARbrF,cAYW,KAAAsF,MAAqC,OAC/C,EAWD,SAASrB,EAAiBsB,EAAkCrB,GAC1D,IAAIsB,EAA6BD,EAAQE,cAAcC,cAEvD,KAAOF,IAAWA,EAAOG,UAAUC,SAAS,yBAC1CJ,EAASA,EAAOE,cAGlB,OAAOF,EAAStB,EAAY2B,MAAKC,GAAUA,EAAOf,KAAOS,EAAQT,KAAM,IACxE,kCAxBYM,sBAAAA","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/metadata/customComponent.relationsMetadata.ts","webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":["<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"custom\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\" *ngFor=\"let inputMeta of inputsMeta?.relationsOptions?.inputs\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"inputMeta.name\" [parent]=\"this\"></relation-node-input>\n                <div>{{inputMeta.name}}</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" *ngFor=\"let outputMeta of outputsMeta?.relationsOptions?.outputs\">\n                <div>{{outputMeta.name}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"outputMeta.name\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeOutputSAComponent, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentRelationsOptions} from '../customComponent.options';\nimport {ComponentInputsRelationsOptions} from '../../componentInputs';\nimport {ComponentOutputsRelationsOptions} from '../../componentOutputs';\nimport {LayoutComponentsRegister} from '../../../services';\nimport {getInputs, getOutputs} from '../customComponent.utils';\n\n/**\n * Relations node component for custom component\n */\n@Component(\n{\n    selector: 'custom-component-node',\n    templateUrl: 'customComponentNode.component.html',\n    // styleUrls: ['customComponentNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentNodeSAComponent extends RelationsNodeBase<CustomComponentRelationsOptions> implements RelationsNode<CustomComponentRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]> = inject(RELATIONS_METADATA_STORAGE);\n\n    /**\n     * Layout components register instance\n     */\n    protected layoutComponentsRegister: LayoutComponentsRegister = inject(LayoutComponentsRegister);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Metadata that contains information about available inputs\n     */\n    protected inputsMeta: RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined;\n\n    /**\n     * Metadata that contains information about available outputs\n     */\n    protected outputsMeta: RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(): Promise<void>\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            name: ''\n        };\n\n        const componentName = await this.layoutComponentsRegister.getComponentName(this.metadata.name);\n\n        if(!componentName)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.name = this.metadata.name;\n        const relations = await this.relationsMetadataStorage?.getMetadata(componentName) ?? [];\n        this.inputsMeta = getInputs(relations);\n        this.outputsMeta = getOutputs(relations);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentNodeSAComponent} from '../node/customComponentNode.component';\n\n/**\n * Custom component relations metadata\n */\nexport class CustomComponentRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        group: 'Components',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = CustomComponentNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["i0","ctx_r0","inputMeta_r2","ctx_r1","outputMeta_r3","CustomComponentNodeSAComponent","RelationsNodeBase","constructor","relationsMetadataStorage","inject","RELATIONS_METADATA_STORAGE","layoutComponentsRegister","LayoutComponentsRegister","initialize","metadata","relationsOptions","_a","name","componentName","getComponentName","relations","getMetadata","inputsMeta","getInputs","outputsMeta","getOutputs","t","selectors","standalone","features","decls","vars","consts","template","ctx","CommonModule","i1","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","CustomComponentRelationsEditorMetadata","metaInfo","group","nodeDefinition","Object","freeze","this","lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","value","error","complete","defaultValue","EmptyError","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","type","ngOnInit","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog"],"sourceRoot":""}