{"version":3,"file":"613.chunk.79e7fce4c27c4cbae4ee.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected _formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        this._formInjector = Injector.create(\n            {\n                parent: this.injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: FORM_COMPONENT_CONTROL,\n                        useValue: this.options?.controlName ? this._parentControl?.get(this.options.controlName) : null,\n                    }\n                ]\n            }\n        );\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this.element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this.element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","control","FormControl","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","FormGroupLayoutMetadataLoader","FormGroupLayoutEditorMetadata","ctx_r0","FormGroupSAComponent","onInit","_formInjector","Injector","parent","injector","providers","provide","useValue","get","t","selectors","standalone","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","debug","id","clear","customInjector","layoutComponentType","loadItem","package","createComponent","Ignore","ThrowError","Error","usedInjector","LAYOUT_COMPONENT_CHILD_EXTENSIONS","childExtensions","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}