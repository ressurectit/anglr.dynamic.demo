{"version":3,"file":"8918.chunk.f04036309cf5939f5312.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     * @param scope - Current scope that is being used\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined, scope: string|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? value.itemSource.name : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: singleton ? value.metadata.displayName || value.itemSource.name : undefined,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                scope,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    scopeConfigurable: !singleton ?? false,\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            },\n        };\n    }\n}","<div class=\"editor-component-name\">{{data.metadata.singleton ? (data.metadata.displayName || data.itemSource.name) : (data.metadata.metaInfo?.name ?? data.itemSource.name)}}</div>\n<div class=\"editor-component-description\" *ngIf=\"data.metadata.metaInfo?.description\">{{data.metadata.metaInfo?.description}}</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input, HostBinding, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag} from '@angular/cdk/drag-drop';\nimport {PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNodeManager} from '../../../services';\nimport {NodesPaletteItem} from '../nodesPalette.interface';\n\n/**\n * Component displaying nodes palette item\n */\n@Component(\n{\n    selector: 'nodes-palette-item',\n    templateUrl: 'nodesPaletteItem.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether node is already used\n     */\n    @HostBinding('class.used')\n    protected used: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Nodes palette item\n     */\n    @Input()\n    public data!: NodesPaletteItem;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Optional() protected _cdkDrag: CdkDrag,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        for (const nodeId in this._metadataManager.nodes)\n        {\n            if (this.data?.itemSource?.name === nodeId)\n            {\n                this._setUsed(true);\n                break;\n            }\n        }\n\n        //TODO initsubscription add used change\n        this.initSubscriptions.add(this._metadataManager.nodeRegisterChange.subscribe(registeredNode => \n        {\n            if (registeredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(true);\n            }\n        }));\n        this.initSubscriptions.add(this._metadataManager.nodeUnregisterChange.subscribe(unregisteredNode => \n        {\n            if (unregisteredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(false);\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets used indication for node\n     * @param used \n     */\n    protected _setUsed(used: boolean): void\n    {\n        this.used = used;\n\n        if (this._cdkDrag)\n        {\n            this._cdkDrag.disabled = used;\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Focus to relations node\n     * @param item \n     * @returns \n     */\n    @HostListener('dblclick')\n    protected focusNode(): void\n    {\n        if (!this.used ||\n            !this.data?.metadata?.singleton)\n        {\n            return;\n        }\n\n        this._metadataManager.setActiveNode(this.data?.itemSource?.name);\n    }\n}","<div class=\"dynamic-flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"dynamic-text-spread dynamic-text-small-caps dynamic-margin-left-extra-small dynamic-margin-horizontal-small dynamic-bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <nodes-palette-item [data]=\"item\"\n                                class=\"editor-component mat-elevation-z2\"\n                                cdkDrag\n                                [cdkDragData]=\"item | toRelationsDragData: newCompnentId: item.metadata.singleton: item.metadata.scope\"\n                                (cdkDragDropped)=\"generateNewId()\"></nodes-palette-item>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DebounceCall, Dictionary, generateId, WithSync} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\nimport {NodesPaletteItemSAComponent} from './item/nodesPaletteItem.component';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n        NodesPaletteItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.loadNodes()));\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async loadNodes(): Promise<void>\n    {\n        this.allItems = [];\n        this.groupedItems = {};\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected generateNewId(): void\n    {\n        this.newCompnentId = generateId(16);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnInit, Inject, ChangeDetectorRef, OnChanges, SimpleChanges, ViewChild, Optional} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n        PackageManagerModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relation canvas\n     */\n    @ViewChild(RelationsCanvasSAComponent)\n    protected relationCanvas: RelationsCanvasSAComponent|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {        \n        if (event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            const coordinates = this.relationCanvas?.getPositionInCanvas(event.dropPoint);\n\n            if(coordinates)\n            {\n                event.item.data.metadata.nodeMetadata.coordinates.x = coordinates.x;\n                event.item.data.metadata.nodeMetadata.coordinates.y = coordinates.y;\n            }\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n\n        this.history.getNewState();\n    }\n}","<div class=\"dynamic-flex-row dynamic-flex-1\">\n    <div class=\"overflow-vertical-scroll dynamic-thin-scrollbar\">\n        <package-manager></package-manager>\n        <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    </div>\n\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"dynamic-flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","<div class=\"dynamic-flex-row\">\n    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"dynamic-flex-row\">\n        <select class=\"dynamic-form-control dynamic-flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"dynamic-flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","DragDropModule","DragDrop","CdkScrollableModule","ToRelationsDragDataSAPipe","transform","value","id","singleton","scope","metadata","itemSource","name","displayName","undefined","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","scopeConfigurable","coordinates","x","y","options","pure","standalone","i0","NodesPaletteItemSAComponent","_changeDetector","packageManager","_metadataManager","_cdkDrag","_logger","initSubscriptions","Subscription","used","ngOnInit","nodeId","nodes","data","_setUsed","add","nodeRegisterChange","subscribe","registeredNode","nodeUnregisterChange","unregisteredNode","ngOnDestroy","this","unsubscribe","disabled","markForCheck","focusNode","setActiveNode","LOGGER","selectors","hostVars","hostBindings","ctx","CommonModule","i4","encapsulation","changeDetection","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_refreshObservables","allItems","groupedItems","newCompnentId","generateId","isDragOverPalette","Array","isArray","obs","loadNodes","usedPackagesChange","packageName","usedPackages","types","loadItem","type","push","warn","item","group","_a","detectChanges","generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","inputs","canvasDropList","features","decls","vars","consts","template","i3","__decorate","DebounceCall","WithSync","RelationsEditorSAComponent","history","changeDetector","hotkeys","init","pop","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","destroy","addNode","event","relationCanvas","getPositionInCanvas","dropPoint","getNewState","RELATIONS_HISTORY_MANAGER","viewQuery","RelationsCanvasSAComponent","i2","PackageManagerModule","styles","DynamicRelationsEditorModule","ngModule","providers","provideRelationsEditor","staticRegister","provideRelationsEditorWithStatic","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","PackageManagerComponent","detailVisible","availablePackages","updatedAvailablePackages","addPackage","setUsedPackages","removePackage","filter","itm","packages","find","it","ReactiveFormsModule","storageName","_usedPackages","usedPackagesSubject","Subject","packagesChangeSubject","store","inject","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","get","source","packagesChange","next","asObservable","result","set","refresh"],"sourceRoot":""}