{"version":3,"file":"5462.chunk.f5221f6d1e3ccfca9155.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCorePreview/dndCorePreview.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Html element of dynamic component\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Minimal height of element\n     */\n    protected minHeight: string = '';\n\n    /**\n     * Minimal width of element\n     */\n    protected minWidth: string = '';\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    @Input()\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.observer?.disconnect();\n\n                return;\n            }\n\n            this.element = element;\n            this.init();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DesignerMinDimensionSADirective>('editorMetadata') in changes)\n        {\n            this.init();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize watching for children\n     */\n    protected init(): void\n    {\n        if(!this.element || !this.editorMetadata)\n        {\n            return;\n        }\n\n        const element = this.editorMetadata.getChildrenContainer?.(this.element) as HTMLElement ?? this.element;\n\n        this.minHeight = element.style.minHeight;\n        this.minWidth = element.style.minWidth;\n        \n        this.updatedDimensions(element);\n\n        this.observer?.observe(element,\n        {\n            childList: true,\n        });\n    }\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        const nodesArray: ChildNode[] = [];\n        element.childNodes.forEach(node => nodesArray.push(node));\n\n        const contentsLength = nodesArray.filter(itm => itm.nodeName != '#comment').length;\n\n        if((contentsLength && !this.active) ||\n           (!contentsLength && this.active))\n        {\n            return;\n        }\n\n        //deactivate, children are present\n        if(contentsLength)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.minWidth;\n            }\n            else\n            {\n                element.style.minHeight = this.minHeight;\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.canDrop ? '30px' : '10px';\n            }\n            else\n            {\n                element.style.minHeight = this.canDrop ? '30px' : '10px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n        this.document.body.appendChild(this.element);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    styleUrls: ['layoutDesignerOverlayFor.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected _observer?: MutationObserver;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected _htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new MutationObserver(() => this._changeDetector.detectChanges());\n\n        //TODO: make this working\n        this._htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this._htmlElement)\n        {\n            this._observer?.observe(this._htmlElement, {attributeFilter: ['style']});\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"_htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"_htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"_htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"_htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"_htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"_htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"_htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"_htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"_htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"_htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"_htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"_htmlElement?.style?.borderRight\"></div>","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter} from '@angular/core';\nimport {nameof, isPresent, isString} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected _placement: PositionPlacement|null|undefined;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected _source!: HTMLElement;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement\n    {\n        return this._source;\n    }\n    public set source(value: HTMLElement)\n    {\n        if(value instanceof ElementRef)\n        {\n            this._source = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this._source = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|null|undefined\n    {\n        return this._placement;\n    }\n    public set placement(value: PositionPlacement|null|undefined)\n    {\n        if(isString(value))\n        {\n            this._placement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this._placement = value;\n    }\n\n    // //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected _target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected _position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected async _applyPosition(): Promise<void>\n    {\n        const options: Partial<PositionOptions> =\n        {\n        };\n\n        if(this._placement)\n        {\n            options.placement = this._placement;\n        }\n\n        const result = await this._position.placeElement(this._target.nativeElement,\n                                                         this._source,\n                                                         options).toPromise();\n\n        applyPositionResult(result);\n\n        if(result.flip)\n        {\n            this.flip.next();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `positionTo` input\n     */\n    public static ngAcceptInputType_positionTo: HTMLElement|ElementRef<HTMLElement>;\n}\n","import {ContentChild, Directive, ElementRef, EventEmitter, ExistingProvider, forwardRef, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\nimport {DragPreviewRegistrator} from '../../interfaces';\nimport {DRAG_PREVIEW_REGISTRATOR} from '../../misc/tokens';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\n//TODO: go over all items up to find out whether can be dropped\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: DRAG_PREVIEW_REGISTRATOR,\n            useExisting: forwardRef(() => DndCoreDesignerDirective),\n        }\n    ]\n})\nexport class DndCoreDesignerDirective implements OnInit, OnDestroy, DragPreviewRegistrator\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n                                                                                                  \n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors()[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    /**\n     * Gets element that represents container that contains children\n     */\n    protected get containerElement(): Element|undefined|null\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        const component = this.manager.getComponent(this.metadata.id);\n\n        if(!component?.editorMetadata?.getChildrenContainer)\n        {\n            return this.componentElement;\n        }\n\n        return component.editorMetadata.getChildrenContainer(this.componentElement) ?? this.componentElement;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(!monitor.didDrop())\n                                                                                            {\n                                                                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                                                            }\n                                                                                            //dropped into drop zone\n                                                                                            else\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                        {\n                                                                                            canDrop: monitor => (this.canDrop || this.canDropAncestors()[0]) && monitor.isOver({shallow: true}),\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                                                                {\n                                                                                                    const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                    if(isBlank(index) || isBlank(parentId))\n                                                                                                    {\n                                                                                                        return;\n                                                                                                    }\n\n                                                                                                    this.bus.setDropPlaceholderPreview(\n                                                                                                    {\n                                                                                                        index,\n                                                                                                        parentId,\n                                                                                                        placeholder:\n                                                                                                        {\n                                                                                                            height: 0,\n                                                                                                            width: 0\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreDesigner')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.componentElement = null;\n\n                return;\n            }\n\n            this.componentElement = element;\n        }));\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => this.dropMetadata.emit(itm.data)));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.placeholderPreviewElement?.remove();\n                                           this.placeholderPreviewElement = null;\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(this.showPlaceholderPreview));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### public methods - implementation of DragPreviewRegistrator #########################\n\n    /**\n     * @inheritdoc\n     */\n    public registerPreviewElement(element: HTMLElement): Subscription\n    {\n        return this.drag.connectDragPreview(element, {offsetX: 0, offsetY: 0});\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors();\n        \n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n            \n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n        \n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, NgZone, OnDestroy, OnInit, Optional, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragPreviewRegistrator} from '../../interfaces';\nimport {DRAG_PREVIEW_REGISTRATOR} from '../../misc/tokens';\n\n/**\n * Directive that marks attached element as html 5 drag preview\n */\n@Directive(\n{\n    selector: '[dndCorePreview]'\n})\nexport class DndCorePreviewDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created template\n     */\n    protected templateRef: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Html element representing contents of template\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Instance of connection to DOM for drag preview\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                protected ngZone: NgZone,\n                @Inject(DRAG_PREVIEW_REGISTRATOR) @Optional() protected dragPreviewRegistrator?: DragPreviewRegistrator,)\n    {\n        if(!this.dragPreviewRegistrator)\n        {\n            //TODO: write this error into documentation\n            throw new Error('Unable to use DndCorePreviewDirective, becuase there is no drag preview registrator!');\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.templateRef = this.viewContainer.createEmbeddedView(this.template);\n        this.element = this.templateRef.rootNodes[0];\n\n        if(this.element)\n        {\n            document.body.append(this.element);\n        }\n\n        this.ngZone.runOutsideAngular(() =>\n        {\n            if(this.element)\n            {\n                this.placeholderConnection = this.dragPreviewRegistrator?.registerPreviewElement(this.element);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n\n        this.templateRef?.destroy();\n        this.templateRef = null;\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n    }\n}","<div class=\"designer-overlay\" \n     #layoutDesigner\n     #dndCore=\"dndCoreDesigner\"\n     [dndCoreDesigner]=\"{metadata: renderedType, parentId: parent?.renderedType?.id, index: index}\"\n     [dropzoneElement]=\"layoutDropzone\"\n     [dragDisabled]=\"dragDisabled\"\n     [dragSource]=\"dndCore.drag\"\n     (dropMetadata)=\"addDescendant($event)\"\n     [copyDesignerStyles]=\"renderedType\"\n     (mouseleave)=\"hideOverlay($event)\"\n     (mouseover)=\"showOverlay($event)\"\n     (click)=\"selectComponent($event)\"\n     (dblclick)=\"unselectComponent($event)\">\n    <div class=\"designer-dropzone\"\n         #layoutDropzone\n         designerMinWidth\n         [canDrop]=\"canDrop\"\n         [editorMetadata]=\"editorMetadata\"\n         [horizontal]=\"parent?.horizontal ?? false\"\n         [dropTarget]=\"dndCore.dropzone\"\n         [isDropZone]=\"canDrop\">\n        <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder> -->\n        <layout-editor-drag-preview class=\"mat-elevation-z4\" *dndCorePreview [editorMetadata]=\"editorMetadata\" [layoutMetadata]=\"renderedType\"></layout-editor-drag-preview>\n        <ng-template #renderer=\"layoutComponentRenderer\" [layoutComponentRenderer]=\"renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n        <ng-container *ngIf=\"highlighted || selected\">\n            <div class=\"designer-overlay-border\"></div>\n            <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"renderer\"></div>\n\n            <div class=\"designer-overlay-title\"\n                 *bodyRender\n                 [positionTo]=\"layoutDesigner\"\n                 placement=\"TopStart\">{{editorMetadata?.metaInfo?.name ?? renderedType?.name}}</div>\n\n            <ng-container *ngIf=\"!!parent && parent.editorMetadata?.removeDescendant\">\n                <div *bodyRender\n                     class=\"designer-overlay-remove\"\n                     [positionTo]=\"layoutDesigner\"\n                     placement=\"TopEnd\"\n                     (click)=\"remove()\">\n                    <span class=\"fas fa-times\"></span>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager, SCOPE_ID} from '@anglr/dynamic';\nimport {Func, isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {BodyRenderSADirective, CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    styleUrls: ['layoutDesigner.component.css'],\n    standalone: true,\n    imports:\n    [\n        //TODO: cleanup\n        CommonModule,\n        PositionModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        LayoutComponentRendererSADirective,\n        DesignerDropzoneSADirective,\n        BodyRenderSADirective,\n        DndModule,\n        LayoutDndCoreModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCoreDesigner', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Gets predicate that returns indication whether item can be dropped into this list\n     * //TODO: remove\n     */\n    public canDropFn: Func<boolean> = () => this.canDrop;\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.options?.typeMetadata?.id ?? '';\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    /**\n     * Layout editor metadata\n     */\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Optional() @Inject(SCOPE_ID) protected scopeId?: string,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this.logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this.options?.typeMetadata.id});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    // public addDescendant(dragData: CdkDragDrop<LayoutComponentDragData, LayoutComponentDragData, LayoutComponentDragData>): void\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        const parentId = dragData.parentId;\n        this.logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.metadata?.id, parent: this.options.typeMetadata.id});\n\n        if(!dragData.metadata)\n        {\n            this.logger?.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this.history.disable();\n            this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata?.id);\n            this.history.enable();\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, this.options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    protected removeDescendant(id: string): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this.options.typeMetadata.id, child: id});\n\n        this.editorMetadata?.removeDescendant?.(id, this.options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this.logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this.logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent || !this.options)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        await super.onInit();\n\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.typeMetadata.scope = this.scopeId;\n\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(this.options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n\n        //TODO: optimize\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.selectedChange.subscribe(() => this.changeDetector.detectChanges()));\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.highlightedChange.subscribe(() => this.changeDetector.detectChanges()));\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(this.options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this.options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(this.options.typeMetadata.options) ?? false;\n    }\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n"],"names":["PositionModule","DesignerMinDimensionSADirective","constructor","active","initSubscriptions","Subscription","minHeight","minWidth","horizontal","canDrop","editorMetadata","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","add","layoutComponentRendererDirective","componentElementChange","subscribe","element","init","disconnect","ngOnChanges","nameof","ngOnDestroy","unsubscribe","getChildrenContainer","style","observe","childList","nodesArray","childNodes","forEach","node","push","contentsLength","filter","itm","nodeName","length","children","item","classList","contains","selectors","contentQueries","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","_element","_metadataExtractor","metadata","_metadata","value","_copyDesignerStyles","applyDesignerStyles","extractMetadata","options","nativeElement","i0","inputs","exportAs","standalone","BodyRenderSADirective","template","viewContainer","document","view","createEmbeddedView","rootNodes","body","appendChild","remove","destroy","DOCUMENT","LayoutEditorDragPreviewSAComponent","layoutMetadata","features","decls","vars","consts","LayoutDesignerOverlayForSAComponent","_changeDetector","_observer","detectChanges","_htmlElement","componentRef","hostView","attributeFilter","attrs","PositionToDirective","_target","_position","flip","EventEmitter","source","_source","ElementRef","placement","_placement","isString","PositionPlacement","isPresent","_applyPosition","result","placeElement","toPromise","applyPositionResult","next","POSITION","DndCoreDesignerDirective","dnd","designerElement","draggingSvc","manager","bus","zone","injector","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","dragData","id","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","dragDisabled","endDrag","didDrop","dropResult","getDropResult","setDropData","data","dropzone","dropMetadata","connectDropToContainer","Error","getComponent","containerElement","componentElement","component","dropzoneElement","dropDataChange","pipe","emit","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","showPlaceholderPreview","placeholderConnection","containerConnection","registerPreviewElement","connectDragPreview","offsetX","offsetY","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","offset","getClientOffset","position","child","usedIndex","preview","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","getComponentDef","parent","provide","DRAG_PREVIEW_REGISTRATOR","useExisting","forwardRef","__decorate","BindThis","DndCorePreviewDirective","ngZone","dragPreviewRegistrator","templateRef","append","ctx_r3","LayoutDesignerSAComponent","LayoutComponentBase","changeDetector","metadataExtractor","layoutEditorMetadataManager","iteratorSvc","history","scopeId","logger","super","canDropFn","selected","selectedComponent","typeMetadata","highlighted","highlightedComponent","extensionsOptions","metaInfo","debug","unregisterLayoutDesignerComponent","addDescendant","disable","removeDescendant","enable","canDropMetadata","renderedType","markForCheck","getNewState","warn","showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","onInit","scope","getChildrenIteratorFor","selectedChange","highlightedChange","registerLayoutDesignerComponent","onOptionsSet","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","SCOPE_ID","LOGGER","viewQuery","ctx","_r2","_r1","CommonModule","i2","i3","DesignerDropzoneSADirective","DndModule","i4","LayoutDndCoreModule","i5","styles","changeDetection","Object","assign","top","left","transform"],"sourceRoot":""}