{"version":3,"file":"1973.chunk.250bbd46333da1c76334.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.module.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {LAYOUT_HISTORY_MANAGER} from '@anglr/dynamic/layout-editor';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected store: StoreDataService,\n        \n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n    {\n        return metadata;\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/layout/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {EditorComponent} from './editor/editor.component';\n\nexport const components =\n[\n    EditorComponent,\n];","import {ClassProvider, FactoryProvider, NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\n\nimport {components} from './layoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {DemoLayoutPackageManager} from '../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideFormLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ]\n})\n@ModuleRoutes(components)\nexport class LayoutEditorModule\n{\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/form/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('@anglr/dynamic/form/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","<div class=\"flex-row\">\n    <button type=\"button\" class=\"btn-icon margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"flex-row\">\n        <select class=\"form-control flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"flex-row align-items-center margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    styleUrls: ['packageManager.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} ","var map = {\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;"],"names":["EditorComponent","constructor","store","history","_metadata","emptyMetadata","id","generateId","displayName","package","name","options","children","_getMetadata","metadata","_loadDemo","this","DemoData","i0","LAYOUT_HISTORY_MANAGER","selectors","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","StoreDataService","MetadataHistoryManager","components","LayoutEditorModule","provide","LAYOUT_METADATA_STORAGE","useFactory","MetadataStorage","getData","deps","createStoreDataServiceFactory","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideFormLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","imports","DynamicLayoutEditorModule","LoadSaveNewSAComponent","ModuleRoutes","FormComponentControlType","FormDynamicModuleItemsProvider","_logger","tryToGet","source","debug","e","LOGGER","factory","FormDynamicModuleTypesProvider","moduleName","FORM_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideFormLayout","provideStaticPackageSource","getFormControl","controlName","parentControl","defaultControlType","defaultValue","get","getControlForType","type","FormArray","FormGroup","FormControl","PackageManagerComponent","packageManager","detailVisible","usedPackages","availablePackages","ngOnInit","updatedAvailablePackages","addPackage","packageName","setUsedPackages","removePackage","filter","itm","packages","find","it","PackageManagerModule","CommonModule","ReactiveFormsModule","metadataState","activeIndex","saveIndex","states","enabled","popSubject","Subject","historyChangeSubject","canUndo","isBlank","canRedo","length","saved","pop","asObservable","historyChange","state","JSON","parse","undo","next","redo","getNewState","shift","isPresent","splice","getMetadata","push","stringify","save","setInitialState","clean","enable","disable","METADATA_STATE_MANAGER","storageName","_usedPackages","initSubscriptions","Subscription","usedPackagesSubject","packagesChangeSubject","inject","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","add","packagesChange","subscribe","result","value","usedPackagesChange","set","refresh","destroy","unsubscribe","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}