{"version":3,"file":"7481.chunk.56adb5a8a1ba481fd25b.js","mappings":"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","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/cssLanguageModel.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.model.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Css language model for code editor\n */\nexport const CssLanguageModel = new LanguageModel('css', 'css', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\n\n/**\n * Style block model for properties editor\n */\nexport class StyleBlockModel implements StyleBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public style: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: StyleBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {CssLanguageModel} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\nimport {StyleBlockModel} from './styleBlock.model';\n\n/**\n * Style block layout metadata\n */\nexport class StyleBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<StyleBlockComponentOptions> =\n    {\n        name: 'Style',\n        description: 'Style block - allows styling of content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata: \n            [\n                {\n                    modelType: StyleBlockModel,\n                    propertiesControls: \n                    [\n                        codePropertiesControlFor<StyleBlockModel>('style', CssLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StyleBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StyleBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [StyleBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StyleBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    styleUrls: ['codePropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, string|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        styleUrls: ['codePropertiesControl.component.css'],\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}","<button type=\"button\" type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit {{property}}</span>\n</button>","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button type=\"button\" class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}"],"names":["CssLanguageModel","LanguageModel","editor","getModel","getValue","StyleBlockModel","constructor","value","style","mapValuesToThis","this","StyleBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","codePropertiesControlFor","addDescendant","metadata","options","content","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","dialog","super","showCodeEditor","isBlank","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","form","get","afterClosed","isPresent","control","FormControl","setValue","CodePropertiesControl","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","ctx","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","cacheId","package","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","self","MonacoEnvironment","getWorkerUrl","label","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","element","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","code","compiledCode","ngOnDestroy","dispose","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","language","Uri","extension","setModel","outputs","styles","changeDetection","TITLED_DIALOG_DATA","_r0"],"sourceRoot":""}