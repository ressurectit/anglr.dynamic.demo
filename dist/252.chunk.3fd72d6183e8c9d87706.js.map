{"version":3,"file":"252.chunk.3fd72d6183e8c9d87706.js","mappings":"2TAOM,MAAOA,UAAgCC,EAAAA,GAOzBC,eAAY,O,EAAA,YAExB,OAAO,WAAW,gEAA+CC,gC,iQCI5DC,EAAoB,cAASC,EAAAA,I,6DAA7BD,KAAoBE,GAApBF,I,qBAAAA,EAAoBG,UAAAA,CAAAA,CAAAA,eAAAC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,SAAAA,SAAAA,EAAAA,G,GAAA,KCpBjCC,EAAAA,EAAAA,G,WAAAA,EAAAA,GAAAA,QAAAA,EAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,YAAAA,IAAAA,EAAAA,EAAAA,M,iEDoBaT,GAAoB,UADhCU,EAAAA,EAAAA,GAAqBd,IACTI,GElBb,W,2FCYM,MAAOW,EA2BTC,YAAsBC,GAAA,KAAAA,SAAAA,EAZXC,cAEP,OAAOC,KAAKC,SAELF,YAAQG,GAEfF,KAAKC,SAAWC,EAEhBF,KAAKG,eAaCA,eAEN,MAAMC,EAAQJ,KAAKF,SAASO,cAAcD,MAEvCJ,KAAKC,UAAUK,UAEXC,EAAAA,EAAAA,IAAUP,KAAKC,SAASK,OAAOE,UAE9BJ,EAAMK,aAAeT,KAAKC,SAASK,OAAOE,SAG3CD,EAAAA,EAAAA,IAAUP,KAAKC,SAASK,OAAOI,SAE9BN,EAAMO,YAAcX,KAAKC,SAASK,OAAOI,QAG1CH,EAAAA,EAAAA,IAAUP,KAAKC,SAASK,OAAOM,OAE9BR,EAAMS,UAAYb,KAAKC,SAASK,OAAOM,MAGxCL,EAAAA,EAAAA,IAAUP,KAAKC,SAASK,OAAOQ,QAE9BV,EAAMW,WAAaf,KAAKC,SAASK,OAAOQ,OAI7Cd,KAAKC,UAAUe,WAEXT,EAAAA,EAAAA,IAAUP,KAAKC,SAASe,QAAQR,UAE/BJ,EAAMa,cAAgBjB,KAAKC,SAASe,QAAQR,SAG7CD,EAAAA,EAAAA,IAAUP,KAAKC,SAASe,QAAQN,SAE/BN,EAAMc,aAAelB,KAAKC,SAASe,QAAQN,QAG5CH,EAAAA,EAAAA,IAAUP,KAAKC,SAASe,QAAQJ,OAE/BR,EAAMe,WAAanB,KAAKC,SAASe,QAAQJ,MAG1CL,EAAAA,EAAAA,IAAUP,KAAKC,SAASe,QAAQF,QAE/BV,EAAMgB,YAAcpB,KAAKC,SAASe,QAAQF,OAI/Cd,KAAKC,UAAUoB,eAEXd,EAAAA,EAAAA,IAAUP,KAAKC,SAASoB,YAAYC,YAEnClB,EAAMkB,SAAWtB,KAAKC,SAASoB,YAAYC,WAG5Cf,EAAAA,EAAAA,IAAUP,KAAKC,SAASoB,YAAYE,cAEnCnB,EAAMmB,WAAavB,KAAKC,SAASoB,YAAYE,WAAWC,c,iCA/F3D5B,GAA2BF,EAAAA,EAAAA,EAAAA,M,kBAA3BE,EAA2BR,UAAAA,CAAAA,CAAAA,GAAAA,mBAAAA,KAAAqC,OAAAA,CAAA1B,QAAAA,CAAAA,mBAAAA,YAAA2B,SAAAA,CAAAA,oBAAArC,YAAAA,I,gDCHlC,MAAgBH,UAA4CyC,EAAAA,EAW9D9B,YAAY+B,EACAC,EAC4BC,GAEpCC,MAAMH,EAAgBC,EAASC,GAP5B,KAAAE,kBAAiD,IAAIpC,EAA4BI,KAAKF,UAe7EmC,oBAEZjC,KAAKgC,kBAAkBjC,QAAUC,KAAKD,QAEtCC,KAAKkC,gBAAgBC,iB,iCA3BPjD,GAAyBQ,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAavB0C,EAAAA,GAAM,K,kBAbRlD,EAAyBmD,SAAAA,EAAAC,aAAAA,SAAAA,EAAAA,GAAA,K","sources":["webpack://ng-universal-demo/../basic-components/src/textBlock/textBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/textBlock/textBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/textBlock/textBlock.component.html","webpack://ng-universal-demo/../basic-components/src/textBlock/type.ts","webpack://ng-universal-demo/../layout/src/directives/componentStyling/componentStyling.directive.ts","webpack://ng-universal-demo/../layout/src/components/styledLayoutComponentBase/styledLayoutComponentBase.ts"],"sourcesContent":["import {GenericLayoutAsyncMetadata, LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\n\n/**\n * Text block layout metadata descriptor\n */\nexport class TextBlockLayoutMetadata extends GenericLayoutAsyncMetadata<TextBlockComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async _getInstance(): Promise<LayoutEditorMetadataDescriptor<TextBlockComponentOptions>>\n    {\n        return new (await import('./metadata/textBlock.layoutMetadata')).TextBlockLayoutEditorMetadata();\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {StyledLayoutComponent, StyledLayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {TextBlockComponentOptions} from './textBlock.options';\nimport {TextBlockLayoutMetadata} from './textBlock.metadata';\n\n/**\n * Component used for displaying text block\n */\n@Component(\n{\n    selector: 'text-block',\n    templateUrl: 'textBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(TextBlockLayoutMetadata)\nexport class TextBlockSAComponent extends StyledLayoutComponentBase<TextBlockComponentOptions> implements StyledLayoutComponent<TextBlockComponentOptions>\n{\n}","{{options?.text ?? ''}}","import {TextBlockSAComponent} from './textBlock.component';\n\nexport default TextBlockSAComponent;","import {Directive, ElementRef, Input} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from './componentStyling.options';\n\n/**\n * Directive that applies some styling to component\n */\n@Directive(\n{\n    selector: '[componentStyling]',\n    exportAs: 'componentStyling',\n    standalone: true\n})\nexport class ComponentStylingSADirective\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of styling options\n     */\n    protected _options: ComponentStylingOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets instance of styling options\n     */\n    @Input('componentStyling')\n    public get options(): ComponentStylingOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: ComponentStylingOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._applyStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies styles to layout component\n     */\n    protected _applyStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        if(this._options?.margin)\n        {\n            if(isPresent(this._options.margin.bottom))\n            {\n                style.marginBottom = this._options.margin.bottom;\n            }\n\n            if(isPresent(this._options.margin.right))\n            {\n                style.marginRight = this._options.margin.right;\n            }\n\n            if(isPresent(this._options.margin.top))\n            {\n                style.marginTop = this._options.margin.top;\n            }\n\n            if(isPresent(this._options.margin.left))\n            {\n                style.marginLeft = this._options.margin.left;\n            }\n        }\n\n        if(this._options?.padding)\n        {\n            if(isPresent(this._options.padding.bottom))\n            {\n                style.paddingBottom = this._options.padding.bottom;\n            }\n\n            if(isPresent(this._options.padding.right))\n            {\n                style.paddingRight = this._options.padding.right;\n            }\n\n            if(isPresent(this._options.padding.top))\n            {\n                style.paddingTop = this._options.padding.top;\n            }\n\n            if(isPresent(this._options.padding.left))\n            {\n                style.paddingLeft = this._options.padding.left;\n            }\n        }\n\n        if(this._options?.textStyling)\n        {\n            if(isPresent(this._options.textStyling.fontSize))\n            {\n                style.fontSize = this._options.textStyling.fontSize;\n            }\n\n            if(isPresent(this._options.textStyling.fontWeight))\n            {\n                style.fontWeight = this._options.textStyling.fontWeight.toString();\n            }\n        }\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, HostBinding, Inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {ComponentStylingOptions, ComponentStylingSADirective} from '../../directives';\nimport {StyledLayoutComponent} from '../../interfaces';\nimport {LayoutComponentBase} from '../layoutComponentBase/layoutComponentBase';\n\n/**\n * Base component for layout component which allows to be styled\n */\n@Directive()\nexport abstract class StyledLayoutComponentBase<TOptions> extends LayoutComponentBase<TOptions&ComponentStylingOptions> implements StyledLayoutComponent<TOptions&ComponentStylingOptions>\n{\n    //######################### public properties - host #########################\n\n    /**\n     * Instance of attached component styling directive\n     */\n    @HostBinding('attr.componentStyling')\n    public _componentStyling: ComponentStylingSADirective = new ComponentStylingSADirective(this._element);\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                @Inject(LOGGER) @Optional() logger?: Logger,)\n    {\n        super(changeDetector, element, logger);\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override invalidateVisuals(): void\n    {\n        this._componentStyling.options = this.options;\n\n        this._changeDetector.detectChanges();\n    }\n}"],"names":["TextBlockLayoutMetadata","GenericLayoutAsyncMetadata","_getInstance","TextBlockLayoutEditorMetadata","TextBlockSAComponent","StyledLayoutComponentBase","t","selectors","standalone","features","decls","vars","template","i0","LayoutEditorMetadata","ComponentStylingSADirective","constructor","_element","options","this","_options","value","_applyStyles","style","nativeElement","margin","isPresent","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","inputs","exportAs","LayoutComponentBase","changeDetector","element","logger","super","_componentStyling","invalidateVisuals","_changeDetector","detectChanges","LOGGER","hostVars","hostBindings"],"sourceRoot":""}