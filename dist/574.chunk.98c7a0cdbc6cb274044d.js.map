{"version":3,"file":"574.chunk.98c7a0cdbc6cb274044d.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.html","webpack://ng-universal-demo/../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.module.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-layout-editor-view',\n    templateUrl: 'layout.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'layout'})\n@ComponentRoute({path: 'layout/:id'})\nexport class FormLayoutComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutRelationsMetadata\n    {\n        return {\n            layout: metadata\n        };\n    }\n}\n","<div class=\"flex-row\">\r\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\r\n        <span>go back</span>\r\n    </button>\r\n\r\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsLayoutForm/layout\" (metadataChange)=\"_metadata = ($any($event?.layout) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <debug-data [copyClick]=\"_metadata\"><div class=\"margin-horizontal-small\">metadata</div></debug-data>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","<div class=\"flex-row\">\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/layout', _available.value]\">layout</a>\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/relations', _available.value]\">relations</a>\r\n\r\n    <ng-select [formControl]=\"_available\" class=\"flex-1\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <debug-data [copyClick]=\"selectedMetadata\"><div class=\"margin-horizontal-small\">{{_available.value}}</div></debug-data>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_formGroup\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll thin-scrollbar\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL, provideFormLayout} from '@anglr/dynamic/form';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {RelationsManager} from '../../../../../relations/src';\nimport {provideLayoutRelations} from '../../../../../layout-relations/src';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n        provideLayoutRelations(),\n        provideFormLayout(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n    \n    protected selectedMetadata: LayoutRelationsMetadata|null = null;\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,\n                private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _injector: Injector,\n                private _formComponentControlBuilder: FormComponentControlBuilder,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(async ({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                const meta = this.selectedMetadata = this._store.getData(id);\n                this._metadata = meta?.layout;\n                this._relationsManager.setRelations(meta.relations ?? []);\n\n                this._formGroup = await this._formComponentControlBuilder.build(this._metadata);        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n                this._changeDetector.detectChanges();\n            }\n            else\n            {\n                this.selectedMetadata = null;\n                this._relationsManager.setRelations([]);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/relationsLayoutForm', 'form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Form submission\n     */\n    protected _submit(): void\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {LayoutManager, provideLayoutRelationsEditor} from '@anglr/dynamic/layout-relations';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideFormLayoutRelationsEditor} from '@anglr/dynamic/form';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-relations-editor-view',\n    templateUrl: 'relations.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations),\n            deps: [StoreDataService]\n        },\n        provideLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideFormLayoutRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\n@ComponentRoute({path: 'relations/:id'})\nexport class FormRelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,\n                protected _layoutManager: LayoutManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: RelationsNodeMetadata[]): LayoutRelationsMetadata\n    {\n        return {\n            relations: metadata\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoRelationsComplexRelations;\n    }\n\n    protected _loadRestDemo(): void\n    {\n        this._metadata = DemoData.complexDemoRestRelations;\n    }\n\n    protected _loadFullDemo(): void\n    {\n        this._metadata = DemoData.complexDemoFullRelations;\n    }\n\n    protected setMetadata(metadata: LayoutRelationsMetadata): void\n    {\n        this._metadata = metadata?.relations ?? this.emptyMetadata;\n        this._layoutManager.setLayout(metadata?.layout);\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsLayoutForm/relations\" (metadataChange)=\"setMetadata($event)\" [history]=\"history\"></load-save-new>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>","import {FormLayoutComponent} from './layout/layout.component';\nimport {FormPreviewComponent} from './preview/preview.component';\nimport {FormRelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    FormPreviewComponent,\n    FormLayoutComponent,\n    FormRelationsComponent,\n];","import {FactoryProvider, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\nimport {NgSelectModule} from '@anglr/select';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './relationsLayoutForm.routes';\nimport {StoreDataService} from '../../services/storeData';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {LoadSaveNewSAComponent} from '../../components';\n\n/**\n * Module for relations layout form samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NgSelectModule,\n        LayoutComponentRendererSADirective,\n        RouterModule,\n        GoBackModule,\n        DynamicLayoutRelationsEditorModule,\n        DebugDataCopyClickModule,\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_RELATIONS_FORM_DATA'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsLayoutFormModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');"],"names":["FormLayoutComponent","constructor","_store","history","_metadata","emptyMetadata","id","generateId","displayName","package","name","options","children","_getMetadata","metadata","layout","i0","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","getData","deps","StoreDataService","provideLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","MetadataHistoryManager","FormComponentControlBuilder","_iteratorsSvc","build","layoutMetadata","formGroup","FormGroup","activeGroup","getIteratorFor","iteratorItem","controlName","_getControlName","control","_getControlForMetadata","_getActiveGroup","parent","addControl","parentIterator","group","parentControlName","this","get","controlType","FormComponentControlType","FormArray","FormControl","factory","val_r2","ctx_r1","FormPreviewComponent","_relationsManager","_router","_route","_injector","_formComponentControlBuilder","_changeDetector","selectedMetadata","_available","_availableNames","ngOnInit","getStored","params","subscribe","setValue","meta","setRelations","relations","_formGroup","_formInjector","Injector","providers","FORM_COMPONENT_CONTROL","useValue","detectChanges","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","provideLayoutRelations","provideFormLayout","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","Object","defineProperty","enumerable","configurable","writable","push","pathMatch","RelationsManager","Router","ActivatedRoute","ChangeDetectorRef","FormRelationsComponent","_layoutManager","_loadDemo","DemoData","_loadRestDemo","_loadFullDemo","setMetadata","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideFormLayoutRelationsEditor","DemoRelationsPackageManager","LayoutManager","components","RelationsLayoutFormModule","createStoreDataServiceFactory","imports","CommonModule","ReactiveFormsModule","NgSelectModule","RouterModule","GoBackModule","DynamicLayoutRelationsEditorModule","DebugDataCopyClickModule","LoadSaveNewSAComponent","ModuleRoutes","InjectionToken"],"sourceRoot":""}