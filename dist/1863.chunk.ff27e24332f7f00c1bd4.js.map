{"version":3,"file":"1863.chunk.ff27e24332f7f00c1bd4.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations/src/directives/scopedRelations/scopedRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/misc/directives/listBlockScopeRelations/listBlockScopeRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/extensions/listBlockData.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Directive, FactoryProvider, Inject, inject, Injector, OnDestroy} from '@angular/core';\nimport {SCOPE_ID} from '@anglr/dynamic';\n\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Creates scoped relations component manager and processor\n */\n@Directive(\n{\n    selector: '[scopedRelations]',\n    standalone: true,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n        },\n        RelationsChangeDetector,\n    ],\n})\nexport class ScopedRelationsSADirective implements OnDestroy\n{\n    //######################### constructor #########################\n    constructor(protected componentManager: RelationsComponentManager,\n                protected relationsProcessor: RelationsProcessor,\n                @Inject(SCOPE_ID) protected scopeId: string,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.componentManager.ngOnDestroy();\n        this.relationsProcessor.destroyScope();\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {ListBlockComponentOptions} from './listBlock.options';\n\n/**\n * List block layout metadata loader\n */\nexport const ListBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ListBlockComponentOptions>> = async () => new (await import('./metadata/listBlock.layoutMetadata')).ListBlockLayoutEditorMetadata();\n\n/**\n * List block relations metadata loader\n */\nexport const ListBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/listBlock.relationsMetadata')).ListBlockRelationsEditorMetadata();\n\n/**\n * List block layout designer type loader\n */\nexport const ListBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/listBlockDesigner.component')).ListBlockDesignerSAComponent;\n","import {Directive} from '@angular/core';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\n\nimport {ListBlockRelationsOptions} from './listBlock.options';\n\n/**\n * List block scoped relations component\n */\n@Directive()\nexport class ListBlockRelations<TDatum = any> implements RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @DynamicOutput()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @DynamicOutput()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @DynamicOutput()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @DynamicOutput()\n    public last: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Directive, inject, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelations} from '../../../listBlock.relations';\n\n/**\n * Directive that creates list block scoped relations component\n */\n@Directive(\n{\n    selector: '[listBlockScope]',\n    standalone: true,\n})\nexport class ListBlockScopeRelationsSADirective<TDatum = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager = inject(RelationsComponentManager);\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor = inject(RelationsProcessor);\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: ListBlockRelations = new ListBlockRelations();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @Input()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @Input()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @Input()\n    public last: boolean = false;\n\n    /**\n     * Id of component that is being created\n     */\n    @Input()\n    public componentId: string = '';\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<ListBlockScopeRelationsSADirective>('componentId') in changes && !this.initialized && this.componentId)\n        {\n            this.initialized = true;\n\n            this.componentManager.registerComponent(this.componentId, this.relations);\n            await this.relationsProcessor.initialized;\n            this.relationsProcessor.updateRelations(this.componentId);\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('datum') in changes)\n        {\n            this.relations.datum = this.datum;\n        }\n        \n        if(nameof<ListBlockScopeRelationsSADirective>('index') in changes)\n        {\n            this.relations.index = this.index;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('first') in changes)\n        {\n            this.relations.first = this.first;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('last') in changes)\n        {\n            this.relations.last = this.last;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n}","<ng-container *ngFor=\"let datum of data; let index=index; let first=first; let last=last\">\n    <ng-template [layoutComponentRenderer]=\"options?.template\" scopedRelations listBlockScope [datum]=\"datum\" [first]=\"first\" [last]=\"last\" [index]=\"index\" [componentId]=\"id\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent, ScopedRelationsSADirective} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from './listBlock.options';\nimport {ListBlockLayoutDesignerTypeLoader, ListBlockLayoutMetadataLoader, ListBlockRelationsMetadataLoader} from './listBlock.metadata';\nimport {ListBlockScopeRelationsSADirective} from './misc/directives';\n\n/**\n * Component used for displaying list block\n */\n@Component(\n{\n    selector: 'list-block',\n    templateUrl: 'listBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n        ScopedRelationsSADirective,\n        ListBlockScopeRelationsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<ListBlockComponentOptions>(options => options?.template ? [options?.template] : [])\n@LayoutEditorDesignerType(ListBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(ListBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(ListBlockLayoutMetadataLoader)\nexport class ListBlockSAComponent<TDatum = any> extends LayoutComponentBase<ListBlockComponentOptions> implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Id of current component\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of data to be rendered in for cycle\n     */\n    @Input()\n    public data: Array<TDatum> = [];\n\n    //######################### public methods #########################\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ListBlockSAComponent} from '../listBlock.component';\nimport {ListBlockDataExtensionOptions} from '../listBlockExtensions.options';\n\n//TODO: id use id setter extension\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class ListBlockDataExtension extends DynamicItemExtensionBase<ListBlockDataExtensionOptions, ListBlockSAComponent> implements DynamicItemExtension<ListBlockDataExtensionOptions, ListBlockSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ListBlockDataExtension} from './extensions';\nimport {ListBlockSAComponent} from './listBlock.component';\n\nexport default ListBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension, ListBlockDataExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ScopedRelationsSADirective","constructor","componentManager","relationsProcessor","scopeId","ngOnDestroy","this","destroyScope","SCOPE_ID","selectors","standalone","features","provide","RelationsComponentManager","useFactory","inject","skipSelf","openScope","RelationsProcessor","Injector","RelationsChangeDetector","ListBlockLayoutMetadataLoader","ListBlockLayoutEditorMetadata","ListBlockRelationsMetadataLoader","ListBlockRelationsEditorMetadata","ListBlockLayoutDesignerTypeLoader","ListBlockDesignerSAComponent","ListBlockRelations","datum","index","first","last","invalidateVisuals","__decorate","DynamicOutput","ListBlockScopeRelationsSADirective","initialized","relations","componentId","ngOnChanges","changes","nameof","registerComponent","updateRelations","destroyComponent","unregisterComponent","inputs","i0","ListBlockSAComponent","LayoutComponentBase","id","data","setId","decls","vars","consts","template","CommonModule","LayoutComponentRendererSADirective","styles","changeDetection","DescendantsGetter","options","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","ListBlockDataExtension","DynamicItemExtensionBase","onInit","instance","metadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","destroyed","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","component","ɵComponentRef","componentRef","viewContainerRef","loader","childExtensions","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","parent","providers","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","get"],"sourceRoot":""}