{"version":3,"file":"8929.chunk.e1f6b4e41dd1223e5cf0.js","mappings":"uJAQM,SAAUA,EAAqBC,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,wbCAM,MAAgBE,EAwBlB,WAAcC,GAEV,OAAOC,KAAKC,gBAChB,CAKA,qBAAcC,GAEV,OAAOF,KAAKG,OAChB,CAUAC,WAAAA,CAAsBC,EACAJ,EACAK,EAC4BC,GAH5B,KAAAF,eAAAA,EACA,KAAAJ,iBAAAA,EACA,KAAAK,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAC,WAA+C,GAK/C,KAAAC,aAAuB,EAKvB,KAAAC,WAAqB,CAiC/B,CAOOC,WAAAA,GAEH,IAAGX,KAAKU,UAAR,CAKAV,KAAKU,WAAY,EAEjB,IAAI,MAAME,KAAOZ,KAAKQ,WAElBI,EAAIC,UAGRb,KAAKc,W,CACT,CAOaC,QAAAA,GAAQ,IAAAC,EAAA,YAAAC,GAAC,YAElB,GAAGD,EAAKP,YAEJ,OAGJO,EAAKP,aAAc,EACnB,MAAMP,EAAoBc,EAAKd,kBAK/B,SAHMc,EAAKE,eACLF,EAAKG,eAERjB,EAEC,IAAI,MAAMkB,KAAaJ,EAAKR,iBAElBY,EAAUC,WAAWL,EAAKV,SAAUU,EAAKjB,QAASiB,SAI1DA,EAAKM,WAAY,GArBNL,EAsBrB,CAKaM,WAAAA,CAAYC,GAAsB,IAAAC,EAAA,YAAAR,GAAA,YAG3C,IAAGS,EAAAA,EAAAA,IAAsC,aAAcF,EACvD,OACUC,EAAKN,eAEX,MAAMjB,EAAoBuB,EAAKvB,kBAG/B,GAAGA,EAEC,IAAI,MAAMkB,KAAaK,EAAKjB,iBAElBY,EAAUO,cAAczB,GAItC,IAAIuB,EAAKhB,YAEL,aAGEgB,EAAKG,iB,QAGRJ,GAAQE,EAAAA,EAAAA,IAAsC,aAEjDG,EAAAA,EAAAA,IAAcL,IAEdC,EAAKK,UAAUN,EAClB,GA/B0CP,EAgC/C,CAKOc,kBAAAA,CAAmBvB,GAEtBR,KAAKQ,WAAaA,CACtB,CAKOwB,iBAAAA,GAEHhC,KAAKK,eAAe4B,eACxB,CAOUf,MAAAA,GAEV,CAKUI,SAAAA,GAEV,CAKUM,eAAAA,GAEV,CAMUE,SAAAA,CAAUI,GAEpB,CAKUf,YAAAA,GAEV,CAKUL,SAAAA,GAEV,E,iCAvMkBhB,GAAmBqC,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBC,EAAAA,GAAM,K,kBAhDRtC,EAAmBuC,SAAA,CAAAF,EAAAA,I,uCCR7BG,E,kEAAZ,SAAYA,GAKRA,EAAAA,EAAA,+BAKAA,EAAAA,EAAA,mBAKAA,EAAAA,EAAA,0BACH,CAhBD,CAAYA,IAAAA,EAAmB,KCIzB,MAAOC,EAUTnC,WAAAA,CAAYoC,GAHL,KAAAA,oBAA2CF,EAAoBG,cAK/DC,EAAAA,EAAAA,IAAUF,KAETxC,KAAKwC,oBAAsBA,EAEnC,E,2FCLE,MAAOG,G,iCAAAA,EAA6B,E,kBAA7BA,EAA6BC,UAAA,4BAAAC,YAAA,EAAAR,SAAA,CAAAF,EAAAA,GAAAW,MAAA,EAAAC,KAAA,EAAAC,OAAA,8BAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IClB1Cf,EAAAA,GAAA,SACIA,EAAAA,GAAA,YACAA,EAAAA,GAAA,UAAMA,EAAAA,EAAA,G,mBAAwBA,EAAAA,KAC9BA,EAAAA,GAAA,YACJA,EAAAA,M,MAFUA,EAAAA,EAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAA,kB,gBDYFiB,EAAAA,GAAcC,OAAA,sCAAAC,gBAAA,I,mLEiBhB,MAAOC,EAgDT,aAAcC,GAEV,OAAIxD,KAAKyD,cAKFzD,KAAKyD,cAAcC,SAHf,IAIf,CAOA,gBAAWC,GAEP,OAAO3D,KAAKyD,aAChB,CAGArD,WAAAA,CAAsBwD,EACkCC,EACiCC,EACrCC,EAClB5D,EACoC6D,EACpBzD,GAN5B,KAAAqD,iBAAAA,EACkC,KAAAC,OAAAA,EACiC,KAAAC,gBAAAA,EACrC,KAAAC,QAAAA,EAClB,KAAA5D,QAAAA,EACoC,KAAA6D,oBAAAA,EACpB,KAAAzD,OAAAA,EApExC,KAAAkD,cAA+C,KAQlD,KAAAQ,kBAA+E,KAY/E,KAAAC,oBAA8B,EAQ9B,KAAAC,gBAA+D,IAAIC,EAAAA,EAMnE,KAAAC,uBAAyD,IAAID,EAAAA,EAoC5DpE,KAAKG,SAAaH,KAAKG,mBAAmBoC,IAE1CvC,KAAKG,QAAU,IAAIoC,EAE3B,CAOahB,WAAAA,CAAYC,GAAsB,I,EAAAR,EAAA,Y,EAAA,YAQ3C,GANAA,EAAKT,QAAQ+D,MAAM,kEAAmE,CAACC,GAAIvD,EAAKiD,mBAAmBM,KAEnHvD,EAAKL,cACLK,EAAK4C,iBAAiBY,SAGnB9C,EAAAA,EAAAA,IAA0E,uBAAwBF,GAAWR,EAAKiD,kBACrH,CACI,MAAM3D,EAAWU,EAAKyD,gBAAkBzD,EAAK4C,iBAAiBtD,SAC9D,IAAI2D,EAAoBjD,EAAKiD,kBAC7B,MAAMF,EAAU/C,EAAKiD,kBAAkBS,MAEpC1D,EAAKgD,sBAAwBhD,EAAKkD,qBAEjCD,EAAoBjD,EAAKgD,oBAAoBhD,EAAKiD,kBAAmB3D,IAGzE,MAAMqE,QAA4B3D,EAAK6C,OAAOe,SAASX,GAEvD,IAAIU,EACJ,CAGI,OAFA3D,EAAKT,QAAQsE,KAAK,qFAAsF,CAACC,KAAM,CAACC,KAAMd,EAAkBc,KAAMC,QAASf,EAAkBe,WAElKhE,EAAKb,SAASqC,qBAEjB,QAGIxB,EAAK4C,iBAAiBqB,gBAAgBtC,GAEtC,MAEJ,KAAKL,EAAoB4C,OAIrB,MAEJ,KAAK5C,EAAoB6C,WAErB,MAAM,IAAIC,MAAM,kFAAkFnB,EAAkBc,iBAAiBd,EAAkBe,WAI/J,M,CAGJ,MAAMK,EAAeC,EAAAA,EAASC,OAC9B,CACIC,OAAQlF,EACRmF,UACA,CAEI,CACIC,QAASC,EAAAA,GACTC,SAAU7B,GAAW/C,EAAK+C,SAAW,MAGzC,CACI2B,QAASG,EAAAA,GACTD,SAAUjB,EAAoBb,oBAK1C9C,EAAKyC,cAAgBzC,EAAK4C,iBAAiBqB,gBAAgBN,EAAoBmB,KACpB,CACIxF,SAAU+E,IAGzErE,EAAKT,QAAQ+D,MAAM,iEAAkE,CAACC,GAAIN,GAAmBM,KAC7G,MAAMf,EAAYxC,EAAKwC,UAEvB,GAAGA,EACH,CAEIA,EAAUzB,mBACV,IACOf,EAAK8C,iBAAiBiC,KAAIC,GAAO,IAAIA,EAAI/B,MAAuB,MAChEU,GAAqBnE,YAAYuF,KAAIC,GAAO,IAAIA,EAAI/B,MAAuB,KAGlF,MAAMzC,EAAyB,CAAC,GAChCyE,EAAAA,EAAAA,IAAiCzE,EAAS,UAAWyC,EAAkB9D,QAASqD,EAAUrD,SAAS,GAEnGa,EAAKT,QAAQ+D,MAAM,4EAA6E,CAACC,GAAIN,GAAmBM,KACxHf,EAAUrD,QAAU8D,EAAkB9D,QAEtCa,EAAKT,QAAQ+D,MAAM,4EAA6E,CAACC,GAAIN,GAAmBM,WAClHf,EAAUjC,cAAcC,GAE9BR,EAAKT,QAAQ+D,MAAM,qEAAsE,CAACC,GAAIN,GAAmBM,WAC3Gf,EAAUzC,aAEhBC,EAAKT,QAAQ+D,MAAM,6EAA8E,CAACC,GAAIN,GAAmBM,KACzHvD,EAAKyC,eAAeyC,kBAAkBC,eAEtCnF,EAAKqD,uBAAuB+B,KAAMpF,EAAKyC,eAAe4C,UAAuCC,YAAY,IACzGtF,EAAKmD,gBAAgBiC,KAAKpF,EAAKyC,c,EAEtC,E,gLACL,CAOO9C,WAAAA,GAEAX,KAAKyD,gBAEJzD,KAAKO,QAAQ+D,MAAM,mEAAoE,CAACC,GAAIvE,KAAKiE,mBAAmBM,GAAIgC,SAAUvG,KAAKkE,qBAEvIlE,KAAKyD,eAAe5C,UACpBb,KAAKyD,cAAgB,KACrBzD,KAAKmE,gBAAgBiC,KAAK,MAC1BpG,KAAKqE,uBAAuB+B,KAAK,MAEzC,E,iCAjNS7C,GAAkCpB,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAsEvBqE,EAAAA,IAAwBrE,EAAAA,EACxB0D,EAAAA,GAAiC,IAAA1D,EAAAA,EACjCwD,EAAAA,GAAQ,GAAAxD,EAAAA,EAAAsE,EAAA,GAAAtE,EAAAA,EAERuE,EAAAA,GAA0B,GAAAvE,EAAAA,EAC1BC,EAAAA,GAAM,K,kBA3EjBmB,EAAkCX,UAAA,oCAAA+D,OAAA,CAAA1C,kBAAA,gDAAAQ,eAAA,qDAAAP,mBAAA,oEAAA0C,QAAA,CAAAzC,gBAAA,yCAAAE,uBAAA,0BAAAwC,SAAA,4BAAAhE,YAAA,EAAAR,SAAA,CAAAF,EAAAA,EAT3C,CAEI,CACIuD,QAASG,EAAAA,GACTD,SAAU,QAEjBzD,EAAAA,I,2DCpBC,MAAO2E,UAAkCC,EAAAA,EAcxB7F,MAAAA,GAEflB,KAAKgH,eACT,CAKmBpF,eAAAA,GAEf5B,KAAKgH,eACT,CAOUA,aAAAA,GAEN,MAAM7G,EAAUH,KAAKG,QACf8G,EAAQjH,KAAKD,SAASmH,cAAcD,MAE1C,GAAGjH,KAAKD,QACR,CACI,IAAG2C,EAAAA,EAAAA,IAAU1C,KAAKmH,cAEd,IAAI,MAAMC,KAAYpH,KAAKmH,aAAaE,MAAM,KAEvCD,GAECpH,KAAKD,QAAQmH,cAAcI,UAAUC,OAAOH,GAOxD,GAFApH,KAAKmH,aAAehH,GAASiH,SAE1BjH,GAASiH,SAER,IAAI,MAAMA,KAAYjH,EAAQiH,SAASC,MAAM,KAEtCD,GAECpH,KAAKD,SAASmH,cAAcI,UAAUE,IAAIJ,E,EAMvD1E,EAAAA,EAAAA,IAAUuE,KAEN9G,GAASsH,UAEL/E,EAAAA,EAAAA,IAAUvC,EAAQsH,OAAOC,UAExBT,EAAMU,aAAexH,EAAQsH,OAAOC,SAGrChF,EAAAA,EAAAA,IAAUvC,EAAQsH,OAAOG,SAExBX,EAAMY,YAAc1H,EAAQsH,OAAOG,QAGpClF,EAAAA,EAAAA,IAAUvC,EAAQsH,OAAOK,OAExBb,EAAMc,UAAY5H,EAAQsH,OAAOK,MAGlCpF,EAAAA,EAAAA,IAAUvC,EAAQsH,OAAOO,QAExBf,EAAMgB,WAAa9H,EAAQsH,OAAOO,OAIvC7H,GAAS+H,WAELxF,EAAAA,EAAAA,IAAUvC,EAAQ+H,QAAQR,UAEzBT,EAAMkB,cAAgBhI,EAAQ+H,QAAQR,SAGvChF,EAAAA,EAAAA,IAAUvC,EAAQ+H,QAAQN,SAEzBX,EAAMmB,aAAejI,EAAQ+H,QAAQN,QAGtClF,EAAAA,EAAAA,IAAUvC,EAAQ+H,QAAQJ,OAEzBb,EAAMoB,WAAalI,EAAQ+H,QAAQJ,MAGpCpF,EAAAA,EAAAA,IAAUvC,EAAQ+H,QAAQF,QAEzBf,EAAMqB,YAAcnI,EAAQ+H,QAAQF,OAIzC7H,GAASoI,eAEL7F,EAAAA,EAAAA,IAAUvC,EAAQoI,YAAYC,YAE7BvB,EAAMuB,SAAWrI,EAAQoI,YAAYC,WAGtC9F,EAAAA,EAAAA,IAAUvC,EAAQoI,YAAYE,cAE7BxB,EAAMwB,WAAatI,EAAQoI,YAAYE,WAAWC,aAIlE,E,qRC7HG,MAAMC,EAAoC,e,EAAAC,G,EAA4F,mBAAY,WAAW,0DAA8CC,qCAAsC,E,+KAAA,kBAAvM,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,qPCP7C5G,EAAAA,GAAA,iBACIA,EAAAA,EAAA,EAAA6G,EAAA,qBAAqD7G,EAAAA,EAAC,0CAAD,SAAA8G,GAAA,MAAAC,EAAA/G,EAAAA,GAAAgH,GAAAC,MAAAC,EAAAlH,EAAAA,IAAA,OAA0CA,EAAAA,GAAAkH,EAAAC,qBAAAL,EAAAC,GAA+B,IAClI/G,EAAAA,I,sCAFgCA,EAAAA,EAAA,QAAAoH,EAAAC,MAAArH,CAAmB,aAAAsH,EAAAC,SAAA,YAAnBvH,CAAmB,YAAAsH,EAAAC,SAAA,aAClCvH,EAAAA,EAAA,GAAAA,EAAAA,EAAA,0BAAAoH,EAAAI,Q,ECcd,MAAMC,EAA6C,IAAIC,EAAAA,EAAuB,sBA6B9E,IAAMC,EAAN,cAA0ChK,EAAAA,EAuB1BqB,YAAAA,GAEXnB,KAAK+J,mBAEL/J,KAAK+J,iBAAiBC,KAAOhK,KAAKG,SAAS6J,KAEnD,CAOUV,oBAAAA,CAAqB3F,EAAyDyF,GAEhFzF,GAAcD,WAEdC,EAAaD,SAASuG,cAAgBb,EACtCzF,EAAaD,SAAS1B,oBAE9B,CASOkI,SAAAA,CAAUd,GAEb,MAAM1G,EAAAA,EAAAA,IAAU0G,IAAUpJ,KAAKmK,UAAUC,gBAAkBhB,IACvDpJ,KAAKmK,UAAUE,MAEf,IAAK,IAAIC,EAAI,EAAGA,EAAItK,KAAKmK,SAASE,MAAME,OAAQD,IAChD,CACI,MAAME,EAAMxK,KAAKmK,SAASE,MAAMI,IAAIH,GAEpC,IAAKE,GAAKd,SACV,CACI1J,KAAKmK,SAASC,cAAgBE,EAC9B,K,EAKZtK,KAAKgC,mBACT,CAEO0I,SAAAA,GAEH,GAAI1K,KAAKmK,UAAUE,MACnB,CACI,MAAMM,EAAc3K,KAAKmK,SAASC,cAAgBpK,KAAKmK,SAASE,MAAMI,IAAIzK,KAAKmK,SAASC,eAAiB,KAEzG,IAAKO,GAAeA,EAAYjB,SAE5B,IAAK,IAAIY,EAAI,EAAGA,EAAItK,KAAKmK,SAASE,MAAME,OAAQD,IAChD,CACI,MAAME,EAAMxK,KAAKmK,SAASE,MAAMI,IAAIH,GAEpC,IAAKE,GAAKd,SACV,CACI1J,KAAKmK,SAASC,cAAgBE,EAC9B,K,GAMhBtK,KAAKgC,mBACT,CAEgBd,MAAAA,GAERlB,KAAKG,UACJH,KAAKG,SAAS6J,OAEfhK,KAAKG,QAAQ6J,KAAO,CAChB,CACIR,MAAO,MACPG,QAAS,CACLpF,GAAI,IAAGqG,EAAAA,EAAAA,IAAW,SAClB5F,QAAS,sBACTD,KAAM,MACN5E,QAAS,CAAC,KAK9B,G,wDAjHS2J,KAA2Be,GAA3Bf,EAA2B,G,qBAA3BA,EAA2BlH,UAAA,yBAAAkI,UAAA,SAAA5H,EAAAC,G,GAAA,EAAAD,G,KAQzB6H,EAAAA,EAAW,G,8EAlBtB,CACI,CACIrF,QAASkE,EACToB,YAAalB,KAEpB3H,EAAAA,EAAAA,EAAAA,GAAAW,MAAA,EAAAC,KAAA,EAAAC,OAAA,wNAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDxCLf,EAAAA,GAAA,qBACIA,EAAAA,EAAA,EAAA8I,EAAA,iBAGJ9I,EAAAA,M,MAJeA,EAAAA,EAAA,uBACyDA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,gBAAAgB,EAAAhD,QAAA,KAAAgD,EAAAhD,QAAA6J,M,gBC4BhEkB,EAAAA,EAAYzE,EAAAA,GACZ0E,EAAAA,EAAaC,EAAAA,EAAAA,EAAAA,EAEb7H,EAAAA,GAAkCF,OAAA,sCAAAC,gBAAA,IAa7BwG,GAA2BuB,EAAAA,EAAAA,IAAA,EAFvCC,EAAAA,EAAAA,IAAoDnL,GAAWA,GAAS6J,KAAO7J,GAAS6J,KAAKjE,KAAIwF,GAAkCA,EAAM5B,UAAW,MACpJhK,EAAAA,EAAAA,GAAqBgJ,IACTmB,E,+VCrCP,MAAgB/C,EA8BlB3G,WAAAA,CAAsBoL,GAAA,KAAAA,SAAAA,EAHZ,KAAA/K,aAAuB,CAKjC,CAOaY,UAAAA,CAAWf,EAAoBP,EAAkC2D,GAAmB,IAAA1C,EAAA,YAAAC,GAAA,YAE7FD,EAAKP,aAAc,EAEnBO,EAAKV,SAAWA,EAChBU,EAAKjB,QAAUA,EACfiB,EAAK0C,SAAWA,QAEV1C,EAAKE,QAAS,GARyED,EASjG,CAKaU,aAAAA,CAAcxB,GAAiB,IAAAsB,EAAA,YAAAR,GAAA,YAExCQ,EAAKtB,QAAUA,EAEXsB,EAAKhB,oBAKHgB,EAAKG,kBAAkB,GATWX,EAU5C,CAKOJ,OAAAA,GAEHb,KAAKc,WACT,CAOUI,MAAAA,GAEV,CAKUU,eAAAA,GAEV,CAKUd,SAAAA,GAEV,E","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/tabGroup/tabGroup.component.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialTabGroupComponentOptions} from './tabGroup.options';\n\n/**\n * Material tab group layout metadata loader\n */\nexport const MaterialTabGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTabGroupComponentOptions>> = async () => new (await import('./metadata/tabGroup.layoutMetadata')).MaterialTabGroupLayoutEditorMetadata();","<mat-tab-group [mat-stretch-tabs]=\"false\">\n    <mat-tab #tabComponent=\"matTab\" [label]=\"tab.title\" *ngFor=\"let tab of options?.tabs; let i = index;\" [labelClass]=\"tabComponent.disabled ? 'hidden': ''\" [bodyClass]=\"tabComponent.disabled ? 'hidden': ''\">\n        <ng-template [layoutComponentRenderer]=\"tab.content\" (layoutComponentRendererComponentChange)=\"onTabComponentChange($event, i)\"></ng-template>\n    </mat-tab>\n</mat-tab-group>","import {Component, ChangeDetectionStrategy, InjectionToken, ComponentRef, ViewChild} from '@angular/core';\nimport {MatTabGroup, MatTabsModule} from '@angular/material/tabs';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {generateId, isPresent} from '@jscrpt/common';\n\nimport {MaterialTabGroupComponentOptions} from './tabGroup.options';\nimport {MaterialTabGroupLayoutMetadataLoader} from './tabGroup.metadata';\nimport {MaterialTabSAComponent} from '../tab/tab.component';\n\n/**\n * Injection token used for injecting current scope id\n */\nexport const MATERIAL_TAB_GROUP: InjectionToken<string> = new InjectionToken<string>('MATERIAL_TAB_GROUP');\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-tab-group',\n    templateUrl: 'tabGroup.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatTabsModule,\n        MaterialTabSAComponent,\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        {\n            provide: MATERIAL_TAB_GROUP,\n            useExisting: MaterialTabGroupSAComponent,\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<MaterialTabGroupComponentOptions>(options => options?.tabs ? options?.tabs.map(datum => <LayoutComponentMetadata>datum.content) : [])\n@LayoutEditorMetadata(MaterialTabGroupLayoutMetadataLoader)\nexport class MaterialTabGroupSAComponent extends LayoutComponentBase<MaterialTabGroupComponentOptions> implements LayoutComponent<MaterialTabGroupComponentOptions>, RelationsComponent\n{\n    \n    //######################### protected properties - view children #########################\n\n    /**\n     * Material tab group component\n     */\n    @ViewChild(MatTabGroup)\n    protected tabGroup: MatTabGroup|null|undefined;\n\n    //######################### public properties - Implementation of RelationsComponent #########################\n\n    /**\n     * Relation options for material tab group\n     */\n    public relationsOptions: MaterialTabGroupComponentOptions|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if (this.relationsOptions)\n        {\n            this.relationsOptions.tabs = this.options?.tabs;\n        }\n    }\n\n    /**\n     * Handles tab content change\n     * @param componentRef Tab component ref\n     * @param index index in tab group\n     */\n    protected onTabComponentChange(componentRef: ComponentRef<MaterialTabSAComponent>|null, index: number): void\n    {\n        if (componentRef?.instance)\n        {\n            componentRef.instance.tabGroupIndex = index; \n            componentRef.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Handles tab visibility in group\n     * @param index \n     * @returns \n     */\n    public onHideTab(index: number|null|undefined)\n    {\n        if ((!isPresent(index) || this.tabGroup?.selectedIndex === index) &&\n            this.tabGroup?._tabs)\n        {\n            for (let i = 0; i < this.tabGroup._tabs.length; i++)\n            {\n                const tab = this.tabGroup._tabs.get(i);\n\n                if (!tab?.disabled)\n                {\n                    this.tabGroup.selectedIndex = i;\n                    break;\n                }\n            }\n        }\n\n        this.invalidateVisuals();\n    }\n\n    public onShowTab()\n    {\n        if (this.tabGroup?._tabs)\n        {\n            const selectedTab = this.tabGroup.selectedIndex ? this.tabGroup._tabs.get(this.tabGroup.selectedIndex) : null;\n\n            if (!selectedTab || selectedTab.disabled)\n            {\n                for (let i = 0; i < this.tabGroup._tabs.length; i++)\n                {\n                    const tab = this.tabGroup._tabs.get(i);\n\n                    if (!tab?.disabled)\n                    {\n                        this.tabGroup.selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.invalidateVisuals();\n    }\n\n    public override onInit()\n    {\n        if (this.options &&\n            !this.options?.tabs)\n        {\n            this.options.tabs = [\n                {\n                    title: 'Tab',\n                    content: {\n                        id: `${generateId(6)}-tab`,\n                        package: 'material-components',\n                        name: 'tab',\n                        options: {}\n                    }\n                }\n            ];\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","element","this","componentElement","extensionsOptions","options","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","features","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","LocalizeSAPipe","styles","changeDetection","LayoutComponentRendererSADirective","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","i1","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialTabGroupLayoutMetadataLoader","_ref","MaterialTabGroupLayoutEditorMetadata","apply","arguments","MaterialTabGroupSAComponent_mat_tab_1_ng_template_2_Template","$event","i_r2","_r6","index","ctx_r5","onTabComponentChange","tab_r1","title","_r3","disabled","content","MATERIAL_TAB_GROUP","InjectionToken","MaterialTabGroupSAComponent","relationsOptions","tabs","tabGroupIndex","onHideTab","tabGroup","selectedIndex","_tabs","i","length","tab","get","onShowTab","selectedTab","generateId","t","viewQuery","MatTabGroup","useExisting","MaterialTabGroupSAComponent_mat_tab_1_Template","CommonModule","MatTabsModule","i2","__decorate","DescendantsGetter","datum","metadata"],"sourceRoot":""}