{"version":3,"file":"4623.chunk.a5690ad723c568f2131c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":[null,null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","value","error","complete","defaultValue","EmptyError","TooltipComponent","constructor","_changeDetector","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","this","invalidateVisuals","cssClass","nativeElement","classList","add","detectChanges","mouseEnter","mouseLeave","i0","i1","TOOLTIP_OPTIONS","InjectionToken","TooltipTemplateDirective","template","_dir","_ctx","defaultOptions","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_viewContainerRef","_injector","_animationsPlayer","_document","_position","options","_showRequest","_keepOpen","_timeout","_options","extend","_enterAnimation","build","_exitAnimation","tooltipOptions","ngOnChanges","changes","nameof","tooltipVisible","_showTooltip","_hideTooltip","ngOnDestroy","clearTimeout","_destroyTooltip","event","isBlank","setTimeout","mouseMove","_tooltipComponent","isPresent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","component","element","create","onDone","destroy","undefined","play","createComponent","injector","hostView","rootNodes","body","appendChild","instance","data","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","Object","assign","target","style","top","left","transform","x","y","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","type","ngOnInit","getClosestDialog","openDialogs","proxiedChange","dialogResult","currentValue","_onButtonClick","_closeDialogVia","screenX","screenY","MatDialogTitle","_dialogRef","id","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","parent","parentElement","contains","find","dialog"],"sourceRoot":""}