{"version":3,"file":"3627.chunk.b71bd4f91476a8f1dac1.js","mappings":"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","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.html","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/metadata/dataTemplate.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/modules/codeEditor.module.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {CodeEditorDialogData, CodeEditorDialogSAComponent} from '@anglr/dynamic/layout-editor';\nimport {HandlebarsLanguageModel} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {DataTemplateRelationsOptions} from '../dataTemplate.options';\n\n/**\n * Relations node component for data template\n */\n@Component(\n{\n    selector: 'data-template-node',\n    templateUrl: 'dataTemplateNode.component.html',\n    // styleUrls: ['dataTemplateNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTemplateNodeSAComponent extends RelationsNodeBase<DataTemplateRelationsOptions> implements RelationsNode<DataTemplateRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogSAComponent, CodeEditorDialogData, string|null>(CodeEditorDialogSAComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.relationsOptions?.template ?? '',\n                languageModel: HandlebarsLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.template = result;\n            }\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"data template\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"template\" [parent]=\"this\"></relation-node-input>\n                <div>template</div>\n            </div>\n            \n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n                <div>data</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>output</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"output\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"showCodeEditor()\">\n        <span>template</span>\n    </button>\n</div>\n","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DataTemplateNodeSAComponent} from '../node/dataTemplateNode.component';\n\n/**\n * Data template relations metadata\n */\nexport class DataTemplateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Data template',\n        description: 'Renders data into template',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DataTemplateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {CodeEditorComponent} from '../components';\n\n/**\n * Module for code editor stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        CodeEditorComponent,\n    ],\n    exports:\n    [\n        CodeEditorComponent,\n    ]\n})\nexport class CodeEditorModule\n{\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {CodeEditorModule} from '@anglr/dynamic';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n//TODO: maybe move into core\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CodeEditorModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}"],"names":["DataTemplateNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","lastValueFrom","open","CodeEditorDialogSAComponent","title","width","height","data","content","metadata","relationsOptions","template","languageModel","HandlebarsLanguageModel","afterClosed","isPresent","i0","selectors","standalone","features","decls","vars","consts","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","DataTemplateRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","CodeEditorModule","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","language","Uri","extension","setModel","inputs","outputs","styles","TITLED_DIALOG_DATA","_r0","i2","MatDialogModule","i1","LanguageModel","getModel"],"sourceRoot":""}