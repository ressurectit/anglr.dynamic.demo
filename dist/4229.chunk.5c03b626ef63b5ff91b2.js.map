{"version":3,"file":"4229.chunk.5c03b626ef63b5ff91b2.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.utils.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts"],"sourcesContent":["import {Action} from '@jscrpt/common';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Applies CSS styles of element applying grid panel css grid coordinates\n * @param options - Options for grid panel cell component\n * @param styles - CSS styles of element that should be updated\n */\nexport const applyGridCoordinates: Action<[GridPanelCellComponentOptions|undefined|null, CSSStyleDeclaration]> = (options, style) =>\n{\n    style.gridRowStart = options?.gridRowStart?.toString() ?? '';\n    style.gridRowEnd = options?.gridRowEnd?.toString() ?? '';\n    style.gridColumnStart = options?.gridColumnStart?.toString() ?? '';\n    style.gridColumnEnd = options?.gridColumnEnd?.toString() ?? '';\n};","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Grid panel cell layout metadata loader\n */\nexport const GridPanelCellLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelCellComponentOptions>> = async () => new (await import('./metadata/gridPanelCell.layoutMetadata')).GridPanelCellLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\nimport {GridPanelCellLayoutMetadataLoader} from './gridPanelCell.metadata';\nimport {applyGridCoordinates} from './gridPanelCell.utils';\n\n/**\n * Component used for displaying grid panel cell\n */\n@Component(\n{\n    selector: 'grid-panel-cell',\n    templateUrl: 'gridPanelCell.component.html',\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelCellComponentOptions>(options => options?.component ? [options.component] : [])\n@LayoutEditorMetadata(GridPanelCellLayoutMetadataLoader)\nexport class GridPanelCellSAComponent extends LayoutComponentBase<GridPanelCellComponentOptions> implements LayoutComponent<GridPanelCellComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n        \n        applyGridCoordinates(this.options, style);\n    }\n}","<ng-template [layoutComponentRenderer]=\"options?.component\"></ng-template>","import {GridPanelCellSAComponent} from './gridPanelCell.component';\n\nexport default GridPanelCellSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}"],"names":["applyGridCoordinates","options","style","gridRowStart","toString","gridRowEnd","gridColumnStart","gridColumnEnd","GridPanelCellLayoutMetadataLoader","GridPanelCellLayoutEditorMetadata","GridPanelCellSAComponent","LayoutComponentBase","onOptionsSet","this","componentElement","nativeElement","selectors","standalone","features","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","encapsulation","changeDetection","DescendantsGetter","component","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs"],"sourceRoot":""}