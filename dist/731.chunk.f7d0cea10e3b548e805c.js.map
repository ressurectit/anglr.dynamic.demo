{"version":3,"file":"731.chunk.f7d0cea10e3b548e805c.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/metadata/formComponentBase.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/period/metadata/period.model.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/period/metadata/period.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyValues/propertyValues.decorator.ts","webpack://ng-universal-demo/../material-components/src/metadata/materialFormFieldComponentBase.model.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {FormControl, FormGroup, FormArray} from '@angular/forms';\nimport {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormComponentOptions} from '../misc/formComponentBase.options';\n\n/**\n * Base form component model for properties editor\n */\nexport class FormComponentBaseModel implements FormComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Control name')\n    @LayoutPropertyDescription('Form control name')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public controlName: string|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public controlType: Type<FormControl|FormGroup|FormArray>|undefined = undefined;\n\n    //######################### constructor #########################\n    constructor(value: FormComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {MaterialPeriodComponentOptions} from '../period.options';\nimport {MaterialFormFieldComponentBaseModel} from '../../../metadata';\n\n\n/**\n * Material period model for properties editor\n */\nexport class MaterialPeriodModel extends MaterialFormFieldComponentBaseModel implements MaterialPeriodComponentOptions\n{}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialPeriodComponentOptions} from '../period.options';\nimport {MaterialPeriodModel} from './period.model';\n\n\n/**\n * Material period layout metadata\n */\nexport class MaterialPeriodLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<MaterialPeriodComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<MaterialPeriodComponentOptions> =\n    {\n        name: 'Period',\n        description: 'Material period field',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: MaterialPeriodModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<MaterialPeriodModel>(['label', 'placeholder', 'hint', 'appearance', 'controlName']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            label: 'Input label',\n            placeholder: 'Placeholder',\n            hint: 'Hint',\n        },\n        group: 'Material form fields'\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyValuesData} from './propertyValues.interface';\n\n/**\n * Adds available values to component property for designer\n * @param values - Array of available values\n */\nexport function LayoutPropertyValues<TType>(values: Array<TType>): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyValuesData>({values}, LayoutPropertyMetadata);\n}","import {MatFormFieldAppearance} from '@angular/material/form-field';\nimport {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes, LayoutPropertyValues} from '@anglr/dynamic/layout-editor';\nimport {FormComponentBaseModel} from '@anglr/dynamic/form';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {MaterialFormFieldComponentOptions} from '../misc';\n\nexport class MaterialFormFieldComponentBaseModel extends FormComponentBaseModel implements MaterialFormFieldComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Label')\n    @LayoutPropertyDescription('Form label')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public label: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Placeholder')\n    @LayoutPropertyDescription('Input placeholder')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public placeholder: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Hint')\n    @LayoutPropertyDescription('Input hint')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public hint: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Appereance')\n    @LayoutPropertyDescription('Input appereance')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('selectValue')\n    @LayoutPropertyValues<string>(['standard', 'legacy', 'fill', 'outline'])\n    public appearance: MatFormFieldAppearance = 'standard';\n\n    //######################### constructor #########################\n    constructor(value: MaterialFormFieldComponentOptions|undefined|null)\n    {\n        super(value);\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}"],"names":["FormComponentBaseModel","constructor","value","controlName","controlType","undefined","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","InputBooleanComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","resolvePromiseOr","initialize","invalidateVisuals","destroy","LOGGER","inputs","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","genericPropertiesControlFor","GenericPropertiesControl","standalone","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","ReactiveFormsModule","CastPipesModule","NumberInputModule","LAYOUT_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_COMPONENTS_LOADER","LAYOUT_METADATA_STORAGE","MaterialPeriodModel","MaterialFormFieldComponentBaseModel","MaterialPeriodLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","defaultOptions","label","placeholder","hint","group","Object","freeze","super","appearance","DynamicPropertyMetadata","LayoutPropertyMetadata"],"sourceRoot":""}