{"version":3,"file":"8508.chunk.fb1cdd5337289565028d.js","mappings":";8OAOA,MAAMA,EACN,CACIC,QAASC,EAAAA,GACTC,aAAaC,EAAAA,EAAAA,KAAW,IAAMC,IAC9BC,OAAO,GAiBL,MAAOD,EAYTE,YAAoBC,EAA8BC,GAA9B,KAAAD,UAAAA,EAA8B,KAAAC,YAAAA,EAR3C,KAAAC,SAAYC,MAKZ,KAAAC,UAAY,OAYZC,WAAWC,GAEdC,KAAKP,UAAUQ,YAAYD,KAAKN,YAAYQ,cAAe,QAASH,GAMjEI,iBAAiBC,GAEpBJ,KAAKL,SAAYI,KAEVM,EAAAA,EAAAA,IAAQN,IAAmB,IAATA,EAEjBK,EAAG,OAMPL,EAAQA,EAAMO,QAAQ,OAAQ,IAE1B,0BAA0BC,KAAKR,GAOnCK,EAAGI,WAAWT,EAAMO,QAAQ,IAAK,OAL7BF,EAAGK,OAYRC,kBAAkBN,GAErBJ,KAAKH,UAAYO,oCA3DZd,GAAAA,EAAAA,EAA+BqB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,wBAA/BrB,oMAAA,kJARE,CAACL,oGCZhB,MAAM2B,EACN,CACI1B,QAAS2B,EAAAA,GACTzB,aAAaC,EAAAA,EAAAA,KAAW,IAAMyB,IAC9BvB,OAAO,GAWL,MAAOuB,EASFC,SAASC,GAEZ,OC5BF,MAMkB,cAACA,GAEjB,OAAGC,MAAMD,EAAQjB,OAEN,CACH,QAAU,GAIX,KAOM,WAACmB,GAEd,OAAQF,IAEAC,MAAMD,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUH,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUD,IAAQF,EAAQjB,MAAQmB,EAE/E,CACH,SAAYA,EACZ,YAAeF,EAAQjB,OAIxB,KAQE,WAACqB,GAEd,OAAQJ,IAEAC,MAAMD,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUH,EAAQjB,SAAUoB,EAAAA,EAAAA,IAAUC,IAAQJ,EAAQjB,MAAQqB,EAE/E,CACH,SAAYA,EACZ,YAAeJ,EAAQjB,OAIxB,OD1BOsB,OAAOL,qCAXpBF,sBAAAA,iJAFE,CAACF,wDEdT,MAAMU,EACb,CACIC,gBAAiB,GACjBC,WAAY,GACZC,UAAU,EACVC,KAAMC,EAAAA,GACNC,UAAWD,EAAAA,GACXE,KAAM,gGCLJ,MAAOC,EAGTtC,YAAgDuC,GAAA,KAAAA,QAAAA,EAWzCC,UAAkBjC,EAA+CkC,GAEpE,OAAG5B,EAAAA,EAAAA,IAAQN,GAEA,KAGRA,aAAiB4B,EAAAA,GAET5B,GAGXC,KAAK+B,SAASG,KAAK,iDAEZ,wCA5BFJ,GAAAA,EAAAA,EAGuBK,EAAAA,GAAMA,8CAH7BL,8FCDP,MAAOM,EAQT5C,YAAoB6C,EACAC,GADA,KAAAD,WAAAA,EACA,KAAAC,MAAAA,EASbC,UAEH,OAAGvC,KAAKsC,MAEIT,IAEJA,EACA,IACO7B,KAAKsC,MACRT,KAAAA,GAGG7B,KAAKqC,WAAWR,IAIxB7B,KAAKqC,YAOd,MAAOG,EAQThD,YAAoB6C,EACAC,GADA,KAAAD,WAAAA,EACA,KAAAC,MAAAA,EASbC,UAEH,OAAGvC,KAAKsC,MAEIT,IAEJA,EACA,IACO7B,KAAKsC,MACRT,KAAAA,GAGG7B,KAAKqC,WAAWR,IAIxB7B,KAAKqC,YCnEpB,SAASI,EAA4DC,EAAyDb,GAE1H,IAAIa,EAEA,OAAO,IAAIC,EAAAA,GAAkC,IAGjD,MAAMC,EAAiCF,EAAMG,mBAAqB,GAC5DC,EAAkBJ,EAAMK,aAAe,GACvCC,EAAuBN,EAAMO,kBAAoB,GACjDC,EAA6BR,EAAMS,OAAS,GAC5CC,EAAaC,OAAOC,KAAKZ,GACzBa,EAAuB,IAAIZ,EAAAA,GAAU,GACA,CACInB,WAAYsB,GAAiBU,KAAIC,GAAaA,aAAqBrB,EAAqBqB,EAAUlB,SAAVkB,CAAoB,IAAIP,KAAcrB,IAAS4B,IAAWC,QAAOC,KAASA,IAClKpC,gBAAiByB,GAAsBQ,KAAIC,GAAaA,aAAqBjB,EAA0BiB,EAAUlB,SAAVkB,CAAoB,IAAIP,KAAcrB,IAAS4B,IAAWC,QAAOC,KAASA,MAGhO,IAAI,MAAMC,KAAgBR,EAC1B,CACI,MAAMS,EAA2CjB,EAAcgB,IAAiBtC,EAAAA,EAC1EwC,EAAepB,EAAMkB,GAG3B,QAAoBG,IAAjBD,EAEC,SAGJ,MAAMtC,EAAaqC,EAASrC,WAAWgC,KAAIC,GAAaA,aAAqBrB,EAAqBqB,EAAUlB,SAAVkB,CAAoB,IAAII,EAAShC,QAASA,IAAS4B,IAAWC,QAAOC,KAASA,IAC1KpC,EAAkBsC,EAAStC,gBAAgBiC,KAAIC,GAAaA,aAAqBjB,EAA0BiB,EAAUlB,SAAVkB,CAAoB,IAAII,EAAShC,QAASA,IAAS4B,IAAWC,QAAOC,KAASA,IAE/L,IAAI3C,EAEJ,OAAO6C,EAASnC,MAEZ,KAAKiB,EAAAA,GAED3B,EAAUyB,EAAeqB,EAAcjC,GAIvC,MAEJ,KAAKmC,EAAAA,GAUD,GAPAhD,EAAU,IAAIgD,EAAAA,GAAU,GACA,CACIxC,WAAYA,EACZD,gBAAiBA,KACdsC,EAASI,iBAGrCH,GAAgBI,MAAMC,QAAQL,GACjC,CACI,MAAMM,EAAYpD,EAElB,IAAI,MAAMqD,KAAOP,EAEb,OAAOD,EAASjC,WAEZ,KAAKe,EAAAA,GAEDyB,EAAUE,KAAK7B,EAAe4B,EAAKxC,IAEnC,MAEJ,KAAKmC,EAAAA,GAED,MAEJ,QAGII,EAAUE,KAAK,IAAI3C,EAAAA,GAAY0C,EACA,CACI7C,WAAYA,EACZD,gBAAiBA,KACdsC,EAASI,mBAS/D,MAEJ,QAGIjD,EAAU,IAAIW,EAAAA,GAAYmC,EACA,CACItC,WAAYA,EACZD,gBAAiBA,KACdsC,EAASI,iBAO/CJ,EAASpC,UAERT,EAAQuD,UAGZhB,EAAUiB,WAAWZ,EAAc5C,GAGvC,OAAOuC,EASL,SAAUkB,EAA4D/B,EAAeb,GAEvF,OAAOY,EAAeC,EAAcb,wCChIlC,MAAO6C,EAGTlF,YAAsBmF,GAAA,KAAAA,UAAAA,EAWfC,MAAmDlC,EAAeb,GAErE,OAAO4C,EAA8B/B,EACA,IACOb,EACHgD,SAAU7E,KAAK2E,8CAnBnDD,GAAAA,EAAAA,GAAgB/D,EAAAA,yBAAhB+D,UAAAA,EAAAA,wDCYP,SAAUI,EAAuBC,EAAsBC,EAAqBC,GAE9E,OAAO,SAAuCC,GAE1C,MAAMC,EAAwDD,EAE9D,IAAG7E,EAAAA,EAAAA,IAAQ8E,EAAwBC,eAAgB/E,EAAAA,EAAAA,IAAQ2E,GAIvD,OAFAK,QAAQnD,KAAK,wGAENgD,EAGX,IAAG7E,EAAAA,EAAAA,IAAQ2E,KAAe7D,EAAAA,EAAAA,IAAUgE,EAAwBC,cAAgBD,EAAwBC,YAAYE,OAAS,EAIrH,OAFAD,QAAQnD,KAAK,2DAENgD,EAGX,MAAMK,EAAwEL,EA+B9E,OA7BG7E,EAAAA,EAAAA,IAAQkF,EAAgCC,sBAEvCnC,OAAOoC,eAAeP,EACA,sBACA,CACIQ,YAAY,EACZC,cAAc,EACdC,UAAU,EACV7F,MAAO,MAIlCM,EAAAA,EAAAA,IAAQ4E,KAEPA,GAAgB,IAGjB5E,EAAAA,EAAAA,IAAQ2E,KAEPA,EAAaG,EAAwBC,YAAY,GAAGS,MAGxDN,EAAgCC,oBAAoBlB,KACpD,CACIuB,KAAMd,EACNC,WAAYA,EACZc,UAAWb,EAAgB,OAAS,WAGjCC,qDCnDT,SAAUa,EAAeC,GAG3B,OAAO,SAAuCd,GAE1C,MAAMe,EAAKD,EAEXC,EAAGC,UAAiBhB,EAEpB,MAAMC,EAAwDD,EAgB9D,OAdG7E,EAAAA,EAAAA,IAAQ8E,EAAwBC,cAE/B/B,OAAOoC,eAAeP,EACA,cACA,CACIQ,YAAY,EACZC,cAAc,EACdC,UAAU,EACV7F,MAAO,KAIrCoF,EAAwBC,YAAYd,KAAK2B,GAElCf,iUChDf,aAAqC,gFACrC,kCAAoC,oDAGhC,yHAAe,4ECWb,MAAOiB,EAqCT3G,YAAsB4G,EACAC,GADA,KAAAD,gBAAAA,EACA,KAAAC,SAAAA,EA/BZ,KAAAC,SAAuB,IAAM,KAK7B,KAAAC,SAAuB,IAAM,KAiBhC,KAAAC,WAAqB,EAoBrBC,oBAAoBC,EAAmBC,GAE1C3G,KAAKsG,SAAWI,EAChB1G,KAAKuG,SAAWI,EAMbC,oBAEA5G,KAAK6G,UAEJ7G,KAAKqG,SAASnG,cAAc4G,UAAUC,IAAI/G,KAAK6G,UAGnD7G,KAAKoG,gBAAgBY,gBAUlBC,aAEHjH,KAAKsG,WAQFY,aAEHlH,KAAKuG,6CAvFAJ,GAAAA,EAAAA,EAAgBxF,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,wBAAhBwF,oGAAA,8ODfb,qBACA,qBAEA,oCAHM,sCACA,4CAEO,0CEECgB,EAAAA,EAAAA,EAAAA,+OCEP,MAAMC,EAA2D,aAAIC,GAAwC,wDCI9G,MAAOC,EAGT9H,YAAmB+H,GAAA,KAAAA,SAAAA,EASU,8BAACC,EAAgCC,GAE1D,OAAO,oCAdFH,GAAAA,EAAAA,EAAwB3G,EAAAA,wBAAxB2G,gHCMb,MAAMI,EACN,CACIC,MAAO,IACPC,SACA,CACIC,OAAQC,EAAAA,EAAAA,WACRC,UAAWC,EAAAA,EAAAA,UAEfC,gBAAgB,EAChBC,gBAAiB/B,EACjBgC,gBAAiB,KACjBC,iBAAiB,EACjBC,eAAgBC,EAAAA,EAChBC,cAAeC,EAAAA,GAUb,MAAOC,EA+FTjJ,YAAsBkJ,EACA/D,EACA0B,EACAsC,EACkBC,EACAC,EACSC,GAN3B,KAAAJ,kBAAAA,EACA,KAAA/D,UAAAA,EACA,KAAA0B,SAAAA,EACA,KAAAsC,kBAAAA,EACkB,KAAAC,UAAAA,EACA,KAAAC,UAAAA,EApE9B,KAAAE,cAAwB,EAKxB,KAAAC,WAAqB,EAKrB,KAAAC,SAAwB,KAc3B,KAAAzC,WAAqB,EA+CxBxG,KAAKkJ,UAAWC,EAAAA,EAAAA,KAAO,EAAM,GAAIzB,EAAgBoB,GAEjD9I,KAAKoJ,gBAAkBpJ,KAAK2I,kBAAkB/D,MAAM5E,KAAKkJ,SAASb,gBAClErI,KAAKqJ,eAAiBrJ,KAAK2I,kBAAkB/D,MAAM5E,KAAKkJ,SAASX,eAtC1De,qBAEP,OAAOtJ,KAAKkJ,SAELI,mBAAevJ,GAEtBC,KAAKkJ,UAAWC,EAAAA,EAAAA,KAAO,EAAM,GAAInJ,KAAKkJ,SAAUnJ,GAEhDC,KAAKoJ,gBAAkBpJ,KAAK2I,kBAAkB/D,MAAM5E,KAAKkJ,SAASb,gBAClErI,KAAKqJ,eAAiBrJ,KAAK2I,kBAAkB/D,MAAM5E,KAAKkJ,SAASX,eAqC9DgB,YAAYC,IAEZC,EAAAA,EAAAA,GAAyB,oBAAqBD,IAE1CxJ,KAAK0J,eAEJ1J,KAAK2J,eAIL3J,KAAK4J,gBAUVC,cAEA7J,KAAKiJ,UAEJa,aAAa9J,KAAKiJ,UAGtBjJ,KAAK+J,kBAWF7C,WAAW8C,GAEXhK,KAAKkJ,SAASd,iBAEb4B,EAAM5B,mBAGP/H,EAAAA,EAAAA,IAAQL,KAAK0J,iBAEZO,YAAW,KAEHjK,KAAKgJ,YAELhJ,KAAK+I,cAAe,EACpB/I,KAAK4J,kBAEV,IAUJM,UAAUF,GAEVhK,KAAKkJ,SAASd,iBAEb4B,EAAM5B,kBAGVpI,KAAK+I,cAAe,EAGjB/I,KAAKmK,oBAAqBhJ,EAAAA,EAAAA,IAAUnB,KAAK0J,mBAKzCvI,EAAAA,EAAAA,IAAUnB,KAAKiJ,WAEda,aAAa9J,KAAKiJ,UAGtBjJ,KAAKiJ,SAAWgB,YAAW,KAEvBjK,KAAKiJ,SAAW,KAEbjJ,KAAK+I,eAEJ/I,KAAK2J,aAAaK,GAElBhK,KAAK+I,cAAe,KAEzB/I,KAAKkJ,SAASvB,QASXgC,aAAaK,GAEnBhK,KAAKoK,iBAGDpK,KAAKqK,kBAKTrK,KAAKsK,YAELtK,KAAK6I,UAAU0B,aAAavK,KAAKqK,gBACLrK,KAAKqG,SAASnG,cACd,CACI6H,UAAW/H,KAAKkJ,SAAStB,SAASG,UAClCF,OAAQ7H,KAAKkJ,SAAStB,SAASC,OAC/B2C,MAAM,EACNC,WAAYT,EACZU,YAAY,IAEvCC,YACAC,MAAKC,IAAUC,EAAAA,EAAAA,GAAoBD,MAMlCjB,eAEN5J,KAAK+J,kBAMCA,kBAEN,GAAG/J,KAAKmK,kBACR,CACI,MAAMjE,EAAYlG,KAAKmK,kBACjBY,EAAU/K,KAAKqK,gBAEf9B,EAAgBvI,KAAKqJ,eAAe2B,OAAOD,GAEjDxC,EAAc0C,QAAO,KAEjB/E,EAAUgF,UACV3C,EAAc2C,aAGlBlL,KAAKmK,uBAAoBpG,EACzB/D,KAAKqK,qBAAkBtG,EAEvBwE,EAAc4C,QAOZf,iBAGNpK,KAAK+J,kBAGL/J,KAAKmK,kBAAoBnK,KAAK0I,kBACzB0C,gBAAgBpL,KAAKkJ,SAAShB,gBACd,CACIrD,SAAU7E,KAAK2E,YAIxC3E,KAAKqK,gBAAmBrK,KAAKmK,kBAAkBkB,SAC1CC,UAAU,GAGftL,KAAK4I,UAAU2C,KAAKC,YAAYxL,KAAKqK,iBACrCrK,KAAKoJ,gBAAgB4B,OAAOhL,KAAKqK,iBAAiBc,OAM5Cb,YAEHtK,KAAKmK,oBAEJnK,KAAKmK,kBAAkBsB,SAASjF,UAAYxG,KAAKwG,UACjDxG,KAAKmK,kBAAkBsB,SAASC,KAAO1L,KAAK2L,QAC5C3L,KAAKmK,kBAAkBsB,SAASlE,SAAWvH,KAAKuH,UAAYvH,KAAK4L,sBAAsBrE,SACvFvH,KAAKmK,kBAAkBsB,SAAS5E,SAAW7G,KAAKkJ,SAASf,gBAEzDnI,KAAKmK,kBAAkBsB,SAAShF,qBAAoB,KAEOzG,KAAKkJ,SAASjB,iBAEbjI,KAAKgJ,WAAY,EACjBhJ,KAAK+I,cAAe,MAG5B,KAEIkB,YAAW,KAEPjK,KAAKgJ,WAAY,EAEbhJ,KAAK+I,cAEL/I,KAAK4J,eAGT5J,KAAK+I,cAAe,IACrB,MAG3D/I,KAAKmK,kBAAkBsB,SAAS7E,uDA9U/B6B,GAAAA,EAAAA,EAAgB9H,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAmGLkL,EAAAA,GAAQA,EAAAA,EACRC,EAAAA,IAAQA,EAAAA,EACI1E,EAAeA,uBArGtCqB,8EA2FKnB,EAAwBA,sIA3F7B,6OClCP,SAAUwD,EAAoBD,GAEhCxH,OAAO0I,OAAOlB,EAAO3F,OAAO8G,MACd,CACIC,IAAK,IACLC,KAAM,IACNlK,UAAW,aAAa6I,EAAOsB,QAAQtB,EAAOuB,iKC8B9D,MAAOC,EAoBX7M,YAAoB8M,GAAA,KAAAA,OAAAA,EAnBZ,KAAAC,kBAAoB,EACpB,KAAAC,YAAwB,KACxB,KAAAC,OAAQ,EACC,KAAAC,iBAAmB,IAAIC,EAAAA,GAChC,KAAAC,uBAAyBC,EAAAA,EAAAA,MACzB,KAAAC,WAAY,EAEZ,KAAAC,qBAAoD,GACpD,KAAAC,aAAc,EAMd,KAAAC,iBAAoBC,GAAYA,EAAKzL,SAGrC,KAAA0L,gBAA4B,GAwB3B,KAAAC,OAAS,IAAIT,EAAAA,GAGb,KAAAU,OAAS,IAAIV,EAAAA,GArBhBL,aAAkBgB,EAAAA,GACpBhB,EAAO9C,QAAQ+D,WAAWC,IACxB,GAAIxN,KAAKwM,YAAa,CACpB,MACMiB,EADYD,EAASE,UACAC,QAAQ3N,KAAKwM,aAEpCiB,GAAY,GAAKA,IAAazN,KAAKuM,mBACrCvM,KAAKuM,iBAAmBkB,OAqBlCG,cAAcC,GAEZ,OADA7N,KAAKiN,iBAAmBY,EACjB7N,KAQT8N,SAASC,GAAa,GAEpB,OADA/N,KAAKyM,MAAQsB,EACN/N,KAOTgO,wBAAwBC,GAAmB,GAEzC,OADAjO,KAAK8M,UAAYmB,EACVjO,KAQTkO,0BAA0BC,GAExB,OADAnO,KAAKoO,YAAcD,EACZnO,KAOTqO,wBAAwB/K,GAEtB,OADAtD,KAAK+M,qBAAuBzJ,EACrBtD,KAOTsO,cAAcC,EAA2B,KA0CvC,OAjCAvO,KAAK4M,uBAAuB4B,cAK5BxO,KAAK4M,uBAAyB5M,KAAK0M,iBAChC+B,MACCC,EAAAA,EAAAA,IAAIC,GAAU3O,KAAKmN,gBAAgB7I,KAAKqK,MACxCC,EAAAA,EAAAA,GAAaL,IACb7K,EAAAA,EAAAA,IAAO,IAAM1D,KAAKmN,gBAAgB7H,OAAS,KAC3C9B,EAAAA,EAAAA,IAAI,IAAMxD,KAAKmN,gBAAgB0B,KAAK,OAErCtB,WAAUuB,IACT,MAAMC,EAAQ/O,KAAKgP,iBAInB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMzJ,OAAS,EAAG2J,IAAK,CACzC,MAAMC,GAASlP,KAAKuM,iBAAmB0C,GAAKF,EAAMzJ,OAC5C4H,EAAO6B,EAAMG,GAEnB,IACGlP,KAAKiN,iBAAiBC,IACwC,IAA/DA,EAAKiC,WAAYC,cAAcC,OAAO1B,QAAQmB,GAC9C,CACA9O,KAAKsP,cAAcJ,GACnB,OAIJlP,KAAKmN,gBAAkB,MAGpBnN,KAQTuP,eAAetB,GAAmB,GAEhC,OADAjO,KAAKgN,YAAciB,EACZjO,KAeTsP,cAAcpC,GACZ,MAAMsC,EAAqBxP,KAAKwM,YAEhCxM,KAAKyP,iBAAiBvC,GAElBlN,KAAKwM,cAAgBgD,GACvBxP,KAAKqN,OAAOqC,KAAK1P,KAAKuM,kBAQ1BoD,UAAU3F,GACR,MAAM4F,EAAU5F,EAAM4F,QAEhBC,EADyC,CAAC,SAAU,UAAW,UAAW,YAC5CC,OAAMC,IAChC/F,EAAM+F,IAAa/P,KAAK+M,qBAAqBY,QAAQoC,IAAa,IAG5E,OAAQH,GACN,KAAKI,EAAAA,GAEH,YADAhQ,KAAKoN,OAAOsC,OAGd,KAAKO,EAAAA,GACH,GAAIjQ,KAAK8M,WAAa+C,EAAmB,CACvC7P,KAAKkQ,oBACL,MAEA,OAGJ,KAAKC,EAAAA,GACH,GAAInQ,KAAK8M,WAAa+C,EAAmB,CACvC7P,KAAKoQ,wBACL,MAEA,OAGJ,KAAKC,EAAAA,GACH,GAAIrQ,KAAKoO,aAAeyB,EAAmB,CACpB,QAArB7P,KAAKoO,YAAwBpO,KAAKoQ,wBAA0BpQ,KAAKkQ,oBACjE,MAEA,OAGJ,KAAKI,EAAAA,GACH,GAAItQ,KAAKoO,aAAeyB,EAAmB,CACpB,QAArB7P,KAAKoO,YAAwBpO,KAAKkQ,oBAAsBlQ,KAAKoQ,wBAC7D,MAEA,OAGJ,KAAKG,EAAAA,GACH,GAAIvQ,KAAKgN,aAAe6C,EAAmB,CACzC7P,KAAKwQ,qBACL,MAEA,OAGJ,KAAKC,EAAAA,GACH,GAAIzQ,KAAKgN,aAAe6C,EAAmB,CACzC7P,KAAK0Q,oBACL,MAEA,OAGJ,QAaE,aAZIb,IAAqBc,EAAAA,EAAAA,GAAe3G,EAAO,eAGzCA,EAAM4G,KAA4B,IAArB5G,EAAM4G,IAAItL,OACzBtF,KAAK0M,iBAAiBgD,KAAK1F,EAAM4G,IAAIC,sBAC3BjB,GAAWkB,EAAAA,GAAKlB,GAAWmB,EAAAA,GAAOnB,GAAWoB,EAAAA,IAAQpB,GAAWqB,EAAAA,KAC1EjR,KAAK0M,iBAAiBgD,KAAKwB,OAAOC,aAAavB,MASvD5P,KAAKmN,gBAAkB,GACvBnD,EAAMoH,iBAIJC,sBACF,OAAOrR,KAAKuM,iBAIV+E,iBACF,OAAOtR,KAAKwM,YAId+E,WACE,OAAOvR,KAAKmN,gBAAgB7H,OAAS,EAIvCkL,qBACExQ,KAAKwR,sBAAsB,EAAG,GAIhCd,oBACE1Q,KAAKwR,sBAAsBxR,KAAKsM,OAAOhH,OAAS,GAAI,GAItD4K,oBACElQ,KAAKuM,iBAAmB,EAAIvM,KAAKwQ,qBAAuBxQ,KAAKyR,sBAAsB,GAIrFrB,wBACEpQ,KAAKuM,iBAAmB,GAAKvM,KAAKyM,MAC9BzM,KAAK0Q,oBACL1Q,KAAKyR,uBAAuB,GAelChC,iBAAiBvC,GACf,MAAMwE,EAAY1R,KAAKgP,iBACjBE,EAAwB,iBAAThC,EAAoBA,EAAOwE,EAAU/D,QAAQT,GAC5DoE,EAAaI,EAAUxC,GAG7BlP,KAAKwM,YAA4B,MAAd8E,EAAqB,KAAOA,EAC/CtR,KAAKuM,iBAAmB2C,EAQlBuC,sBAAsBE,GAC5B3R,KAAKyM,MAAQzM,KAAK4R,qBAAqBD,GAAS3R,KAAK6R,wBAAwBF,GAQvEC,qBAAqBD,GAC3B,MAAM5C,EAAQ/O,KAAKgP,iBAEnB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAMzJ,OAAQ2J,IAAK,CACtC,MAAMC,GAASlP,KAAKuM,iBAAmBoF,EAAQ1C,EAAIF,EAAMzJ,QAAUyJ,EAAMzJ,OACnE4H,EAAO6B,EAAMG,GAEnB,IAAKlP,KAAKiN,iBAAiBC,GAEzB,YADAlN,KAAKsP,cAAcJ,IAWjB2C,wBAAwBF,GAC9B3R,KAAKwR,sBAAsBxR,KAAKuM,iBAAmBoF,EAAOA,GAQpDH,sBAAsBtC,EAAe4C,GAC3C,MAAM/C,EAAQ/O,KAAKgP,iBAEnB,GAAKD,EAAMG,GAAX,CAIA,KAAOlP,KAAKiN,iBAAiB8B,EAAMG,KAGjC,IAAKH,EAFLG,GAAS4C,GAGP,OAIJ9R,KAAKsP,cAAcJ,IAIbF,iBACN,OAAOhP,KAAKsM,kBAAkBgB,EAAAA,EAAYtN,KAAKsM,OAAOoB,UAAY1N,KAAKsM,yFCjYrE,MAAOyF,oCAAAA,sBAAAA,2BAFA,CAACC,EAAAA,YARVC,EAAAA,4ECkBE,MAAOC,EACX1S,YAA6B2S,GAAA,KAAAA,QAAAA,EAGrB,KAAAC,UAAuC,GACvC,KAAAC,UAAsEC,EA6B9EtQ,UACIuQ,EACAF,EAA8DC,GAEhE,IAAKC,KAAYA,aAAiBC,MAAyB,iBAAVD,EAC/C,OAAO,KAGJvS,KAAKyS,SAERzS,KAAKyS,OAASzS,KAAKmS,QAAQO,KAAKH,GAAOvH,UAGzC,MAAM2H,EAA4C3S,KAAKyS,OAAOG,KAAKL,GAC7DM,EAAmBR,IAAcrS,KAAKqS,UAY5C,OAVIM,IACF3S,KAAKoS,UAAY,GACjBO,EAAcG,aAAaC,IACzB/S,KAAKoS,UAAU9N,KAxFd,CAACsM,IAwFmCmC,EAAEnC,IAxF3B7Q,MAwFgCgT,EAAEC,oBAG9CL,GAAiBE,KACnB7S,KAAKoS,UAAUa,KAAKZ,GACpBrS,KAAKqS,UAAYA,GAEZrS,KAAKoS,WAIV,SAAUE,EACZY,EAA2BC,GAC7B,MAAMC,EAAIF,EAAUtC,IACdyC,EAAIF,EAAUvC,IAEpB,GAAIwC,IAAMC,EAAG,OAAO,EAEpB,QAAUtP,IAANqP,EAAiB,OAAO,EAC5B,QAAUrP,IAANsP,EAAiB,OAAQ,EAE7B,GAAU,OAAND,EAAY,OAAO,EACvB,GAAU,OAANC,EAAY,OAAQ,EACxB,GAAgB,iBAALD,GAA6B,iBAALC,EACjC,OAAOD,EAAIC,GAAK,EAAI,EAEtB,GAAgB,iBAALD,GAA6B,iBAALC,EACjC,OAAOD,EAAIC,EAEb,GAAgB,kBAALD,GAA8B,kBAALC,EAClC,OAAOD,EAAIC,GAAK,EAAI,EAGtB,MAAMC,EAAUpC,OAAOkC,GACjBG,EAAUrC,OAAOmC,GACvB,OAAOC,GAAWC,EAAU,EAAID,EAAUC,GAAW,EAAI,0CAxFlC5S,EAAAA,EAAAA,4NCLlB,MAAM6S,EAAkB,IAAInM,EAAAA,EAA8B,6TC5BjE,MAAMoM,GAA0BC,WAAAA,GAAc,SAcxC,MAAOC,UAA2BF,EACtCjU,YAAmBoU,GACjBC,QADiB,KAAAD,WAAAA,EAKnBE,QACE9T,KAAK4T,WAAW1T,cAAc4T,QAGhCC,gBACE,OAAO/T,KAAK4T,WAAW1T,cAAc8T,WAGvCC,iBACE,OAAOjU,KAAK4T,WAAW1T,cAAcgU,8CAf5BP,GAAAA,EAAAA,EAAkBhT,EAAAA,wBAAlBgT,6PCPN,MAAMQ,EAET,CAEFC,cAAcC,EAAAA,EAAAA,IAAQ,eAAgB,EAEpCC,EAAAA,EAAAA,IAAM,yDAAyDtI,EAAAA,EAAAA,IAAM,CAAChK,UAAW,WAMjFsS,EAAAA,EAAAA,IACE,QACAtI,EAAAA,EAAAA,IAAM,CACJhK,UAAW,2BACXuS,UAAW,MAIXC,WAAY,aAGhBF,EAAAA,EAAAA,IACE,SACAtI,EAAAA,EAAAA,IAAM,CACJhK,UAAW,0BACXuS,UAAW,MACXC,WAAY,aAIhBC,EAAAA,EAAAA,IACE,0DACAC,EAAAA,EAAAA,IAAQ,0DAEVD,EAAAA,EAAAA,IAAW,6BAA8B,EACvCzI,EAAAA,EAAAA,IAAM,CAAChK,UAAW,2BAA4BwS,WAAY,YAC1DE,EAAAA,EAAAA,IAAQ,2DAEVD,EAAAA,EAAAA,IAAW,8BAA+B,EACxCzI,EAAAA,EAAAA,IAAM,CAAChK,UAAW,0BAA2BwS,WAAY,YACzDE,EAAAA,EAAAA,IAAQ,wOCKR,MAAOC,WAAyBC,EAAAA,GAMpCpV,YACEqV,EACAC,EAC8CC,EAC5BnM,GAElBiL,MAAMgB,EAA0BC,EAAkBlM,GAHJ,KAAAmM,MAAAA,EAPxC,KAAAC,cAAgBnI,EAAAA,EAAAA,MAEhB,KAAAoI,YAAcpI,EAAAA,EAAAA,MAYbqI,WACPrB,MAAMqB,WAENlV,KAAKgV,cAAgBhV,KAAK+U,MAAMI,iBAC7B1G,MAAK2G,EAAAA,EAAAA,GAAUpV,KAAK+U,MAAMM,kBAAkBrV,KAAK+U,MAAMlM,aACvD0E,WAAW+H,IACNA,IAAgBtV,KAAKuV,eACvBvV,KAAKwV,OAAOxV,KAAK+U,MAAMU,aAI7BzV,KAAKiV,YAAcjV,KAAK+U,MAAMW,oBAAoBnI,WAAU,KACrDvN,KAAK+U,MAAMY,iBACd3V,KAAK4V,YAMF/L,cACPgK,MAAMhK,cACN7J,KAAKgV,cAAcxG,cACnBxO,KAAKiV,YAAYzG,iDAtCRmG,IAAAA,EAAAA,EAAgBhU,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GASjBtB,EAAAA,EAAAA,KAAW,IAAMwW,MAAP,IACVhK,EAAAA,wBAVC8I,yDA+CP,MAAgBmB,GAiDpBtW,YACUE,EACY8H,EACpBuO,GAFQ,KAAArW,YAAAA,EACY,KAAA8H,KAAAA,EA9Cd,KAAAwO,uBAAyBnJ,EAAAA,EAAAA,MAMxB,KAAAoJ,sBAAwB,IAAItJ,EAAAA,GAGlB,KAAAuJ,aAAqC,IAAIC,EAAAA,EAGzC,KAAAhB,iBAA0C,IAAIgB,EAAAA,EAG9C,KAAAT,oBAA0C,IAAIS,EAAAA,EAG9C,KAAAC,YAAkC,IAAID,EAAAA,GAAmB,GAcnE,KAAAE,kBAA4B,QAG5B,KAAAV,iBAA2B,EAc9BnO,IACFxH,KAAKgW,uBAAyBxO,EAAK6F,OAAOE,WAAW+I,IACnDtW,KAAKuW,+BAA+BD,GACpCP,EAAkBS,mBAMtBxW,KAAKiW,sBACFxH,MACCgI,EAAAA,EAAAA,IAAqB,CAACtK,EAAGC,IAChBD,EAAEuK,YAActK,EAAEsK,WAAavK,EAAEwK,UAAYvK,EAAEuK,WAGzDpJ,WAAUvD,IAELhK,KAAKqV,kBAAkBrL,EAAM2M,UAAY3W,KAAKqV,kBAAkBrV,KAAK6I,YACvE7I,KAAKoW,YAAYQ,OAGf5W,KAAKqV,kBAAkBrL,EAAM0M,aAAe1W,KAAKqV,kBAAkBrV,KAAK6I,YAC1E7I,KAAK0V,oBAAoBkB,UAhC7BhP,aAASA,GACX5H,KAAK6W,eAAiBjP,EACtB5H,KAAKuW,iCAuCPrB,WACwB,UAAlBlV,KAAK6I,WAAwC,MAAf7I,KAAK8W,SACrC9W,KAAK6I,UAAY7I,KAAK+W,2BAA2B/W,KAAK8W,SAI1DjN,cACE7J,KAAKgW,uBAAuBxH,cAC5BxO,KAAKiW,sBAAsBe,WAG7BC,uBAAuBjN,GACrB,MAAMsL,EAActV,KAAKqV,kBAAkBrL,EAAM2M,SACjD3W,KAAKmV,iBAAiByB,KAAKtB,GACvBA,GACFtV,KAAKkW,aAAaU,KAAK5W,KAAKN,YAAYQ,cAAcgX,cAK1DC,sBACE,OAAOnX,KAAKwH,MAA4B,QAApBxH,KAAKwH,KAAKzH,MAAkB,MAAQ,MAI1DsV,kBAAkBzN,GAChB,MACc,UAAZA,GAAoC,sBAAZA,GAAgD,uBAAZA,EAKxD2O,+BAA+BD,EAAiBtW,KAAKmX,uBACvDnX,KAAK6W,eAAiB,EACxB7W,KAAK6I,UAAmB,OAAPyN,EAAe,OAAS,QAChCtW,KAAK6W,eAAiB,EAC/B7W,KAAK6I,UAAmB,OAAPyN,EAAe,QAAU,OAE1CtW,KAAK6I,UAAY,SAQbkO,2BAA2BD,GACjC,MAAMR,EAAMtW,KAAKmX,sBAEjB,MAAY,OAAPb,GAAgBQ,GAAU,GAAc,OAAPR,GAAgBQ,EAAS,EACtD,qBAGF,yDA1IWhB,IAAAA,EAAAA,EAAenV,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,wBAAfmV,wSA8JhB,MAAOD,WAAmBC,GAG9BtW,YACEoU,EACY0C,EACZP,GAEAlC,MAAMD,EAAY0C,EAAKP,sCARdF,IAAAA,EAAAA,EAAUlV,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,wBAAVkV,qEACAjB,EAAAA,GAAeA,iPCjR5B,iBAKK,0CAAuB,+BAAvB,yCACsB,uCAEzB,2CAPG,sFDkEQD,oOAwMC,CAACR,EAAkBC,6CEtP1B,MAAMgD,GAA0B,IAAI/P,EAAAA,EACzC,sBACA,CACEgQ,WAAY,OACZC,QAQE,WAMJ,OALgBvM,IAAD,CACbmB,KAAMnB,GAAWA,EAAQiJ,YAAc,GAAK,KAAO,IACnDuD,MAAOxM,GAAWA,EAAQmJ,aAAe,GAAK,KAAO,SAiBnD,MAAOsD,GACXhY,YACUE,EACA+X,EACiCC,EACSC,GAH1C,KAAAjY,YAAAA,EACA,KAAA+X,QAAAA,EACiC,KAAAC,kBAAAA,EACS,KAAAC,eAAAA,EAQpDC,eAAe7M,GACb/K,KAAK6X,OACL7X,KAAKyX,QAAQK,SAASrJ,MAAKsJ,EAAAA,GAAAA,GAAK,IAAIxK,WAAU,KAC5C,MAAMyK,EAAYhY,KAAK0X,kBAAkB3M,GACnCkN,EAAsBjY,KAAKN,YAAYQ,cAC7C+X,EAAOjM,MAAME,KAAO8L,EAAU9L,KAC9B+L,EAAOjM,MAAMuL,MAAQS,EAAUT,SAKnCM,OACE7X,KAAKN,YAAYQ,cAAc8L,MAAMwI,WAAa,UAIpD0D,OACElY,KAAKN,YAAYQ,cAAc8L,MAAMwI,WAAa,4CA9BzCgD,IAAAA,EAAAA,EAAS7W,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAIVyW,IAAAA,EAAAA,EACYe,EAAAA,GAAqBA,wBALhCX,6LChCP,MAAOY,WAA2B/L,GAAAA,EAAxC7M,kCACU,KAAA6Y,QAAuB,UAM/BC,eAAexB,GAEb,OADA9W,KAAKqY,QAAUvB,EACR9W,KAgBAsP,cAAcpC,GACrB2G,MAAMvE,cAAcpC,GAEhBlN,KAAKsR,YACPtR,KAAKsR,WAAWwC,MAAM9T,KAAKqY,yKCFjC,MAAME,IAA8BC,EAAAA,GAAAA,GAAgC,CAClEC,SAAS,IAoCL,MAAgBC,GAoFpBlZ,YACYE,EACAiZ,EACFC,EACYpR,EACZiQ,EACAoB,EAC0ClB,GANxC,KAAAjY,YAAAA,EACA,KAAAiZ,mBAAAA,EACF,KAAAC,eAAAA,EACY,KAAApR,KAAAA,EACZ,KAAAiQ,QAAAA,EACA,KAAAoB,UAAAA,EAC0C,KAAAlB,eAAAA,EA/E5C,KAAAmB,gBAAkB,EAGlB,KAAAC,uBAAwB,EAGb,KAAAC,WAAa,IAAIrM,EAAAA,GAGpC,KAAAsM,yBAA0B,EAG1B,KAAAC,qBAAsB,EAGtB,KAAAC,sBAAuB,EAkBf,KAAAC,eAAiB,IAAIzM,EAAAA,GAarB,KAAA0M,oBAA8B,EAkB9B,KAAAC,eAAyB,EAGxB,KAAAC,mBAA2C,IAAIpD,EAAAA,EAG/C,KAAAqD,aAAqC,IAAIrD,EAAAA,EAYhDsB,EAAQgC,mBAAkB,MACxBC,EAAAA,GAAAA,GAAUha,EAAYQ,cAAe,cAClCuO,MAAKkL,EAAAA,GAAAA,GAAU3Z,KAAKgZ,aACpBzL,WAAU,KACTvN,KAAK4Z,sBA9CTC,wBACF,OAAO7Z,KAAKqZ,mBAEVQ,sBAAkB9Z,GACpBC,KAAKqZ,oBAAqBS,EAAAA,EAAAA,GAAsB/Z,GAK9Cga,oBACF,OAAO/Z,KAAKsZ,eAEVS,kBAAcha,GAChBA,GAAQia,EAAAA,EAAAA,GAAqBja,GAEzBC,KAAKsZ,gBAAkBvZ,IACzBC,KAAK+Y,uBAAwB,EAC7B/Y,KAAKsZ,eAAiBvZ,EAElBC,KAAKia,aACPja,KAAKia,YAAYxK,iBAAiB1P,IAkCxCma,mBAEER,EAAAA,GAAAA,GAAU1Z,KAAKma,mBAAmBja,cAAe,aAAcqY,IAC5D9J,MAAKkL,EAAAA,GAAAA,GAAU3Z,KAAKgZ,aACpBzL,WAAU,KACTvN,KAAKoa,sBAAsB,cAG/BV,EAAAA,GAAAA,GAAU1Z,KAAKqa,eAAena,cAAe,aAAcqY,IACxD9J,MAAKkL,EAAAA,GAAAA,GAAU3Z,KAAKgZ,aACpBzL,WAAU,KACTvN,KAAKoa,sBAAsB,YAIjCE,qBACE,MAAMC,EAAYva,KAAKwH,KAAOxH,KAAKwH,KAAK6F,QAASmN,EAAAA,GAAAA,IAAa,OACxDC,EAASza,KAAK4Y,eAAevL,OAAO,KACpCqN,EAAU,KACd1a,KAAK2a,mBACL3a,KAAK4a,6BAGP5a,KAAKia,YAAc,IAAI7B,GAA2CpY,KAAKsM,QACpE4B,0BAA0BlO,KAAKmX,uBAC/B5H,iBACAzB,WAEH9N,KAAKia,YAAYxK,iBAAiBzP,KAAKsZ,gBAMvCtZ,KAAKyX,QAAQK,SAASrJ,MAAKsJ,EAAAA,GAAAA,GAAK,IAAIxK,UAAUmN,IAI9CG,EAAAA,EAAAA,GAAMN,EAAWE,EAAQza,KAAKsM,OAAO9C,QAASxJ,KAAK8a,iBAChDrM,MAAKkL,EAAAA,GAAAA,GAAU3Z,KAAKgZ,aACpBzL,WAAU,KAITvN,KAAKyX,QAAQsD,KAAI,KACfC,QAAQC,UAAUrQ,MAAK,KAErB5K,KAAK8Y,gBAAkBoC,KAAKha,IAC1B,EACAga,KAAK9Z,IAAIpB,KAAKmb,wBAAyBnb,KAAK8Y,kBAE9C4B,UAGJ1a,KAAKia,YAAY/L,0BAA0BlO,KAAKmX,0BAMpDnX,KAAKia,YAAY5M,OAAOoB,MAAKkL,EAAAA,GAAAA,GAAU3Z,KAAKgZ,aAAazL,WAAU6N,IACjEpb,KAAKwZ,aAAa5C,KAAKwE,GACvBpb,KAAKqb,aAAaD,MAKdN,gBACN,MAA8B,mBAAnBQ,eACFC,GAAAA,EAGFvb,KAAKsM,OAAO9C,QAAQiF,MACzB2G,EAAAA,EAAAA,GAAUpV,KAAKsM,SACfkP,EAAAA,GAAAA,IACGC,GACC,IAAIC,GAAAA,GAAYC,GACd3b,KAAKyX,QAAQgC,mBAAkB,KAC7B,MAAMmC,EAAiB,IAAIN,gBAAe,KACxCK,EAASjM,UAKX,OAHA+L,EAASI,SAAQ3O,IACf0O,EAAeE,QAAQ5O,EAAK0G,WAAW1T,kBAElC,KACL0b,EAAeG,sBAOzBC,EAAAA,GAAAA,GAAK,IAITC,wBAEMjc,KAAKkc,gBAAkBlc,KAAKsM,OAAOhH,SACrCtF,KAAK2a,mBACL3a,KAAKkc,eAAiBlc,KAAKsM,OAAOhH,OAClCtF,KAAK2Y,mBAAmBnC,gBAKtBxW,KAAK+Y,wBACP/Y,KAAKmc,eAAenc,KAAKsZ,gBACzBtZ,KAAKoc,0BACLpc,KAAK4a,4BACL5a,KAAK+Y,uBAAwB,EAC7B/Y,KAAK2Y,mBAAmBnC,gBAKtBxW,KAAKqc,yBACPrc,KAAKsc,2BACLtc,KAAKqc,wBAAyB,EAC9Brc,KAAK2Y,mBAAmBnC,gBAI5B3M,cACE7J,KAAKgZ,WAAWtJ,OAChB1P,KAAKgZ,WAAWhC,WAChBhX,KAAKoZ,eAAepC,WAItBuF,eAAevS,GAEb,KAAI2G,EAAAA,GAAAA,GAAe3G,GAInB,OAAQA,EAAM4F,SACZ,KAAK4M,GAAAA,GACL,KAAKC,GAAAA,GACCzc,KAAK0c,aAAe1c,KAAK+Z,gBAC3B/Z,KAAKuZ,mBAAmB3C,KAAK5W,KAAK0c,YAClC1c,KAAK2c,cAAc3S,IAErB,MACF,QACEhK,KAAKia,YAAYtK,UAAU3F,IAOjC4S,oBACE,MAAMC,EAAc7c,KAAKN,YAAYQ,cAAc2c,YAK/CA,IAAgB7c,KAAK8c,sBACvB9c,KAAK8c,oBAAsBD,GAAe,GAI1C7c,KAAKyX,QAAQsD,KAAI,KACf/a,KAAK2a,mBACL3a,KAAK4a,4BACL5a,KAAK2Y,mBAAmBnC,mBAY9BmE,mBACE3a,KAAK+c,0BACL/c,KAAKoc,0BACLpc,KAAKsc,2BAIHI,iBACF,OAAO1c,KAAKia,YAAcja,KAAKia,YAAY5I,gBAAmB,EAI5DqL,eAAW3c,GACRC,KAAKgd,cAAcjd,IAAUC,KAAK0c,aAAe3c,GAAUC,KAAKia,aAIrEja,KAAKia,YAAY3K,cAAcvP,GAOjCid,cAAc9N,GACZ,IAAKlP,KAAKsM,OACR,OAAO,EAGT,MAAM2Q,EAAMjd,KAAKsM,OAAStM,KAAKsM,OAAOoB,UAAUwB,GAAS,KACzD,QAAS+N,IAAQA,EAAIxb,SAOvB4Z,aAAa6B,GAKX,GAJIld,KAAKiZ,yBACPjZ,KAAKmc,eAAee,GAGlBld,KAAKsM,QAAUtM,KAAKsM,OAAOhH,OAAQ,CACrCtF,KAAKsM,OAAOoB,UAAUwP,GAAUpJ,QAKhC,MAAMqJ,EAAcnd,KAAKod,kBAAkBld,cACrCoW,EAAMtW,KAAKmX,sBAGfgG,EAAYE,WADH,OAAP/G,EACuB,EAEA6G,EAAYG,YAAcH,EAAYjJ,aAMrEiD,sBACE,OAAOnX,KAAKwH,MAA4B,QAApBxH,KAAKwH,KAAKzH,MAAkB,MAAQ,MAI1Duc,2BACE,GAAItc,KAAK6Z,kBACP,OAGF,MAAM0D,EAAiBvd,KAAKud,eACtBC,EAA4C,QAA/Bxd,KAAKmX,uBAAmCoG,EAAiBA,EAQ5Evd,KAAKyd,SAASvd,cAAc8L,MAAMhK,UAAY,cAAckZ,KAAKwC,MAAMF,SAMnExd,KAAK6Y,UAAU8E,SAAW3d,KAAK6Y,UAAU+E,QAC3C5d,KAAKod,kBAAkBld,cAAcmd,WAAa,GAKlDE,qBACF,OAAOvd,KAAK8Y,gBAEVyE,mBAAexd,GACjBC,KAAK6d,UAAU9d,GAWjB+d,cAAc3P,GACZ,MAGM4P,GAA8B,UAAb5P,GAAyB,EAAI,GAHjCnO,KAAKod,kBAAkBld,cAAcgU,YAGe,EAEvE,OAAOlU,KAAK6d,UAAU7d,KAAK8Y,gBAAkBiF,GAI/CC,sBAAsB7P,GACpBnO,KAAK4Z,gBACL5Z,KAAK8d,cAAc3P,GASrBgO,eAAe8B,GACb,GAAIje,KAAK6Z,kBACP,OAGF,MAAMqE,EAAgBle,KAAKsM,OAAStM,KAAKsM,OAAOoB,UAAUuQ,GAAc,KAExE,IAAKC,EACH,OAIF,MAAMC,EAAane,KAAKod,kBAAkBld,cAAcgU,aAClD,WAACF,EAAD,YAAaE,GAAegK,EAActK,WAAW1T,cAE3D,IAAIke,EAAwBC,EACM,OAA9Bre,KAAKmX,uBACPiH,EAAiBpK,EACjBqK,EAAgBD,EAAiBlK,IAEjCmK,EAAgBre,KAAKse,cAAcpe,cAAcgU,YAAcF,EAC/DoK,EAAiBC,EAAgBnK,GAGnC,MAAMqK,EAAmBve,KAAKud,eACxBiB,EAAkBxe,KAAKud,eAAiBY,EAE1CC,EAAiBG,EAEnBve,KAAKud,gBAAkBgB,EAAmBH,EA9cjB,GA+chBC,EAAgBG,IAEzBxe,KAAKud,gBAAkBc,EAAgBG,EAjdd,IA6d7BzB,0BACE,GAAI/c,KAAK6Z,kBACP7Z,KAAKiZ,yBAA0B,MAC1B,CACL,MAAMwF,EACJze,KAAKse,cAAcpe,cAAcod,YAActd,KAAKN,YAAYQ,cAAcgU,YAE3EuK,IACHze,KAAKud,eAAiB,GAGpBkB,IAAcze,KAAKiZ,yBACrBjZ,KAAK2Y,mBAAmBnC,eAG1BxW,KAAKiZ,wBAA0BwF,GAanCrC,0BACMpc,KAAK6Z,kBACP7Z,KAAKkZ,oBAAsBlZ,KAAKmZ,sBAAuB,GAGvDnZ,KAAKmZ,qBAA8C,GAAvBnZ,KAAKud,eACjCvd,KAAKkZ,oBAAsBlZ,KAAKud,gBAAkBvd,KAAKmb,wBACvDnb,KAAK2Y,mBAAmBnC,gBAW5B2E,wBAGE,OAFwBnb,KAAKse,cAAcpe,cAAcod,YACtCtd,KAAKod,kBAAkBld,cAAcgU,aACjB,EAIzC0G,4BACE,MAAM8D,EACJ1e,KAAKsM,QAAUtM,KAAKsM,OAAOhH,OAAStF,KAAKsM,OAAOoB,UAAU1N,KAAK+Z,eAAiB,KAC5E4E,EAAuBD,EAAeA,EAAa9K,WAAW1T,cAAgB,KAEhFye,EACF3e,KAAK4e,QAAQhH,eAAe+G,GAE5B3e,KAAK4e,QAAQ1G,OAKjB0B,gBACE5Z,KAAKoZ,eAAe1J,OAQtB0K,sBAAsBjM,EAA4B1D,GAG5CA,GAAmC,MAArBA,EAAWoU,QAAwC,IAAtBpU,EAAWoU,SAK1D7e,KAAK4Z,iBAGLkF,EAAAA,GAAAA,GA7iBwB,IAMG,KAyiBxBrQ,MAAKkL,EAAAA,GAAAA,IAAUkB,EAAAA,EAAAA,GAAM7a,KAAKoZ,eAAgBpZ,KAAKgZ,cAC/CzL,WAAU,KACT,MAAM,kBAACwR,EAAD,SAAoBC,GAAYhf,KAAK8d,cAAc3P,IAGxC,IAAb6Q,GAAkBA,GAAYD,IAChC/e,KAAK4Z,oBAULiE,UAAUjW,GAChB,GAAI5H,KAAK6Z,kBACP,MAAO,CAACkF,kBAAmB,EAAGC,SAAU,GAG1C,MAAMD,EAAoB/e,KAAKmb,wBAQ/B,OAPAnb,KAAK8Y,gBAAkBoC,KAAKha,IAAI,EAAGga,KAAK9Z,IAAI2d,EAAmBnX,IAI/D5H,KAAKqc,wBAAyB,EAC9Brc,KAAKoc,0BAEE,CAAC2C,kBAAAA,EAAmBC,SAAUhf,KAAK8Y,oDA5jBxBJ,IAAAA,EAAAA,EAAqB/X,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EA2FnBwX,EAAAA,GAAqBA,wBA3FvBO,+LC5ChB,MAAgBuG,WACZvG,GAaRlZ,YACEoU,EACAmC,EACAmJ,EACY5I,EACZ6I,EACAC,EAC2CC,GAE3CxL,MAAMD,EAAYmC,EAAmBmJ,EAAe5I,EAAK6I,EAAQC,EAAUC,GAXrE,KAAAC,gBAA0B,EAN9BC,oBACF,OAAOvf,KAAKsf,eAEVC,kBAAcxf,GAChBC,KAAKsf,gBAAiBxF,EAAAA,EAAAA,GAAsB/Z,GAgBpC4c,cAAc3S,GACtBA,EAAMoH,oDA3BY6N,IAAAA,EAAAA,EAAiBte,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAqBfwX,EAAAA,GAAqBA,wBArBvB8G,2DAqDhB,MAAOO,WAAqBP,GAShCzf,YACEoU,EACAmC,EACAmJ,EACY5I,EACZ6I,EACAC,EAC2CC,GAE3CxL,MAAMD,EAAYmC,EAAmBmJ,EAAe5I,EAAK6I,EAAQC,EAAUC,sCAlBlEG,IAAAA,EAAAA,EAAY7e,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAgBDwX,EAAAA,GAAqBA,wBAhBhCqH,gFACM7L,EAAoB,mFAC1B6D,GAAW,g7CChGxB,oBASK,2BAAS,wBAAsB,aAA/B,gCACa,wBAAsB,SAAtB,MADb,8BAEY,0BACf,uBAGF,iBAAuD,8BAAW,4BAChE,iBAKE,uCAAqB,8BACrB,mBACE,eAEF,gCAIJ,sBASK,gCAAa,wBAAsB,QAAtB,MAAb,2BACS,wBAAsB,YAD/B,8BAEY,0BACf,+BAlCG,iEADA,0GAaD,2EAgBC,wEADA,oHCSLiI,EAAAA,EAAAA,GAAAA,GAAAA,y1FCfQ,4DAAa,iEAIY,+FA1B/B,eAeK,yFAAS,0BAAT,wEACkB,iCAGrB,eAEE,8BAKA,wGAfC,gDARA,8HACA,4QAiBY,0FAcjB,yBAYa,4DAAe,oCAAf,8DACgB,4FARhB,+CAHA,oMACA,wHCIf,IAAIC,GAAS,EAGP,MAAOC,IAYb,MAAMC,IAAwBC,EAAAA,EAAAA,IAC5BC,EAAAA,EAAAA,GACE,MACEtgB,YAAmBE,GAAA,KAAAA,YAAAA,KAGvB,WAcI,MAAgBqgB,WACZH,GA0IRpgB,YACEoU,EACU+E,EAC2BqH,EACarI,GAElD9D,MAAMD,GAJI,KAAA+E,mBAAAA,EAEwC,KAAAhB,eAAAA,EAlIpD,KAAAsI,MAA2B,IAAI3S,EAAAA,EAGvB,KAAA4S,eAAgC,EAGhC,KAAAC,qBAAsC,KAGtC,KAAAC,sBAAgC,EAGhC,KAAAC,kBAAoBxT,EAAAA,EAAAA,MAGpB,KAAAyT,sBAAwBzT,EAAAA,EAAAA,MAUxB,KAAA0T,gBAA0B,EAU1B,KAAAjH,eAAgC,KAG/B,KAAAkH,eAAuC,QAsCxC,KAAAnH,oBAA8B,EAc9B,KAAAoH,kBAA4B,EAqBjB,KAAAC,oBAA4C,IAAIvK,EAAAA,EAGhD,KAAAwK,YACjB,IAAIxK,EAAAA,EAGa,KAAAyK,cAAoC,IAAIzK,EAAAA,EAGxC,KAAA0K,kBACjB,IAAI1K,EAAAA,GAAgC,GAWpCnW,KAAK8gB,SAAWpB,KAChB1f,KAAKqW,kBACH2J,GAAiBA,EAAc3J,kBAAoB2J,EAAc3J,kBAAoB,QACvFrW,KAAK6Z,qBACHmG,GAAoD,MAAnCA,EAAcnG,oBAC3BmG,EAAcnG,kBAEpB7Z,KAAK+gB,iBACHf,GAAgD,MAA/BA,EAAce,gBAAwBf,EAAce,cACvE/gB,KAAKghB,gBAAkBhB,GAAegB,iBAAmB,KACzDhhB,KAAK2V,kBAAoBqK,GAAerK,gBA5HtCoL,oBACF,OAAO/gB,KAAKugB,eAEVQ,kBAAchhB,GAChBC,KAAKugB,gBAAiBzG,EAAAA,EAAAA,GAAsB/Z,GAM1Cga,oBACF,OAAO/Z,KAAKsZ,eAEVS,kBAAcha,GAChBC,KAAKkgB,gBAAiBlG,EAAAA,EAAAA,GAAqBja,EAAO,MAShDsW,wBACF,OAAOrW,KAAKihB,mBAEV5K,sBAAkBtW,GACpBC,KAAKihB,mBAAqB,QAAQ1gB,KAAKR,EAAQ,IAAMA,EAAQ,KAAQA,EAWnEihB,sBACF,OAAOhhB,KAAKkhB,iBAEVF,oBAAgBjhB,GAClBC,KAAKkhB,kBAAmBlH,EAAAA,EAAAA,GAAqBja,EAAO,MASlD8Z,wBACF,OAAO7Z,KAAKqZ,mBAEVQ,sBAAkB9Z,GACpBC,KAAKqZ,oBAAqBS,EAAAA,EAAAA,GAAsB/Z,GAU9C4V,sBACF,OAAO3V,KAAKygB,iBAEV9K,oBAAgB5V,GAClBC,KAAKygB,kBAAmB3G,EAAAA,EAAAA,GAAsB/Z,GAM5CohB,sBACF,OAAOnhB,KAAKohB,iBAEVD,oBAAgBphB,GAClB,MAAMG,EAA6BF,KAAKN,YAAYQ,cAEpDA,EAAc4G,UAAUua,OAAO,kBAAkBrhB,KAAKmhB,mBAElDphB,GACFG,EAAc4G,UAAUC,IAAI,kBAAkBhH,KAGhDC,KAAKohB,iBAAmBrhB,EA8C1Bkc,wBAGE,MAAMqF,EAAiBthB,KAAKkgB,eAAiBlgB,KAAKuhB,eAAevhB,KAAKkgB,gBAItE,GAAIlgB,KAAKsZ,gBAAkBgI,EAAe,CACxC,MAAME,EAAoC,MAAvBxhB,KAAKsZ,eAExB,IAAKkI,EAAY,CACfxhB,KAAK6gB,kBAAkBjK,KAAK5W,KAAKyhB,mBAAmBH,IAGpD,MAAMI,EAAU1hB,KAAK2hB,gBAAgBzhB,cACrCwhB,EAAQ1V,MAAMuI,UAAYmN,EAAQxK,aAAe,KAKnD8D,QAAQC,UAAUrQ,MAAK,KACrB5K,KAAKigB,MAAMpE,SAAQ,CAACoB,EAAK/N,IAAW+N,EAAI2E,SAAW1S,IAAUoS,IAExDE,IACHxhB,KAAK0gB,oBAAoB9J,KAAK0K,GAG9BthB,KAAK2hB,gBAAgBzhB,cAAc8L,MAAMuI,UAAY,OAM3DvU,KAAKigB,MAAMpE,SAAQ,CAACoB,EAAa/N,KAC/B+N,EAAIrV,SAAWsH,EAAQoS,EAII,MAAvBthB,KAAKsZ,gBAA0C,GAAhB2D,EAAIrV,UAAkBqV,EAAInG,SAC3DmG,EAAInG,OAASwK,EAAgBthB,KAAKsZ,mBAIlCtZ,KAAKsZ,iBAAmBgI,IAC1BthB,KAAKsZ,eAAiBgI,EACtBthB,KAAKmgB,qBAAuB,KAC5BngB,KAAK2Y,mBAAmBnC,gBAI5B8D,qBACEta,KAAK6hB,4BACL7hB,KAAK8hB,wBAIL9hB,KAAKqgB,kBAAoBrgB,KAAKigB,MAAMzW,QAAQ+D,WAAU,KACpD,MAAM+T,EAAgBthB,KAAKuhB,eAAevhB,KAAKkgB,gBAI/C,GAAIoB,IAAkBthB,KAAKsZ,eAAgB,CACzC,MAAMyI,EAAO/hB,KAAKigB,MAAMvS,UACxB,IAAIsU,EAEJ,IAAK,IAAI/S,EAAI,EAAGA,EAAI8S,EAAKzc,OAAQ2J,IAC/B,GAAI8S,EAAK9S,GAAG2S,SAAU,CAIpB5hB,KAAKkgB,eAAiBlgB,KAAKsZ,eAAiBrK,EAC5CjP,KAAKmgB,qBAAuB,KAC5B6B,EAAcD,EAAK9S,GACnB,OAOC+S,GAAeD,EAAKT,IACvBtG,QAAQC,UAAUrQ,MAAK,KACrBmX,EAAKT,GAAeM,UAAW,EAC/B5hB,KAAK6gB,kBAAkBjK,KAAK5W,KAAKyhB,mBAAmBH,OAK1DthB,KAAK2Y,mBAAmBnC,kBAKpBqL,4BAIN7hB,KAAKiiB,SAASzY,QAAQiF,MAAK2G,EAAAA,EAAAA,GAAUpV,KAAKiiB,WAAW1U,WAAWwU,IAC9D/hB,KAAKigB,MAAMiC,MACTH,EAAKre,QAAOuZ,GACHA,EAAIkF,mBAAqBniB,OAASid,EAAIkF,oBAGjDniB,KAAKigB,MAAMmC,qBAIfvY,cACE7J,KAAKigB,MAAM/U,UACXlL,KAAKqgB,kBAAkB7R,cACvBxO,KAAKsgB,sBAAsB9R,cAI7B6T,gBACMriB,KAAKsiB,YACPtiB,KAAKsiB,WAAW1H,4BAWpBD,mBACM3a,KAAKsiB,YACPtiB,KAAKsiB,WAAW3H,mBAQpB4H,SAASrT,GACP,MAAMsT,EAASxiB,KAAKsiB,WAEhBE,IACFA,EAAO9F,WAAaxN,GAIxBuT,cAAcvT,GACZlP,KAAKmgB,qBAAuBjR,EAC5BlP,KAAK2gB,YAAY/J,KAAK5W,KAAKyhB,mBAAmBvS,IAGxCuS,mBAAmBvS,GACzB,MAAMlF,EAAQ,IAAI2V,GAKlB,OAJA3V,EAAMkF,MAAQA,EACVlP,KAAKigB,OAASjgB,KAAKigB,MAAM3a,SAC3B0E,EAAMiT,IAAMjd,KAAKigB,MAAMvS,UAAUwB,IAE5BlF,EASD8X,wBACF9hB,KAAKsgB,uBACPtgB,KAAKsgB,sBAAsB9R,cAG7BxO,KAAKsgB,uBAAwBzF,EAAAA,EAAAA,MAAS7a,KAAKigB,MAAMzc,KAAIyZ,GAAOA,EAAIyF,iBAAgBnV,WAAU,IACxFvN,KAAK2Y,mBAAmBnC,iBAKpB+K,eAAerS,GAIrB,OAAOgM,KAAK9Z,IAAIpB,KAAKigB,MAAM3a,OAAS,EAAG4V,KAAKha,IAAIgO,GAAS,EAAG,IAI9DyT,eAAe1T,GACb,MAAO,iBAAiBjP,KAAK8gB,YAAY7R,IAI3C2T,iBAAiB3T,GACf,MAAO,mBAAmBjP,KAAK8gB,YAAY7R,IAO7C4T,yBAAyBC,GACvB,IAAK9iB,KAAKugB,iBAAmBvgB,KAAKogB,sBAChC,OAGF,MAAMsB,EAAuB1hB,KAAK2hB,gBAAgBzhB,cAElDwhB,EAAQ1V,MAAM+W,OAAS/iB,KAAKogB,sBAAwB,KAIhDpgB,KAAK2hB,gBAAgBzhB,cAAc8iB,eACrCtB,EAAQ1V,MAAM+W,OAASD,EAAY,MAKvCG,8BACE,MAAMvB,EAAU1hB,KAAK2hB,gBAAgBzhB,cACrCF,KAAKogB,sBAAwBsB,EAAQxK,aACrCwK,EAAQ1V,MAAM+W,OAAS,GACvB/iB,KAAK4gB,cAAchK,OAIrBsM,aAAajG,EAAakG,EAAkCjU,GACrD+N,EAAIxb,WACPzB,KAAK+Z,cAAgBoJ,EAAUzG,WAAaxN,GAKhDkU,aAAanG,EAAa/N,GACxB,OAAI+N,EAAIxb,SACC,KAGFyN,KADalP,KAAKmgB,sBAAwBngB,KAAK+Z,eACvB,GAAK,EAItCsJ,iBAAiBC,EAA0BpU,GAKrCoU,GAA+B,UAAhBA,GAA2C,UAAhBA,IAC5CtjB,KAAKsiB,WAAW5F,WAAaxN,sCAzZb6Q,IAAAA,EAAAA,EAAgBpf,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EA8I1B6S,EAAeA,GAAAA,EAAAA,EACH2E,EAAAA,GAAqBA,wBA/IvB4H,6bAwbhB,MAAOwD,WAAoBxD,GAK/BvgB,YACEoU,EACAmC,EACqCiK,EACMX,GAE3CxL,MAAMD,EAAYmC,EAAmBiK,EAAeX,sCAX3CkE,IAAAA,EAAAA,EAAW5iB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAQZ6S,EAAeA,GAAAA,EAAAA,EACH2E,EAAAA,GAAqBA,wBAThCoL,+EACMC,EAAAA,EAAQ,8dAbd,CACT,CACEtkB,QAASukB,EAAAA,EACTrkB,YAAamkB,MAHN,siCD/fb,4BAIe,mCAAgB,sBAAhB,kEAEb,+BA+BF,iBAIE,8CAxCa,kHAOQ,8BA+BrB,2EAG6B,0CEe/Bpc,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,wsDC1CO,MAAMuc,EAAkB,IAAIrc,EAAAA,EAA8B,iBAO3D,MAAOsc,EACXnkB,YAA+C+H,GAAA,KAAAA,SAAAA,oCADpCoc,GAAAA,EAAAA,EAAahjB,EAAAA,wBAAbgjB,oDAFA,CAAC,CAACzkB,QAASwkB,EAAiBtkB,YAAaukB,6CCG/C,MAAMC,EAAgB,IAAIvc,EAAAA,EAA4B,eAMhDwc,EAAU,IAAIxc,EAAAA,EAAoB,WAOzC,MAAOyc,UAAoBC,EAAAA,GAC/BvkB,YACEwkB,EACAlP,EACoCmP,GAEpCpQ,MAAMmQ,EAAalP,GAFiB,KAAAmP,YAAAA,oCAJ3BH,GAAAA,EAAAA,EAAWnjB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAIZkjB,EAAAA,uBAJCC,0EAFA,CAAC,CAAC5kB,QAAS0kB,EAAexkB,YAAa0kB,KAAvC,iFC/BA,SC8BPI,GAAcxQ,EAAAA,EAAAA,GAAc,SAMrB+P,EAAgB,IAAIpc,EAAAA,EAAoB,iBAY/C,MAAOmc,UAAeU,EAwE1B1kB,YACUkJ,EACkCyZ,GAE1CtO,QAHQ,KAAAnL,kBAAAA,EACkC,KAAAyZ,iBAAAA,EArD5B,KAAAgC,UAAoB,GAwB5B,KAAAC,eAAwC,KAQvC,KAAA1B,cAAgB,IAAI/V,EAAAA,GAM7B,KAAA/E,SAA0B,KAM1B,KAAAkP,OAAwB,KAKxB,KAAA8K,UAAW,EAnEPyC,oBACF,OAAOrkB,KAAKskB,eAEVD,kBAActkB,GAChBC,KAAKukB,uBAAuBxkB,GAyC1BykB,cACF,OAAOxkB,KAAKokB,eA8Bd7a,YAAYC,IACNA,EAAQib,eAAe,cAAgBjb,EAAQib,eAAe,cAChEzkB,KAAK0iB,cAAchT,OAIvB7F,cACE7J,KAAK0iB,cAAc1L,WAGrB9B,WACElV,KAAKokB,eAAiB,IAAIM,EAAAA,GACxB1kB,KAAK2kB,kBAAoB3kB,KAAK4kB,iBAC9B5kB,KAAK0I,mBAUC6b,uBAAuBxkB,GAK3BA,GAASA,EAAMkkB,cAAgBjkB,OACjCA,KAAKskB,eAAiBvkB,qCA5GfyjB,GAAAA,EAAAA,EAAM7iB,EAAAA,IAAAA,EAAAA,EA0EP8iB,EAAAA,uBA1ECD,yEAEGI,EAAaA,UAYbF,EAAiB,EAAOmB,EAAAA,8IAI3BA,EAAAA,GAAa,mSApBb,CAAC,CAAC3lB,QAAS2kB,EAASzkB,YAAaokB,KAAjC,yFD9Cb,yKEwDM,MAAOsB,oCAAAA,sBAAAA,0BAjCTC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EAIAJ,EAAAA,uDC7BE,SAAUK,EAASC,EAAiBC,EAA4BC,GAElE,MAAMC,EAAsBD,EAAWzlB,OAASylB,EAAWE,QAE3D,KAAIC,EAAAA,EAAAA,IAAWF,GAEX,MAAM,IAAIG,MAAM,2CAA2CL,EAAYM,oCAG3E,MAAO,CACHlgB,cAAc,EACd+f,MAEI,MAAMI,EAAcL,EAAcM,KAAK/lB,MAUvC,OARAqD,OAAOoC,eAAezF,KACAulB,EACA,CACIxlB,MAAO+lB,EACPngB,cAAc,EACdC,UAAU,IAG7BkgB","sources":["webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-config.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label-wrapper.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-animations.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-body.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-body.html","webpack://ng-universal-demo/../../../../src/material/tabs/ink-bar.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/paginated-tab-header.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-content.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label.ts","webpack://ng-universal-demo/../../src/material/tabs/tab.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts"],"sourcesContent":["import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()'\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * Sets value to select\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * Registers callback that is called when value of select changes\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * Registers callback that is called when select is closed\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}",null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'keyvalue', pure: false})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperBase = mixinDisabled(class {});\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state(\n      'left',\n      style({\n        transform: 'translate3d(-100%, 0, 0)',\n        minHeight: '1px',\n\n        // Normally this is redundant since we detach the content from the DOM, but if the user\n        // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.\n        visibility: 'hidden',\n      }),\n    ),\n    state(\n      'right',\n      style({\n        transform: 'translate3d(100%, 0, 0)',\n        minHeight: '1px',\n        visibility: 'hidden',\n      }),\n    ),\n\n    transition(\n      '* => left, * => right, left => center, right => center',\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'left-origin-center'\n  | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]',\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  readonly _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: CdkPortalOutlet;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number | null;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n          this._onCentered.emit();\n        }\n\n        if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n          this._afterLeavingCenter.emit();\n        }\n      });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState | string): boolean {\n    return (\n      position == 'center' || position == 'left-origin-center' || position == 'right-origin-center'\n    );\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(origin: number): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(CdkPortalOutlet) _portalHost: CdkPortalOutlet;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {take} from 'rxjs/operators';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      const positions = this._inkBarPositioner(element);\n      const inkBar: HTMLElement = this._elementRef.nativeElement;\n      inkBar.style.left = positions.left;\n      inkBar.style.width = positions.width;\n    });\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n  Directive,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  merge,\n  of as observableOf,\n  Subject,\n  EMPTY,\n  Observer,\n  Observable,\n  timer,\n  fromEvent,\n} from 'rxjs';\nimport {take, switchMap, startWith, skip, takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() private _dir: Directionality,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap();\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n    // can hold up tests that are in a background tab.\n    this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<void> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<void>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(() => {\n                observer.next();\n              });\n              tabItems.forEach(item => {\n                resizeObserver.observe(item.elementRef.nativeElement);\n              });\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n          this._itemSelected(event);\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) {\n      return true;\n    }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled =\n        this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n  Directive,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabHeaderBase\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n",null,"<button class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\"\n     #previousPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     tabindex=\"-1\"\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     [disabled]=\"_disableScrollBefore || null\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n\n<div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\">\n  <div\n    #tabList\n    class=\"mat-tab-list\"\n    [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n    role=\"tablist\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n    <mat-ink-bar></mat-ink-bar>\n  </div>\n</div>\n\n<button class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\"\n     #nextPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     [disabled]=\"_disableScrollAfter || null\"\n     tabindex=\"-1\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n  'primary',\n);\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabGroupBase\n  extends _MatTabGroupMixinBase\n  implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple\n{\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  abstract _allTabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean {\n    return this._dynamicHeight;\n  }\n  set dynamicHeight(value: BooleanInput) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n  set animationDuration(value: NumberInput) {\n    this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : (value as string);\n  }\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input()\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n  set contentTabIndex(value: NumberInput) {\n    this._contentTabIndex = coerceNumberProperty(value, null);\n  }\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input()\n  get preserveContent(): boolean {\n    return this._preserveContent;\n  }\n  set preserveContent(value: BooleanInput) {\n    this._preserveContent = coerceBooleanProperty(value);\n  }\n  private _preserveContent: boolean = false;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(\n    elementRef: ElementRef,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    this.contentTabIndex = defaultConfig?.contentTabIndex ?? null;\n    this.preserveContent = !!defaultConfig?.preserveContent;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, index: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  inputs: ['color', 'disableRipple'],\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","<mat-tab-header #tabHeader\n               [selectedIndex]=\"selectedIndex || 0\"\n               [disableRipple]=\"disableRipple\"\n               [disablePagination]=\"disablePagination\"\n               (indexFocused)=\"_focusChanged($event)\"\n               (selectFocusedIndex)=\"selectedIndex = $event\">\n  <div class=\"mat-tab-label mat-focus-indicator\" role=\"tab\" matTabLabelWrapper mat-ripple\n       cdkMonitorElementFocus\n       *ngFor=\"let tab of _tabs; let i = index\"\n       [id]=\"_getTabLabelId(i)\"\n       [attr.tabIndex]=\"_getTabIndex(tab, i)\"\n       [attr.aria-posinset]=\"i + 1\"\n       [attr.aria-setsize]=\"_tabs.length\"\n       [attr.aria-controls]=\"_getTabContentId(i)\"\n       [attr.aria-selected]=\"selectedIndex === i\"\n       [attr.aria-label]=\"tab.ariaLabel || null\"\n       [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n       [class.mat-tab-label-active]=\"selectedIndex === i\"\n       [ngClass]=\"tab.labelClass\"\n       [disabled]=\"tab.disabled\"\n       [matRippleDisabled]=\"tab.disabled || disableRipple\"\n       (click)=\"_handleClick(tab, tabHeader, i)\"\n       (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n\n\n    <div class=\"mat-tab-label-content\">\n      <!-- If there is a label template, use it. -->\n      <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n        <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n      </ng-template>\n\n      <!-- If there is not a label template, fall back to the text label. -->\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\n    </div>\n  </div>\n</mat-tab-header>\n\n<div\n  class=\"mat-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  <mat-tab-body role=\"tabpanel\"\n               *ngFor=\"let tab of _tabs; let i = index\"\n               [id]=\"_getTabContentId(i)\"\n               [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\"\n               [attr.aria-labelledby]=\"_getTabLabelId(i)\"\n               [class.mat-tab-body-active]=\"selectedIndex === i\"\n               [ngClass]=\"tab.bodyClass\"\n               [content]=\"tab.content!\"\n               [position]=\"tab.position!\"\n               [origin]=\"tab.origin\"\n               [animationDuration]=\"animationDuration\"\n               [preserveContent]=\"preserveContent\"\n               (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n               (_onCentering)=\"_setTabBodyWrapperHeight($event)\">\n  </mat-tab-body>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  constructor(/** Content for the tab. */ public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB) @Optional() public _closestTab: any,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MAT_TAB_CONTENT} from './tab-content';\nimport {MAT_TAB_LABEL, MatTabLabel, MAT_TAB} from './tab-label';\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabBase = mixinDisabled(class {});\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n@Component({\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n})\nexport class MatTab extends _MatTabBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MAT_TAB_LABEL)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n  protected _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MAT_TAB_CONTENT, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /**\n   * Classes to be passed to the tab label inside the mat-tab-header container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() labelClass: string | string[];\n\n  /**\n   * Classes to be passed to the tab mat-tab-body container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB_GROUP) @Optional() public _closestTabGroup: any,\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}"],"names":["NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","constructor","_renderer","_elementRef","onChange","_","onTouched","writeValue","value","this","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","i0","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","control","isNaN","max","isPresent","min","number","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","AsFormControlPipe","_logger","transform","_valueHash","warn","LOGGER","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","Object","keys","formGroup","map","validator","filter","itm","propertyName","metadata","defaultValue","undefined","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector","ComponentRedirectRoute","redirectFrom","redirectTo","pathMatchFull","target","routeDecoratedComponent","routeValues","console","length","redirectRouteDecoratedComponent","redirectRouteValues","defineProperty","enumerable","configurable","writable","path","pathMatch","ComponentRoute","route","rt","component","TooltipComponent","_changeDetector","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","invalidateVisuals","cssClass","classList","add","detectChanges","mouseEnter","mouseLeave","i1","TOOLTIP_OPTIONS","InjectionToken","TooltipTemplateDirective","template","_dir","_ctx","defaultOptions","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_viewContainerRef","_animationsPlayer","_document","_position","options","_showRequest","_keepOpen","_timeout","_options","extend","_enterAnimation","_exitAnimation","tooltipOptions","ngOnChanges","changes","nameof","tooltipVisible","_showTooltip","_hideTooltip","ngOnDestroy","clearTimeout","_destroyTooltip","event","setTimeout","mouseMove","_tooltipComponent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","element","create","onDone","destroy","play","createComponent","hostView","rootNodes","body","appendChild","instance","data","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","assign","style","top","left","x","y","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","_pressedLetters","tabOut","change","QueryList","subscribe","newItems","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","withTypeAhead","debounceInterval","unsubscribe","pipe","tap","letter","debounceTime","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","keyCode","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","hasModifierKey","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","DragDropModule","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","differChanges","diff","compareFnChanged","forEachItem","r","currentValue","sort","keyValueA","keyValueB","a","b","aString","bString","MAT_TABS_CONFIG","_MatTabLabelWrapperBase","mixinDisabled","MatTabLabelWrapper","elementRef","super","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","matTabsAnimations","translateTab","trigger","state","minHeight","visibility","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","isCentering","hasAttached","attach","_content","_afterLeavingCenter","preserveContent","detach","MatTabBody","_MatTabBodyBase","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","fromState","toState","emit","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","clientHeight","_getLayoutDirection","_MAT_INK_BAR_POSITIONER","providedIn","factory","width","MatInkBar","_ngZone","_inkBarPositioner","_animationMode","alignToElement","show","onStable","take","positions","inkBar","hide","ANIMATION_MODULE_TYPE","FocusKeyManager","_origin","setFocusOrigin","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","disablePagination","coerceBooleanProperty","selectedIndex","coerceNumberProperty","_keyManager","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","observableOf","resize","realign","updatePagination","_alignInkBarToSelectedTab","merge","_itemsResized","run","Promise","resolve","Math","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ResizeObserver","EMPTY","switchMap","tabItems","Observable","observer","resizeObserver","forEach","observe","disconnect","skip","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","ENTER","SPACE","focusIndex","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tab","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","button","timer","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","ngZone","platform","animationMode","_disableRipple","disableRipple","MatTabHeader","i4","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","_MatTabGroupBase","defaultConfig","_tabs","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","_preserveContent","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","contentTabIndex","_animationDuration","_contentTabIndex","backgroundColor","_backgroundColor","remove","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","_closestTabGroup","notifyOnChanges","realignInkBar","_tabHeader","focusTab","header","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","_tabFocusChanged","focusOrigin","MatTabGroup","MatTab","MAT_TAB_GROUP","MAT_TAB_CONTENT","MatTabContent","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","templateRef","_closestTab","_MatTabBase","textLabel","_contentPortal","templateLabel","_templateLabel","_setTemplateLabelInput","content","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","TemplateRef","MatTabsModule","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","BindThis","_target","propertyKey","descriptor","originalValue","get","isFunction","Error","toString","bound","bind"],"sourceRoot":""}