{"version":3,"file":"4960.chunk.1c1df2768fa189eb65df.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/misc/factories.ts","webpack://ng-universal-demo/./app/services/storeData/storeData.service.ts","webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts"],"sourcesContent":["import {FactoryProvider} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\n\nimport {StoreDataService} from '../services/storeData';\n\n/**\n * Creates factory provider for store data service\n * @param storeName - Name of storage that should be used\n */\nexport function createStoreDataServiceFactory(storeName: string): FactoryProvider\n{\n    return {\n        provide: StoreDataService,\n        useFactory: (storage: PermanentStorage) => new StoreDataService(storage, storeName),\n        deps: [PERMANENT_STORAGE]\n    };\n}","import {PermanentStorage} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Service used for obtaining and storing data\n */\nexport class StoreDataService<TData = any>\n{\n    //######################### constructor #########################\n    constructor(private _storage: PermanentStorage,\n                private _storeKey: string,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Stores data into store\n     * @param name - Name of stored data\n     * @param data - Data to be stored\n     */\n    public setData(name: string, data: TData): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data\n     * @param name - Name of data to be retrieved\n     */\n    public getData(name: string): TData|null\n    {\n        return (this._storage.get(this._storeKey)?.[name]) ?? null;\n    }\n\n    /**\n     * Removes data from store\n     * @param name - Name of data to be removed\n     */\n    public removeData(name: string): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        delete store[name];\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data names\n     */\n    public getStored(): string[]\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        return Object.keys(store);\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"_designerDropLists\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {LAYOUT_MODULE_TYPES_LOADER} from '../../misc/tokens';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        this._getDesignerDropLists();\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n}","<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button mat-icon-button *ngIf=\"hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        (cdkDropListDropped)=\"data?.component?.addDescendant($event)\"\n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDrop() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"_visible\" class=\"properties-main\">\n    <div class=\"header\">Properties <span class=\"bold\">{{_metadata?.metaInfo?.name ?? _component?.options?.typeMetadata?.name}} - {{_component?.options?.typeMetadata?.id}}</span></div>\n\n    <div class=\"form-group\">\n        <label class=\"control-label\">Display name</label>\n        <input class=\"form-control\" type=\"text\" [formControl]=\"_displayName\">\n    </div>\n\n    <ng-container *ngFor=\"let props of _propertiesData\">\n        <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n            <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {addSimpleChange} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {Dictionary, extend, isPresent, resolvePromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected _optionsFormSubscription: Subscription|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected _visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected _component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected _metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected _displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected _propertiesData: PropertiesEditorData[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected _formModelBuilder: FormModelBuilder,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => this._initProperties()));\n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => this._initProperties()));\n\n        this._displayName\n            .valueChanges\n            .subscribe(async displayName =>\n            {\n                if(this._component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this._component.options.typeMetadata.displayName = displayName;\n\n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n\n                    // eslint-disable-next-line no-self-assign\n                    this._component.options = this._component.options;\n                    await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                    this._manager.displayNameUpdated();\n                }\n            });\n\n        this._initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    protected async _initProperties(): Promise<void>\n    {\n        if(isPresent(this._manager.selectedComponent))\n        {\n            this._visible = true;\n            const component = this._manager.getComponent(this._manager.selectedComponent);\n\n            if(component)\n            {\n                this._visible = true;\n                this._component = component;\n\n                await this._getMetadata();\n            }\n            else\n            {\n                this._hide();\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async _getMetadata(): Promise<void>\n    {\n        if(this._component?.options?.typeMetadata)\n        {\n            this._displayName.setValue(this._component.options.typeMetadata.displayName || this._component.options.typeMetadata.id, {emitEvent: false});\n\n            this._metadata = await this._metadataExtractor.extractMetadata(this._component.options?.typeMetadata);\n\n            if(!this._metadata)\n            {\n                this._logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this._component.options?.typeMetadata.package, name: this._component.options?.typeMetadata.name});\n\n                this._hide();\n            }\n\n            this._optionsFormSubscription?.unsubscribe();\n            this._optionsFormSubscription = new Subscription();\n            this._propertiesData = [];\n\n            //properties metadata\n            if(this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                    const metadata = this._propertyExtractor.extract(props.modelType);\n    \n                    this._optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n                    {\n                        if(this._component?.options?.typeMetadata)\n                        {\n                            extend(true, this._component.options.typeMetadata.options, data);\n\n                            const changes: SimpleChanges = {};\n                            addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n    \n                            // eslint-disable-next-line no-self-assign\n                            this._component.options = this._component.options;\n                            await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                            this._component.invalidateVisuals();\n                        }\n                    }));\n\n                    this._propertiesData.push(\n                    {\n                        form,\n                        metadata,\n                        controls: props.propertiesControls,\n                    });\n                }\n            }\n\n            if(this._component)\n            {\n                const parent = this._manager.getParent(this._component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this._metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                            const metadata = this._propertyExtractor.extract(props.modelType);\n            \n                            this._optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n                            {\n                                if(this._component?.options?.typeMetadata)\n                                {\n                                    extend(true, this._component.options.typeMetadata.options, data);\n            \n                                    const changes: SimpleChanges = {};\n                                    addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n\n                                    // eslint-disable-next-line no-self-assign\n                                    this._component.options = this._component.options;\n                                    await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                                    this._component.invalidateVisuals();\n                                }\n                            }));\n        \n                            this._propertiesData.push(\n                            {\n                                form,\n                                metadata,\n                                controls: props.propertiesControls,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected _hide(): void\n    {\n        this._visible = false;\n        this._component = null;\n        this._metadata = null;\n        this._propertiesData = [];\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n        this._changeDetector.detectChanges();\n    }\n}","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDrop())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnChanges?.(changes));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnInit?.());\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}"],"names":["createStoreDataServiceFactory","storeName","provide","StoreDataService","useFactory","storage","deps","PERMANENT_STORAGE","constructor","_storage","_storeKey","setData","name","data","store","this","get","set","getData","removeData","getStored","Object","keys","ToLayoutDragDataSAPipe","transform","value","id","newId","itemSource","metadata","displayName","package","options","extend","metaInfo","defaultOptions","parentId","pure","standalone","i0","ComponentsPaletteSAComponent","_moduleTypesLoader","_changeDetector","_metadataExtractor","_metadataManager","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","ngOnInit","add","layoutChange","subscribe","_getDesignerDropLists","packageName","types","loadItem","type","extractMetadata","push","warn","item","group","_a","detectChanges","ngOnDestroy","unsubscribe","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","event","currentIdx","source","dropContainer","getSortedItems","findIndex","splice","flatTree","map","itm","component","reverse","LAYOUT_MODULE_TYPES_LOADER","LOGGER","selectors","features","decls","vars","consts","template","CommonModule","i2","DragDropModule","i3","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","styles","changeDetection","child_r5","ctx_r6","ComponentsTreeItemSAComponent","_manager","open","_canDrop","canDrop","hasChildren","children","length","selectedChange","highlightedChange","displayNameChange","toggle","expand","nodeId","typeMetadata","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","ctx_r1","ctx_r3","viewQuery","ctx","MatButtonModule","i4","ConnectDropListsSADirective","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","inputs","editorMetadata","layoutMetadata","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","propertiesMetadata","ngOnChanges","debug","clear","injector","createComponent","instance","form","resolvePromiseOr","initialize","invalidateVisuals","destroy","props_r2","PropertiesEditorSAComponent","_propertyExtractor","_formModelBuilder","_optionsFormSubscription","_visible","_component","_metadata","_displayName","FormControl","_propertiesData","_initProperties","valueChanges","changes","addSimpleChange","displayNameUpdated","getComponent","_getMetadata","_hide","setValue","emitEvent","error","optionsMetadata","props","build","modelType","extract","controls","propertiesControls","parent","getParent","parentMetadata","childPropertiesMetadata","FormModelBuilder","ReactiveFormsModule","i5","_cdkDropList","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","pipe","debounceTime","connectedTo","exportAs","InputStringComponent","PropertyTypeControlBase","t","InputBooleanComponent","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","_initialized","values","control","_control","_controlSet","_initialize","val_r1","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","metadataType","layoutEditorMetadata","metadataData","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","highlightedComponent","isBlank","asObservable","_buildFlatTree","selectComponent","next","unselectComponent","registerLayoutDesignerComponent","componentItem","unregisterLayoutDesignerComponent","index","indexOf","getMetadata","_buildFlatTreeForComponent","result","concat","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","propSymbol","meta","Reflect","prototype","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_childExtensions","_options","_metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentRef","nameof","customInjector","layoutComponentType","Ignore","ThrowError","Error","usedInjector","Injector","providers","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","registerExtensions","extensions","changeDetectorRef","markForCheck","designer","LAYOUT_COMPONENT_TRANSFORM","outputs","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","currentValue","previousValue","firstChange","isFirstChange"],"sourceRoot":""}