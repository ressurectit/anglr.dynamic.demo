{"version":3,"file":"824.chunk.6430400933c9ed5d7d03.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/../src/services/basicComponentsDynamicItemLoaderProvider/basicComponentsDynamicItemLoaderProvider.service.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleDataExtractor/defaultDynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../src/misc/providers.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/boot/app.config.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.module.ts","webpack://ng-universal-demo/./app/boot/browser-app.module.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicItemLoaderProvider/layoutDesignerDynamicItemLoaderProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/constants.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/tokens.ts"],"sourcesContent":["var map = {\n\t\"./gridPanel/type\": [\n\t\t49,\n\t\t563,\n\t\t49\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t9918,\n\t\t918\n\t],\n\t\"./stackPanel/type\": [\n\t\t32056,\n\t\t563,\n\t\t56\n\t],\n\t\"./textBlock/type\": [\n\t\t2252,\n\t\t563,\n\t\t252\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 84635;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./en.json\": [\n\t\t79587,\n\t\t587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {isFunction, isBlank, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\nglobalDefine(global =>\n{\n    if(!global.Document)\n    {\n        global.Document = function(){};\n    }\n\n    if(!global.ngDesignerMetadata)\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        // group(\n        // [\n        //     query('.loading-card', \n        //     [\n        //         animate('300ms', style(\n        //         {\n        //             transform: 'scale(4)'\n        //         }))\n        //     ]),\n        //     animate('200ms 100ms', style(\n        //     {\n        //         opacity: 0\n        //     }))\n            \n        // ])\n    ])\n]);","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div class=\"flex-row\">\r\n    <a routerLink=\"/\" routerLinkActive=\"active\" class=\"margin-right-extra-small\">Home</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<div class=\"content relative\" [@routeAnimations]=\"routeComponentState\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {consoleAnimationTrigger} from '@anglr/common/structured-log';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Subscription} from 'rxjs';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, null, 'Show console'));\n        }\n    }\n}","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Type} from '@angular/core';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const components: Type<any>[] =\n[\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        useHash: true\n        // preloadingStrategy: PreloadAllModules\n    },\n    staticRoutesBefore:\n    [\n        {\n            path: '',\n            loadChildren: () => import('../pages/+default/default.module').then(({DefaultModule}) => DefaultModule)\n        }\n    ],\n    staticRoutesAfter:\n    [\n        accessDeniedRoute,\n        notFoundRoute,\n    ]\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicItemLoaderProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic item loader provider for built-in basic-components\n */\n@Injectable()\nexport class BasicComponentsDynamicItemLoaderProvider implements DynamicItemLoaderProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with basic-components\n        if(source.package != 'basic-components' && source.package != '@anglr/dynamic/basic-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('BasicComponentsDynamicItemLoaderProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/basic-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('BasicComponentsDynamicItemLoaderProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleTypesProvider} from '../dynamicModuleTypesLoader/dynamicModuleTypesLoader.interface';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleTypesProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(moduleName: string): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName});\n\n            const dynamicItemModule = await import('@anglr/dynamic/basic-components/types');\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {isPresent} from '@jscrpt/common';\n\nimport {DynamicModule, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\n@Injectable()\nexport class DefaultDynamicModuleDataExtractor<TData = any> implements DynamicModuleDataExtractor<TData>\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicModuleDataExtractor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToExtract(module: DynamicModule): TData|null\n    {\n        const localModule = module as ɵDynamicModuleWithDefault;\n\n        this._logger?.debug('DefaultDynamicModuleDataExtractor: trying to extract dynamic data');\n\n        if(localModule.default && isPresent(localModule.default))\n        {\n            return localModule.default;\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\n\nimport {BasicComponentsDynamicItemLoaderProvider, DefaultDynamicModuleDataExtractor, DefaultDynamicModuleTypesProvider} from '../services';\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS, DYNAMIC_MODULE_TYPES_PROVIDER} from './tokens';\n\n/**\n * Provider for BasicComponentsDynamicItemLoaderProvider implementation of DynamicItemLoaderProvider\n */\nexport const BASIC_COMPONENTS_DYNAMIC_ITEM_LOADER_PROVIDER: ClassProvider =\n{\n    provide: DYNAMIC_ITEM_LOADER_PROVIDERS,\n    useClass: BasicComponentsDynamicItemLoaderProvider,\n    multi: true\n};\n\n/**\n * Provider for DefaultDynamicModuleTypesProvider implementation of DynamicModuleTypesProvider\n */\nexport const DEFAULT_DYNAMIC_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: DYNAMIC_MODULE_TYPES_PROVIDER,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for DefaultDynamicModuleDataExtractor implementation of DynamicModuleDataExtractor\n */\nexport const DEFAULT_DYNAMIC_MODULE_DATA_EXTRACTORS: ClassProvider =\n{\n    provide: DYNAMIC_MODULE_DATA_EXTRACTORS,\n    useClass: DefaultDynamicModuleDataExtractor,\n    multi: true\n};","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'en';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, Provider, ExistingProvider, Injector} from '@angular/core';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, handle400WithValidationsFunc, handle404Func, HttpClientErrorCustomHandler, HttpClientErrorResponseMapper, HttpClientValidationErrorResponseMapper, HTTP_CLIENT_ERROR_CUSTOM_HANDLER, HTTP_CLIENT_ERROR_RESPONSE_MAPPER, HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, METADATA_SELECTOR_TYPE, METADATA_SELECTOR_OPTIONS, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, GRID_INITIALIZER_TYPE, GRID_INITIALIZER_OPTIONS, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent} from '@anglr/grid';\nimport {DialogMetadataSelectorComponent, DialogMetadataSelectorOptions} from '@anglr/grid/material';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {ConfirmationDialogOptions, CONFIRMATION_DIALOG_OPTIONS, MovableTitledDialogComponent, TitledDialogServiceOptions} from '@anglr/common/material';\nimport {FLOATING_UI_POSITION} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {ClientErrorHandlingMiddleware, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {LoggerMiddleware, ReportProgressMiddleware, ResponseTypeMiddleware, REST_METHOD_MIDDLEWARES} from '@anglr/rest';\nimport {DATETIME_REST_DATE_API} from '@anglr/rest/datetime';\nimport {BASIC_COMPONENTS_DYNAMIC_ITEM_LOADER_PROVIDER, DEFAULT_DYNAMIC_MODULE_DATA_EXTRACTORS, DEFAULT_DYNAMIC_MODULE_TYPES_PROVIDER} from '@anglr/dynamic';\nimport {LAYOUT_DESIGNER_DYNAMIC_ITEM_LOADER_PROVIDER} from '@anglr/dynamic/layout-editor';\nimport {isString, isJsObject} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\nimport {sk} from 'date-fns/locale';\n\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers: Provider[] =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new NoConnectionInterceptorOptions('Server je mimo prevádzky.'),\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.'),\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### ERROR HANDLING #########################\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions>\n        {\n            texts:\n            {\n                loading: 'Loading data ...',\n                noData: 'No data for requested parameters',\n                notLoaded: 'Data have not been loaded yet'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_TYPE,\n        useValue: QueryGridInitializerComponent\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_TYPE,\n        useValue: DialogMetadataSelectorComponent\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_OPTIONS,\n        useValue: <DialogMetadataSelectorOptions>\n        {\n            showButtonVisible: false\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_OPTIONS,\n        useValue: <QueryPermanentStorageGridInitializerOptions>\n        {\n            storageIppName: 'all-grid-ipp'\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions<any>>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(null, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel]);\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n    ...isProduction ? \n        [] :\n        [\n            // <FactoryProvider>\n            // {\n            //     provide: LOGGER_SINKS,\n            //     useFactory: () => new ConsoleSink(),\n            //     multi: true\n            // }\n        ],\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    <ValueProvider>\n    {\n        provide: CONFIRMATION_DIALOG_OPTIONS,\n        useValue: <ConfirmationDialogOptions>\n        {\n            confirmationText: 'Prajete si pokračovať?',\n            dialogCancelText: 'Nie',\n            dialogConfirmText: 'Áno'\n        }\n    },\n\n    //######################### POSITION #########################\n    FLOATING_UI_POSITION,\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    DATETIME_REST_DATE_API,\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    <ValueProvider>\n    {\n        provide: REST_METHOD_MIDDLEWARES,\n        useValue:\n        [\n            LoggerMiddleware,\n            ResponseTypeMiddleware,\n            ReportProgressMiddleware,\n            ClientErrorHandlingMiddleware,\n        ]\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientErrorResponseMapper>(err => \n        {\n            if(err?.error?.errors)\n            {\n                return err?.error?.errors;\n            }\n\n            if(isString(err?.error))\n            {\n                return [err?.error];\n            }\n\n            if(isJsObject(err?.error))\n            {\n                return [JSON.stringify(err?.error)];\n            }\n            \n            return [err.message];\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientValidationErrorResponseMapper>(err => \n        {\n            if(err?.error?.validationErrors)\n            {\n                return err?.error?.validationErrors;\n            }\n\n            return null;\n        })\n    },\n    <FactoryProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_CUSTOM_HANDLER,\n        useFactory: injector =>\n        {\n            return <Record<number, HttpClientErrorCustomHandler<any>>>\n            {\n                400: err => handle400WithValidationsFunc(err, {injector}),\n                404: handle404Func\n            };\n        },\n        deps: [Injector]\n    },\n\n    //######################### DYNAMIC CONFIG #########################\n    BASIC_COMPONENTS_DYNAMIC_ITEM_LOADER_PROVIDER,\n    LAYOUT_DESIGNER_DYNAMIC_ITEM_LOADER_PROVIDER,\n\n    DEFAULT_DYNAMIC_MODULE_TYPES_PROVIDER,\n    \n    DEFAULT_DYNAMIC_MODULE_DATA_EXTRACTORS,\n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return Observable.create(async (observer: Observer<any>) =>\n        {\n            const result = await import(`../../../content/l10n/${lang}.json`);\n\n            observer.next(result.default);\n            observer.complete();\n        });\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {TranslateModule, TranslateLoader, MissingTranslationHandler} from '@ngx-translate/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {MenuModule} from '../modules';\nimport {config} from '../config';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule.forRoot(),\n        RouterModule,\n        HotkeyModule,\n        MenuModule,\n        ConsoleLogModule.forRoot(),\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            },\n            ...config.configuration.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                    {\n                        provide: MissingTranslationHandler,\n                        useClass: ReportMissingTranslationService\n                    }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration.debugTranslations\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule,\n        HotkeyModule.forRoot(\n        {\n            cheatSheetCloseEsc: true\n        })\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: () => new AnglrExceptionHandlerOptions(config.configuration.debug, false)\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {simpleNotification} from '@jscrpt/common';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst platform = platformBrowser();\n\nrunWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) =>\n{\n    moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n    jsDevMode && simpleNotification(jsDevMode && import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralModule,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\nimport {DateTimeSelectorModule} from '@anglr/datetime';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        DateTimeSelectorModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoaderProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic item loader provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicItemLoaderProvider implements DynamicItemLoaderProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicItemLoaderProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicItemLoaderProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicItemLoaderProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","/**\n * Suffix used for layout designer component id\n */\nexport const LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX = '-designer';","import {ClassProvider, ValueProvider} from '@angular/core';\nimport {DYNAMIC_ITEM_LOADER_PROVIDERS} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerDynamicItemLoaderProvider} from '../services';\nimport {layoutDesignerComponentTransform} from './utils';\n\n/**\n * Provider for LayoutDesignerDynamicItemLoaderProvider implementation of DynamicItemLoaderProvider\n */\nexport const LAYOUT_DESIGNER_DYNAMIC_ITEM_LOADER_PROVIDER: ClassProvider =\n{\n    provide: DYNAMIC_ITEM_LOADER_PROVIDERS,\n    useClass: LayoutDesignerDynamicItemLoaderProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n","import {Injector} from '@angular/core';\nimport {LayoutComponentTransform, LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../components';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from './constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n * @param injector - Injector used for obtaining dependencies\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata, injector: Injector): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};\n","import {InjectionToken} from '@angular/core';\n\nimport {LayoutComponentTransform} from '../interfaces';\n\n/**\n * Injection provider for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n","import {InjectionToken} from '@angular/core';\n\nimport {DynamicModuleDataExtractor} from '../interfaces';\nimport {DynamicItemLoaderProvider, DynamicModuleTypesProvider} from '../services';\n\n/**\n * Injection token used for obtaining dynamic item loader providers\n */\nexport const DYNAMIC_ITEM_LOADER_PROVIDERS: InjectionToken<DynamicItemLoaderProvider[]> = new InjectionToken<DynamicItemLoaderProvider[]>('DYNAMIC_ITEM_LOADER_PROVIDERS');\n\n/**\n * Injection token used for obtaining dynamic module types providers\n */\nexport const DYNAMIC_MODULE_TYPES_PROVIDER: InjectionToken<DynamicModuleTypesProvider[]> = new InjectionToken<DynamicModuleTypesProvider[]>('DYNAMIC_MODULE_TYPES_PROVIDER');\n\n/**\n * Injection token used for obtaining dynamic module data extractors\n */\nexport const DYNAMIC_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('DYNAMIC_MODULE_DATA_EXTRACTORS');\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","t","UserSettingsSections","i0","theme_r5","lang_r6","level_r8","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","consoleConfig","debugDataEnabled","themes","config","languages","logLevels","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","generalSettingsForm","group","language","theme","debuggingSettingsForm","consoleEnabled","debugData","loggingSettingsForm","consoleLogLevel","LogEventLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","restrictToLevel","setLoggingSettings","forEach","val","isNaN","push","name","value","selectors","standalone","features","decls","vars","consts","template","DisplayingFeatureModule","i5","FormsFeatureModule","i2","styles","changeDetection","globalDefine","global","Document","ngDesignerMetadata","observableSubscribe","Observable","next","error","complete","isBlank","isFunction","err","console","log","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","width","height","transform","opacity","animate","loaderTrigger","MainMenuComponent","_dialog","openSettings","open","title","maxHeight","ctx","AppComponent","translateSvc","_changeDetector","_appHotkeys","logger","document","consoleVisible","routeComponentState","guiVersion","version","initialized","verbose","body","classList","add","_theme","_settingsChangeSubscription","settingsChange","itm","nameof","remove","use","detectChanges","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","ngOnInit","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","component","ngOnDestroy","unsubscribe","destroy","oldHelpHotkey","hotkeys","get","Hotkey","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","fadeInOutTrigger","consoleAnimationTrigger","routesOptions","rootModule","rootModuleConfig","enableTracing","useHash","staticRoutesBefore","path","loadChildren","DefaultModule","staticRoutesAfter","loadComponent","AccessDeniedComponent","NotFoundComponent","BasicComponentsDynamicItemLoaderProvider","_logger","tryToGet","source","package","debug","factory","DefaultDynamicModuleTypesProvider","moduleName","DefaultDynamicModuleDataExtractor","tryToExtract","localModule","default","isPresent","BASIC_COMPONENTS_DYNAMIC_ITEM_LOADER_PROVIDER","provide","DYNAMIC_ITEM_LOADER_PROVIDERS","useClass","multi","DEFAULT_DYNAMIC_MODULE_TYPES_PROVIDER","DYNAMIC_MODULE_TYPES_PROVIDER","DEFAULT_DYNAMIC_MODULE_DATA_EXTRACTORS","DYNAMIC_MODULE_DATA_EXTRACTORS","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","providers","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","HttpGatewayTimeoutInterceptorOptions","GlobalizationServiceImpl","ERROR_WITH_URL_EXTENDER","ANGLR_EXCEPTION_HANDLER_PROVIDER","DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER","NO_DATA_RENDERER_OPTIONS","useValue","texts","loading","noData","notLoaded","GRID_INITIALIZER_TYPE","QueryGridInitializerComponent","PAGING_OPTIONS","itemsPerPageValues","initialItemsPerPage","METADATA_SELECTOR_TYPE","DialogMetadataSelectorComponent","METADATA_SELECTOR_OPTIONS","showButtonVisible","GRID_INITIALIZER_OPTIONS","storageIppName","CONTENT_RENDERER_OPTIONS","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","PERMANENT_STORAGE","LocalPermanentStorageService","ConsoleSinkConfigService","deps","SettingsService","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogServiceOptions","MovableTitledDialogComponent","CONFIRMATION_DIALOG_OPTIONS","confirmationText","dialogCancelText","dialogConfirmText","FLOATING_UI_POSITION","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","DATETIME_REST_DATE_API","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","REST_METHOD_MIDDLEWARES","LoggerMiddleware","ResponseTypeMiddleware","ReportProgressMiddleware","ClientErrorHandlingMiddleware","HTTP_CLIENT_ERROR_RESPONSE_MAPPER","errors","isString","isJsObject","JSON","stringify","message","HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER","validationErrors","HTTP_CLIENT_ERROR_CUSTOM_HANDLER","injector","handle400WithValidationsFunc","handle404Func","Injector","LAYOUT_DESIGNER_DYNAMIC_ITEM_LOADER_PROVIDER","WebpackTranslateLoaderService","getTranslation","lang","observer","result","ReportMissingTranslationService","handle","params","key","AppModule","imports","BrowserModule","appId","HttpClientModule","InternalServerErrorModule","ProgressIndicatorModule","NotificationsGlobalModule","RouterModule","HotkeyModule","MenuModule","ConsoleLogModule","TranslateModule","loader","TranslateLoader","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","ModuleRoutes","BrowserAppModule","bootstrap","AnglrExceptionHandlerOptions","BrowserAnimationsModule","BrowserTransferStateModule","cheatSheetCloseEsc","enableProdMode","platform","platformBrowser","runWhenModuleStable","bootstrapModule","moduleRef","RestTransferStateService","clearAndDeactivate","InjectionToken","CommonModule","CommonUtilsModule","CommonLocalizeModule","NumeralModule","TooltipModule","DatePipesModule","AuthorizationModule","ReactiveFormsModule","MatSlideToggleModule","NumberInputModule","NgSelectModule","NgSelectEditModule","DateTimeSelectorModule","HasErrorModule","FormPipesModule","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","TitledDialogModule","keyValueDiffers","_storage","_settings","_settingsDebugging","getDebugging","_settingsLogging","getLogging","_settingsChangeSubject","Subject","_settingsDebuggingChangeSubject","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","asObservable","extend","set","forEachChangedItem","setDebugging","setLogging","providedIn","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","store","LayoutDesignerDynamicItemLoaderProvider","warn","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_TRANSFORM","metadata","options","typeMetadata"],"sourceRoot":""}