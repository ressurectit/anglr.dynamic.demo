{"version":3,"file":"7618.chunk.0b76ca8fed1ee5867219.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/plugins/paging/no/noPaging.component.ts","webpack://ng-universal-demo/../../../../extensions/src/extensions/patchOptions.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/dataTable/dataTable.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/gridColumns/gridColumns.relations.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/gridColumns/misc/classes/gridColumnsRelationsHelper/gridColumnsRelationsHelper.ts","webpack://ng-universal-demo/../grid-components/src/misc/classes/scopedMatrixContentRenderer.component.ts","webpack://ng-universal-demo/../grid-components/src/misc/classes/scopedMatrixContentRenderer.component.html","webpack://ng-universal-demo/../grid-components/src/dynamicItems/dataTable/dataTable.component.html","webpack://ng-universal-demo/../grid-components/src/dynamicItems/dataTable/dataTable.component.ts","webpack://ng-universal-demo/../../../../extensions/src/extensions/reinitializeOptions.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/dataTable/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../src/internal/operators/toArray.ts","webpack://ng-universal-demo/../../../../src/plugins/dataLoader/sync/syncDataLoader.component.ts","webpack://ng-universal-demo/../../../../src/internal/operators/reduce.ts"],"sourcesContent":["import {ChangeDetectionStrategy, Component, ValueProvider} from '@angular/core';\n\nimport {PagingAbstractComponent} from '../pagingAbstract.component';\nimport {NoPagingOptions, NoPaging} from './noPaging.interface';\nimport {DEFAULT_OPTIONS} from '../../../misc/tokens';\n\n/**\n * Default options for paging\n */\nconst defaultOptions: NoPagingOptions =\n{\n    initialItemsPerPage: NaN,\n    initialPage: 1,\n    cssClasses: {},\n};\n\n/**\n * Component used for no paging\n */\n@Component(\n{\n    selector: 'ng-no-paging',\n    template: '',\n    standalone: true,\n    providers:\n    [\n        <ValueProvider>\n        {\n            provide: DEFAULT_OPTIONS,\n            useValue: defaultOptions,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NoPagingSAComponent extends PagingAbstractComponent<unknown, NoPagingOptions> implements NoPaging<NoPagingOptions>\n{\n    //######################### public properties - implementation of NoPaging #########################\n\n    /**\n     * @inheritdoc\n     */\n    public firstItemIndex: number = 0;\n}","import {GridAction, GridOptions} from '@anglr/grid';\nimport {RecursivePartial} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {first} from 'rxjs';\n\n/**\n * Method used to patch options without full initialization of grid, only options are initialized\n * @param options - Options to be used as patch\n */\nexport function patchOptions(options: RecursivePartial<GridOptions>): GridAction\n{\n    return async grid =>\n    {\n        grid.gridOptions = options;\n\n        await grid.initOptions();\n        await lastValueFrom(grid.pluginsOptionsInitialized.pipe(first(init => init)));\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {DataTableComponentOptions} from './dataTable.options';\n\n/**\n * Data table layout metadata loader\n */\nexport const DataTableLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DataTableComponentOptions>> = async () => new (await import('./metadata/dataTable.layoutMetadata')).DataTableLayoutEditorMetadata();\n\n/**\n * Data table layout designer type loader\n */\nexport const DataTableLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/dataTableDesigner.component')).DataTableDesignerSAComponent;","import {DebugData, DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {GridColumnsRelationsOptions} from './gridColumns.options';\n\n/**\n * Grid columns relations for table row\n */\n@DebugData(\n{\n    outputs: \n    [\n        nameof<GridColumnsRelations>('row'),\n    ],\n})\nexport class GridColumnsRelations<TRow = unknown> implements RelationsComponent<GridColumnsRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: GridColumnsRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of row data in table\n     */\n    @DynamicOutput()\n    public row: TRow|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {Destroyable, DynamicOnChanges} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {GridColumnsRelations} from '../../../gridColumns.relations';\nimport {DataTableSAComponent} from '../../../../dataTable/dataTable.component';\n\n/**\n * Helper class for creating grid columns relations\n */\nexport class GridColumnsRelationsHelper<TRow = unknown> implements DynamicOnChanges, Destroyable\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager;\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor;\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: GridColumnsRelations = new GridColumnsRelations();\n\n    /**\n     * Id of relations component\n     */\n    protected componentId: string;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    public row: TRow|null = null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.componentManager = injector.get(RelationsComponentManager);\n        this.relationsProcessor = injector.get(RelationsProcessor);\n\n        const id = injector.get(DataTableSAComponent).options?.columns.id;\n\n        if(!id)\n        {\n            throw new Error('GridColumnsRelationsHelper: missing component ID!');\n        }\n\n        this.componentId = id;\n\n        this.register();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<GridColumnsRelationsHelper>('row') in changes)\n        {\n            this.relations.row = this.row;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers relations component\n     */\n    protected async register(): Promise<void>\n    {\n        this.componentManager.registerComponent(this.componentId, this.relations);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.componentId);\n    }\n}","import {ChangeDetectionStrategy, Component, FactoryProvider, InjectionToken, Injector, OnDestroy, Provider, SimpleChanges, ValueProvider, inject} from '@angular/core';\nimport {CONTENT_RENDERER_CURRENT_VIEW_CONTAINER, CssGridDefaultTemplatesSAComponent, CurrentViewContainer, DEFAULT_OPTIONS, GridPlugin, MatrixContentRenderer, MatrixContentRendererOptions, MatrixContentRendererSAComponent} from '@anglr/grid';\nimport {Destroyable, SCOPE_ID, addSimpleChange} from '@anglr/dynamic';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LayoutRenderer} from '@anglr/dynamic/layout';\nimport {Func1, generateId} from '@jscrpt/common';\n\nimport {GridColumnsRelationsHelper} from '../../dynamicItems/gridColumns/misc/classes/gridColumnsRelationsHelper/gridColumnsRelationsHelper';\n\n/**\n * Default 'GridOptions'\n */\nconst defaultOptions: MatrixContentRendererOptions =\n{\n    defaults: CssGridDefaultTemplatesSAComponent,\n    cssClasses:\n    {\n        gridContainerClass: 'grid-container-css-grid',\n        headerContainerClass: 'grid-header-css-grid',\n        contentContainerClass: 'grid-body-css-grid',\n        footerContainerClass: 'grid-footer-css-grid',\n        headerRowContainerClass: 'grid-header-row-css-grid',\n        contentRowContainerClass: 'grid-content-row-css-grid',\n        footerRowContainerClass: 'grid-footer-row-css-grid',\n    },\n};\n\n/**\n * Scope indentifier token\n */\nconst SCOPE_IDENTIFIER: InjectionToken<string> = new InjectionToken<string>('SCOPE_IDENTIFIER');\n\n/**\n * Component used for rendering dynamic scoped content using new 'matrix' metadata gatherer\n */\n@Component(\n{\n    selector: 'div.matrix-content-renderer',\n    templateUrl: 'scopedMatrixContentRenderer.component.html',\n    standalone: true,\n    providers:\n    [\n        <ValueProvider>\n        {\n            provide: DEFAULT_OPTIONS,\n            useValue: defaultOptions,\n        },\n        <FactoryProvider>\n        {\n            provide: CONTENT_RENDERER_CURRENT_VIEW_CONTAINER,\n            useFactory: () =>\n            {\n                return <CurrentViewContainer> {\n                    viewContainer: null,\n                };\n            }\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScopedMatrixContentRendererSAComponent extends MatrixContentRendererSAComponent implements MatrixContentRenderer, GridPlugin<MatrixContentRendererOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Function used for obtaining parent injector \n     */\n    protected parentInjectorFn: Func1<Injector, Injector>|undefined|null;\n\n    /**\n     * Array of destroyable injectors\n     */\n    protected injectors: (Destroyable|Injector)[] = [];\n\n    /**\n     * Array of destroyable relations helpers\n     */\n    protected relationsHelpers: Destroyable[] = [];\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override renderContentRowsContainers(): void\n    {\n        const viewContainer = this.currentViewContainer.viewContainer;\n        const scopeIdentifier = generateId(6);\n        const data = this.dataLoader?.result();\n        const dataLength = data?.data?.length ?? 0;\n        const metadata = this.metadataSelector?.metadata();\n\n        for(const destroyable of this.relationsHelpers)\n        {\n            destroyable.destroy();\n        }\n\n        for(const destroyable of this.injectors)\n        {\n            const destroyableInjector = destroyable as Injector;\n\n            destroyableInjector.get(RelationsComponentManager).ngOnDestroy();\n            destroyableInjector.get(RelationsProcessor).destroyScope();\n\n            (destroyable as Destroyable).destroy();\n        }\n\n        this.injectors = [];\n        this.relationsHelpers = [];\n\n        for(let datumIndex = 0; datumIndex < dataLength; datumIndex++)\n        {\n            const datum = data?.data[datumIndex];\n\n            this.parentInjectorFn = parentInjector =>\n            {\n                //if obtaining injector for deeper 'level'\n                if(parentInjector.get(SCOPE_IDENTIFIER, null, {optional: true}) === scopeIdentifier)\n                {\n                    return parentInjector;\n                }\n\n                //injector exists\n                if(this.injectors.length == (datumIndex + 1))\n                {\n                    return this.injectors[datumIndex] as Injector;\n                }\n\n                const injector: Injector = Injector.create(\n                {\n                    providers:\n                    [\n                        <ValueProvider>\n                        {\n                            provide: SCOPE_IDENTIFIER,\n                            useValue: scopeIdentifier,\n                        },\n                        <FactoryProvider>\n                        {\n                            provide: RelationsComponentManager,\n                            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n                        },\n                        <FactoryProvider>\n                        {\n                            provide: RelationsProcessor,\n                            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n                        },\n                        RelationsChangeDetector,\n                        LayoutRenderer,\n                    ],\n                    parent: viewContainer?.injector,\n                });\n\n                const relationsHelper = new GridColumnsRelationsHelper(injector);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<GridColumnsRelationsHelper>(changes, 'row', datum, null, true);\n                relationsHelper.row = datum;\n                relationsHelper.dynamicOnChanges(changes);\n\n                this.injectors[datumIndex] = injector;\n                this.relationsHelpers[datumIndex] = relationsHelper;\n\n                return injector;\n            };\n\n            this.renderRowContainer(metadata?.contentRowContainer?.length ? metadata?.contentRowContainer : [{template: this.defaultsSafe.contentRowContainer, predicate: null, columns: null}],\n                                    column => column.bodyTemplate,\n                                    this.renderContentOrFooterCell,\n                                    (_, columns) => this.getGridDataRowContext(datumIndex, datum, columns));\n        }\n\n        this.parentInjectorFn = null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override createInjector(injector: Injector, additionalProviders: Provider[] = []): Injector\n    {\n        if(this.parentInjectorFn)\n        {\n            injector = this.parentInjectorFn(injector);\n        }\n\n        return Injector.create(\n        {\n            providers:\n            [\n                ...additionalProviders,\n            ],\n            parent: injector,\n        });\n    }\n}","<ng-container #container></ng-container>\n<ng-container #defaults></ng-container>","<ng-container *layoutComponentRenderer=\"options?.dataLoader?.options?.plugin; callback: dataLoaderCallback\"/>\n<ng-container *layoutComponentRenderer=\"options?.paging?.options?.plugin; callback: pagingCallback\"/>\n\n<div #grid ngGrid [gridOptions]=\"gridOptions\">\n    @for(col of colsDef; track col)\n    {\n        <ng-container [matrixGridColumn]=\"col.id\" [width]=\"col.width\">\n            <div *headerCellTemplate>\n                <ng-container *layoutComponentRenderer=\"col.header\"/>\n            </div>\n            \n            <div *contentCellTemplate>\n                <ng-container *layoutComponentRenderer=\"col.content\"/>\n            </div>\n        </ng-container>\n    }\n</div>","import {Component, ChangeDetectionStrategy, ViewChild} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LayoutRendererItem} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {DataLoader, DataLoaderOptions, Grid, GridOptions, MatrixGridModule, NoPagingSAComponent, Paging, PagingOptions, SyncDataLoaderOptions, SyncDataLoaderSAComponent} from '@anglr/grid';\nimport {patchOptions, reinitializeOptions} from '@anglr/grid/extensions';\nimport {BindThis, PromiseOr, RecursivePartial} from '@jscrpt/common';\n\nimport {DataTableComponentOptions} from './dataTable.options';\nimport {DataTableLayoutDesignerTypeLoader, DataTableLayoutMetadataLoader} from './dataTable.metadata';\nimport {GridPluginComponent} from '../../interfaces';\nimport {ScopedMatrixContentRendererSAComponent} from '../../misc/classes/scopedMatrixContentRenderer.component';\nimport {DataLoaderComponentOptions} from '../dataLoader';\nimport {PagingComponentOptions} from '../paging';\n\n/**\n * Definition of column\n */\ninterface ColDef\n{\n    /**\n     * Id of column\n     */\n    id: string;\n\n    /**\n     * Width of column\n     */\n    width: string;\n\n    /**\n     * Header template\n     */\n    header: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Content template\n     */\n    content: LayoutComponentMetadata|undefined|null;\n}\n\n/**\n * Component used for displaying data table\n */\n@Component(\n{\n    selector: 'data-table',\n    templateUrl: 'dataTable.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        MatrixGridModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<DataTableComponentOptions>(options => \n{\n    if(!options)\n    {\n        return [];\n    }\n\n    return [options.columns, options.paging, options.dataLoader];\n})\n@LayoutEditorDesignerType(DataTableLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(DataTableLayoutMetadataLoader)\nexport class DataTableSAComponent extends LayoutComponentBase<DataTableComponentOptions> implements LayoutComponent<DataTableComponentOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Initialization status for grid\n     */\n    protected initializationStatus =\n    {\n        dataLoader: false,\n        paging: false,\n    };\n\n    //######################### protected properties #########################\n\n    /**\n     * Grid instance with safe access\n     */\n    protected get gridSafe(): Grid\n    {\n        if(!this.grid)\n        {\n            throw new Error('DataTableSAComponent: missing grid instance!');\n        }\n\n        return this.grid;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Definition of columns\n     */\n    protected colsDef: ColDef[] = [];\n\n    /**\n     * Instance of grid options for grid\n     */\n    protected gridOptions: RecursivePartial<GridOptions> =\n    {\n        autoInitialize: false,\n        plugins:\n        {\n            contentRenderer:\n            {\n                type: ScopedMatrixContentRendererSAComponent,\n            }\n        }\n    };\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of grid\n     */\n    @ViewChild('grid', {static: true})\n    protected grid: Grid|undefined|null;\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Callback called when data loader was rendered\n     * @param item - Item that contains information about rendered data loader\n     */\n    @BindThis\n    protected async dataLoaderCallback(item: unknown): Promise<void>\n    {\n        const itm: LayoutRendererItem = item as LayoutRendererItem;\n        const dataLoaderComponent = itm.component?.instance as GridPluginComponent<DataLoader, DataLoaderComponentOptions, DataLoaderOptions>;\n        dataLoaderComponent.setGridInstance(this.gridSafe);\n        \n        this.gridSafe.execute(patchOptions(\n        {\n            plugins:\n            {\n                dataLoader: dataLoaderComponent.pluginDescription,\n            }\n        }));\n\n        this.initializationStatus.dataLoader = true;\n\n        this.initializeGrid();\n    }\n\n    /**\n     * Callback called when paging was rendered\n     * @param item - Item that contains information about rendered paging\n     */\n    @BindThis\n    protected async pagingCallback(item: unknown): Promise<void>\n    {\n        const itm: LayoutRendererItem = item as LayoutRendererItem;\n        const pagingComponent = itm.component?.instance as GridPluginComponent<Paging, PagingComponentOptions, PagingOptions>;\n        pagingComponent.setGridInstance(this.gridSafe);\n        \n        this.gridSafe.execute(patchOptions(\n        {\n            plugins:\n            {\n                paging: pagingComponent.pluginDescription,\n            }\n        }));\n\n        this.initializationStatus.paging = true;\n\n        this.initializeGrid();\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        for(const column of this.optionsSafe.columns.options?.columns ?? [])\n        {\n            const colDef: ColDef =\n            {\n                id: column.id,\n                header: null,\n                content: null,\n                width: column.options?.width ?? '1fr',\n            };\n\n            colDef.header = column.options?.header.options?.content;\n            colDef.content = column.options?.content.options?.content;\n\n            this.colsDef.push(colDef);\n        }\n\n        this.changeDetector.detectChanges();\n\n        this.initializeGrid();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize grid\n     */\n    protected async initializeGrid(): Promise<void>\n    {\n        //no data loader plugin provided\n        if(!this.initializationStatus.dataLoader && !this.optionsSafe.dataLoader.options?.plugin)\n        {\n            this.gridSafe.execute(patchOptions(\n            {\n                plugins:\n                {\n                    dataLoader:\n                    {\n                        options: <RecursivePartial<SyncDataLoaderOptions>>\n                        {\n                            data: [],\n                        },\n                        type: SyncDataLoaderSAComponent,\n                    }\n                }\n            }));\n\n            this.initializationStatus.dataLoader = true; \n        }\n\n        //no paging plugin provided\n        if(!this.initializationStatus.paging && !this.optionsSafe.paging.options?.plugin)\n        {\n            this.gridSafe.execute(patchOptions(\n            {\n                plugins:\n                {\n                    paging:\n                    {\n                        type: NoPagingSAComponent,\n                    }\n                }\n            }));\n\n            this.initializationStatus.paging = true; \n        }\n\n        if(this.initializationStatus.dataLoader &&\n           this.initializationStatus.paging)\n        {\n            await this.gridSafe.execute(reinitializeOptions());\n        }\n    }\n}","import {GridAction, GridOptions} from '@anglr/grid';\nimport {RecursivePartial, isBoolean} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {first} from 'rxjs';\n\n/**\n * Method reinitialize options for grid\n * @param force - Indication that options should be fully reinitialized, even thou nothing has changed\n */\nexport function reinitializeOptions(force?: boolean): GridAction\n/**\n * Method reinitialize options for grid\n * @param options - Options to be used for reinitialization\n */\nexport function reinitializeOptions(options?: RecursivePartial<GridOptions>): GridAction\n/**\n * Method reinitialize options for grid\n * @param force - Indication that options should be fully reinitialized, even thou nothing has changed\n * @param options - Options to be used for reinitialization\n */\nexport function reinitializeOptions(force?: boolean, options?: RecursivePartial<GridOptions>): GridAction\nexport function reinitializeOptions(optionsOrForce?: RecursivePartial<GridOptions>|boolean, opts?: RecursivePartial<GridOptions>): GridAction\n{\n    return async grid =>\n    {\n        const force = isBoolean(optionsOrForce) ? optionsOrForce : false;\n        const options = opts ?? isBoolean(optionsOrForce) ? undefined : optionsOrForce;\n\n        if(options)\n        {\n            grid.gridOptions = options;\n        }\n\n        await grid.initOptions();\n        await lastValueFrom(grid.pluginsOptionsInitialized.pipe(first(init => init)));\n        await grid.initialize(force);\n    };\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {DataTableSAComponent} from './dataTable.component';\n\nexport default DataTableSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Inject, Optional, WritableSignal, signal, Signal} from '@angular/core';\nimport {OrderByDirection} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {from, Observable} from 'rxjs';\nimport {skip, take, toArray} from 'rxjs/operators';\n\nimport {SyncDataLoaderOptions, SyncDataLoader} from './syncDataLoader.interface';\nimport {DataLoaderAbstractComponent} from '../dataLoaderAbstract.component';\nimport {DataResponse, SimpleOrdering} from '../../../interfaces';\nimport {DATA_LOADER_OPTIONS} from '../../../misc/tokens';\nimport {DataLoaderState} from '../../../misc/enums';\n\n/**\n * Default options for sync data loader\n */\nconst defaultOptions: SyncDataLoaderOptions<Record<string, number>, SimpleOrdering> =\n{\n    autoLoadData: true,\n    accumulateData: false,\n    debounceDataCallback: 30,\n    data: [],\n    orderData: (data: Record<string, number>[], ordering?: SimpleOrdering) =>\n    {\n        if(!ordering)\n        {\n            return data;\n        }\n\n        return data.sort((a, b) =>\n        {\n            if(a[ordering.orderBy] < b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? -1 : 1;\n            }\n            else if(a[ordering.orderBy] > b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? 1 : -1;\n            }\n\n            return 0;\n        });\n    }\n};\n\n/**\n * Data loader that allows synchronous data loading\n *\n * You must set options before end of sync call of `ngOnInit`, if you set it later you have to disable auto initialization of grid and initialize it manualy\n */\n@Component(\n{\n    selector: 'ng-sync-data-loader',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncDataLoaderSAComponent<TData = unknown, TOrdering = unknown> extends DataLoaderAbstractComponent<SyncDataLoaderOptions<TData, TOrdering>, TOrdering, DataResponse<TData>> implements SyncDataLoader<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Current result of data loader\n     */\n    protected ɵresult: WritableSignal<DataResponse<TData>> = signal(\n    {\n        data: [],\n        totalCount: 0\n    });\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get result(): Signal<DataResponse<TData>>\n    {\n        return this.ɵresult.asReadonly();\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(DATA_LOADER_OPTIONS) @Optional() options?: SyncDataLoaderOptions<TData, TOrdering>)\n    {\n        super(defaultOptions as unknown as SyncDataLoaderOptions<TData, TOrdering>, options);\n    }\n\n    //######################### protected methodes - implements DataLoaderAbstractComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadGridData(force?: boolean): Promise<void>\n    {\n        if(!force && !this.checkChanges())\n        {\n            return;\n        }\n\n        let data = [...this.ɵoptions.data];\n\n        this.ɵstate.set((data && data.length) ? DataLoaderState.DataLoading : DataLoaderState.NoDataLoading);\n\n        if(this.ɵoptions.orderData)\n        {\n            data = this.ɵoptions.orderData(data, this.ordering?.ordering() ?? undefined);\n        }\n\n        const page = this.paging?.page() ?? 1;\n        const itemsPerPage = this.paging?.itemsPerPage() ?? 0;\n\n        data = await lastValueFrom(from(data)\n            .pipe(skip((page - 1) * (isNaN(itemsPerPage) ? 0 : itemsPerPage)),\n                  isNaN(itemsPerPage) ? ((source: Observable<TData>) => source) : take(itemsPerPage),\n                  toArray()));\n\n        this.ɵstate.set((data && data.length) ? DataLoaderState.Loaded : DataLoaderState.NoData);\n\n        this.ɵresult.set(\n        {\n            data: this.ɵoptions.accumulateData ? [...this.ɵresult().data, ...data] : data,\n            totalCount: this.ɵoptions.data.length\n        });\n    }\n}"],"names":["defaultOptions","initialItemsPerPage","NaN","initialPage","cssClasses","NoPagingSAComponent","PagingAbstractComponent","firstItemIndex","t","selectors","standalone","features","provide","DEFAULT_OPTIONS","useValue","patchOptions","options","_ref","grid","gridOptions","initOptions","lastValueFrom","pluginsOptionsInitialized","pipe","first","init","_x","apply","arguments","DataTableLayoutMetadataLoader","_asyncToGenerator","DataTableLayoutEditorMetadata","DataTableLayoutDesignerTypeLoader","_ref2","DataTableDesignerSAComponent","GridColumnsRelations","constructor","row","invalidateVisuals","__decorate","DynamicOutput","DebugData","outputs","nameof","GridColumnsRelationsHelper","injector","relations","this","componentManager","get","RelationsComponentManager","relationsProcessor","RelationsProcessor","id","DataTableSAComponent","columns","Error","componentId","register","dynamicOnChanges","changes","_this","destroy","destroyComponent","unregisterComponent","_this2","registerComponent","initialized","updateRelations","defaults","CssGridDefaultTemplatesSAComponent","gridContainerClass","headerContainerClass","contentContainerClass","footerContainerClass","headerRowContainerClass","contentRowContainerClass","footerRowContainerClass","SCOPE_IDENTIFIER","InjectionToken","ScopedMatrixContentRendererSAComponent","MatrixContentRendererSAComponent","injectors","relationsHelpers","renderContentRowsContainers","viewContainer","currentViewContainer","scopeIdentifier","generateId","data","dataLoader","result","dataLength","length","metadata","metadataSelector","destroyable","destroyableInjector","ngOnDestroy","destroyScope","datumIndex","datum","parentInjectorFn","parentInjector","optional","Injector","create","providers","useFactory","inject","skipSelf","openScope","SCOPE_ID","RelationsChangeDetector","LayoutRenderer","parent","relationsHelper","addSimpleChange","renderRowContainer","contentRowContainer","template","defaultsSafe","predicate","column","bodyTemplate","renderContentOrFooterCell","_","getGridDataRowContext","createInjector","additionalProviders","i0","CONTENT_RENDERER_CURRENT_VIEW_CONTAINER","attrs","decls","vars","consts","rf","ctx","DataTableSAComponent_For_5_div_1_ng_container_1_Template","col_r4","header","DataTableSAComponent_For_5_div_2_ng_container_1_Template","content","DataTableSAComponent_For_5_div_1_Template","DataTableSAComponent_For_5_div_2_Template","width","LayoutComponentBase","initializationStatus","paging","colsDef","autoInitialize","plugins","contentRenderer","type","gridSafe","dataLoaderCallback","item","itm","dataLoaderComponent","component","instance","setGridInstance","execute","pluginDescription","initializeGrid","pagingCallback","pagingComponent","onInit","optionsSafe","colDef","push","changeDetector","detectChanges","_this3","optionsOrForce","opts","plugin","SyncDataLoaderSAComponent","force","isBoolean","undefined","initialize","viewQuery","DataTableSAComponent_ng_container_0_Template","DataTableSAComponent_ng_container_1_Template","DataTableSAComponent_For_5_Template","MatrixGridModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","BindThis","DescendantsGetter","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","destroyed","ChangeDetectorRef","componentElement","ElementRef","logger","LOGGER","element","extensionsOptions","debug","ext","onDestroy","dynamicOnInit","onOptionsSet","extension","afterInit","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","_changes","DynamicItemExtensionBase","applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","arrReducer","arr","value","autoLoadData","accumulateData","debounceDataCallback","orderData","ordering","sort","a","b","orderBy","orderByDirection","OrderByDirection","Ascending","DataLoaderAbstractComponent","ɵresult","signal","totalCount","asReadonly","super","loadGridData","checkChanges","ɵoptions","ɵstate","set","DataLoaderState","DataLoading","NoDataLoading","page","itemsPerPage","from","skip","isNaN","source","take","operate","subscriber","accumulator","seed","scanInternals","reduce","subscribe","Loaded","NoData","DATA_LOADER_OPTIONS"],"sourceRoot":""}