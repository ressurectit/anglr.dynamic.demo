{"version":3,"file":"5563.chunk.7b863b77d72b38a28654.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCorePreview/dndCorePreview.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/type.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, ElementRef, EmbeddedViewRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentChange.subscribe(componentRef =>\n        {\n            if(!componentRef)\n            {\n                this.observer?.disconnect();\n\n                return;\n            }\n\n            const element = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n            this.updatedDimensions(element);\n\n            this.observer?.observe(element,\n            {\n                childList: true,\n            });\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        if((element.children.length && !this.active) ||\n           (!element.children.length && this.active) ||\n           !this.canDrop)\n        {\n            return;\n        }\n\n        //TODO: handle existing min width and min height\n\n        //deactivate, children are present\n        if(element.children.length)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = '';\n            }\n            else\n            {\n                element.style.minHeight = '';\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = '30px';\n            }\n            else\n            {\n                element.style.minHeight = '30px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        if(this.draggingSvc.dragging && this.isDropZone)\n        {\n            this.element.nativeElement.classList.add('drag-active');\n        }\n        else\n        {\n            this.element.nativeElement.classList.remove('drag-active');\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n        this.document.body.appendChild(this.element);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    styleUrls: ['layoutDesignerOverlayFor.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected _observer?: MutationObserver;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected _htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new MutationObserver(() => this._changeDetector.detectChanges());\n\n        //TODO: make this working\n        this._htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this._htmlElement)\n        {\n            this._observer?.observe(this._htmlElement, {attributeFilter: ['style']});\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"_htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"_htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"_htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"_htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"_htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"_htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"_htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"_htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"_htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"_htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"_htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"_htmlElement?.style?.borderRight\"></div>","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter} from '@angular/core';\nimport {nameof, isPresent, isString} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected _placement: PositionPlacement|null|undefined;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected _source!: HTMLElement;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement\n    {\n        return this._source;\n    }\n    public set source(value: HTMLElement)\n    {\n        if(value instanceof ElementRef)\n        {\n            this._source = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this._source = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|null|undefined\n    {\n        return this._placement;\n    }\n    public set placement(value: PositionPlacement|null|undefined)\n    {\n        if(isString(value))\n        {\n            this._placement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this._placement = value;\n    }\n\n    // //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected _target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected _position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected async _applyPosition(): Promise<void>\n    {\n        const options: Partial<PositionOptions> =\n        {\n        };\n\n        if(this._placement)\n        {\n            options.placement = this._placement;\n        }\n\n        const result = await this._position.placeElement(this._target.nativeElement,\n                                                         this._source,\n                                                         options).toPromise();\n\n        applyPositionResult(result);\n\n        if(result.flip)\n        {\n            this.flip.next();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `positionTo` input\n     */\n    public static ngAcceptInputType_positionTo: HTMLElement|ElementRef<HTMLElement>;\n}\n","import {InjectionToken} from '@angular/core';\n\nimport {DragPreviewRegistrator} from '../interfaces';\n\n/**\n * Injection token used for injecting drag preview registrator instance\n */\nexport const DRAG_PREVIEW_REGISTRATOR: InjectionToken<DragPreviewRegistrator> = new InjectionToken<DragPreviewRegistrator>('DRAG_PREVIEW_REGISTRATOR');\n","import {ContentChild, Directive, ElementRef, EventEmitter, ExistingProvider, forwardRef, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\nimport {DragPreviewRegistrator} from '../../interfaces';\nimport {DRAG_PREVIEW_REGISTRATOR} from '../../misc/tokens';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\n//TODO: go over all items up to find out whether can be dropped\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: DRAG_PREVIEW_REGISTRATOR,\n            useExisting: forwardRef(() => DndCoreDesignerDirective),\n        }\n    ]\n})\nexport class DndCoreDesignerDirective implements OnInit, OnDestroy, DragPreviewRegistrator\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n                                                                                                  \n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors()[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(!monitor.didDrop())\n                                                                                            {\n                                                                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                                                            }\n                                                                                            //dropped into drop zone\n                                                                                            else\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                        {\n                                                                                            canDrop: monitor => (this.canDrop || this.canDropAncestors()[0]) && monitor.isOver({shallow: true}),\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                                                                {\n                                                                                                    const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                    if(isBlank(index) || isBlank(parentId))\n                                                                                                    {\n                                                                                                        return;\n                                                                                                    }\n\n                                                                                                    this.bus.setDropPlaceholderPreview(\n                                                                                                    {\n                                                                                                        index,\n                                                                                                        parentId,\n                                                                                                        placeholder:\n                                                                                                        {\n                                                                                                            height: 0,\n                                                                                                            width: 0\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreDesigner')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.componentElement = null;\n\n                return;\n            }\n\n            this.componentElement = element;\n        }));\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => this.dropMetadata.emit(itm.data)));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.placeholderPreviewElement?.remove();\n                                           this.placeholderPreviewElement = null;\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(this.showPlaceholderPreview));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### public methods - implementation of DragPreviewRegistrator #########################\n\n    /**\n     * @inheritdoc\n     */\n    public registerPreviewElement(element: HTMLElement): Subscription\n    {\n        return this.drag.connectDragPreview(element, {offsetX: 0, offsetY: 0});\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors();\n        \n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n            \n            return position + half;\n        };\n\n        if(!this.componentElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n        \n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.componentElement.children.length; x++)\n        {\n            const child = this.componentElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.componentElement.insertBefore(this.placeholderPreviewElement, this.componentElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, NgZone, OnDestroy, OnInit, Optional, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragPreviewRegistrator} from '../../interfaces';\nimport {DRAG_PREVIEW_REGISTRATOR} from '../../misc/tokens';\n\n/**\n * Directive that marks attached element as html 5 drag preview\n */\n@Directive(\n{\n    selector: '[dndCorePreview]'\n})\nexport class DndCorePreviewDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created template\n     */\n    protected templateRef: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Html element representing contents of template\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Instance of connection to DOM for drag preview\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                protected ngZone: NgZone,\n                @Inject(DRAG_PREVIEW_REGISTRATOR) @Optional() protected dragPreviewRegistrator?: DragPreviewRegistrator,)\n    {\n        if(!this.dragPreviewRegistrator)\n        {\n            //TODO: write this error into documentation\n            throw new Error('Unable to use DndCorePreviewDirective, becuase there is no drag preview registrator!');\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.templateRef = this.viewContainer.createEmbeddedView(this.template);\n        this.element = this.templateRef.rootNodes[0];\n\n        if(this.element)\n        {\n            document.body.append(this.element);\n        }\n\n        this.ngZone.runOutsideAngular(() =>\n        {\n            if(this.element)\n            {\n                this.placeholderConnection = this.dragPreviewRegistrator?.registerPreviewElement(this.element);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n\n        this.templateRef?.destroy();\n        this.templateRef = null;\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n    }\n}","<div class=\"designer-overlay\" \n     #layoutDesigner\n     #dndCore=\"dndCoreDesigner\"\n     [dndCoreDesigner]=\"{metadata: renderedType, parentId: parent?.renderedType?.id, index: index}\"\n     [dropzoneElement]=\"layoutDropzone\"\n     [dragDisabled]=\"dragDisabled\"\n     [dragSource]=\"dndCore.drag\"\n     (dropMetadata)=\"addDescendant($event)\"\n     [copyDesignerStyles]=\"renderedType\"\n     (mouseleave)=\"hideOverlay($event)\"\n     (mouseover)=\"showOverlay($event)\"\n     (click)=\"selectComponent($event)\"\n     (dblclick)=\"unselectComponent($event)\">\n    <div class=\"designer-dropzone\"\n         #layoutDropzone\n         designerMinWidth\n         [canDrop]=\"canDrop\"\n         [horizontal]=\"parent?.horizontal ?? false\"\n         [dropTarget]=\"dndCore.dropzone\"\n         [isDropZone]=\"canDrop\">\n        <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder> -->\n        <layout-editor-drag-preview class=\"mat-elevation-z4\" *dndCorePreview [editorMetadata]=\"editorMetadata\" [layoutMetadata]=\"renderedType\"></layout-editor-drag-preview>\n        <ng-template #renderer=\"layoutComponentRenderer\" [layoutComponentRenderer]=\"renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n        <ng-container *ngIf=\"highlighted || selected\">\n            <div class=\"designer-overlay-border\"></div>\n            <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"renderer\"></div>\n\n            <div class=\"designer-overlay-title\"\n                 *bodyRender\n                 [positionTo]=\"layoutDesigner\"\n                 placement=\"TopStart\">{{editorMetadata?.metaInfo?.name ?? renderedType?.name}}</div>\n\n            <ng-container *ngIf=\"!!parent && parent.editorMetadata?.removeDescendant\">\n                <div *bodyRender\n                     class=\"designer-overlay-remove\"\n                     [positionTo]=\"layoutDesigner\"\n                     placement=\"TopEnd\"\n                     (click)=\"remove()\">\n                    <span class=\"fas fa-times\"></span>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Func, isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {BodyRenderSADirective, CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n//TODO: when new is clicked only after event new item can be dropped into \n//TODO: display overlay outside of component so overflow has no effect on it\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    styleUrls: ['layoutDesigner.component.css'],\n    standalone: true,\n    imports:\n    [\n        //TODO: cleanup\n        CommonModule,\n        PositionModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        LayoutComponentRendererSADirective,\n        DesignerDropzoneSADirective,\n        BodyRenderSADirective,\n        DndModule,\n        LayoutDndCoreModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Layout editor metadata\n     */\n    protected editorMetadata: LayoutEditorMetadataDescriptor<LayoutDesignerComponentOptions>|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCoreDesigner', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Gets predicate that returns indication whether item can be dropped into this list\n     * //TODO: remove\n     */\n    public canDropFn: Func<boolean> = () => this.canDrop;\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.options?.typeMetadata?.id ?? '';\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this._logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this.options?.typeMetadata.id});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    // public addDescendant(dragData: CdkDragDrop<LayoutComponentDragData, LayoutComponentDragData, LayoutComponentDragData>): void\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        const parentId = dragData.parentId;\n        this._logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.metadata?.id, parent: this.options.typeMetadata.id});\n\n        if(!dragData.metadata)\n        {\n            this._logger?.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this.history.disable();\n            this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata?.id);\n            this.history.enable();\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, this.options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n\n        this.renderedType = {...this.options.typeMetadata};\n        this._changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    protected removeDescendant(id: string): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this._logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this.options.typeMetadata.id, child: id});\n\n        this.editorMetadata?.removeDescendant?.(id, this.options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.renderedType = {...this.options.typeMetadata};\n        this._changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this._logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this._logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent || !this.options)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        await super._onInit();\n\n        if(!this.options)\n        {\n            return;\n        }\n\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(this.options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n\n        //TODO: optimize\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.selectedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(this.options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this.options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(this.options.typeMetadata.options) ?? false;\n    }\n}","import {LayoutDesignerSAComponent} from './layoutDesigner.component';\n\nexport default LayoutDesignerSAComponent;","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n"],"names":["PositionModule","DesignerMinDimensionSADirective","constructor","_element","active","initSubscriptions","Subscription","horizontal","canDrop","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","add","layoutComponentRendererDirective","componentChange","subscribe","componentRef","disconnect","element","hostView","rootNodes","observe","childList","ngOnDestroy","unsubscribe","children","length","item","classList","contains","style","minWidth","minHeight","i0","selectors","contentQueries","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","_metadataExtractor","metadata","_metadata","value","_copyDesignerStyles","applyDesignerStyles","extractMetadata","options","nativeElement","inputs","exportAs","standalone","DesignerDropzoneSADirective","draggingSvc","isDropZone","draggingChange","processDragValue","dragging","remove","BodyRenderSADirective","template","viewContainer","document","view","createEmbeddedView","body","appendChild","destroy","DOCUMENT","LayoutEditorDragPreviewSAComponent","editorMetadata","layoutMetadata","features","decls","vars","consts","LayoutDesignerOverlayForSAComponent","_changeDetector","_observer","detectChanges","_htmlElement","attributeFilter","attrs","PositionToDirective","_target","_position","flip","EventEmitter","source","_source","ElementRef","placement","_placement","isString","PositionPlacement","ngOnChanges","nameof","isPresent","_applyPosition","result","placeElement","toPromise","applyPositionResult","next","POSITION","DRAG_PREVIEW_REGISTRATOR","InjectionToken","DndCoreDesignerDirective","dnd","designerElement","manager","bus","zone","injector","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","dragData","id","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","dragDisabled","endDrag","didDrop","dropResult","getDropResult","setDropData","data","dropzone","dropMetadata","connectDropToContainer","Error","getComponent","dropzoneElement","componentElementChange","componentElement","dropDataChange","pipe","filter","itm","emit","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","showPlaceholderPreview","placeholderConnection","containerConnection","registerPreviewElement","connectDragPreview","offsetX","offsetY","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","offset","getClientOffset","position","child","usedIndex","preview","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","component","getComponentDef","parent","provide","useExisting","forwardRef","__decorate","BindThis","DndCorePreviewDirective","ngZone","dragPreviewRegistrator","templateRef","append","ctx_r3","LayoutDesignerSAComponent","LayoutComponentBase","changeDetector","metadataExtractor","layoutEditorMetadataManager","iteratorSvc","history","logger","super","canDropFn","selected","selectedComponent","typeMetadata","highlighted","highlightedComponent","extensionsOptions","metaInfo","_logger","debug","unregisterLayoutDesignerComponent","addDescendant","disable","removeDescendant","enable","canDropMetadata","renderedType","markForCheck","getNewState","warn","showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","_onInit","getChildrenIteratorFor","selectedChange","highlightedChange","registerLayoutDesignerComponent","_onOptionsSet","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","LOGGER","viewQuery","ctx","_r2","_r1","CommonModule","i2","i3","DndModule","i4","LayoutDndCoreModule","i5","styles","changeDetection","_injector","_extensions","_initialized","destroyed","ext","_onDestroy","extension","initialize","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","Object","assign","top","left","transform"],"sourceRoot":""}