{"version":3,"file":"4.chunk.7901e91f4e56bd992d28.js","mappings":"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","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.html","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/metadata/dataTemplate.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {HandlebarsLanguageModel, CodeEditorDialogData, CodeEditorDialogComponent, CodeEditorContent} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {DataTemplateRelationsOptions} from '../dataTemplate.options';\n\n/**\n * Relations node component for data template\n */\n@Component(\n{\n    selector: 'data-template-node',\n    templateUrl: 'dataTemplateNode.component.html',\n    // styleUrls: ['dataTemplateNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTemplateNodeSAComponent extends RelationsNodeBase<DataTemplateRelationsOptions> implements RelationsNode<DataTemplateRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.relationsOptions?.template ?? '',\n                languageModel: HandlebarsLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.template = result.content;\n                this.history.getNewState();\n            }\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"data template\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"template\" [parent]=\"this\"></relation-node-input>\n                <div>template</div>\n            </div>\n            \n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n                <div>data</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>output</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"output\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" (click)=\"showCodeEditor()\">\n        <span>template</span>\n    </button>\n</div>\n","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DataTemplateNodeSAComponent} from '../node/dataTemplateNode.component';\n\n/**\n * Data template relations metadata\n */\nexport class DataTemplateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Data template',\n        description: 'Renders data into template',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DataTemplateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-margin-top-extra-small\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>ok</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}"],"names":["DataTemplateNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","metadata","relationsOptions","template","languageModel","HandlebarsLanguageModel","afterClosed","isPresent","history","getNewState","i0","selectors","standalone","features","decls","vars","consts","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","DataTemplateRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","noSemanticValidation","noSyntaxValidation","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","initialData","language","Uri","extension","setModel","inputs","outputs","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","LanguageModel","getModel","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector"],"sourceRoot":""}