{"version":3,"file":"1197.chunk.6ef785affc3e19821267.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/radio/radio.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/radio/radio.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/radio/radio.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/radio/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {RadioComponentOptions} from './radio.options';\n\n/**\n * Radio layout metadata loader\n */\nexport const RadioLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<RadioComponentOptions>> = async () => new (await import('./metadata/radio.layoutMetadata')).RadioLayoutEditorMetadata();\n\n/**\n * Radio relations metadata loader\n */\nexport const RadioRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/radio.relationsMetadata')).RadioRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {RadioLayoutMetadataLoader, RadioRelationsMetadataLoader} from './radio.metadata';\nimport {RadioComponentOptions} from './radio.options';\n\n/**\n * Component used for displaying radio\n */\n@Component(\n{\n    selector: 'form-radio',\n    templateUrl: 'radio.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n    ]\n})\n@RelationsEditorMetadata(RadioRelationsMetadataLoader)\n@LayoutEditorMetadata(RadioLayoutMetadataLoader)\nexport class RadioSAComponent extends FormComponentBase<RadioComponentOptions> implements FormComponent<RadioComponentOptions>\n{}","<label><input type=\"radio\" [formControl]=\"control|asFormControl|asRequired\" [name]=\"'1'\" [value]=\"1\"/> {{options?.options}}</label>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {RadioSAComponent} from './radio.component';\n\n\nexport default RadioSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","control","FormControl","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","RadioLayoutMetadataLoader","RadioLayoutEditorMetadata","RadioRelationsMetadataLoader","RadioRelationsEditorMetadata","RadioSAComponent","t","selectors","standalone","decls","vars","consts","template","FormPipesModule","i1","CastPipesModule","i2","ReactiveFormsModule","i3","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","InjectionToken","metadataLoader","DynamicClassMetadata","changeDetector","componentElement","injector","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","AsFormControlPipe","transform","_valueHash","isBlank"],"sourceRoot":""}