{"version":3,"file":"7141.chunk.e8345f8ac7044080aa74.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\nconst DRAG_DROP_DIRECTIVES = [\n  CdkDropList,\n  CdkDropListGroup,\n  CdkDrag,\n  CdkDragHandle,\n  CdkDragPreview,\n  CdkDragPlaceholder,\n];\n\n@NgModule({\n  imports: DRAG_DROP_DIRECTIVES,\n  exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     * @param scope - Current scope that is being used\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined, scope: string|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? value.itemSource.name : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: singleton ? value.metadata.displayName || value.itemSource.name : undefined,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                scope,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    scopeConfigurable: !singleton ?? false,\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            },\n        };\n    }\n}","<div class=\"editor-component-name\">{{data.metadata.singleton ? (data.metadata.displayName || data.itemSource.name) : (data.metadata.metaInfo?.name ?? data.itemSource.name)}}</div>\n<div class=\"editor-component-description\" *ngIf=\"data.metadata.metaInfo?.description\">{{data.metadata.metaInfo?.description}}</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input, HostBinding, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag} from '@angular/cdk/drag-drop';\nimport {PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNodeManager} from '../../../services';\nimport {NodesPaletteItem} from '../nodesPalette.interface';\n\n/**\n * Component displaying nodes palette item\n */\n@Component(\n{\n    selector: 'nodes-palette-item',\n    templateUrl: 'nodesPaletteItem.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether node is already used\n     */\n    @HostBinding('class.used')\n    protected used: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Nodes palette item\n     */\n    @Input()\n    public data!: NodesPaletteItem;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Optional() protected _cdkDrag: CdkDrag,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        for (const nodeId in this._metadataManager.nodes)\n        {\n            if (this.data?.itemSource?.name === nodeId)\n            {\n                this._setUsed(true);\n                break;\n            }\n        }\n\n        //TODO initsubscription add used change\n        this.initSubscriptions.add(this._metadataManager.nodeRegisterChange.subscribe(registeredNode => \n        {\n            if (registeredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(true);\n            }\n        }));\n        this.initSubscriptions.add(this._metadataManager.nodeUnregisterChange.subscribe(unregisteredNode => \n        {\n            if (unregisteredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(false);\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets used indication for node\n     * @param used \n     */\n    protected _setUsed(used: boolean): void\n    {\n        this.used = used;\n\n        if (this._cdkDrag)\n        {\n            this._cdkDrag.disabled = used;\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Focus to relations node\n     * @param item \n     * @returns \n     */\n    @HostListener('dblclick')\n    protected focusNode(): void\n    {\n        if (!this.used ||\n            !this.data?.metadata?.singleton)\n        {\n            return;\n        }\n\n        this._metadataManager.setActiveNode(this.data?.itemSource?.name);\n    }\n}","<div class=\"dynamic-flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"dynamic-text-spread dynamic-text-small-caps dynamic-margin-left-extra-small dynamic-margin-horizontal-small dynamic-bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <nodes-palette-item [data]=\"item\"\n                                class=\"editor-component mat-elevation-z2\"\n                                cdkDrag\n                                [cdkDragData]=\"item | toRelationsDragData: newCompnentId: item.metadata.singleton: item.metadata.scope\"\n                                (cdkDragDropped)=\"generateNewId()\"></nodes-palette-item>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DebounceCall, Dictionary, generateId, WithSync} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\nimport {NodesPaletteItemSAComponent} from './item/nodesPaletteItem.component';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n        NodesPaletteItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.loadNodes()));\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async loadNodes(): Promise<void>\n    {\n        this.allItems = [];\n        this.groupedItems = {};\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected generateNewId(): void\n    {\n        this.newCompnentId = generateId(16);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnInit, Inject, ChangeDetectorRef, OnChanges, SimpleChanges, ViewChild, Optional} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n        PackageManagerModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relation canvas\n     */\n    @ViewChild(RelationsCanvasSAComponent)\n    protected relationCanvas: RelationsCanvasSAComponent|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {        \n        if (event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            const coordinates = this.relationCanvas?.getPositionInCanvas(event.dropPoint);\n\n            if(coordinates)\n            {\n                event.item.data.metadata.nodeMetadata.coordinates.x = coordinates.x;\n                event.item.data.metadata.nodeMetadata.coordinates.y = coordinates.y;\n            }\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n\n        this.history.getNewState();\n    }\n}","<div class=\"dynamic-flex-row dynamic-flex-1\">\n    <div class=\"overflow-vertical-scroll dynamic-thin-scrollbar\">\n        <package-manager></package-manager>\n        <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    </div>\n\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"dynamic-flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","<div class=\"dynamic-flex-row\">\n    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"dynamic-flex-row\">\n        <select class=\"dynamic-form-control dynamic-flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"dynamic-flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","NodeRelationPath","destroying","this","_destroyingSubject","asObservable","_parentGroup","_relationManager","history","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","width","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","isPresent","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","error","Ignore","ThrowError","Error","createComponent","data","injector","node","subscribe","metadata","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","i0","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","element","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","height","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","ctx","CommonModule","encapsulation","changeDetection","CdkDropList","CdkDropListGroup","CdkDrag","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","DragDropModule","DragDrop","CdkScrollableModule","ToRelationsDragDataSAPipe","transform","value","singleton","scope","itemSource","displayName","undefined","relationsOptions","extend","metaInfo","defaultOptions","scopeConfigurable","pure","NodesPaletteItemSAComponent","packageManager","_metadataManager","_cdkDrag","_logger","initSubscriptions","used","nodeId","nodes","_setUsed","nodeRegisterChange","registeredNode","nodeUnregisterChange","unregisteredNode","disabled","setActiveNode","hostVars","hostBindings","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_refreshObservables","allItems","groupedItems","newCompnentId","generateId","isDragOverPalette","Array","isArray","obs","loadNodes","usedPackagesChange","packageName","usedPackages","types","type","push","item","group","generateNewId","RELATIONS_MODULE_TYPES_LOADER","REFRESH_PALETTE_OBSERVABLES","canvasDropList","decls","vars","consts","template","__decorate","DebounceCall","WithSync","RelationsEditorSAComponent","changeDetector","hotkeys","init","pop","undo","redo","clean","setInitialState","addNode","relationCanvas","dropPoint","PackageManagerModule","styles","DynamicRelationsEditorModule","static","ngModule","providers","provideRelationsEditor","staticRegister","provideRelationsEditorWithStatic","PackageManagerComponent","detailVisible","availablePackages","updatedAvailablePackages","addPackage","setUsedPackages","removePackage","filter","itm","packages","it","ReactiveFormsModule","packagesChange","packagesChangeSubject","result","source","packageSources","_usedPackages","usedPackagesSubject","storageName","store","inject","PERMANENT_STORAGE","PACKAGE_SOURCES","get","set","refresh"],"sourceRoot":""}