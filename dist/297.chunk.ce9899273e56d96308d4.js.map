{"version":3,"file":"297.chunk.ce9899273e56d96308d4.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/directives/componentTreeNodeTemplate/componentTreeNodeTemplate.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../src/services/dynamicModuleTypesLoader/dynamicModuleTypesLoader.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/./app/services/layoutData/layoutData.service.ts","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts"],"sourcesContent":["import {Directive, TemplateRef} from '@angular/core';\n\nimport {ComponentTreeNodeTemplateContext} from './componentTreeNodeTemplate.context';\n\n/**\n * Directive that serves as template for component tree node\n */\n@Directive(\n{\n    selector: '[treeNodeTemplate]',\n    exportAs: 'treeNodeTemplate',\n    standalone: true,\n})\nexport class ComponentTreeNodeTemplateSADirective\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<ComponentTreeNodeTemplateContext>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: ComponentTreeNodeTemplateSADirective, _ctx: unknown): _ctx is ComponentTreeNodeTemplateContext\n    {\n        return true;\n    }\n}","<button mat-icon-button aria-label=\"Collapse all\">\n    <span class=\"fa fa-minus-square\"></span>\n</button>\n<button mat-icon-button aria-label=\"Expand all\">\n    <span class=\"fa fa-plus-square\"></span>\n</button>\n\n<div class=\"component-tree\" *ngIf=\"root\">\n    <ng-container *ngTemplateOutlet=\"components.template; context: { $implicit: root }\"></ng-container>\n</div>\n\n<!-- Tree node template -->\n<ng-template #components=\"treeNodeTemplate\"\n             treeNodeTemplate\n             let-item>\n    <div \n        [ngClass]=\"hasChild(item) ? 'nested-node-tree' : 'node-tree'\"\n        [class.selected]=\"item.component.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"item.component.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, item.component.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(item.component.options?.typeMetadata?.id)\">{{item.component.options?.typeMetadata?.displayName || item.component.options?.typeMetadata?.id}}</div>\n\n    <div class=\"node-children\" \n         cdkDropList\n         (cdkDropListDropped)=\"item.component.addDescendant($event)\"\n         [cdkDropListEnterPredicate]=\"item.component.canDrop\"\n         [id]=\"'component-tree-' + item.component.options?.typeMetadata?.id\"\n         *ngIf=\"hasChild(item) || item.component.canDrop()\"\n         connectDropLists\n         connectDropListsPrefix=\"component-tree-\">\n        <div \n            *ngFor=\"let child of item.children\"\n            cdkDrag \n            [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n            [cdkDragDisabled]=\"child.component.dragDisabled\">\n            <ng-container *ngTemplateOutlet=\"components.template; context: {$implicit: child}\"></ng-container>\n        </div>\n    </div>\n</ng-template>\n\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_MODULE_TYPES_PROVIDER} from '../../misc/tokens';\nimport {DynamicModule, DynamicModuleDataExtractor} from '../../interfaces';\nimport {DynamicModuleTypesProvider} from './dynamicModuleTypesLoader.interface';\n\n/**\n * Service used for loading dynamic module types\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicModuleTypesLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic module types\n     */\n    protected _cachedDynamicModuleTypes: Dictionary<string[]> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_MODULE_TYPES_PROVIDER) protected _providers: DynamicModuleTypesProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<string[]>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicModuleTypesLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicModuleTypesLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic module types, or null if not found\n     * @param moduleName - Name of module containing dynamic types\n     */\n    public async loadTypes(moduleName: string): Promise<string[]|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n\n        //try to get from cache\n        if(this._cachedDynamicModuleTypes[moduleName])\n        {\n            this._logger?.verbose('DynamicModuleTypesLoader: Loading from cache {@source}', {moduleName});\n\n            return this._cachedDynamicModuleTypes[moduleName];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(moduleName);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicModuleTypesLoader: Failed to get dynamic module {@source}', {moduleName});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicModuleTypes = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicModuleTypes)\n            {\n                this._cachedDynamicModuleTypes[moduleName] = dynamicModuleTypes;\n\n                return dynamicModuleTypes;\n            }\n        }\n\n        this._logger?.debug('DynamicModuleTypesLoader: Failed to extract dynamic module types {@source}', {moduleName});\n\n        return null;\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             (cdkDropListEntered)=\"_onDropListEntered()\"\n             (cdkDropListExited)=\"_onDropListExited()\"\n             [cdkDropListConnectedTo]=\"_designerDropLists\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" [class.hidden]=\"_isDragOverPalette\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemSource, DynamicModuleTypesLoader} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _moduleTypesLoader: DynamicModuleTypesLoader,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        this._getDesignerDropLists();\n\n        const types = (await this._moduleTypesLoader.loadTypes('basic-components')) ?? [];\n\n        for(const type of types)\n        {\n            const itemSource: DynamicItemSource = {package: 'basic-components', name: type};\n            const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n\n            if(!metadata)\n            {\n                this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n            }\n            else\n            {\n                this._allItems.push(\n                {\n                    itemSource,\n                    metadata\n                });\n            }\n        }\n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        this._isDragOverPalette = true;\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    /**\n     * Handles action when dragged element enters palette droplist\n     */\n    protected _onDropListEntered(): void\n    {\n        this._isDragOverPalette = true;\n    }\n\n    /**\n     * Handles action when dragged element exits palette droplist\n     */\n    protected _onDropListExited(): void\n    {\n        this._isDragOverPalette = false;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {DynamicItemSource} from '@anglr/dynamic';\nimport {resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Defines dynamic item source which properties are edited\n     */\n    @Input()\n    public itemSource: DynamicItemSource|undefined;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.itemSource = this.itemSource;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"_visible\" class=\"properties-main\">\n    <div class=\"header\">Properties <span class=\"bold\">{{_metadata?.metaInfo?.name ?? _component?.options?.typeMetadata?.name}} - {{_component?.options?.typeMetadata?.id}}</span></div>\n\n    <div class=\"form-group\">\n        <label class=\"control-label\">Display name</label>\n        <input class=\"form-control\" type=\"text\" [formControl]=\"_displayName\">\n    </div>\n\n    <ng-container *ngFor=\"let propertiesCtrl of _metadata?.metaInfo?.optionsMetadata?.propertiesControls\">\n        <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"_optionsForm\" [itemSource]=\"_component?.options?.typeMetadata\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected _optionsFormSubscription: Subscription|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected _visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected _component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected _metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected _displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Form group for options modifications\n     */\n    protected _optionsForm: FormGroup|undefined = undefined;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _formModelBuilder: FormModelBuilder,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => this._initProperties()));\n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => this._initProperties()));\n\n        this._displayName\n            .valueChanges\n            .subscribe(displayName =>\n            {\n                if(this._component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this._component.options.typeMetadata.displayName = displayName;\n\n                    // eslint-disable-next-line no-self-assign\n                    this._component.options = this._component.options;\n                    this._manager.displayNameUpdated();\n                }\n            });\n\n        this._initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    protected async _initProperties(): Promise<void>\n    {\n        if(isPresent(this._manager.selectedComponent))\n        {\n            this._visible = true;\n            const component = this._manager.getComponent(this._manager.selectedComponent);\n\n            if(component)\n            {\n                this._visible = true;\n                this._component = component;\n\n                await this._getMetadata();\n            }\n            else\n            {\n                this._hide();\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async _getMetadata(): Promise<void>\n    {\n        if(this._component?.options?.typeMetadata)\n        {\n            this._displayName.setValue(this._component.options.typeMetadata.displayName || this._component.options.typeMetadata.id, {emitEvent: false});\n\n            this._metadata = await this._metadataExtractor.extractMetadata(this._component.options?.typeMetadata);\n\n            if(!this._metadata)\n            {\n                this._logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this._component.options?.typeMetadata.package, name: this._component.options?.typeMetadata.name});\n\n                this._hide();\n            }\n\n            //model type is present\n            if(this._metadata?.metaInfo?.optionsMetadata?.modelType)\n            {\n                this._optionsForm = this._formModelBuilder.build(new this._metadata.metaInfo.optionsMetadata.modelType(this._component?.options?.typeMetadata.options));\n\n                this._optionsFormSubscription?.unsubscribe();\n                this._optionsFormSubscription = this._optionsForm.valueChanges.subscribe(data =>\n                {\n                    if(this._component?.options?.typeMetadata)\n                    {\n                        extend(true, this._component.options.typeMetadata.options, data);\n\n                        // eslint-disable-next-line no-self-assign\n                        this._component.options = this._component.options;\n                        this._component.invalidateVisuals();\n                    }\n                });\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected _hide(): void\n    {\n        this._visible = false;\n        this._component = null;\n        this._metadata = null;\n        this._optionsForm = undefined;\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n        this._changeDetector.detectChanges();\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nconst DATA = 'LAYOUT_DATA';\n\n/**\n * Service used for obtaining and storing layout data\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutDataService\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    public setLayoutData(name: string, data: LayoutComponentMetadata): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(DATA, store);\n    }\n\n    public getLayoutData(name: string): LayoutComponentMetadata|null\n    {\n        return (this._storage.get(DATA)?.[name]) ?? null;\n    }\n\n    public removeLayoutData(name: string): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        delete store[name];\n\n        this._storage.set(DATA, store);\n    }\n\n    public getStoredLayouts(): string[]\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        return Object.keys(store);\n    }\n}","<div class=\"flex-row\">\r\n    <ng-select [formControl]=\"_available\" style=\"width: 180px\">\r\n        <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\r\n        <span>remove</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\r\n        <span>load</span>\r\n    </button>\r\n\r\n    <input type=\"text\" [formControl]=\"_name\">\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\r\n        <span>save</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\r\n        <span>new</span>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <mat-tab-group>\r\n        <mat-tab label=\"Hierarchy\">\r\n            <components-tree></components-tree>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"Palette\">\r\n            <components-palette></components-palette>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n      \r\n    <div class=\"flex-1\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n\r\n    <properties-editor></properties-editor>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager, LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout-editor';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {generateId} from '@jscrpt/common';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n    \n    protected _available: FormControl = new FormControl('');\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _manager: LayoutEditorMetadataManager,\n                private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStoredLayouts();\n        \n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata =\n                {\n                    id: `stackPanel-${generateId(10)}`,\n                    package: 'basic-components',\n                    name: 'stackPanel',\n                    options: <StackPanelComponentOptions>\n                    {\n                        children: [],\n                    },\n                };\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this._store.getLayoutData(this._available.value);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this._store.getLayoutData(this._available.value);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate(['/editor', this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this._store.setLayoutData(this._name.value, this._manager.getMetadata());\n\n        this._availableNames = this._store.getStoredLayouts();\n        this._router.navigate(['/editor', this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _delete(): void\n    {\n        this._store.removeLayoutData(this._available.value);\n\n        this._availableNames = this._store.getStoredLayouts();\n        this._router.navigate(['/editor'], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata =\n        {\n            id: `stackPanel-${generateId(10)}`,\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate(['/editor'], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    // /**\n    //  * Gets metadata for current metadata manager\n    //  */\n    // protected getMetadata(): void\n    // {\n        \n    //     console.log(this._manager.root);\n    //     console.log(this._manager.flatTree);\n    //     console.log(this._manager.flatTree.map(itm => itm.component.options.typeMetadata.id));\n    // }\n}\n","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'preview')\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStoredLayouts();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getLayoutData(id);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {EditorComponent} from './editor/editor.component';\nimport {PreviewComponent} from './preview/preview.component';\n\nexport const components =\n[\n    EditorComponent,\n    PreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {LayoutComponentRendererSADirective, ComponentStylingSADirective} from '@anglr/dynamic/layout';\nimport {ComponentsPaletteSAComponent, ComponentsTreeSAComponent, PropertiesEditorSAComponent} from '@anglr/dynamic/layout-editor';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule,\n        LayoutComponentRendererSADirective,\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        ComponentStylingSADirective,\n        MatTabsModule,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}"],"names":["ComponentTreeNodeTemplateSADirective","constructor","template","_dir","_ctx","i0","selectors","exportAs","standalone","child_r7","ComponentsTreeSAComponent","_manager","_changeDetector","_initSubscriptions","Subscription","ngOnInit","this","add","layoutChange","subscribe","root","detectChanges","selectedChange","highlightedChange","displayNameChange","ngOnDestroy","unsubscribe","highlight","event","id","preventDefault","stopPropagation","highlightComponent","hasChild","node","children","length","_cancelHighlight","cancelHighlightedComponent","hostBindings","ctx","CommonModule","i2","MatButtonModule","i3","DragDropModule","i4","ConnectDropListsSADirective","styles","changeDetection","ToLayoutDragDataSAPipe","transform","value","newId","itemSource","name","metadata","displayName","package","options","extend","metaInfo","defaultOptions","parentId","pure","DynamicModuleTypesLoader","_providers","_extractors","_logger","_cachedDynamicModuleTypes","Array","isArray","error","loadTypes","moduleName","dynamicModule","verbose","provider","asyncDynamicModule","tryToGet","resolvePromiseOr","debug","extractor","dynamicModuleTypes","tryToExtract","DYNAMIC_MODULE_TYPES_PROVIDER","DYNAMIC_MODULE_DATA_EXTRACTORS","LOGGER","factory","providedIn","ComponentsPaletteSAComponent","_moduleTypesLoader","_metadataExtractor","_metadataManager","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","_getDesignerDropLists","types","type","extractMetadata","push","warn","item","group","_a","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","currentIdx","source","dropContainer","getSortedItems","findIndex","data","splice","_onDropListEntered","_onDropListExited","flatTree","map","itm","component","reverse","features","decls","vars","consts","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","ngOnChanges","clear","injector","createComponent","instance","form","initialize","invalidateVisuals","destroy","ctx_r1","inputs","PropertiesEditorSAComponent","_formModelBuilder","_optionsFormSubscription","_visible","_component","_metadata","_displayName","FormControl","_optionsForm","undefined","_initProperties","valueChanges","typeMetadata","displayNameUpdated","selectedComponent","getComponent","_getMetadata","_hide","setValue","emitEvent","optionsMetadata","modelType","build","FormModelBuilder","ReactiveFormsModule","i5","DATA","LayoutDataService","_storage","setLayoutData","store","get","set","getLayoutData","removeLayoutData","getStoredLayouts","Object","keys","PERMANENT_STORAGE","val_r1","EditorComponent","_store","_router","_route","_available","_name","_availableNames","params","_load","navigate","skipLocationChange","replaceUrl","_save","getMetadata","_delete","_new","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LayoutEditorMetadataManager","ComponentRoute","path","Router","ActivatedRoute","PreviewComponent","val","ComponentRedirectRoute","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","MatTabsModule","ModuleRoutes","CastPipesModule","NumberInputModule"],"sourceRoot":""}