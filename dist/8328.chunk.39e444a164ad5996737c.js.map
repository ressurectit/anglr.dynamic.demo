{"version":3,"file":"8328.chunk.39e444a164ad5996737c.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/basicPaging/basicPaging.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/basicPaging/basicPaging.component.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/basicPaging/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {BasicPagingComponentOptions} from './basicPaging.options';\n\n/**\n * Basic paging layout metadata loader\n */\nexport const BasicPagingLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<BasicPagingComponentOptions>> = async () => new (await import('./metadata/basicPaging.layoutMetadata')).BasicPagingLayoutEditorMetadata();\n\n/**\n * Basic paging layout designer type loader\n */\nexport const BasicPagingLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/basicPagingDesigner.component')).BasicPagingDesignerSAComponent;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, PluginDescription, BasicPagingSAComponent as GridBasicPaging, BasicPagingOptions} from '@anglr/grid';\nimport {RecursivePartial} from '@jscrpt/common';\n\nimport {BasicPagingComponentOptions} from './basicPaging.options';\nimport {BasicPagingLayoutDesignerTypeLoader, BasicPagingLayoutMetadataLoader} from './basicPaging.metadata';\nimport {GridPluginComponent} from '../../interfaces';\n\n/**\n * Component used for displaying basic paging\n */\n@Component(\n{\n    selector: 'basic-paging',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(BasicPagingLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(BasicPagingLayoutMetadataLoader)\nexport class BasicPagingSAComponent extends LayoutComponentBase<BasicPagingComponentOptions> implements GridPluginComponent<GridBasicPaging, BasicPagingComponentOptions, BasicPagingOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of grid\n     */\n    protected grid: Grid|undefined|null;\n\n    //######################### public properties - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Description of plugin that will be used in grid\n     */\n    public pluginDescription: PluginDescription<GridBasicPaging, RecursivePartial<BasicPagingOptions>> =\n    {\n        instance: null,\n        instanceCallback: null,\n        options:\n        {\n            initialItemsPerPage: 15,\n            initialPage: 1,\n            itemsPerPageValues: [15, 30, 60],\n        },\n        type: GridBasicPaging,\n    };\n\n    //######################### public methods - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Sets grid instance to this type\n     * @param grid - Instance of grid\n     */\n    public setGridInstance(grid: Grid): void\n    {\n        this.grid = grid;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(this.pluginDescription.options)\n        {\n            this.pluginDescription.options.initialItemsPerPage = this.optionsSafe.initialItemsPerPage ?? 15;\n        }\n    }\n}","import {BasicPagingSAComponent} from './basicPaging.component';\n\nexport default BasicPagingSAComponent;\n","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["BasicPagingLayoutMetadataLoader","_ref","_asyncToGenerator","BasicPagingLayoutEditorMetadata","apply","arguments","BasicPagingLayoutDesignerTypeLoader","_ref2","BasicPagingDesignerSAComponent","BasicPagingSAComponent","LayoutComponentBase","constructor","pluginDescription","instance","instanceCallback","options","initialItemsPerPage","initialPage","itemsPerPageValues","type","GridBasicPaging","setGridInstance","grid","this","onOptionsSet","optionsSafe","t","selectors","standalone","features","i0","decls","vars","template","rf","ctx","styles","changeDetection","__decorate","LayoutEditorDesignerType","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes"],"sourceRoot":""}