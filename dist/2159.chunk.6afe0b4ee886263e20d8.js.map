{"version":3,"file":"2159.chunk.6afe0b4ee886263e20d8.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../math-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../grid-components/src/services/gridDynamicModuleItemsProvider/gridDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../grid-components/src/services/gridDynamicModuleTypesProvider/gridDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../grid-components/src/services/gridDynamicModuleRelationsProvider/gridDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../grid-components/src/misc/providers.ts","webpack://ng-universal-demo/../grid-components/src/misc/utils.ts","webpack://ng-universal-demo/./app/services/demoCustomComponentsRegister/demoCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/demoDefaultsOverride/demoLayoutDefaultsOverride.service.ts","webpack://ng-universal-demo/./app/services/demoDefaultsOverride/demoRelationsDefaultsOverride.service.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/layout/layout.component.html","webpack://ng-universal-demo/../math-components/src/services/mathDynamicModuleItemsProvider/mathDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../math-components/src/services/mathDynamicModuleTypesProvider/mathDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../math-components/src/services/mathDynamicModuleRelationsProvider/mathDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../math-components/src/misc/providers.ts","webpack://ng-universal-demo/../math-components/src/misc/utils.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/staticInput.metadata.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/staticInput.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/staticInput.component.html","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticOutput/staticOutput.metadata.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticOutput/staticOutput.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticOutput/staticOutput.component.html","webpack://ng-universal-demo/../relations-debugger/src/directives/showRelationsDebugger/showRelationsDebugger.directive.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+relationsComplex/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/services/complexStaticRegister/complexStaticRegister.service.ts","webpack://ng-universal-demo/./app/services/demoCustomRelationsRegister/demoCustomRelationsRegister.service.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsComplex/relationsComplex.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/relationsComplex.module.ts","webpack://ng-universal-demo/../rest-components/src/services/restDynamicModuleRelationsProvider/restDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../rest-components/src/services/restDynamicModuleItemsProvider/restDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../rest-components/src/misc/providers.ts","webpack://ng-universal-demo/../rest-components/src/misc/utils.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["var map = {\n\t\"./asyncDataLoader/type\": [\n\t\t13619,\n\t\t3619\n\t],\n\t\"./basicPaging/type\": [\n\t\t68328,\n\t\t8328\n\t],\n\t\"./dataLoader/type\": [\n\t\t98699,\n\t\t8699\n\t],\n\t\"./dataTable/type\": [\n\t\t17618,\n\t\t8258,\n\t\t7618\n\t],\n\t\"./gridColumn/type\": [\n\t\t95227,\n\t\t5227\n\t],\n\t\"./gridColumnContent/type\": [\n\t\t51748,\n\t\t1748\n\t],\n\t\"./gridColumnHeader/type\": [\n\t\t70453,\n\t\t453\n\t],\n\t\"./gridColumns/type\": [\n\t\t59050,\n\t\t8258,\n\t\t9050\n\t],\n\t\"./paging/type\": [\n\t\t65657,\n\t\t5657\n\t],\n\t\"./previousNextPaging/type\": [\n\t\t82296,\n\t\t2296\n\t],\n\t\"./syncDataLoader/type\": [\n\t\t51050,\n\t\t1050\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 69287;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./add/type\": [\n\t\t66872,\n\t\t2840,\n\t\t6872\n\t],\n\t\"./divide/type\": [\n\t\t64541,\n\t\t2840,\n\t\t4541\n\t],\n\t\"./multiply/type\": [\n\t\t81552,\n\t\t2840,\n\t\t1552\n\t],\n\t\"./power/type\": [\n\t\t12539,\n\t\t2840,\n\t\t2539\n\t],\n\t\"./round/type\": [\n\t\t94248,\n\t\t2840,\n\t\t6014\n\t],\n\t\"./subtract/type\": [\n\t\t14791,\n\t\t2840,\n\t\t4791\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 95554;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for grid module items\n */\n@Injectable()\nexport class GridDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) protected logger: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'grid-components':\n            {\n                try\n                {\n                    this.logger.debug('GridDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this.logger.debug('GridDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item:{name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for grid types\n */\n@Injectable()\nexport class GridDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) protected logger: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this.logger.debug('GridDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'grid-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this.logger.debug('GridDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for grid types\n */\n@Injectable()\nexport class GridDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) protected logger: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this.logger.debug('GridDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'grid-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this.logger.debug('GridDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {GridDynamicModuleItemsProvider, GridDynamicModuleRelationsProvider, GridDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for grid package layout components provider\n */\nexport const GRID_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: GridDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for grid dynamic layout module types provider\n */\nexport const GRID_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: GridDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for grid dynamic relations types provider\n */\nexport const GRID_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: GridDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for grid package relations nodes provider\n */\nexport const GRID_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: GridDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for grid package relations components provider\n */\nexport const GRID_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: GridDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {GRID_LAYOUT_COMPONENTS_PROVIDER, GRID_LAYOUT_MODULE_TYPES_PROVIDER, GRID_RELATIONS_COMPONENTS_PROVIDER, GRID_RELATIONS_MODULE_TYPES_PROVIDER, GRID_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout grid subpackage\n */\nexport function provideGridLayout(): Provider[]\n{\n    return [\n        GRID_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations grid subpackage\n */\nexport function provideGridRelations(): Provider[]\n{\n    return [\n        GRID_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor grid subpackage\n */\nexport function provideGridLayoutEditor(): Provider[]\n{\n    return [\n        GRID_LAYOUT_COMPONENTS_PROVIDER,\n        GRID_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('grid-components'),\n    ];\n}\n\n/**\n * Providers for relations editor grid subpackage\n */\nexport function provideGridRelationsEditor(): Provider[]\n{\n    return [\n        GRID_RELATIONS_MODULE_TYPES_PROVIDER,\n        GRID_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('grid-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor grid subpackage\n */\nexport function provideGridLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideGridRelationsEditor(),\n        ...provideGridLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations grid subpackage\n */\nexport function provideGridLayoutRelations(): Provider[]\n{\n    return [\n        ...provideGridLayout(),\n        ...provideGridRelations(),\n    ];\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'DEMO_CUSTOM_COMPONENTS';\n\n/**\n * Demo custom components register\n */\n@Injectable()\nexport class DemoCustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> extends CustomComponentsRegister<TConfig>\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(customComponents[name])\n        {\n            delete customComponents[name];\n        }\n        else\n        {\n            customComponents[name] = {} as TConfig;\n        }\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return Object.keys(this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override getConfigurationForComponent(name: string): TConfig|undefined|null\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return null;\n        }\n\n        return customComponents[name];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override setConfigurationForComponent(name: string, config: TConfig): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return;\n        }\n\n        customComponents[name] = config;\n        \n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n}","import {Injectable} from '@angular/core';\nimport {DefaultsOverride} from '@anglr/dynamic';\nimport {ButtonComponentOptions} from '@anglr/dynamic/basic-components';\nimport {extend} from '@jscrpt/common';\n\n@Injectable()\nexport class DemoLayoutDefaultsOverrideService implements DefaultsOverride\n{\n    /**\n     * @inheritdoc\n     */\n    public getOptions(packageName: string, name: string, defaultOptions: any)\n    {\n        switch (packageName)\n        {\n            case 'basic-components':\n                switch (name)\n                {\n                    case 'button':\n                        return extend(true, {}, defaultOptions, <ButtonComponentOptions>{\n                            buttonCssClass: 'btn btn-info'\n                        });\n                }\n                break;\n        }\n\n        return defaultOptions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getDisplayName(packageName: string, name: string, displayName?: string): string \n    {\n        return displayName;\n    }        \n}","import {Injectable} from '@angular/core';\nimport {DefaultsOverride} from '@anglr/dynamic';\n\n@Injectable()\nexport class DemoRelationsDefaultsOverrideService implements DefaultsOverride\n{\n    /**\n     * @inheritdoc\n     */\n    public getOptions(packageName: string, name: string, defaultOptions: any)\n    {\n        return defaultOptions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getDisplayName(packageName: string, name: string, displayName?: string): string \n    {\n        switch (packageName)\n        {\n            case 'custom-components':\n                switch (name)\n                {\n                    case 'componentInputs':\n                        return 'custom input display name';\n                }\n                break;\n        }\n\n        return null;\n    }    \n}","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject, ExistingProvider} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutDefaultsOverride, provideLayoutEditor, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/layout-editor';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideGridLayoutEditor} from '@anglr/dynamic/grid-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {CustomComponentsRegister, CustomDynamicItemsRegister, provideEditorLayoutCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoLayoutDefaultsOverrideService} from '../../../services/demoDefaultsOverride';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'layout.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideGridLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideEditorLayoutCustomComponents([], DemoCustomComponentsRegister),\n        provideLayoutDefaultsOverride(DemoLayoutDefaultsOverrideService),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: CustomDynamicItemsRegister,\n            useExisting: CustomComponentsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: DemoCustomComponentsRegister) => register.registeredChange,\n            deps: [CustomDynamicItemsRegister],\n            multi: true,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'layout'})\n@ComponentRoute({path: 'layout/:id'})\nexport class LayoutComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutRelationsMetadata\n    {\n        return {\n            layout: metadata\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoRelationsComplexLayout;\n    }\n\n    protected _loadRestDemo(): void\n    {\n        this._metadata = DemoData.complexDemoRestLayout;\n    }\n\n    protected _loadFullDemo(): void\n    {\n        this._metadata = DemoData.complexDemoFullLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\r\n        <span>go back</span>\r\n    </button>\r\n\r\n    <load-save-new [store]=\"_store\"\r\n                   [getMetadataCallback]=\"_getMetadata\"\r\n                   [history]=\"history\"\r\n                   [componentMarking]=\"true\"\r\n                   routePath=\"/relationsComplex/layout\"\r\n                   (metadataChange)=\"_metadata = ($any($event?.layout) ?? emptyMetadata)\"></load-save-new>\r\n    \r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadRestDemo()\">\r\n        <span>demo rest</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadFullDemo()\">\r\n        <span>demo full</span>\r\n    </button>\r\n\r\n    <debug-data [copyClick]=\"_metadata\"><div class=\"margin-horizontal-small\">metadata</div></debug-data>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for math module items\n */\n@Injectable()\nexport class MathDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'math-components':\n            {\n                try\n                {\n                    this._logger?.debug('MathDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('MathDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for math types\n */\n@Injectable()\nexport class MathDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MathDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'math-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MathDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for math types\n */\n@Injectable()\nexport class MathDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MathDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {item: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'math-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MathDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {item: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {MathDynamicModuleItemsProvider, MathDynamicModuleRelationsProvider, MathDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for math package layout components provider\n */\nexport const MATH_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MathDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for basic dynamic layout module types provider\n */\nexport const MATH_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: MathDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for basic dynamic relations types provider\n */\nexport const MATH_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: MathDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for basic package relations nodes provider\n */\nexport const MATH_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: MathDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for basic package relations components provider\n */\nexport const MATH_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MathDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {MATH_LAYOUT_COMPONENTS_PROVIDER, MATH_LAYOUT_MODULE_TYPES_PROVIDER, MATH_RELATIONS_COMPONENTS_PROVIDER, MATH_RELATIONS_MODULE_TYPES_PROVIDER, MATH_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout math subpackage\n */\nexport function provideMathLayout(): Provider[]\n{\n    return [\n        MATH_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations math subpackage\n */\nexport function provideMathRelations(): Provider[]\n{\n    return [\n        MATH_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor math subpackage\n */\nexport function provideMathLayoutEditor(): Provider[]\n{\n    return [\n        MATH_LAYOUT_COMPONENTS_PROVIDER,\n        MATH_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('math-components'),\n    ];\n}\n\n/**\n * Providers for relations editor math subpackage\n */\nexport function provideMathRelationsEditor(): Provider[]\n{\n    return [\n        MATH_RELATIONS_MODULE_TYPES_PROVIDER,\n        MATH_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('math-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor math subpackage\n */\nexport function provideMathLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideMathRelationsEditor(),\n        ...provideMathLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations math subpackage\n */\nexport function provideMathLayoutRelations(): Provider[]\n{\n    return [\n        ...provideMathLayout(),\n        ...provideMathRelations(),\n    ];\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Static input relations metadata loader\n */\nexport const StaticInputRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/staticInput.relationsMetadata')).StaticInputRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {DynamicOutput, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {StaticInputRelationsMetadataLoader} from './staticInput.metadata';\n\n/**\n * Static input component\n */\n@Component(\n{\n    selector: 'static-input',\n    templateUrl: 'staticInput.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(StaticInputRelationsMetadataLoader)\nexport class StaticInputSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'static-input';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Defines form control for string value\n     */\n    protected stringForm: FormControl<string> = new FormControl<string>('');\n\n    /**\n     * Defines form control for boolean value\n     */\n    protected booleanForm: FormControl<boolean> = new FormControl<boolean>(false);\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * String output\n     */\n    @DynamicOutput()\n    public stringOutput: string;\n\n    /**\n     * Boolean output\n     */\n    @DynamicOutput()\n    public booleanOutput: boolean;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n        this.stringForm.valueChanges.subscribe(value => this.stringOutput = value);\n        this.booleanForm.valueChanges.subscribe(value => this.booleanOutput = value);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(StaticInputSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(StaticInputSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(StaticInputSAComponent.relationsId);\n        this._componentManager.unregisterComponent(StaticInputSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>INPUT:</div>\n<div class=\"flex-column\">\n    <input type=\"text\" [formControl]=\"stringForm\">\n    <input type=\"checkbox\" [formControl]=\"booleanForm\">\n</div>","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Static output relations metadata loader\n */\nexport const StaticOutputRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/staticOutput.relationsMetadata')).StaticOutputRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, OnInit, OnDestroy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {StaticOutputRelationsMetadataLoader} from './staticOutput.metadata';\n\n/**\n * Static output component\n */\n@Component(\n{\n    selector: 'static-output',\n    templateUrl: 'staticOutput.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(StaticOutputRelationsMetadataLoader)\nexport class StaticOutputSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'static-output';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Boolean input\n     */\n    @Input()\n    public booleanInput: boolean;\n\n    /**\n     * String input\n     */\n    @Input()\n    public stringInput: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(StaticOutputSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(StaticOutputSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(StaticOutputSAComponent.relationsId);\n        this._componentManager.unregisterComponent(StaticOutputSAComponent.relationsId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>OUTPUT:</div>\n<div>\n    <div>string: {{stringInput}}</div>\n    <div>boolean: {{booleanInput}}</div>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Position, POSITION} from '@anglr/common';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsDebuggerVisualizerSAComponent} from '../../components';\n\n/**\n * Directive that shows relations debugger\n */\n@Directive(\n{\n    selector: '[showRelationsDebugger]',\n    standalone: true,\n})\nexport class ShowRelationsDebuggerSADirective implements OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of reference to created visualizer\n     */\n    protected visualizer: ComponentRef<RelationsDebuggerVisualizerSAComponent>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of element and optionaly css classes to be used as container, if not specified body is used\n     */\n    @Input()\n    public containerElement: string|undefined|null;\n\n    /**\n     * Definition of relations and their nodes, used for rendering canvas\n     */\n    @Input()\n    public relationsDefinition: RelationsNodeMetadata[] = [];\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Delay between steps during automatic play\n     */\n    @Input()\n    public playDelay: number = 1500;\n\n    //######################### constructor #########################\n    constructor(@Inject(POSITION) protected position: Position,\n                protected viewContainer: ViewContainerRef,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document, )\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<ShowRelationsDebuggerSADirective>('playDelay') in changes)\n        {\n            if(this.visualizer)\n            {\n                this.visualizer.setInput(nameof<RelationsDebuggerVisualizerSAComponent>('playDelay'), this.playDelay);\n            }\n        }\n\n        if(nameof<ShowRelationsDebuggerSADirective>('relationsDefinition') in changes)\n        {\n            if(this.visualizer)\n            {\n                this.visualizer.setInput(nameof<RelationsDebuggerVisualizerSAComponent>('relationsDefinition'), this.relationsDefinition);\n            }\n        }\n\n        if(this.visualizer)\n        {\n            this.visualizer.changeDetectorRef.detectChanges();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.visualizer?.destroy();\n        this.visualizer = null;\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Shows relations debugger\n     * @param event - Event that occured\n     */\n    @HostListener('click', ['$event'])\n    public show(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(ngRelationsDebugger)\n        {\n            this.visualizer = this.viewContainer.createComponent(RelationsDebuggerVisualizerSAComponent);\n            const visualizerElement = (this.visualizer.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement;\n\n            //render to specified target element\n            if(this.containerElement)\n            {\n                let element = this.document.querySelector(`body ${this.containerElement}`);\n\n                //element does not exists\n                if(!element)\n                {\n                    const [name, ...css] = this.containerElement.split('.');\n\n                    element = this.document.createElement(name);\n\n                    if(css?.length)\n                    {\n                        for(const cssClass of css)\n                        {\n                            element.classList.add(cssClass);\n                        }\n                    }\n\n                    this.document.body.appendChild(element);\n                }\n\n                element.appendChild(visualizerElement);\n            }\n            //render directly to body\n            else\n            {\n                this.document.body.appendChild(visualizerElement);\n            }\n\n            this.visualizer.instance.close.subscribe(() => this.ngOnDestroy());\n            this.visualizer.setInput(nameof<RelationsDebuggerVisualizerSAComponent>('playDelay'), this.playDelay);\n            this.visualizer.setInput(nameof<RelationsDebuggerVisualizerSAComponent>('relationsDefinition'), this.relationsDefinition);\n\n            this.visualizer.changeDetectorRef.markForCheck();\n        }\n    }\n}","<div class=\"flex-row\">\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsComplex/layout', available.value]\">layout</a>\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsComplex/relations', available.value]\">relations</a>\r\n    <a class=\"margin-horizontal-small\" href=\"#\" showRelationsDebugger [relationsDefinition]=\"relations\">debug</a>\r\n\r\n    <ng-select [formControl]=\"available\" class=\"flex-1\">\r\n        <ng-option *ngFor=\"let val of availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <debug-data [copyClick]=\"selectedMetadata\"><div class=\"margin-horizontal-small\">{{available.value}}</div></debug-data>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <static-input class=\"margin-right-extra-small\"></static-input>\r\n\r\n    <div class=\"flex-1 overflow-vertical-scroll thin-scrollbar\" style=\"border: 1px dotted #666;\">\r\n        <ng-container *layoutComponentRenderer=\"metadata\"/>\r\n    </div>\r\n\r\n    <static-output style=\"width: 200px;\"></static-output>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, FactoryProvider} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {provideLayoutRelationsCustomComponents} from '@anglr/dynamic/layout-relations';\nimport {RelationsManager, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {provideCssLayoutRelations} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutRelations} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutRelations} from '@anglr/dynamic/handlebars-components';\nimport {provideMaterialLayoutRelations} from '@anglr/dynamic/material-components';\nimport {provideMathLayoutRelations} from '@anglr/dynamic/math-components';\nimport {provideBasicLayoutRelations} from '@anglr/dynamic/basic-components';\nimport {provideRestLayoutRelations} from '@anglr/dynamic/rest-components';\nimport {provideFormLayoutRelations} from '@anglr/dynamic/form';\nimport {provideGridLayoutRelations} from '@anglr/dynamic/grid-components';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout),\n            deps: [StoreDataService]\n        },\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations),\n            deps: [StoreDataService]\n        },\n        provideLayoutRelationsCustomComponents(),\n        provideFormLayoutRelations(),\n        provideBasicLayoutRelations(),\n        provideMaterialLayoutRelations(),\n        provideCssLayoutRelations(),\n        provideTinyMceLayoutRelations(),\n        provideHandlebarsLayoutRelations(),\n        provideRestLayoutRelations(),\n        provideMathLayoutRelations(),\n        provideGridLayoutRelations(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected available: FormControl = new FormControl('');\n\n    protected metadata: LayoutComponentMetadata = null;\n\n    protected relations: RelationsNodeMetadata[] = [];\n\n    protected selectedMetadata: LayoutRelationsMetadata|null = null;\n\n    protected availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private store: StoreDataService<LayoutRelationsMetadata>,\n                private router: Router,\n                private relationsManager: RelationsManager,\n                private route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.availableNames = this.store.getStored();\n\n        this.route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this.available.setValue(id);\n                const meta = this.selectedMetadata = this.store.getData(id);\n                this.metadata = meta?.layout;\n                this.relations = meta?.relations ?? [];\n                this.relationsManager.setRelations(meta.relations ?? []);\n            }\n            else\n            {\n                this.selectedMetadata = null;\n                this.relationsManager.setRelations([]);\n            }\n\n            this.available.valueChanges.subscribe(val =>\n            {\n                this.router.navigate(['/relationsComplex/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {StaticInputSAComponent} from '../../components/staticInput/staticInput.component';\nimport {StaticOutputSAComponent} from '../../components/staticOutput/staticOutput.component';\n\n/**\n * Static components register for relations complex sample\n */\n@Injectable()\nexport class ComplexStaticRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[StaticInputSAComponent.relationsId] = StaticInputSAComponent;\n        result[StaticOutputSAComponent.relationsId] = StaticOutputSAComponent;\n\n        return result;\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomRelationsConfiguration, CustomRelationsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_RELATIONS = 'DEMO_RELATIONS_COMPONENTS';\n\n/**\n * Demo custom relations register\n */\n@Injectable()\nexport class DemoCustomRelationsRegister<TConfig extends CustomRelationsConfiguration = CustomRelationsConfiguration> extends CustomRelationsRegister<TConfig>\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_RELATIONS) ?? {};\n\n        if(customComponents[name])\n        {\n            delete customComponents[name];\n        }\n        else\n        {\n            customComponents[name] = {} as TConfig;\n        }\n\n        this._store.set(CUSTOM_RELATIONS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return Object.keys(this._store.get<Dictionary<TConfig>|null>(CUSTOM_RELATIONS) ?? {});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override getConfigurationForComponent(name: string): TConfig|undefined|null\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_RELATIONS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return null;\n        }\n\n        return customComponents[name];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override setConfigurationForComponent(name: string, config: TConfig): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_RELATIONS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return;\n        }\n\n        customComponents[name] = config;\n        \n        this._store.set(CUSTOM_RELATIONS, customComponents);\n        this._registeredChange.next();\n    }\n}","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject, ExistingProvider} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER, provideRelationsDefaultOverride, REFRESH_PALETTE_OBSERVABLES} from '@anglr/dynamic/relations-editor';\nimport {LayoutManager, provideLayoutRelationsEditorWithStatic, provideEditorRelationsCustomComponents, provideEditorRelationsCustomRelations, CustomRelationsRegister, CustomDynamicItemsRegister} from '@anglr/dynamic/layout-relations';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {provideMathLayoutRelationsEditor} from '@anglr/dynamic/math-components';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {provideRestLayoutRelationsEditor} from '@anglr/dynamic/rest-components';\nimport {provideFormLayoutRelationsEditor} from '@anglr/dynamic/form';\nimport {provideGridLayoutRelationsEditor} from '@anglr/dynamic/grid-components';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {ComplexStaticRegister} from '../misc';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\nimport {DemoCustomComponentsRegister} from '../../../services/demoCustomComponentsRegister';\nimport {DemoRelationsDefaultsOverrideService} from '../../../services/demoDefaultsOverride';\nimport {DemoCustomRelationsRegister} from '../../../services/demoCustomRelationsRegister';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relations.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations),\n            deps: [StoreDataService]\n        },\n        provideFormLayoutRelationsEditor(),\n        provideBasicLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideRestLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideMathLayoutRelationsEditor(),\n        provideGridLayoutRelationsEditor(),\n        provideEditorRelationsCustomComponents(provideLayoutRelationsEditorWithStatic(ComplexStaticRegister), DemoCustomComponentsRegister),\n        provideEditorRelationsCustomRelations(DemoCustomRelationsRegister),\n        provideRelationsDefaultOverride(DemoRelationsDefaultsOverrideService),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n        <ExistingProvider>\n        {\n            provide: CustomDynamicItemsRegister,\n            useExisting: CustomRelationsRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (register: DemoCustomRelationsRegister) => register.registeredChange,\n            deps: [CustomDynamicItemsRegister],\n            multi: true,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\n@ComponentRoute({path: 'relations/:id'})\nexport class RelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,\n                protected _layoutManager: LayoutManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: RelationsNodeMetadata[]): LayoutRelationsMetadata\n    {\n        return {\n            relations: metadata\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoRelationsComplexRelations;\n    }\n\n    protected _loadRestDemo(): void\n    {\n        this._metadata = DemoData.complexDemoRestRelations;\n    }\n\n    protected _loadFullDemo(): void\n    {\n        this._metadata = DemoData.complexDemoFullRelations;\n    }\n\n    protected setMetadata(metadata: LayoutRelationsMetadata): void\n    {\n        this._metadata = metadata?.relations ?? this.emptyMetadata;\n        this._layoutManager.setLayout(metadata?.layout);\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" [layoutControls]=\"false\" routePath=\"/relationsComplex/relations\" (metadataChange)=\"setMetadata($event)\" [history]=\"history\" [componentMarking]=\"true\"></load-save-new>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\n        <span>demo</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadRestDemo()\">\n        <span>demo rest</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadFullDemo()\">\n        <span>demo full</span>\n    </button>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>","import {LayoutComponent} from './layout/layout.component';\nimport {PreviewComponent} from './preview/preview.component';\nimport {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    LayoutComponent,\n    RelationsComponent,\n    PreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\nimport {NgSelectModule} from '@anglr/select';\nimport {GoBackSADirective} from '@anglr/common';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\nimport {ShowRelationsDebuggerSADirective} from '@anglr/dynamic/relations-debugger';\n\nimport {components} from './relationsComplex.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {StaticInputSAComponent, StaticOutputSAComponent} from './misc';\n\n/**\n * Module for relations complex sample with editor, static components and layout components samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        NgSelectModule,\n        GoBackSADirective,\n        DynamicLayoutRelationsEditorModule,\n        DebugDataCopyClickModule,\n        LoadSaveNewSAComponent,\n        StaticInputSAComponent,\n        StaticOutputSAComponent,\n        ShowRelationsDebuggerSADirective,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('LAYOUT_RELATIONS_COMPLEX_DATA'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsComplexModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for rest types\n */\n@Injectable()\nexport class RestDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('RestDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'rest-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('RestDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for rest module items\n */\n@Injectable()\nexport class RestDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'rest-components':\n            {\n                try\n                {\n                    this._logger?.debug('RestDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('RestDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {RestDynamicModuleItemsProvider, RestDynamicModuleRelationsProvider} from '../services';\n\n/**\n * Provider for rest dynamic relations types provider\n */\nexport const REST_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: RestDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for rest package relations nodes provider\n */\nexport const REST_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: RestDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for rest package relations components provider\n */\nexport const REST_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: RestDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {REST_RELATIONS_COMPONENTS_PROVIDER, REST_RELATIONS_MODULE_TYPES_PROVIDER, REST_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for relations rest subpackage\n */\nexport function provideRestRelations(): Provider[]\n{\n    return [\n        REST_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor rest subpackage\n */\nexport function provideRestRelationsEditor(): Provider[]\n{\n    return [\n        REST_RELATIONS_MODULE_TYPES_PROVIDER,\n        REST_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('rest-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor rest subpackage\n */\nexport function provideRestLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideRestRelationsEditor(),\n    ];\n}\n\n/**\n * Providers for layout relations rest subpackage\n */\nexport function provideRestLayoutRelations(): Provider[]\n{\n    return [\n        ...provideRestRelations(),\n    ];\n}","var map = {\n\t\"./rest/type\": [\n\t\t92215,\n\t\t2215\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 2721;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","GridDynamicModuleItemsProvider","constructor","logger","tryToGet","source","_this","package","debug","item","name","i0","LOGGER","factory","ɵfac","GridDynamicModuleTypesProvider","moduleName","GridDynamicModuleRelationsProvider","GRID_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","GRID_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","GRID_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","GRID_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","GRID_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideGridLayout","CUSTOM_COMPONENTS","DemoCustomComponentsRegister","CustomComponentsRegister","registeredChange","this","_registeredChange","asObservable","_store","super","Subject","toggleRegisteredComponent","customComponents","get","set","next","getRegisteredComponents","getConfigurationForComponent","setConfigurationForComponent","config","PERMANENT_STORAGE","DemoLayoutDefaultsOverrideService","getOptions","packageName","defaultOptions","extend","buttonCssClass","getDisplayName","displayName","DemoRelationsDefaultsOverrideService","LayoutComponent","emptyMetadata","generateId","options","children","history","_metadata","_getMetadata","metadata","layout","_loadDemo","DemoData","demoRelationsComplexLayout","_loadRestDemo","complexDemoRestLayout","_loadFullDemo","complexDemoFullLayout","i1","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","getData","deps","StoreDataService","provideLayoutEditor","provideFormLayoutEditor","provideBasicLayoutEditor","provideStaticPackageSource","provideMaterialLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideEditorLayoutCustomComponents","provideLayoutDefaultsOverride","PackageManager","DemoLayoutPackageManager","CustomDynamicItemsRegister","useExisting","REFRESH_PALETTE_OBSERVABLES","register","decls","vars","consts","template","rf","ctx","$event","tmp_b_0","undefined","__decorate","BindThis","ComponentRoute","path","MetadataHistoryManager","MathDynamicModuleItemsProvider","_logger","MathDynamicModuleTypesProvider","MathDynamicModuleRelationsProvider","MATH_LAYOUT_COMPONENTS_PROVIDER","MATH_RELATIONS_MODULE_TYPES_PROVIDER","MATH_RELATIONS_NODES_PROVIDER","MATH_RELATIONS_COMPONENTS_PROVIDER","provideMathLayout","StaticInputRelationsMetadataLoader","_ref","StaticInputRelationsEditorMetadata","apply","arguments","StaticInputSAComponent","StaticInputSAComponent_1","relationsId","_changeDetector","_relationsProcessor","_componentManager","stringForm","FormControl","booleanForm","valueChanges","subscribe","value","stringOutput","booleanOutput","ngOnInit","registerComponent","initialized","updateRelations","ngOnDestroy","destroyComponent","unregisterComponent","invalidateVisuals","detectChanges","standalone","ReactiveFormsModule","i2","encapsulation","changeDetection","DynamicOutput","RelationsEditorMetadata","ChangeDetectorRef","RelationsProcessor","RelationsComponentManager","StaticOutputRelationsMetadataLoader","StaticOutputRelationsEditorMetadata","StaticOutputSAComponent","StaticOutputSAComponent_1","inputs","booleanInput","stringInput","ShowRelationsDebuggerSADirective","position","viewContainer","injector","document","relationsDefinition","playDelay","ngOnChanges","changes","nameof","visualizer","setInput","changeDetectorRef","destroy","show","event","preventDefault","stopPropagation","val_r2","POSITION","DOCUMENT","hostBindings","PreviewComponent","router","relationsManager","route","available","relations","selectedMetadata","availableNames","getStored","params","setValue","meta","setRelations","val","navigate","skipLocationChange","replaceUrl","i3","RELATIONS_METADATA_STORAGE","provideLayoutRelationsCustomComponents","provideFormLayoutRelations","provideBasicLayoutRelations","provideMaterialLayoutRelations","provideCssLayoutRelations","provideTinyMceLayoutRelations","provideHandlebarsLayoutRelations","provideRestLayoutRelations","PreviewComponent_ng_option_8_Template","PreviewComponent_ng_container_15_Template","_c0","_c1","Router","RelationsManager","ActivatedRoute","ComplexStaticRegister","Register","getDefinedTypes","result","t","CUSTOM_RELATIONS","DemoCustomRelationsRegister","CustomRelationsRegister","RelationsComponent","_layoutManager","demoRelationsComplexRelations","complexDemoRestRelations","complexDemoFullRelations","setMetadata","setLayout","RELATIONS_HISTORY_MANAGER","provideFormLayoutRelationsEditor","provideBasicLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideRestLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideEditorRelationsCustomComponents","provideLayoutRelationsEditorWithStatic","provideEditorRelationsCustomRelations","provideRelationsDefaultOverride","DemoRelationsPackageManager","LayoutManager","components","RelationsComplexModule","createStoreDataServiceFactory","imports","CommonModule","RouterModule","NgSelectModule","DynamicLayoutRelationsEditorModule","DebugDataCopyClickModule","LoadSaveNewSAComponent","ModuleRoutes","RestDynamicModuleRelationsProvider","RestDynamicModuleItemsProvider","REST_RELATIONS_MODULE_TYPES_PROVIDER","REST_RELATIONS_NODES_PROVIDER","REST_RELATIONS_COMPONENTS_PROVIDER","provideRestRelationsEditor"],"sourceRoot":""}