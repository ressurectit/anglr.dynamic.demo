{"version":3,"file":"815.chunk.f8aa592461f28d34ff24.js","mappings":"wWAMO,MAAMA,EAAoC,e,EAAAC,G,EAA6D,mBAAY,WAAW,uFAAsDC,qCAAsC,E,+KAAA,kBAAhL,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,yHCQ1C,IAAMC,EAAN,MAmBH,oBAAWC,GAEP,OAAOC,KAAKC,iBAChB,CACA,oBAAWF,CAAiBG,GAExBF,KAAKC,kBAAoBC,CAC7B,CAmBAC,WAAAA,CAAsBC,GAAA,KAAAA,SAAAA,EAElBJ,KAAKK,aAAeL,KAAKI,SAASE,IAAIC,EAAAA,EAC1C,CAOaC,gBAAAA,CAAiBC,GAAsB,I,EAAAC,EAAA,Y,EAAA,YAEhD,IAAGC,EAAAA,EAAAA,IAA+B,UAAWF,EAC7C,CACI,IAAIC,EAAKX,iBAEL,OAGJ,MAAMa,QAAoBF,EAAKL,aAAaQ,SAAwBH,EAAKX,iBAAiBe,GAAIJ,EAAKX,iBAAiBgB,MAEpH,IAAIH,EAEA,OAGJ,IAEIF,EAAKM,gBAAkBJ,EAAYF,EAAKO,K,CAE5C,MAAMC,GAEFC,QAAQC,MAAMF,E,EAErB,E,gLACL,CAOOG,iBAAAA,GAEP,IAvDOC,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,OAAO,2DASDD,EAAAA,EAAAA,IAAA,EADNE,EAAAA,EAAAA,MAAe,qEAzCP1B,GAAsBwB,EAAAA,EAAAA,IAAA,EAFlCG,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBjC,IAAqC,6BA8C1BkC,EAAAA,KA7CvB7B,GCZb,S","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Transform data relations metadata loader\n */\nexport const TransformDataRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/transformData.relationsMetadata')).TransformDataRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {TransformDataRelationsMetadataLoader} from './transformData.metadata';\nimport {TransformDataRelationsOptions} from './transformData.options';\nimport {TransformData} from './transformData.interface';\n\n/**\n * Transform data relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(TransformDataRelationsMetadataLoader)\nexport class TransformDataRelations<TData = any, TTransformedData = any> implements RelationsComponent<TransformDataRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: TransformDataRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): TransformDataRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: TransformDataRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be transformed\n     */\n    @Input()\n    public data: TData|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Transformed data\n     */\n    @DynamicOutput()\n    public transformedData: TTransformedData|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.codeExecutor = this.injector.get(CodeExecutor);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<TransformDataRelations>('data') in changes)\n        {\n            if(!this.relationsOptions)\n            {\n                return;\n            }\n\n            const transformer = await this.codeExecutor.loadData<TransformData>(this.relationsOptions.id, this.relationsOptions.code);\n\n            if(!transformer)\n            {\n                return;\n            }\n\n            try\n            {\n                this.transformedData = transformer(this.data);\n            }\n            catch(e)\n            {\n                console.error(e);\n            }\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {TransformDataRelations} from './transformData.relations';\n\nexport default TransformDataRelations;"],"names":["TransformDataRelationsMetadataLoader","_ref","TransformDataRelationsEditorMetadata","apply","arguments","TransformDataRelations","relationsOptions","this","ɵRelationsOptions","value","constructor","injector","codeExecutor","get","CodeExecutor","dynamicOnChanges","changes","_this","nameof","transformer","loadData","id","code","transformedData","data","e","console","error","invalidateVisuals","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}