{"version":3,"file":"6558.chunk.95d418847a1175828435.js","mappings":"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","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.metadata.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\n\n/**\n * Data block layout metadata loader\n */\nexport const DataBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DataBlockComponentOptions>> = async () => new (await import('./metadata/dataBlock.layoutMetadata')).DataBlockLayoutEditorMetadata();\n\n/**\n * Data block relations metadata loader\n */\nexport const DataBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/dataBlock.relationsMetadata')).DataBlockRelationsEditorMetadata();\n\n/**\n * Data block layout designer type loader\n */\nexport const DataBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/dataBlockDesigner.component')).DataBlockDesignerSAComponent;\n\n","import {Component, ChangeDetectionStrategy, SimpleChanges, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\nimport Handlebars from 'handlebars';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\nimport {DataBlockLayoutDesignerTypeLoader, DataBlockLayoutMetadataLoader, DataBlockRelationsMetadataLoader} from './dataBlock.metadata';\n\n/**\n * Component used for displaying data block\n */\n@Component(\n{\n    selector: 'data-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(DataBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(DataBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(DataBlockLayoutMetadataLoader)\nexport class DataBlockSAComponent extends LayoutComponentBase<DataBlockComponentOptions> implements LayoutComponent<DataBlockComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of compiled template\n     */\n    protected compiledTemplate: HandlebarsTemplateDelegate|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of data to be set to template\n     */\n    @Input()\n    public data: any;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public override async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.ngOnChanges(changes);\n\n        if(nameof<DataBlockSAComponent>('data') in changes)\n        {\n            this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        if(this.options?.template)\n        {\n            this.compiledTemplate = Handlebars.compile(this.options.template);\n        }\n\n        this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {DataBlockSAComponent} from './dataBlock.component';\n\nexport default DataBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["DataBlockLayoutMetadataLoader","_ref","_asyncToGenerator","DataBlockLayoutEditorMetadata","apply","arguments","DataBlockRelationsMetadataLoader","_ref2","DataBlockRelationsEditorMetadata","DataBlockLayoutDesignerTypeLoader","_ref3","DataBlockDesignerSAComponent","DataBlockSAComponent","LayoutComponentBase","ngOnChanges","changes","_superprop_getNgOnChanges","_this","call","nameof","componentElement","nativeElement","innerHTML","compiledTemplate","data","onOptionsSet","this","initialized","options","template","Handlebars","t","selectors","inputs","standalone","features","i0","decls","vars","rf","ctx","styles","changeDetection","__decorate","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","_this2","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}