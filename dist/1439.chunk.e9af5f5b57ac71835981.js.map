{"version":3,"file":"1439.chunk.e9af5f5b57ac71835981.js","mappings":"uJAQM,SAAUA,EAAqBC,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBACzG,C,0bCAK,MAAgBE,EA6ClBC,YAAsBC,EACAC,EACAC,EAC4BC,GAH5B,KAAAH,gBAAAA,EACA,KAAAC,SAAAA,EACA,KAAAC,UAAAA,EAC4B,KAAAC,QAAAA,EAzCxC,KAAAC,YAAgD,GAKhD,KAAAC,cAAwB,EAKxB,KAAAC,WAAqB,CAiC9B,CA1BaC,cAEV,OAAOC,KAAKP,QACf,CAKaQ,wBAEV,OAAOD,KAAKE,OACf,CAsBMC,cAEH,IAAGH,KAAKF,UAAR,CAKAE,KAAKF,WAAY,EAEjB,IAAI,MAAMM,KAAOJ,KAAKJ,YAElBQ,EAAIC,UAGRL,KAAKM,YATJ,CAUJ,CAOYC,WAAQ,iCAEjB,GAAG,EAAKV,aAEJ,OAGJ,EAAKA,cAAe,EACpB,MAAMI,EAAoB,EAAKA,kBAK/B,SAHM,EAAKO,gBACL,EAAKC,gBAERR,EAEC,IAAI,MAAMS,KAAa,EAAKd,kBAElBc,EAAUC,WAAW,EAAKjB,UAAW,EAAKK,QAAS,EAjBhD,KAoBpB,CAKYa,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAKJ,gBAEX,MAAMR,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMS,KAAa,EAAKd,kBAElBc,EAAUK,cAAcd,GAItC,IAAI,EAAKJ,aAEL,aAGE,EAAKmB,kBACd,CAxB0C,KAyB9C,CAKMC,mBAAmBC,GAEtBlB,KAAKJ,YAAcsB,CACtB,CAKMC,oBAEHnB,KAAKR,gBAAgB4B,eACxB,CAOSZ,UAET,CAKSQ,mBAET,CAKSP,gBAET,CAKSH,aAET,E,iCA/KiBhB,GAAmB+B,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBC,EAAAA,GAAM,K,kBAhDRhC,EAAmBiC,SAAAA,CAAAA,EAAAA,I,6MCHlC,MAAMC,EAAiC,e,EAAA,G,EAAyF,mBAAY,WAAW,0DAAmDC,kCAA1E,E,+KAAzF,qD,oDCYjCC,EAAwB,cAASpC,EAAAA,EAOvBmB,gBAEfT,KAAKP,SAASkC,cAAcC,UAAY5B,KAAKE,SAAS2B,SAAW,EACpE,G,6DAVQH,KAAwBI,GAAxBJ,EAAwB,E,qBAAxBA,EAAwBK,UAAAA,CAAAA,CAAAA,oBAAAC,YAAAA,EAAAT,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAU,MAAAA,EAAAC,KAAAA,EAAAC,SAAAA,SAAAA,EAAAA,GAAAA,EAAAC,OAAAA,CAAAA,qCAAAC,gBAAAA,IAAxBX,GAAwB,UADpCvC,EAAAA,EAAAA,GAAqBqC,IACTE,GClBb,S","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/richTextBlock.metadata.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/richTextBlock.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/type.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockComponentOptions} from './richTextBlock.options';\n\n/**\n * Rich text block layout metadata loader\n */\nexport const RichTextBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>> = async () => new (await import('./metadata/richTextBlock.layoutMetadata')).RichTextBlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {RichTextBlockComponentOptions} from './richTextBlock.options';\nimport {RichTextBlockLayoutMetadataLoader} from './richTextBlock.metadata';\n\n/**\n * Component used for displaying rich text block\n */\n@Component(\n{\n    selector: 'rich-text-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(RichTextBlockLayoutMetadataLoader)\nexport class RichTextBlockSAComponent extends LayoutComponentBase<RichTextBlockComponentOptions> implements LayoutComponent<RichTextBlockComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        this._element.nativeElement.innerHTML = this.options?.content ?? '';\n    }\n}","import {RichTextBlockSAComponent} from './richTextBlock.component';\n\nexport default RichTextBlockSAComponent;"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","element","this","extensionsOptions","options","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","i0","LOGGER","features","RichTextBlockLayoutMetadataLoader","RichTextBlockLayoutEditorMetadata","RichTextBlockSAComponent","nativeElement","innerHTML","content","t","selectors","standalone","decls","vars","template","styles","changeDetection"],"sourceRoot":""}