{"version":3,"file":"7412.chunk.d8b23a8d43a4590f0f1e.js","mappings":"6ZAQO,MAAMA,EAA8B,e,EAAA,G,EAAsF,mBAAY,WAAW,yDAAgDC,+BAAvE,E,+KAAtF,qD,sGC0B9BC,EAAqB,cAASC,EAAAA,EAoBvCC,YAAYC,EACAC,EACAC,EAC4BC,EACAC,GAEpCC,MAAML,EAAgBC,EAASC,EAAUE,GAHL,KAAAD,SAAAA,EAhB9B,KAAAG,IAAaC,EAAAA,EAAAA,IAAW,GAoBjC,CAOkBC,UAEfC,KAAKC,cAAeC,EAAAA,EAAAA,MACfC,KAAKC,IAEFC,IACA,CACIC,OAAQ,eAAeN,KAAKH,MAFhCQ,CAGGD,EAHH,GAKX,CAKkBG,gBAEf,GAAGP,KAAKQ,SAASC,OAAST,KAAKC,aAC/B,CACI,MAAMS,EAAMV,KAAKC,aAAaU,QAAQX,KAAKQ,QAAQC,OAAOC,IAE1DV,KAAKS,MAAQT,KAAKN,SAASkB,cAAc,SACzCZ,KAAKS,MAAMI,UAAYH,EAEvBV,KAAKN,SAASoB,KAAKC,OAAOf,KAAKS,MAClC,CACJ,CAKkBO,aAEfhB,KAAKS,OAAOQ,SACZjB,KAAKS,MAAQ,IAChB,G,iCArEQrB,GAAqB8B,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAuBVC,EAAAA,GAAQD,EAAAA,EACRE,EAAAA,GAAM,K,kBAxBjBhC,EAAqBiC,UAAAA,CAAAA,CAAAA,gBAAAC,SAAAA,EAAAC,aAAAA,SAAAA,EAAAA,GAAA,K,mIClClCL,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,G,KAAaA,EAAAA,EAAAA,0BAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,Q,gBD6BLM,EAAAA,GAAkCC,OAAAA,CAAAA,qCAAAC,gBAAAA,IAK7BtC,GAAqB,UADjCuC,EAAAA,EAAAA,GAAqBzC,IACY,6BAoBF0C,EAAAA,EACPC,EAAAA,GACCC,EAAAA,EAC4BC,SAAQC,UAvBjD5C,GEhCb,S,+DCMM,SAAUuC,EAAqBM,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBACzG,C,ucCAK,MAAgB5C,EA6ClBC,YAAsB6C,EACAC,EACAC,EAC4BC,GAH5B,KAAAH,gBAAAA,EACA,KAAAC,SAAAA,EACA,KAAAC,UAAAA,EAC4B,KAAAC,QAAAA,EAzCxC,KAAAC,YAAgD,GAKhD,KAAAC,cAAwB,EAKxB,KAAAC,WAAqB,CAiC9B,CA1BajD,cAEV,OAAOQ,KAAKoC,QACf,CAKaM,wBAEV,OAAO1C,KAAKQ,OACf,CAsBMmC,cAEH,IAAG3C,KAAKyC,UAAR,CAKAzC,KAAKyC,WAAY,EAEjB,IAAI,MAAMG,KAAO5C,KAAKuC,YAElBK,EAAIC,UAGR7C,KAAKgB,YATJ,CAUJ,CAOY8B,WAAQ,iCAEjB,GAAG,EAAKN,aAEJ,OAGJ,EAAKA,cAAe,EACpB,MAAME,EAAoB,EAAKA,kBAK/B,SAHM,EAAK3C,gBACL,EAAKQ,gBAERmC,EAEC,IAAI,MAAMK,KAAa,EAAKR,kBAElBQ,EAAUC,WAAW,EAAKX,UAAW,EAAK7C,QAAS,EAjBhD,KAoBpB,CAKYyD,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAK3C,gBAEX,MAAMmC,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMK,KAAa,EAAKR,kBAElBQ,EAAUK,cAAcV,GAItC,IAAI,EAAKF,aAEL,aAGE,EAAKa,kBACd,CAxB0C,KAyB9C,CAKMC,mBAAmBC,GAEtBvD,KAAKuC,YAAcgB,CACtB,CAKMC,oBAEHxD,KAAKmC,gBAAgBsB,eACxB,CAOS1D,UAET,CAKSsD,mBAET,CAKS9C,gBAET,CAKSS,aAET,E,iCA/KiB3B,GAAmB6B,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBE,EAAAA,GAAM,K,kBAhDR/B,EAAmBqE,SAAAA,CAAAA,EAAAA,I","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.metadata.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.html","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\n\n/**\n * Style block layout metadata loader\n */\nexport const StyleBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>> = async () => new (await import('./metadata/styleBlock.layoutMetadata')).StyleBlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Injector, Inject, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle, Logger, LOGGER} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\nimport prefixer  from 'postcss-prefix-selector';\nimport postcss, {Processor, Root} from 'postcss';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\nimport {StyleBlockLayoutMetadataLoader} from './styleBlock.metadata';\n\n//TODO: optimize, debug, dual call of options set\n\n/**\n * Component used for displaying style block\n */\n@Component(\n{\n    selector: 'style-block',\n    templateUrl: 'styleBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    host:\n    {\n        '[attr.id]': 'id'\n    },\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StyleBlockLayoutMetadataLoader)\nexport class StyleBlockSAComponent extends LayoutComponentBase<StyleBlockComponentOptions> implements LayoutComponent<StyleBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Unique ID for this instance of style block\n     */\n    protected id: string = generateId(10);\n\n    /**\n     * Instance of created style element by this style block\n     */\n    protected style: HTMLStyleElement|undefined|null;\n\n    /**\n     * Instance of css processor that applies changes\n     */\n    protected cssProcessor: Processor|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,\n                @Inject(LOGGER) @Optional() logger?: Logger,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this.cssProcessor = postcss()\n            .use((root: Root) =>\n            {\n                prefixer(\n                {\n                    prefix: `style-block#${this.id}`,\n                })(root);\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        if(this.options?.style && this.cssProcessor)\n        {\n            const css = this.cssProcessor.process(this.options.style).css;\n\n            this.style = this.document.createElement('style');\n            this.style.innerText = css;\n\n            this.document.head.append(this.style);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        this.style?.remove();\n        this.style = null;\n    }\n}","<ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>","import {StyleBlockSAComponent} from './styleBlock.component';\n\nexport default StyleBlockSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["StyleBlockLayoutMetadataLoader","StyleBlockLayoutEditorMetadata","StyleBlockSAComponent","LayoutComponentBase","constructor","changeDetector","element","injector","document","logger","super","id","generateId","_onInit","this","cssProcessor","postcss","use","root","prefixer","prefix","_onOptionsSet","options","style","css","process","createElement","innerText","head","append","_onDestroy","remove","i0","DOCUMENT","LOGGER","selectors","hostVars","hostBindings","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","ChangeDetectorRef","ElementRef","Injector","Document","Object","metadataLoader","DynamicClassMetadata","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","extensionsOptions","ngOnDestroy","ext","destroy","ngOnInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","features"],"sourceRoot":""}