{"version":3,"file":"590.chunk.3bbb5f69daada6b90c3d.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../layout-editor/src/pipes/combineRenderersCallbacks/combineRenderersCallbacks.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../../../../src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../../../../src/directives/positionTo/positionTo.directive.ts"],"sourcesContent":["import {ContentChild, Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {getHostElement} from '@anglr/common';\nimport {BindThis, nameof} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorRendererItem} from '../../services';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    exportAs: 'designerMinWidth',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Html element of dynamic component\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Minimal height of element\n     */\n    protected minHeight: string = '';\n\n    /**\n     * Minimal width of element\n     */\n    protected minWidth: string = '';\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    @Input()\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DesignerMinDimensionSADirective>('editorMetadata') in changes)\n        {\n            this.init();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Callback called when component was fully rendered\n     * @param item - Item that contains information about rendered component\n     */\n    @BindThis\n    public renderedComponentCallback(item: LayoutEditorRendererItem): void\n    {\n        this.element = getHostElement(item.component);\n        this.init();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize watching for children\n     */\n    protected init(): void\n    {\n        if(!this.element || !this.editorMetadata)\n        {\n            return;\n        }\n\n        const element = this.editorMetadata.getChildrenContainer?.(this.element) as HTMLElement ?? this.element;\n\n        this.minHeight = element.style.minHeight;\n        this.minWidth = element.style.minWidth;\n        \n        this.updatedDimensions(element);\n\n        this.observer?.observe(element,\n        {\n            childList: true,\n        });\n    }\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        const nodesArray: ChildNode[] = [];\n        element.childNodes.forEach(node => nodesArray.push(node));\n\n        const contentsLength = nodesArray.filter(itm => itm.nodeName != '#comment').length;\n\n        if((contentsLength && !this.active) ||\n           (!contentsLength && this.active))\n        {\n            return;\n        }\n\n        //deactivate, children are present\n        if(contentsLength)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.minWidth;\n            }\n            else\n            {\n                element.style.minHeight = this.minHeight;\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.canDrop ? '30px' : '10px';\n            }\n            else\n            {\n                element.style.minHeight = this.canDrop ? '30px' : '10px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, OnInit, OnDestroy, Input, ChangeDetectorRef, Inject} from '@angular/core';\nimport {LOGGER, Logger, getHostElement} from '@anglr/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorRenderer, LiveEventService} from '../../services';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets component id safely\n     */\n    protected get componentIdSafe(): string\n    {\n        if(!this.componentId)\n        {\n            throw new Error('LayoutDesignerOverlayForSAComponent: missing id of component!');\n        }\n\n        return this.componentId;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected htmlElement: HTMLElement|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Id of component that is being rendered\n     */\n    @Input('layoutDesignerOverlayFor')\n    public componentId: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>,\n                protected changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,\n                protected renderer: LayoutEditorRenderer,\n                @Inject(LOGGER) protected logger: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(() => this.changeDetector.detectChanges());\n\n        const rendererItem = this.renderer.get(this.componentIdSafe);\n\n        if(!rendererItem)\n        {\n            throw new Error('LayoutDesignerOverlayForSAComponent: missing registered component!');\n        }\n\n        this.logger.verbose('LayoutDesignerOverlayForSAComponent: registering component for layout designer overlay');\n\n        this.htmlElement = getHostElement(rendererItem.component);\n\n        if(this.htmlElement)\n        {\n            this.observer?.observe(this.htmlElement, {attributeFilter: ['style']});\n        }\n\n        this.initSubscriptions.add(this.liveEvents.enabledChange.subscribe(() => this.toggleLiveEvents()));\n        this.toggleLiveEvents();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Toggles live events for element\n     */\n    protected toggleLiveEvents(): void\n    {\n        if(this.liveEvents.enabled)\n        {\n            this.element.nativeElement.style.pointerEvents = 'none';\n        }\n        else\n        {\n            this.element.nativeElement.style.pointerEvents = 'all';\n        }\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"htmlElement?.style?.borderRight\"></div>","import {Pipe, PipeTransform} from '@angular/core';\nimport {Action1} from '@jscrpt/common';\n\n/**\n * Combines multipl renderers callbacks into one that calls them all\n */\n@Pipe({name: 'combineRenderersCallbacks', standalone: true})\nexport class CombineRenderersCallbacksSAPipe implements PipeTransform\n{\n    /**\n     * Combines multipl renderers callbacks into one that calls them all\n     * @param value - Array of callbacks that will be combined into one\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public transform(value: Action1<any>[]): Action1<unknown>\n    {\n        return item =>\n        {\n            for(const callback of value)\n            {\n                callback(item);\n            }\n        };\n    }\n}","import {Directive, ElementRef, EventEmitter, Inject, Injector, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {getHostElement} from '@anglr/common';\nimport {BindThis, isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent, LayoutEditorRendererItem} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\nconst DEFAULT_DROP_TYPES = ['COMPONENT', 'METADATA'];\nconst DEFAULT_DRAG_TYPE = 'COMPONENT';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n})\nexport class DndCoreDesignerDirective implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * NgZone instance\n     */\n    protected ngZone: NgZone = inject(NgZone);\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target for dropping over displayed placeholder, drops at exact location of placeholder\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult>;\n\n    /**\n     * Drop zone target for dropping over itself\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult>;\n\n    /**\n     * Gets element that represents container that contains children\n     */\n    protected get containerElement(): Element|undefined|null\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        const component = this.manager.getComponent(this.metadata.id);\n\n        if(!component?.editorMetadata?.getChildrenContainer)\n        {\n            return this.componentElement;\n        }\n\n        return component.editorMetadata.getChildrenContainer(this.componentElement) ?? this.componentElement;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult>;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult>;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input({required: true})\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input({required: true, alias: 'dndCoreDesigner'})\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input({required: true})\n    public dragDisabled: boolean = false;\n\n    /**\n     * Default drag type for dragging components\n     */\n    @Input({required: true})\n    public customDragType: string|undefined|null;\n\n    /**\n     * Default drop type for droping components\n     */\n    @Input({required: true})\n    public customDropTypes: string|string[]|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.placeholderDrop = this.dnd.dropTarget(DEFAULT_DROP_TYPES,\n                                                   {\n                                                       canDrop: () => true,\n                                                       drop: monitor =>\n                                                       {\n                                                           const item = monitor.getItem();\n                                                           let index = this.bus.dropPlaceholderPreviewIndex;\n\n                                                           if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                           {\n                                                               //same parent and higher index\n                                                               if(index > item.dragData.index)\n                                                               {\n                                                                   index--;\n                                                               }\n                                                           }\n\n                                                           return <LayoutDropResult>{\n                                                               index,\n                                                               id: this.metadata?.id,\n                                                           };\n                                                       },\n                                                   }, this.initSubscriptions);\n\n        this.containerDrop = this.dnd.dropTarget(DEFAULT_DROP_TYPES,\n                                                 {\n                                                     canDrop: monitor => this.canDropAncestors(monitor)[0] && monitor.isOver({shallow: true}),\n                                                     drop: monitor =>\n                                                     {\n                                                         const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                         return <LayoutDropResult>{\n                                                             index,\n                                                             id,\n                                                         };\n                                                     },\n                                                     hover: monitor =>\n                                                     {\n                                                         if(monitor.isOver({shallow: true}))\n                                                         {\n                                                             const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                             if(isBlank(index) || isBlank(parentId))\n                                                             {\n                                                                 return;\n                                                             }\n\n                                                             this.bus.setDropPlaceholderPreview(\n                                                             {\n                                                                 index,\n                                                                 parentId,\n                                                                 placeholder:\n                                                                 {\n                                                                     height: 0,\n                                                                     width: 0\n                                                                 }\n                                                             });\n                                                         }\n                                                     }\n                                                 }, this.initSubscriptions);\n\n        this.drag = this.dnd.dragSource(DEFAULT_DRAG_TYPE,\n                                        {\n                                            beginDrag: () =>\n                                            {\n                                                this.draggingSvc.setDragging(true);\n                                                this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                return {\n                                                    dragData: this.dragData,\n                                                };\n                                            },\n                                            canDrag: () => !this.dragDisabled,\n                                            endDrag: monitor =>\n                                            {\n                                                //dropped outside of any dropzone\n                                                if(!monitor.didDrop())\n                                                {\n                                                    this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                }\n                                                //dropped into drop zone\n                                                else\n                                                {\n                                                    const item = monitor.getItem();\n                                                    const dropResult = monitor.getDropResult();\n\n                                                    if(!item)\n                                                    {\n                                                        return;\n                                                    }\n\n                                                    item.dragData.index = dropResult.index;\n\n                                                    this.bus.setDropData(\n                                                    {\n                                                        data: item.dragData,\n                                                        id: dropResult.id,\n                                                    });\n                                                }\n\n                                                this.bus.setDropPlaceholderPreview(null);\n                                                this.draggingSvc.setDragging(false);\n                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                            },\n                                        },\n                                        this.initSubscriptions);\n\n        this.dropzone = this.dnd.dropTarget(DEFAULT_DROP_TYPES,\n                                            {\n                                                canDrop: monitor => (this.canDrop || this.canDropAncestors(monitor)[0]) && monitor.isOver({shallow: true}) && this.selfIsAncestor(monitor),\n                                                drop: monitor =>\n                                                {\n                                                    const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                    return <LayoutDropResult>{\n                                                        index,\n                                                        id\n                                                    };\n                                                },\n                                                hover: monitor =>\n                                                {\n                                                    if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                    {\n                                                        const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                        if(isBlank(index) || isBlank(parentId))\n                                                        {\n                                                            return;\n                                                        }\n\n                                                        this.bus.setDropPlaceholderPreview(\n                                                        {\n                                                            index,\n                                                            parentId,\n                                                            placeholder:\n                                                            {\n                                                                height: 0,\n                                                                width: 0\n                                                            }\n                                                        });\n                                                    }\n                                                }\n                                            }, this.initSubscriptions);\n\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm =>\n                                       {\n                                           this.ngZone.run(() => this.dropMetadata.emit(itm.data));\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.ngZone.run(() =>\n                                           {\n                                               this.placeholderPreviewElement?.remove();\n                                               this.placeholderPreviewElement = null;\n                                           });\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe((preview) =>\n                                       {\n                                           this.ngZone.run(() => this.showPlaceholderPreview(preview));\n                                       }));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DndCoreDesignerDirective>('customDragType') in changes)\n        {\n            if(!isBlank(this.customDragType))\n            {\n                this.drag.setType(this.customDragType);\n            }\n        }\n\n        if(nameof<DndCoreDesignerDirective>('customDropTypes') in changes)\n        {\n            if(!isBlank(this.customDropTypes))\n            {\n                this.dropzone.setTypes(this.customDropTypes);\n                this.placeholderDrop.setTypes(this.customDropTypes);\n                this.containerDrop.setTypes(this.customDropTypes);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n\n        this.drag.unsubscribe();\n        this.dropzone.unsubscribe();\n        this.placeholderDrop.unsubscribe();\n        this.containerDrop.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Callback called when component was fully rendered\n     * @param item - Item that contains information about rendered component\n     */\n    @BindThis\n    public renderedComponentCallback(item: LayoutEditorRendererItem): void\n    {\n        this.componentElement = getHostElement(item.component);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors(monitor);\n\n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + parentComponent.dndCoreDesigner.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n\n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Tests whether dragged element is ancestor of drop target, prevents self inclusion\n     * @param monitor - Drop target monitor with all information about drag and drop\n     */\n    protected selfIsAncestor(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): boolean\n    {\n        const metadata = monitor.getItem()?.dragData.metadata;\n\n        if(!metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag metadata!');\n        }\n\n        let componentDef: LayoutEditorMetadataManagerComponent|undefined|null = this.manager.getComponentDef(this.metadata.id);\n\n        do\n        {\n            if(componentDef?.component.id == metadata.id)\n            {\n                return false;\n            }\n        }\n        while((componentDef = componentDef?.parent));\n\n        return true;\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        const dragType = monitor.getItemType() as string;\n        const dropTypes = component.parent.component.dndCoreDesigner.customDropTypes\n            ? Array.isArray(component.parent.component.dndCoreDesigner.customDropTypes)\n                ? component.parent.component.dndCoreDesigner.customDropTypes\n                : [component.parent.component.dndCoreDesigner.customDropTypes]\n            : DEFAULT_DROP_TYPES;\n\n        if(component.parent.component.canDrop &&\n           dropTypes.indexOf(dragType) >= 0)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(monitor, component.parent.component.id);\n        }\n    }\n}","<div class=\"designer-overlay\" \n     #layoutDesigner\n     #dndCore=\"dndCoreDesigner\"\n     [dndCoreDesigner]=\"{metadata: renderedType, parentId: parent?.renderedType?.id, index: index}\"\n     [dropzoneElement]=\"layoutDropzone\"\n     [dragDisabled]=\"dragDisabled\"\n     [dragSource]=\"dndCore.drag\"\n     [customDragType]=\"editorMetadata?.customDragType?.()?.layout\"\n     [customDropTypes]=\"editorMetadata?.customDropTypes?.()?.layout\"\n     [noHTML5Preview]=\"true\"\n     (dropMetadata)=\"addDescendant($event)\"\n     [copyDesignerStyles]=\"renderedType\"\n     (mouseleave)=\"hideOverlay($event)\"\n     (mouseover)=\"showOverlay($event)\"\n     (click)=\"selectComponent($event)\"\n     (dblclick)=\"unselectComponent($event)\">\n    <div class=\"designer-dropzone\"\n         #layoutDropzone\n         designerMinWidth\n         #minWidthDirective=\"designerMinWidth\"\n         [canDrop]=\"canDrop\"\n         [editorMetadata]=\"editorMetadata\"\n         [horizontal]=\"parent?.horizontal ?? false\"\n         [dropTarget]=\"dndCore.dropzone\"\n         [isDropZone]=\"canDrop\">\n\n        @if(highlighted || selected)\n        {\n            <div class=\"designer-overlay-border\"></div>\n            <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"options?.typeMetadata?.id\"></div>\n\n            <div class=\"designer-overlay-title\"\n                 *bodyRender\n                 [positionTo]=\"layoutDesigner\"\n                 placement=\"TopStart\">{{renderedType?.displayName ?? editorMetadata?.metaInfo?.name ?? renderedType?.name}}</div>\n\n            @if(!!parent && parent.editorMetadata?.removeDescendant)\n            {\n                <div *bodyRender\n                     class=\"designer-overlay-remove\"\n                     [positionTo]=\"layoutDesigner\"\n                     [offset]=\"{mainAxis: -14}\"\n                     placement=\"TopEnd\"\n                     (click)=\"remove()\">\n                    <span class=\"fas fa-times\"></span>\n                </div>\n            }\n        }\n\n        <ng-container *layoutComponentRenderer=\"renderedType; callback: [dndCore.renderedComponentCallback, minWidthDirective.renderedComponentCallback] | combineRenderersCallbacks\"/>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ElementRef, SkipSelf, Optional, Inject, OnDestroy, ViewChild, SimpleChanges} from '@angular/core';\nimport {BodyRenderSADirective, PositionToSADirective} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager, SCOPE_ID, addSimpleChange} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorRenderer} from '../../services';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {CombineRenderersCallbacksSAPipe} from '../../pipes';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    standalone: true,\n    imports:\n    [\n        LayoutDndCoreModule,\n        DndModule,\n        LayoutDesignerOverlayForSAComponent,\n        LayoutComponentRendererSADirective,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        DesignerDropzoneSADirective,\n        PositionToSADirective,\n        BodyRenderSADirective,\n        CombineRenderersCallbacksSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Gets rendered component instance\n     */\n    protected get componentInstance(): LayoutComponent\n    {\n        const renderer = this.layoutRenderer.get(this.id);\n\n        if(!renderer?.component)\n        {\n            throw new Error('LayoutDesignerSAComponent: unable to find renderer!');\n        }\n\n        return renderer.component.instance;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent() === this.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent() === this.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCore', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.optionsSafe.typeMetadata.id;\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    /**\n     * Layout editor metadata\n     */\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### constructor #########################\n    constructor(protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                protected layoutRenderer: LayoutEditorRenderer,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Optional() @Inject(SCOPE_ID) protected scopeId: string|undefined|null,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutDesignerSAComponent: Destroying component {{@data}}', {data: {id: this.options?.typeMetadata.id}});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        const options = this.optionsSafe;\n        let triggerLayoutChange = false;\n        const parentId = dragData.parentId;\n        this.logger.debug('LayoutDesignerSAComponent: Adding descendant {{@data}}', {data: {id: dragData.metadata?.id, parent: this.id}});\n\n        if(!dragData.metadata)\n        {\n            this.logger.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            //only changing order in same parent\n            if(parentId == this.id)\n            {\n                this.logger.verbose('LayoutDesignerSAComponent: Swapping child component {{@(4)data}}', {data: {id: this.id}});\n\n                this.editorMetadata?.removeDescendant?.(dragData.metadata.id, options.typeMetadata.options);\n                triggerLayoutChange = true;\n            }\n            else\n            {\n                this.history.disable();\n                this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata.id);\n                this.history.enable();\n            }\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(options.typeMetadata.options) ?? false;\n\n        const changes: SimpleChanges = {};\n        addSimpleChange<LayoutComponent>(changes, 'options', options.typeMetadata.options, options.typeMetadata.options, false);\n        this.componentInstance.dynamicOnChanges?.(changes);\n        this.componentInstance.invalidateVisuals();\n\n        if(triggerLayoutChange)\n        {\n            this.layoutEditorMetadataManager.updateLayout();\n        }\n\n        const layoutDesigners = this.layoutEditorMetadataManager.getChildren(this.id);\n        \n        //update indexes of children\n        for(const designer of layoutDesigners)\n        {\n            designer?.updateIndex();\n            designer?.invalidateVisuals();\n        }\n\n        this.history.getNewState();\n    }\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    public removeDescendant(id: string): void\n    {\n        const options = this.optionsSafe;\n\n        this.logger.debug('LayoutDesignerSAComponent: Removing descendant {{@(4)data}}', {data: {id: this.id, child: id}});\n\n        this.editorMetadata?.removeDescendant?.(id, options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(options.typeMetadata.options) ?? false;\n        \n        const changes: SimpleChanges = {};\n        addSimpleChange<LayoutComponent>(changes, 'options', options.typeMetadata.options, options.typeMetadata.options, false);\n        this.componentInstance.dynamicOnChanges?.(changes);\n        this.componentInstance.invalidateVisuals();\n\n        const layoutDesigners = this.layoutEditorMetadataManager.getChildren(this.id);\n        \n        //update indexes of children\n        for(const designer of layoutDesigners)\n        {\n            designer?.updateIndex();\n            designer?.invalidateVisuals();\n        }\n\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this.logger.verbose('LayoutDesignerComponent: Showing overlay for {{@type}}', {type: {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id}});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this.logger.verbose('LayoutDesignerComponent: Hiding overlay for {{@type}}', {type: {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id}});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.id);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates its own index in parent\n     */\n    protected async updateIndex(): Promise<void>\n    {\n        const options = this.optionsSafe;\n\n        //obtains index of itself in parent\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        await super.onInit();\n\n        const options = this.optionsSafe;\n\n        //TODO: SCOPE: use parent scope for settings this\n        options.typeMetadata.scope = this.scopeId;\n\n        await this.updateIndex();\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(options.typeMetadata.options) ?? false;\n        this.renderedType = options.typeMetadata;\n\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        const options = this.optionsSafe;\n\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(options.typeMetadata.options) ?? false;\n    }\n}","import {Directive, EmbeddedViewRef, Inject, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {renderToBody} from '@jscrpt/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * String that defines element in which should be template rendered, if not specified, body is used\n     * \n     * Allows also css class to be specified (div.body-box)\n     */\n    @Input('bodyRender')\n    public targetElement: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n\n        renderToBody(this.document, this.element, this.targetElement);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {nameof, isPresent, isString, Func1, NoopAction} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions, PositionOffsetString, PositionOffsets, PositionArguments, AutoUpdateOptions} from '../../services/position';\nimport {POSITION} from '../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]',\n    standalone: true,\n})\nexport class PositionToSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected ɵPlacement: PositionPlacement|undefined|null;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected ɵSource: HTMLElement|undefined|null;\n\n    /**\n     * Method used for disposing auto positioning\n     */\n    protected dispose: NoopAction|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement|undefined|null\n    {\n        return this.ɵSource;\n    }\n    public set source(value: HTMLElement|undefined|null)\n    {\n        if(value instanceof ElementRef)\n        {\n            this.ɵSource = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this.ɵSource = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|undefined|null\n    {\n        return this.ɵPlacement;\n    }\n    public set placement(value: PositionPlacement|undefined|null)\n    {\n        if(isString(value))\n        {\n            this.ɵPlacement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this.ɵPlacement = value;\n    }\n\n    /**\n     * Offset which allows moving target element along the cross axis of placement, or any chosed direction\n     */\n    @Input()\n    public offset: PositionOffsetString|number|PositionOffsets|Func1<number|PositionOffsets, PositionArguments> = 'None';\n\n    /**\n     * Indication whether set up 'auto updating' of position\n     */\n    @Input()\n    public autoUpdate: boolean|AutoUpdateOptions = true;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Occurs when element was positioned\n     */\n    @Output()\n    public done: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToSADirective>('source') in changes ||\n            nameof<PositionToSADirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.dispose?.();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected _applyPosition(): void\n    {\n        if(!this.ɵSource)\n        {\n            return;\n        }\n\n        const options: Partial<PositionOptions> =\n        {\n            flip: true,\n            autoUpdate: this.autoUpdate,\n            offset: this.offset,\n        };\n\n        if(this.ɵPlacement)\n        {\n            options.placement = this.ɵPlacement;\n        }\n\n        this.dispose?.();\n\n        this.position.placeElement(this.target.nativeElement,\n                                    this.ɵSource,\n                                    options)\n            .subscribe(result =>\n            {\n                this.dispose = result.dispose;\n\n                applyPositionResult(result);\n\n                if(result.flip)\n                {\n                    this.flip.emit();\n                }\n\n                this.done.emit();\n            });\n    }\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `source` input\n     */\n    public static ngAcceptInputType_source: HTMLElement|ElementRef<HTMLElement>;\n}\n"],"names":["DesignerMinDimensionSADirective","constructor","active","minHeight","minWidth","horizontal","canDrop","editorMetadata","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","ngOnChanges","nameof","init","ngOnDestroy","disconnect","renderedComponentCallback","item","element","getHostElement","component","getChildrenContainer","style","observe","childList","nodesArray","childNodes","forEach","node","push","contentsLength","filter","itm","nodeName","length","children","classList","contains","selectors","contentQueries","rf","ctx","dirIndex","LayoutComponentRendererSADirective","__decorate","BindThis","CopyDesignerStylesSADirective","metadata","_metadata","value","_copyDesignerStyles","_element","_metadataExtractor","_this","extractMetadata","applyDesignerStyles","options","nativeElement","i0","i1","inputs","exportAs","standalone","LayoutDesignerOverlayForSAComponent","componentIdSafe","componentId","Error","changeDetector","liveEvents","renderer","logger","initSubscriptions","Subscription","detectChanges","rendererItem","get","verbose","htmlElement","attributeFilter","add","enabledChange","subscribe","toggleLiveEvents","unsubscribe","enabled","pointerEvents","LOGGER","features","attrs","decls","vars","consts","template","marginTop","marginBottom","marginLeft","marginRight","paddingTop","paddingBottom","paddingLeft","paddingRight","borderTop","borderBottom","borderLeft","borderRight","CombineRenderersCallbacksSAPipe","transform","callback","pure","DEFAULT_DROP_TYPES","DndCoreDesignerDirective","dragData","manager","getComponent","id","containerElement","componentElement","dnd","designerElement","draggingSvc","bus","injector","document","ngZone","inject","NgZone","dragDisabled","dropMetadata","EventEmitter","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","isPresent","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","endDrag","didDrop","dropResult","getDropResult","setDropData","data","remove","dropzone","selfIsAncestor","connectDropToContainer","dropzoneElement","dropDataChange","pipe","run","emit","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","preview","showPlaceholderPreview","customDragType","setType","customDropTypes","setTypes","placeholderConnection","containerConnection","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","dndCoreDesigner","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","offset","getClientOffset","position","child","usedIndex","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","componentDef","getComponentDef","parent","dragType","getItemType","dropTypes","Array","isArray","indexOf","i2","i3","DOCUMENT","outputs","_r0","tmp_1_0","ctx_r6","renderedType","displayName","undefined","metaInfo","name","_r10","ctx_r9","_c2","LayoutDesignerSAComponent_Conditional_6_Conditional_3_div_0_Template","LayoutDesignerSAComponent_Conditional_6_div_2_Template","LayoutDesignerSAComponent_Conditional_6_Conditional_3_Template","ctx_r4","typeMetadata","removeDescendant","LayoutDesignerSAComponent","LayoutComponentBase","componentInstance","layoutRenderer","instance","selected","layoutEditorMetadataManager","selectedComponent","highlighted","highlightedComponent","extensionsOptions","optionsSafe","metadataExtractor","iteratorSvc","history","scopeId","super","debug","unregisterLayoutDesignerComponent","addDescendant","triggerLayoutChange","warn","disable","enable","canDropMetadata","addSimpleChange","dynamicOnChanges","invalidateVisuals","updateLayout","layoutDesigners","getChildren","designer","updateIndex","getNewState","showOverlay","event","type","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","_asyncToGenerator","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","getChildrenIteratorFor","next","done","err","return","onInit","_superprop_getOnInit","_this2","call","scope","registerLayoutDesignerComponent","onOptionsSet","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","SCOPE_ID","viewQuery","$event","LayoutDesignerSAComponent_Conditional_6_Template","LayoutDesignerSAComponent_ng_container_7_Template","_c3","_r2","_r1","tmp_4_0","layout","tmp_5_0","tmp_10_0","_c4","_r3","LayoutDndCoreModule","DndModule","DesignerDropzoneSADirective","PositionToSADirective","BodyRenderSADirective","encapsulation","changeDetection","viewContainer","view","targetElement","createEmbeddedView","rootNodes","renderToBody","destroy","ɵPlacement","ɵSource","dispose","source","ElementRef","placement","isString","PositionPlacement","autoUpdate","flip","_applyPosition","placeElement","result","applyPositionResult","static","POSITION"],"sourceRoot":""}