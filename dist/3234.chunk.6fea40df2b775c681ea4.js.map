{"version":3,"file":"3234.chunk.6fea40df2b775c681ea4.js","mappings":"khBAWO,MAAMA,EAA2B,oBAAmF,mBAAY,WAAW,+BAA6CC,4BAApE,IAAnF,qDAK3BC,EAA8B,oBAA6D,mBAAY,WAAW,8EAAgDC,+BAAvE,IAA7D,qDAK9BC,EAA+B,oBAAiD,yBAAmB,iCAAgDC,0BAAnE,IAAjD,qD,0JCrB5CC,EAAAA,GAAAA,GACIA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,GACJA,EAAAA,M,mBADiBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,0BAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,Q,MC6BJC,EAAkB,cAASC,EAAAA,E,kCAe7B,KAAAC,WAAqB,CAW/B,CAJsBC,gBAEfC,KAAKF,UAAYE,KAAKC,SAASH,YAAa,CAC/C,G,6DAzBQF,KAAkBM,GAAlBN,EAAkB,E,qBAAlBA,EAAkBO,UAAAA,CAAAA,CAAAA,aAAAC,OAAAA,CAAAN,UAAAA,aAAAO,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,EAAAA,4BAAAC,SAAAA,SAAAA,EAAAA,GAAA,KD9B/Bf,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,G,KAAeA,EAAAA,EAAAA,OAAAA,EAAAA,U,gBCsBPgB,EAAAA,EAAYC,EAAAA,EACZC,EAAAA,GAAkCC,OAAAA,CAAAA,qCAAAC,gBAAAA,IAO7BnB,GAAkB,UAH9BoB,EAAAA,EAAAA,GAAyBvB,IACzBwB,EAAAA,EAAAA,GAAwB1B,IACxB2B,EAAAA,EAAAA,GAAqB7B,IACTO,E,gFC1Bb,Q,QAAA,EAEauB,EAAa,CAACC,EAAAA,E,iMCErB,MAAOA,UAAuCC,EAAAA,EAApDC,c,oBAOc,KAAAC,mBAA8C,KAK9C,KAAAC,iBAAmD,IA6ChE,CAtC4BC,UAAO,I,EAAA,c,EAAA,YAExB,EAAKC,WAAc,EAAKC,WAAc,EAAKC,YAK/C,EAAKL,qBAAL,EAAKA,mBAAuB,EAAKG,UAAUG,IAAIC,EAAAA,EAAoB,OACnE,EAAKN,mBAAL,EAAKA,iBAAqB,EAAKE,UAAUG,IAAIE,EAAAA,EAA2B,OAEpE,EAAKR,oBAAuB,EAAKC,mBAKrC,EAAKA,iBAAiBQ,kBAAkB,EAAKL,UAAUM,GAAI,EAAKL,iBAC1D,EAAKL,mBAAmBW,YAC9B,EAAKX,mBAAmBY,gBAAgB,EAAKR,UAAUM,KAjB3B,E,gLAkB/B,CAKkBG,aAEXpC,KAAK0B,WAAc1B,KAAK2B,WAKxB3B,KAAKuB,oBAAuBvB,KAAKwB,mBAKrCxB,KAAKuB,mBAAmBc,iBAAiBrC,KAAK2B,UAAUM,IACxDjC,KAAKwB,iBAAiBc,oBAAoBtC,KAAK2B,UAAUM,IAC5D,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/type.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n\n/**\n * If block layout designer type loader\n */\nexport const IfBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/ifBlockDesigner.component')).IfBlockDesignerSAComponent;\n","<ng-container *ngIf=\"condition\">\n    <ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutDesignerTypeLoader, IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(IfBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        this.condition = this.options?.condition ?? false;\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this._injector.get(RelationsProcessor, null);\n        this.componentManager ??= this._injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this._metadata.id, this._instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this._metadata.id);\n        this.componentManager.unregisterComponent(this._metadata.id);\n    }\n}"],"names":["IfBlockLayoutMetadataLoader","IfBlockLayoutEditorMetadata","IfBlockRelationsMetadataLoader","IfBlockRelationsEditorMetadata","IfBlockLayoutDesignerTypeLoader","IfBlockDesignerSAComponent","i0","IfBlockSAComponent","LayoutComponentBase","condition","_onOptionsSet","this","options","t","selectors","inputs","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","DynamicItemExtensionBase","constructor","relationsProcessor","componentManager","_onInit","_injector","_metadata","_instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","_onDestroy","destroyComponent","unregisterComponent"],"sourceRoot":""}