{"version":3,"file":"6274.chunk.b716201fc4743aa7ecb5.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Grid panel layout metadata loader\n */\nexport const GridPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>> = async () => new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.cells\">\n    <ng-container *layoutComponentRenderer=\"type\"/>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId, PromiseOr} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadataLoader} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelComponentOptions>(options => options?.cells ?? [])\n@LayoutEditorMetadata(GridPanelLayoutMetadataLoader)\nexport class GridPanelSAComponent extends LayoutComponentBase<GridPanelComponentOptions> implements LayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this._fixCells();\n\n        const style = this.componentElement.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this.options?.rows && Array.isArray(this.options?.rows))\n        {\n            for(const row of this.options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this.options?.columns && Array.isArray(this.options?.columns))\n        {\n            for(const column of this.options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this.options.rows ?? []).length; y++)\n        for(let x = 0; x < (this.options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this.options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this.options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this.options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this.options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridPanelLayoutMetadataLoader","_ref","GridPanelLayoutEditorMetadata","apply","arguments","i0","GridPanelSAComponent_ng_container_0_ng_container_1_Template","type_r1","GridPanelSAComponent","LayoutComponentBase","onOptionsSet","this","_fixCells","style","componentElement","nativeElement","gridTemplateRows","gridTemplateColumns","options","rows","Array","isArray","row","height","columns","column","width","trim","_a","cells","grid","y","length","x","cell","package","name","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","GridPanelSAComponent_ng_container_0_Template","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","provide","useValue","DynamicItemExtensionBase","applyStyling","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","initialized","instance"],"sourceRoot":""}