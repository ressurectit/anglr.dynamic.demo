{"version":3,"file":"6164.chunk.586a55dd8755c9968366.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/extensions/stackPanelFlex.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Child extension that applies flex styling to child\n */\nexport class StackPanelFlexExtension extends DynamicItemExtensionBase<StackPanelFlexExtensionOptions> implements DynamicItemExtension<StackPanelFlexExtensionOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies flex styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n\n        if(isPresent(options?.flex))\n        {\n            const style = this.element?.nativeElement.style;\n\n            if(style && this.options)\n            {\n                style.flex = this.options.flex ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata loader\n */\nexport const StackPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>> = async () => new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n","@for(type of options?.children; track type)\n{\n    <ng-container *layoutComponentRenderer=\"type\"/>\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadataLoader} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<StackPanelComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(StackPanelLayoutMetadataLoader)\nexport class StackPanelSAComponent extends LayoutComponentBase<StackPanelComponentOptions> implements LayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n\n        style.flexDirection = this.options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this.options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {StackPanelFlexExtension} from './extensions';\nimport {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;\n\nexport const childExtensions = [StackPanelFlexExtension];\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["StackPanelFlexExtension","DynamicItemExtensionBase","onInit","this","_applyStyling","onOptionsChange","options","isPresent","flex","style","element","nativeElement","StackPanelLayoutMetadataLoader","_ref","StackPanelLayoutEditorMetadata","apply","arguments","i0","StackPanelSAComponent_For_1_ng_container_0_Template","type_r1","StackPanelSAComponent","LayoutComponentBase","onOptionsSet","_setStyles","componentElement","flexDirection","horizontal","flexWrap","wrap","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","StackPanelSAComponent_For_1_Template","children","CommonModule","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","childExtensions","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","provide","useValue","applyStyling","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","initialized","instance"],"sourceRoot":""}