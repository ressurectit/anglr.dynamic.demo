{"version":3,"file":"160.chunk.2020e93c7693ec519fd5.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/misc/factories.ts","webpack://ng-universal-demo/./app/services/storeData/storeData.service.ts","webpack://ng-universal-demo/../handlebars-components/src/services/handlebarsDynamicModuleItemsProvider/handlebarsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../handlebars-components/src/services/handlebarsDynamicModuleTypesProvider/handlebarsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../handlebars-components/src/services/handlebarsDynamicModuleRelationsProvider/handlebarsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../handlebars-components/src/misc/providers.ts","webpack://ng-universal-demo/../handlebars-components/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../tinymce-components/src/services/tinyMceDynamicModuleItemsProvider/tinyMceDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../tinymce-components/src/services/tinyMceDynamicModuleTypesProvider/tinyMceDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../tinymce-components/src/services/tinyMceDynamicModuleRelationsProvider/tinyMceDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../tinymce-components/src/misc/providers.ts","webpack://ng-universal-demo/../tinymce-components/src/misc/utils.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["import {FactoryProvider} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\n\nimport {StoreDataService} from '../services/storeData';\n\n/**\n * Creates factory provider for store data service\n * @param storeName - Name of storage that should be used\n */\nexport function createStoreDataServiceFactory(storeName: string): FactoryProvider\n{\n    return {\n        provide: StoreDataService,\n        useFactory: (storage: PermanentStorage) => new StoreDataService(storage, storeName),\n        deps: [PERMANENT_STORAGE]\n    };\n}","import {PermanentStorage} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Service used for obtaining and storing data\n */\nexport class StoreDataService<TData = any>\n{\n    //######################### constructor #########################\n    constructor(private _storage: PermanentStorage,\n                private _storeKey: string,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Stores data into store\n     * @param name - Name of stored data\n     * @param data - Data to be stored\n     */\n    public setData(name: string, data: TData): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data\n     * @param name - Name of data to be retrieved\n     */\n    public getData(name: string): TData|null\n    {\n        return (this._storage.get(this._storeKey)?.[name]) ?? null;\n    }\n\n    /**\n     * Removes data from store\n     * @param name - Name of data to be removed\n     */\n    public removeData(name: string): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        delete store[name];\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data names\n     */\n    public getStored(): string[]\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        return Object.keys(store);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for handlebars module items\n */\n@Injectable()\nexport class HandlebarsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'handlebars-components':\n            {\n                try\n                {\n                    this._logger?.debug('HandlebarsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/handlebars-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('HandlebarsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for handlebars types\n */\n@Injectable()\nexport class HandlebarsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('HandlebarsDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'handlebars-components':\n                    return await import('@anglr/dynamic/handlebars-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('HandlebarsDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for handlebars types\n */\n@Injectable()\nexport class HandlebarsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('HandlebarsDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'handlebars-components':\n                    return await import('@anglr/dynamic/handlebars-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('HandlebarsDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {HandlebarsDynamicModuleItemsProvider, HandlebarsDynamicModuleRelationsProvider, HandlebarsDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for handlebars package layout components provider\n */\nexport const HANDLEBARS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: HandlebarsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for handlebars dynamic layout module types provider\n */\nexport const HANDLEBARS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: HandlebarsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for handlebars dynamic relations types provider\n */\nexport const HANDLEBARS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: HandlebarsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for handlebars package relations nodes provider\n */\nexport const HANDLEBARS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: HandlebarsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for handlebars package relations components provider\n */\nexport const HANDLEBARS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: HandlebarsDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {HANDLEBARS_LAYOUT_COMPONENTS_PROVIDER, HANDLEBARS_LAYOUT_MODULE_TYPES_PROVIDER, HANDLEBARS_RELATIONS_COMPONENTS_PROVIDER, HANDLEBARS_RELATIONS_MODULE_TYPES_PROVIDER, HANDLEBARS_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout handlebars subpackage\n */\nexport function provideHandlebarsLayout(): Provider[]\n{\n    return [\n        HANDLEBARS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations handlebars subpackage\n */\nexport function provideHandlebarsRelations(): Provider[]\n{\n    return [\n        HANDLEBARS_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor handlebars subpackage\n */\nexport function provideHandlebarsLayoutEditor(): Provider[]\n{\n    return [\n        HANDLEBARS_LAYOUT_COMPONENTS_PROVIDER,\n        HANDLEBARS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('handlebars-components'),\n    ];\n}\n\n/**\n * Providers for relations editor handlebars subpackage\n */\nexport function provideHandlebarsRelationsEditor(): Provider[]\n{\n    return [\n        HANDLEBARS_RELATIONS_MODULE_TYPES_PROVIDER,\n        HANDLEBARS_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('handlebars-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor handlebars subpackage\n */\nexport function provideHandlebarsLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideHandlebarsRelationsEditor(),\n        ...provideHandlebarsLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations handlebars subpackage\n */\nexport function provideHandlebarsLayoutRelations(): Provider[]\n{\n    return [\n        ...provideHandlebarsLayout(),\n        ...provideHandlebarsRelations(),\n    ];\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeMetadata} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>> = new InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>>('RELATIONS_HISTORY_MANAGER');","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for tiny MCE module items\n */\n@Injectable()\nexport class TinyMceDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'tinymce-components':\n            {\n                try\n                {\n                    this._logger?.debug('TinyMceDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/tinymce-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('TinyMceDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for tiny MCE types\n */\n@Injectable()\nexport class TinyMceDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('TinyMceDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'tinymce-components':\n                    return await import('@anglr/dynamic/tinymce-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('TinyMceDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for tiny MCE types\n */\n@Injectable()\nexport class TinyMceDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('TinyMceDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'tinymce-components':\n                    return await import('@anglr/dynamic/tinymce-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('TinyMceDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {TinyMceDynamicModuleItemsProvider, TinyMceDynamicModuleRelationsProvider, TinyMceDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for tiny MCE package layout components provider\n */\nexport const TINY_MCE_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: TinyMceDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for tiny MCE dynamic layout module types provider\n */\nexport const TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: TinyMceDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for tiny MCE dynamic relations types provider\n */\nexport const TINY_MCE_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: TinyMceDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for tiny MCE package relations nodes provider\n */\nexport const TINY_MCE_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: TinyMceDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for tiny MCE package relations components provider\n */\nexport const TINY_MCE_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: TinyMceDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {TINY_MCE_LAYOUT_COMPONENTS_PROVIDER, TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER, TINY_MCE_RELATIONS_COMPONENTS_PROVIDER, TINY_MCE_RELATIONS_MODULE_TYPES_PROVIDER, TINY_MCE_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout tiny MCE subpackage\n */\nexport function provideTinyMceLayout(): Provider[]\n{\n    return [\n        TINY_MCE_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations tiny MCE subpackage\n */\nexport function provideTinyMceRelations(): Provider[]\n{\n    return [\n        TINY_MCE_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor tiny MCE subpackage\n */\nexport function provideTinyMceLayoutEditor(): Provider[]\n{\n    return [\n        TINY_MCE_LAYOUT_COMPONENTS_PROVIDER,\n        TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('tinymce-components'),\n    ];\n}\n\n/**\n * Providers for relations editor tiny MCE subpackage\n */\nexport function provideTinyMceRelationsEditor(): Provider[]\n{\n    return [\n        TINY_MCE_RELATIONS_MODULE_TYPES_PROVIDER,\n        TINY_MCE_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('tinymce-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor tiny MCE subpackage\n */\nexport function provideTinyMceLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideTinyMceRelationsEditor(),\n        ...provideTinyMceLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations tiny MCE subpackage\n */\nexport function provideTinyMceLayoutRelations(): Provider[]\n{\n    return [\n        ...provideTinyMceLayout(),\n        ...provideTinyMceRelations(),\n    ];\n}","var map = {\n\t\"./dataBlock/type\": [\n\t\t52402,\n\t\t3994,\n\t\t2402\n\t],\n\t\"./dataTemplate/type\": [\n\t\t57990,\n\t\t3994,\n\t\t7990\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 349;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./richTextBlock/type\": [\n\t\t31439,\n\t\t1439\n\t],\n\t\"./richTextSource/type\": [\n\t\t1240,\n\t\t1240\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 49705;\nmodule.exports = webpackAsyncContext;"],"names":["createStoreDataServiceFactory","storeName","provide","StoreDataService","useFactory","storage","deps","PERMANENT_STORAGE","constructor","_storage","_storeKey","setData","name","data","store","this","get","set","getData","removeData","getStored","Object","keys","HandlebarsDynamicModuleItemsProvider","_logger","tryToGet","source","package","debug","e","i0","LOGGER","factory","HandlebarsDynamicModuleTypesProvider","moduleName","HandlebarsDynamicModuleRelationsProvider","HANDLEBARS_LAYOUT_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","HANDLEBARS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","HANDLEBARS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","HANDLEBARS_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","HANDLEBARS_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideHandlebarsLayout","provideHandlebarsRelations","provideHandlebarsLayoutEditor","provideStaticPackageSource","provideHandlebarsRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideHandlebarsLayoutRelations","InputBooleanComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","_changeDetector","_initialized","values","control","_control","value","_controlSet","ngOnInit","resolvePromiseOr","_initialize","initialize","invalidateVisuals","detectChanges","inputs","val_r1","LAYOUT_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_LOADER","LAYOUT_METADATA_STORAGE","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_DATA_EXTRACTORS","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","RELATIONS_HISTORY_MANAGER","defaultExportExtractor","module","logger","localModule","isPresent","default","addSimpleChange","changes","key","currentValue","previousValue","firstChange","isFirstChange","packageName","PACKAGE_SOURCES","useValue","packages","packagesChange","NEVER","refresh","TinyMceDynamicModuleItemsProvider","TinyMceDynamicModuleTypesProvider","TinyMceDynamicModuleRelationsProvider","TINY_MCE_LAYOUT_COMPONENTS_PROVIDER","TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER","TINY_MCE_RELATIONS_MODULE_TYPES_PROVIDER","TINY_MCE_RELATIONS_NODES_PROVIDER","TINY_MCE_RELATIONS_COMPONENTS_PROVIDER","provideTinyMceLayout","provideTinyMceRelations","provideTinyMceLayoutEditor","provideTinyMceRelationsEditor","provideTinyMceLayoutRelationsEditor","provideTinyMceLayoutRelations","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","id","all","slice","exports"],"sourceRoot":""}