{"version":3,"file":"6440.chunk.3bd71086516bbcfa88c9.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.module.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../router/src/decorators/moduleRoutes.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts","webpack://ng-universal-demo/../../../../src/pipes/isPresent/isPresent.pipe.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {LAYOUT_HISTORY_MANAGER} from '@anglr/dynamic/layout-editor';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected store: StoreDataService,\n        \n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n    {\n        return metadata;\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/layout/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {EditorComponent} from './editor/editor.component';\n\nexport const components =\n[\n    EditorComponent,\n];","import {ClassProvider, FactoryProvider, NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {provideBasicLayoutEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\n\nimport {components} from './layoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {DemoLayoutPackageManager} from '../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideFormLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ]\n})\n@ModuleRoutes(components)\nexport class LayoutEditorModule\n{\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module relations provider for form module types\n */\n@Injectable()\nexport class FormDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic relations types provider\n */\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations nodes provider\n */\nexport const FORM_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations components provider\n */\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormRelations(): Provider[]\n{\n    return [\n        FORM_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage layout\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n/**\n * Default providers for form subpackage relations\n */\nexport function provideFormRelationsEditor(): Provider[]\n{\n    return [\n        FORM_RELATIONS_MODULE_TYPES_PROVIDER,\n        FORM_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n \n/**\n * Providers for layout relations editor form subpackage\n */\nexport function provideFormLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideFormRelationsEditor(),\n        ...provideFormLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations form subpackage\n */\nexport function provideFormLayoutRelations(): Provider[]\n{\n    return [\n        ...provideFormLayout(),\n        ...provideFormRelations(),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","<div class=\"dynamic-flex-row\">\n    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"dynamic-flex-row\">\n        <select class=\"dynamic-form-control dynamic-flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"dynamic-flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} ","var map = {\n\t\"./checkbox/type\": [\n\t\t34757,\n\t\t4757\n\t],\n\t\"./datepicker/type\": [\n\t\t96425,\n\t\t6425\n\t],\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t],\n\t\"./numberField/type\": [\n\t\t90560,\n\t\t560\n\t],\n\t\"./period/type\": [\n\t\t13487,\n\t\t3487\n\t],\n\t\"./radio/type\": [\n\t\t41197,\n\t\t1197\n\t],\n\t\"./select/type\": [\n\t\t98746,\n\t\t8746\n\t],\n\t\"./textField/type\": [\n\t\t80477,\n\t\t477\n\t],\n\t\"./textarea/type\": [\n\t\t25552,\n\t\t5552\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target,\n                                  'routeValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {RouterModule, Route, ExtraOptions} from '@angular/router';\n\nimport {extractRoutes} from '../misc/utils';\n\n/**\n * Extended route with possibility to extract children from components\n */\nexport interface ComponentRouteChildren extends Route\n{\n    /**\n     * Array of components which contains routes\n     */\n    childrenComponents?: Type<any>[];\n}\n\n/**\n * Describes options for ModuleRoutes decorator\n */\nexport interface ModuleRoutesOptions\n{\n    /**\n     * Indication that `forRoot` should be used during registration of routes\n     */\n    rootModule?: boolean;\n\n    /**\n     * Extra options used for `forRoot` module creation\n     */\n    rootModuleConfig?: ExtraOptions;\n\n    /**\n     * Routes that will be set before routedComponents\n     */\n    staticRoutesBefore?: ComponentRouteChildren[];\n\n    /**\n     * Routes that will be set after routedComponents\n     */\n    staticRoutesAfter?: ComponentRouteChildren[];\n}\n\n/**\n * Extracts routes from children components\n * @param route - Route which can contain array of components with routes\n */\nfunction extractChildrenComponents(route: ComponentRouteChildren): Route\n{\n    if(route.childrenComponents && route.childrenComponents.length)\n    {\n        const routes: ComponentRouteChildren[] = extractRoutes(route.childrenComponents).map(extractChildrenComponents);\n\n        if(route.children && route.children.length)\n        {\n            route.children =\n            [\n                ...route.children,\n                ...routes\n            ];\n        }\n        else\n        {\n            route.children = routes;\n        }\n    }\n\n    return route;\n}\n\n/**\n * Registers routes for module to which is attached\n * @param routedComponents - Array of components that will be used for routes extration\n * @param options - Optional options for defining routes\n */\nexport function ModuleRoutes(routedComponents: Type<any>[], options: ModuleRoutesOptions = {rootModule: false, staticRoutesAfter: [], staticRoutesBefore: []})\n{\n    return function<TFunction extends Function> (target: TFunction): TFunction\n    {\n        const ngModule: \n        {\n            ɵinj:\n            {\n                imports: any[]\n            }\n        } = target as any;\n        \n        if(ngModule.ɵinj && Array.isArray(ngModule.ɵinj.imports))\n        {\n            const routes = \n            [\n                ...(options.staticRoutesBefore || []).map(extractChildrenComponents),\n                ...extractRoutes(routedComponents).map(extractChildrenComponents),\n                ...(options.staticRoutesAfter || []).map(extractChildrenComponents)\n            ];\n\n            ngModule.ɵinj.imports.push(options.rootModule ? RouterModule.forRoot(routes, options.rootModuleConfig) : RouterModule.forChild(routes));\n        }\n\n        return target;\n    };\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Returns true if object is different from null or undefined\n */\n@Pipe(\n{\n    name: 'isPresent',\n    standalone: true,\n})\nexport class IsPresentSAPipe implements PipeTransform\n{\n    //######################### public methods #########################\n\n    /**\n     * Checks whether is value different from null or undefined\n     * @param value - Value to be checked\n     */\n    public transform(value: unknown): boolean\n    {\n        return isPresent(value);\n    }\n}"],"names":["EditorComponent","emptyMetadata","id","generateId","displayName","package","name","options","children","constructor","store","history","_metadata","_getMetadata","metadata","_loadDemo","this","DemoData","demoLayout","i0","i1","LAYOUT_HISTORY_MANAGER","selectors","decls","vars","consts","template","rf","ctx","$event","tmp_b_0","undefined","__decorate","BindThis","ComponentRoute","path","StoreDataService","MetadataHistoryManager","components","LayoutEditorModule","provide","LAYOUT_METADATA_STORAGE","useFactory","MetadataStorage","getData","deps","createStoreDataServiceFactory","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideFormLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","imports","DynamicLayoutEditorModule","withProviders","LoadSaveNewSAComponent","ModuleRoutes","FormComponentControlType","FormDynamicModuleItemsProvider","_logger","tryToGet","source","_this","debug","item","e","LOGGER","factory","ɵfac","FormDynamicModuleTypesProvider","module","moduleName","FormDynamicModuleRelationsProvider","FORM_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","FORM_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideFormLayout","provideStaticPackageSource","provideFormLayoutRelationsEditor","provideFormLayoutRelations","getFormControl","controlName","parentControl","defaultControlType","FormControl","defaultValue","get","getControlForType","type","FormArray","FormGroup","package_r4","package_r5","_r7","$implicit","ctx_r6","removePackage","PackageManagerComponent_div_5_option_4_Template","_r9","_r1","ctx_r8","addPackage","availablePackages","selectedIndex","PackageManagerComponent_div_5_div_7_Template","ctx_r0","usedPackages","PackageManagerComponent","packageManager","detailVisible","ngOnInit","updatedAvailablePackages","packageName","setUsedPackages","filter","itm","packages","find","it","PackageManagerComponent_div_5_Template","PackageManagerModule","CommonModule","ReactiveFormsModule","packagesChange","packagesChangeSubject","asObservable","result","packageSources","push","_usedPackages","value","usedPackagesChange","usedPackagesSubject","storageName","initSubscriptions","Subscription","Subject","inject","PERMANENT_STORAGE","PACKAGE_SOURCES","add","subscribe","next","set","refresh","destroy","unsubscribe","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","Object","exports","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","defineProperty","enumerable","configurable","writable","extractChildrenComponents","childrenComponents","length","routes","extractRoutes","routedComponents","rootModule","staticRoutesAfter","staticRoutesBefore","ngModule","ɵinj","Array","isArray","RouterModule","forRoot","rootModuleConfig","forChild","CastPipesModule","IsPresentSAPipe","transform","isPresent","pure","standalone"],"sourceRoot":""}