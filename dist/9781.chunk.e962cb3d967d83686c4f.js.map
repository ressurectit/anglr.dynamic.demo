{"version":3,"file":"9781.chunk.e962cb3d967d83686c4f.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../basic-components/src/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/ifBlock/type.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n","<ng-container *ngIf=\"condition\">\n    <ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n//TODO: maybe design time injection token for special displaying\n//TODO: maybe event dual template ???\n//TODO: maybe add support for custom layout designer component\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnChanges?.(changes));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnInit?.());\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}"],"names":["IfBlockLayoutMetadataLoader","IfBlockLayoutEditorMetadata","IfBlockRelationsMetadataLoader","IfBlockRelationsEditorMetadata","i0","IfBlockSAComponent","LayoutComponentBase","condition","t","selectors","inputs","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","constructor","missingTypeBehavior","ShowNotFound","isPresent","this","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_logger","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","component","instance","componentRef","ngOnChanges","changes","debug","id","ngOnDestroy","clear","nameof","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","data","registerExtensions","map","itm","addSimpleChange","options","resolvePromiseOr","ngOnInit","invalidateVisuals","changeDetectorRef","markForCheck","next","designer","destroy","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","LOGGER","outputs","exportAs","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","key","currentValue","previousValue","firstChange","isFirstChange"],"sourceRoot":""}