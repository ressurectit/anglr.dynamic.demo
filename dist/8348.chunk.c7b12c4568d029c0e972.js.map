{"version":3,"file":"8348.chunk.c7b12c4568d029c0e972.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"_designerDropLists\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {LAYOUT_MODULE_TYPES_LOADER} from '../../misc/tokens';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n        this._initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.initItems()));\n\n        this._getDesignerDropLists();\n        await this.initItems();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n\n    /**\n     * Initialize items in palette\n     */\n    protected async initItems(): Promise<void>\n    {\n        this._groupedItems = {};\n        this._allItems = [];\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n}","<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button mat-icon-button *ngIf=\"hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        (cdkDropListDropped)=\"data?.component?.addDescendant($event)\"\n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDrop() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CastPipesModule, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n        CastPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"visible\" class=\"properties-main\">\n    <div class=\"header\">properties</div>\n\n    <div class=\"static-properties\">\n        <div class=\"properties-form-group\">\n            <label class=\"properties-control-label\">type</label>\n            <div class=\"properties-form-static\">{{metadata?.metaInfo?.name ?? component?.options?.typeMetadata?.name}}</div>\n\n            <label class=\"properties-control-label\">id</label>\n            <div class=\"properties-form-static\">{{component?.options?.typeMetadata?.id}}</div>\n\n            <label class=\"properties-control-label\">display name</label>\n            <input class=\"properties-form-control\" type=\"text\" [formControl]=\"displayName\">\n        </div>\n    </div>\n\n\n    <div class=\"thin-scrollbar properties-controls\">\n        <ng-container *ngFor=\"let props of propertiesData\">\n            <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n                <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {addSimpleChange, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DebounceCall, Dictionary, extend, isPresent, NoopAction, resolvePromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutEditorPropertiesDefinitionMetadata, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n//TODO: keep focus when changing padding, margin on container\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected optionsFormSubscription: Subscription|null = null;\n\n    /**\n     * Promise used for syncing async operations\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected propertiesData: PropertiesEditorData[] = [];\n\n    //######################### constructor #########################\n    constructor(protected manager: LayoutEditorMetadataManager,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected formModelBuilder: FormModelBuilder,\n                protected changeDetector: ChangeDetectorRef,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this.initSubscriptions.add(this.manager.layoutChange.subscribe(() => this.initProperties()));\n        this.initSubscriptions.add(this.manager.selectedChange.subscribe(() => this.initProperties()));\n\n        this.displayName\n            .valueChanges\n            .subscribe(async displayName =>\n            {\n                if(this.component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this.component.options.typeMetadata.displayName = displayName;\n\n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n\n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await resolvePromiseOr(this.component.ngOnChanges?.(changes));\n                    this.manager.displayNameUpdated();\n                    this.history.getNewState();\n                }\n            });\n\n        await this.initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    @DebounceCall(10)\n    protected async initProperties(): Promise<void>\n    {\n        await this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n\n        if(isPresent(this.manager.selectedComponent))\n        {\n            this.visible = true;\n            const component = this.manager.getComponent(this.manager.selectedComponent);\n\n            if(component)\n            {\n                this.visible = true;\n                this.component = component;\n\n                await this.getMetadata();\n            }\n            else\n            {\n                this.hide();\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n\n        syncResolve?.();\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async getMetadata(): Promise<void>\n    {\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = new Subscription();\n        this.propertiesData = [];\n\n        if(this.component?.options?.typeMetadata)\n        {\n            this.displayName.setValue(this.component.options.typeMetadata.displayName || this.component.options.typeMetadata.id, {emitEvent: false});\n\n            this.metadata = await this.metadataExtractor.extractMetadata(this.component.options?.typeMetadata);\n\n            if(!this.metadata)\n            {\n                this.logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this.component.options?.typeMetadata.package, name: this.component.options?.typeMetadata.name});\n\n                this.hide();\n            }\n\n            //properties metadata\n            if(this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    this.initDynamicProperty(props);\n                }\n            }\n\n            if(this.component)\n            {\n                const parent = this.manager.getParent(this.component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this.metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            this.initDynamicProperty(props);\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected hide(): void\n    {\n        this.visible = false;\n        this.component = null;\n        this.metadata = null;\n        this.propertiesData = [];\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize dynamic property\n     * @param props - Property to be initialized\n     */\n    protected initDynamicProperty(props: LayoutEditorPropertiesDefinitionMetadata): void\n    {\n        const form = this.formModelBuilder.build(new props.modelType(this.component?.options?.typeMetadata.options));\n        const metadata = this.propertyExtractor.extract(props.modelType);\n\n        if(this.optionsFormSubscription)\n        {\n            this.optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n            {\n                if(this.component?.options?.typeMetadata)\n                {\n                    extend(true, this.component.options.typeMetadata.options, data);\n    \n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n    \n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await resolvePromiseOr(this.component.ngOnChanges?.(changes));\n                    this.component.invalidateVisuals();\n                    this.history.getNewState();\n                }\n            }));\n    \n            this.propertiesData.push(\n            {\n                form,\n                metadata,\n                controls: props.propertiesControls,\n            });\n        }\n    }\n}","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDrop())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnChanges?.(changes));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnInit?.());\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}"],"names":["ToLayoutDragDataSAPipe","transform","value","id","newId","itemSource","name","metadata","displayName","package","options","extend","metaInfo","defaultOptions","parentId","pure","standalone","i0","ComponentsPaletteSAComponent","constructor","_moduleTypesLoader","_changeDetector","packageManager","_metadataExtractor","_metadataManager","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","ngOnInit","add","layoutChange","subscribe","_getDesignerDropLists","usedPackagesChange","initItems","ngOnDestroy","this","unsubscribe","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","event","item","currentIdx","source","dropContainer","getSortedItems","findIndex","data","splice","flatTree","map","itm","component","reverse","packageName","usedPackages","types","loadItem","type","extractMetadata","push","warn","group","_a","detectChanges","LAYOUT_MODULE_TYPES_LOADER","LOGGER","selectors","features","decls","vars","consts","template","CommonModule","i3","DragDropModule","i4","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","styles","changeDetection","child_r5","ctx_r6","ComponentsTreeItemSAComponent","_manager","open","_canDrop","canDrop","hasChildren","children","length","selectedChange","highlightedChange","displayNameChange","toggle","expand","nodeId","typeMetadata","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","ctx_r1","ctx_r3","viewQuery","ctx","i2","MatButtonModule","ConnectDropListsSADirective","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","inputs","editorMetadata","layoutMetadata","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","CastPipesModule","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","propertiesMetadata","ngOnChanges","debug","clear","injector","createComponent","instance","form","resolvePromiseOr","initialize","invalidateVisuals","destroy","props_r2","PropertiesEditorSAComponent","manager","metadataExtractor","propertyExtractor","formModelBuilder","changeDetector","history","logger","initSubscriptions","optionsFormSubscription","syncPromise","Promise","resolve","visible","FormControl","propertiesData","initProperties","valueChanges","changes","addSimpleChange","displayNameUpdated","getNewState","syncResolve","getComponent","getMetadata","hide","setValue","emitEvent","error","optionsMetadata","props","initDynamicProperty","parent","getParent","parentMetadata","childPropertiesMetadata","build","modelType","extract","controls","propertiesControls","LAYOUT_HISTORY_MANAGER","FormModelBuilder","ReactiveFormsModule","i5","__decorate","DebounceCall","_cdkDropList","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","pipe","debounceTime","connectedTo","exportAs","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","metadataType","layoutEditorMetadata","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","factory","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","highlightedComponent","isBlank","asObservable","_buildFlatTree","selectComponent","next","unselectComponent","registerLayoutDesignerComponent","componentItem","unregisterLayoutDesignerComponent","index","indexOf","_buildFlatTreeForComponent","result","concat","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","propSymbol","meta","Reflect","get","prototype","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_childExtensions","_options","_metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentRef","nameof","customInjector","layoutComponentType","Ignore","ThrowError","Error","usedInjector","Injector","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","registerExtensions","extensions","changeDetectorRef","markForCheck","designer","LAYOUT_COMPONENT_TRANSFORM","outputs"],"sourceRoot":""}