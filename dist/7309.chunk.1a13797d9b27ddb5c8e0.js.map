{"version":3,"file":"7309.chunk.1a13797d9b27ddb5c8e0.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/type.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module relations provider for form module types\n */\n@Injectable()\nexport class FormDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic relations types provider\n */\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations nodes provider\n */\nexport const FORM_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations components provider\n */\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormRelations(): Provider[]\n{\n    return [\n        FORM_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage layout\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n/**\n * Default providers for form subpackage relations\n */\nexport function provideFormRelationsEditor(): Provider[]\n{\n    return [\n        FORM_RELATIONS_MODULE_TYPES_PROVIDER,\n        FORM_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n \n/**\n * Providers for layout relations editor form subpackage\n */\nexport function provideFormLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideFormRelationsEditor(),\n        ...provideFormLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations form subpackage\n */\nexport function provideFormLayoutRelations(): Provider[]\n{\n    return [\n        ...provideFormLayout(),\n        ...provideFormRelations(),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Material checkbox layout metadata loader\n */\nexport const MaterialCheckboxLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialCheckboxComponentOptions>> = async () => new (await import('./metadata/checkbox.layoutMetadata')).MaterialCheckboxLayoutEditorMetadata();\n\n/**\n * Material checkbox relations metadata loader\n */\nexport const MaterialCheckboxRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/checkbox.relationsMetadata')).MaterialCheckboxRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialCheckboxLayoutMetadataLoader, MaterialCheckboxRelationsMetadataLoader} from './checkbox.metadata';\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Component used for displaying material checkbox\n */\n@Component(\n{\n    selector: 'material-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatCheckboxModule,\n        ReactiveFormsModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialCheckboxRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialCheckboxLayoutMetadataLoader)\nexport class MaterialCheckboxSAComponent extends FormComponentBase<MaterialCheckboxComponentOptions, boolean> implements FormComponent<MaterialCheckboxComponentOptions>\n{}","<mat-checkbox [formControl]=\"control|asFormControl|asRequired\">{{options?.label}}</mat-checkbox>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialCheckboxSAComponent} from './checkbox.component';\n\n\nexport default MaterialCheckboxSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t34757,\n\t\t4757\n\t],\n\t\"./datepicker/type\": [\n\t\t96425,\n\t\t6425\n\t],\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t],\n\t\"./numberField/type\": [\n\t\t90560,\n\t\t560\n\t],\n\t\"./period/type\": [\n\t\t13487,\n\t\t3487\n\t],\n\t\"./radio/type\": [\n\t\t41197,\n\t\t1197\n\t],\n\t\"./select/type\": [\n\t\t98746,\n\t\t8746\n\t],\n\t\"./textField/type\": [\n\t\t80477,\n\t\t477\n\t],\n\t\"./textarea/type\": [\n\t\t25552,\n\t\t5552\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;"],"names":["FormComponentBase","LayoutComponentBase","value","oldValue","this","valueOutput","control","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","FormControl","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","InjectionToken","FormDynamicModuleItemsProvider","tryToGet","source","package","debug","e","factory","FormDynamicModuleTypesProvider","moduleName","FormDynamicModuleRelationsProvider","FORM_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","FORM_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideFormLayout","provideFormLayoutEditor","provideStaticPackageSource","provideFormLayoutRelationsEditor","provideFormLayoutRelations","defaultValue","get","type","FormArray","FormGroup","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialCheckboxLayoutMetadataLoader","MaterialCheckboxLayoutEditorMetadata","MaterialCheckboxRelationsMetadataLoader","MaterialCheckboxRelationsEditorMetadata","MaterialCheckboxSAComponent","selectors","standalone","decls","vars","consts","template","i0","FormPipesModule","CastPipesModule","MatCheckboxModule","ReactiveFormsModule","styles","changeDetection","RelationsEditorMetadata","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}