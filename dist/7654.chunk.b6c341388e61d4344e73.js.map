{"version":3,"file":"7654.chunk.b6c341388e61d4344e73.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/../css-components/src/misc/utils.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts"],"sourcesContent":["var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t278,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/css-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('@anglr/dynamic/css-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout css subpackage\n */\nexport function provideCssLayout(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor css subpackage\n */\nexport function provideCssLayoutEditor(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('css-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor css subpackage\n */\nexport function provideCssLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations css subpackage\n */\nexport function provideCssLayoutRelations(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, Input, FactoryProvider, inject, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    // styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        <FactoryProvider>\n        {\n            provide: EditorHotkeys,\n            useFactory: (hotkeys: AppHotkeysService, storage: MetadataStorage) => new EditorHotkeys(hotkeys, inject(LAYOUT_HISTORY_MANAGER), storage),\n            deps: [AppHotkeysService, MetadataStorage],\n        },\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        PackageManagerModule,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: EditorHotkeys,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,)\n    {\n        hotkeys.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys.destroy();\n    }\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <package-manager></package-manager>\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor style=\"width: 450px;\"></properties-editor>\n</div>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\nimport {resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await resolvePromiseOr(defaultExportExtractor(module, logger)));\n    const ext = (await resolvePromiseOr(extensionsExportsExtractor(module, logger)));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true, packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     * @param designerLayout - Indication whether provide extractor for layout designer types\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(designerLayout: boolean = true,\n                                packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(designerLayout, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default package layout components provider\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","package","debug","name","i0","LOGGER","factory","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideCssLayout","provideCssLayoutEditor","provideStaticPackageSource","provideCssLayoutRelationsEditor","provideCssLayoutRelations","DemoLayoutPackageManager","PackageManager","super","LayoutEditorSAComponent","hotkeys","history","changeDetector","initSubscriptions","Subscription","metadata","init","ngOnInit","this","add","pop","subscribe","detectChanges","ngOnChanges","changes","nameof","clean","setInitialState","ngOnDestroy","unsubscribe","destroy","LAYOUT_HISTORY_MANAGER","selectors","inputs","standalone","features","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","EditorHotkeys","useFactory","storage","inject","deps","AppHotkeysService","MetadataStorage","decls","vars","consts","template","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","PackageManagerModule","i2","MatTabsModule","i3","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","warn","DefaultDynamicModuleTypesProvider","layoutDesignerTypeExtractor","logger","def","resolvePromiseOr","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","data","layoutEditorDesignerType","type","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","DynamicModuleDataExtractor","Optional","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENT_TRANSFORM","useValue","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","Symbol","provideLayoutEditor","designerLayout","packages","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","pkg","isBlank","Array","isArray","DynamicLayoutEditorModule","ngModule","providers","DynamicLayoutModule","DEFAULT_LAYOUT_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","LAYOUT_COMPONENTS_LOADER","isLayoutComponentDef","isType","isPresent","some","itm","extensionsObject","isJsObject"],"sourceRoot":""}