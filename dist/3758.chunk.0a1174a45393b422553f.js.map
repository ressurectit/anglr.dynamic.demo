{"version":3,"file":"3758.chunk.0a1174a45393b422553f.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/formGroupProperty.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/modelPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputValidator.directive.ts"],"sourcesContent":["import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {FormGroup} from '@angular/forms';\n\nimport {ModelPropertyMetadata} from './modelPropertyMetadata.decorator';\n\n/**\n * Defines property value as FormGroup\n */\nexport function FormGroupProperty(): PropertyDecorator\n{\n    return ModelPropertyMetadata(\n    {\n        type: FormGroup\n    });\n}","import {Dictionary, nameof} from '@jscrpt/common';\n\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from '../misc/defaults';\n\n/**\n * Defines metadata for model property\n * @param metadata - Metadata for model property, used for creating form\n */\nexport function ModelPropertyMetadata<TArgs extends Dictionary<any> = any,\n                                      TModel = any>(metadata: ModelPropertyDecoratorMetadata<TArgs>): PropertyDecorator\n{\n    return function(target: Object, propertyKey: string|symbol): void\n    {\n        const trgt = target as ModelDecoratorMetadata<TModel>;\n\n        if(!trgt.ɵControlsMetadata)\n        {\n            Object.defineProperty(trgt, nameof<ModelDecoratorMetadata>('ɵControlsMetadata'),\n            {\n                value: {},\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n        }\n\n        //keep current validators\n        const originValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.validators ?? [];\n        const originAsyncValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.asyncValidators ?? [];\n\n        //merge all other values\n        trgt.ɵControlsMetadata[propertyKey as keyof TModel] = \n        {\n            ...ɵDefaultPropertyMetadata,\n            ...trgt.ɵControlsMetadata[propertyKey as keyof TModel],\n            ...metadata\n        };\n\n        //merge validators\n        const propertyMetadata = trgt.ɵControlsMetadata[propertyKey as keyof TModel];\n\n        propertyMetadata.validators =\n        [\n            ...originValidators,\n            ...propertyMetadata.validators,\n        ];\n\n        propertyMetadata.asyncValidators =\n        [\n            ...originAsyncValidators,\n            ...propertyMetadata.asyncValidators,\n        ];\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject, LayoutPropertyType} from '../../decorators';\nimport {DefaultKnownPropertyTypes, LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    @LayoutPropertyName('Css class')\n    @LayoutPropertyDescription('Css class that should be applied to component')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public cssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"properties-form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number class=\"dynamic-flex-1\" [control]=\"_value\"></input-number> <select-value style=\"flex: 0 0 48px;\" [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<div>Margin</div>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div class=\"properties-form-group\">\n    <label class=\"properties-control-label\">{{propertiesMetadata?.cssClass?.name ?? 'cssClass'}} <span *ngIf=\"propertiesMetadata?.cssClass?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.cssClass?.description\"></span></label>\n    <input-string [control]=\"form?.controls?.cssClass | asRequired\"></input-string>\n</div>\n\n<margin-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","<div>Padding</div>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Dictionary, extend, globalDefine, isBlank, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}","import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()',\n        '[disabled]': 'disabled',\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n\n    /**\n     * Indication whether is number input disabled\n     */\n    public disabled: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setDisabledState?(isDisabled: boolean): void\n    {\n        this.disabled = isDisabled;\n    }\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}"],"names":["LayoutPropertyDescription","description","DynamicPropertyMetadata","LayoutPropertyMetadata","LayoutPropertyName","name","LayoutPropertyType","type","FormGroupProperty","metadata","FormGroup","target","propertyKey","trgt","ɵControlsMetadata","Object","defineProperty","nameof","value","writable","enumerable","configurable","originValidators","validators","originAsyncValidators","asyncValidators","ɵDefaultPropertyMetadata","propertyMetadata","LayoutPropertyObject","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","object","MarginModel","constructor","top","right","bottom","left","mapValuesToThis","this","__decorate","PaddingModel","ComponentStylingModel","cssClass","margin","padding","textStyling","InputNumberComponent","PropertyTypeControlBase","selectors","features","decls","vars","consts","template","i0","InputSizeComponent","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","control","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ComponentStylingPropertiesControlComponent","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","initialize","invalidateVisuals","detectChanges","inputs","property","has","globalDefine","global","isBlank","ngDesignerMetadata","NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","disabled","writeValue","setProperty","nativeElement","registerOnChange","fn","replace","test","parseFloat","NaN","registerOnTouched","setDisabledState","isDisabled","Validators","static","isNaN","max","isPresent","min","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","number"],"sourceRoot":""}