{"version":3,"file":"1990.chunk.ea2f5a5318b403a67c99.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.utils.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/extensions/customComponentData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/type.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      value: input.defaultValue,\n                                      writable: true,\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n            this.customComponent[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      value: output.defaultValue,\n                                      writable: true,\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentComponentOptions} from './customComponent.options';\n\n/**\n * Custom component layout metadata loader\n */\nexport const CustomComponentLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<CustomComponentComponentOptions>> = async () => new (await import('./metadata/customComponent.layoutMetadata')).CustomComponentLayoutEditorMetadata();\n\n/**\n * Custom component relations metadata loader\n */\nexport const CustomComponentRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/customComponent.relationsMetadata')).CustomComponentRelationsEditorMetadata();\n\n/**\n * Custom component layout designer type loader\n */\nexport const CustomComponentLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/customComponentDesigner.component')).CustomComponentDesignerSAComponent;\n","import {Component, ChangeDetectionStrategy, inject, SimpleChanges} from '@angular/core';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions} from './customComponent.options';\nimport {CustomComponentLayoutDesignerTypeLoader, CustomComponentLayoutMetadataLoader, CustomComponentRelationsMetadataLoader} from './customComponent.metadata';\nimport {ComponentInputsRelations} from '../componentInputs/componentInputs.relations';\nimport {ComponentOutputsRelations} from '../componentOutputs/componentOutputs.relations';\nimport {getInputs, getOutputs} from './customComponent.utils';\n\n/**\n * Component used for displaying custom component\n */\n@Component(\n{\n    selector: 'custom-component',\n    templateUrl: 'customComponent.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(CustomComponentLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(CustomComponentRelationsMetadataLoader)\n@LayoutEditorMetadata(CustomComponentLayoutMetadataLoader)\nexport class CustomComponentSAComponent extends LayoutComponentBase<CustomComponentComponentOptions> implements LayoutComponent<CustomComponentComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of custom component\n     */\n    protected id: string = '';\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    /**\n     * Parent relations processor instance\n     */\n    protected parentRelationsProcessor: RelationsProcessor|null = inject(RelationsProcessor, {skipSelf: true, optional: true});\n\n    /**\n     * Parent relations component manager\n     */\n    protected parentComponentManager: RelationsComponentManager|null = inject(RelationsComponentManager, {skipSelf: true, optional: true});\n\n    /**\n     * Instance of inputs relations if it exists\n     */\n    protected inputsRelations: ComponentInputsRelations|null = null;\n\n    /**\n     * Instance of outputs relations if it exists\n     */\n    protected outputsRelations: ComponentOutputsRelations|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public methods #########################\n\n    /**\n     * Method that allows processing of custom component data\n     * @param _name - Name of custom component\n     */\n    public processCustomComponentData(_name: string): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async afterInit(): Promise<void>\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        //get layout metadata and displays layout\n        this.metadata = await this.layoutMetadataStorage.getMetadata(this.options.name);\n\n        let relations: RelationsNodeMetadata[]|null = null;\n\n        //gets and initialize inner relations of custom component\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            relations = await this.relationsMetadataStorage.getMetadata(this.options.name);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n\n        //if relations available initialize custom component inputs\n        if(relations)\n        {\n            const inputsMeta = getInputs(relations);\n\n            if(inputsMeta)\n            {\n                this.inputsRelations = new ComponentInputsRelations(this.injector);\n                this.inputsRelations.initInputs(inputsMeta, inputsMeta.id);\n            }\n\n            const outputsMeta = getOutputs(relations);\n\n            if(outputsMeta)\n            {\n                this.outputsRelations = new ComponentOutputsRelations(this.injector);\n                this.outputsRelations.initOutputs(outputsMeta, outputsMeta.id, this);\n            }\n        }\n\n        //initialize and register relations from outside world to this custom component\n        if(this.parentComponentManager && this.parentRelationsProcessor)\n        {\n            this.parentComponentManager.registerComponent(this.id, this);\n            await this.parentRelationsProcessor.initialized;\n            this.parentRelationsProcessor.updateRelations(this.id);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        this.inputsRelations?.ngOnChanges(changes);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.parentRelationsProcessor || !this.parentComponentManager)\n        {\n            return;\n        }\n\n        this.parentRelationsProcessor.destroyComponent(this.id);\n        this.parentComponentManager.unregisterComponent(this.id);\n    }\n}","<ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>","import {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs/componentInputs.options';\nimport {ComponentOutputsRelationsOptions} from '../componentOutputs/componentOutputs.options';\n\n//TODO: check if this is duplicit in output js bundle\n\n/**\n * Gets component inputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getInputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentInputs');\n}\n\n/**\n * Gets component outputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getOutputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentOutputs');\n}\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport type {CustomComponentSAComponent} from '../customComponent.component';\nimport {CustomComponentDataExtensionOptions} from '../customComponentExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class CustomComponentDataExtension extends DynamicItemExtensionBase<CustomComponentDataExtensionOptions, CustomComponentSAComponent> implements DynamicItemExtension<CustomComponentDataExtensionOptions, CustomComponentSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n            await this.instance.processCustomComponentData(this.metadata.name);\n        }\n    }\n}","// import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {CustomComponentSAComponent} from './customComponent.component';\nimport {CustomComponentDataExtension} from './extensions';\n\nexport default CustomComponentSAComponent;\n\nexport const extensions = [ComponentStylingExtension, CustomComponentDataExtension];","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","ComponentInputsRelationsMetadataLoader","ComponentInputsRelationsEditorMetadata","ComponentInputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","input","relationsOptions","inputs","defineProperty","name","value","defaultValue","writable","Subject","registerComponent","initialized","updateRelations","RelationsEditorMetadata","Injector","ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","customComponent","initOutputs","outputRelations","output","outputs","CustomComponentLayoutMetadataLoader","CustomComponentLayoutEditorMetadata","CustomComponentRelationsMetadataLoader","CustomComponentRelationsEditorMetadata","CustomComponentLayoutDesignerTypeLoader","CustomComponentDesignerSAComponent","CustomComponentSAComponent","LayoutComponentBase","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","parentRelationsProcessor","skipSelf","parentComponentManager","inputsRelations","outputsRelations","metadata","processCustomComponentData","_name","setId","afterInit","options","getMetadata","relations","setRelations","inputsMeta","getInputs","outputsMeta","getOutputs","onChanges","onDestroy","t","selectors","standalone","features","i0","decls","vars","consts","template","LayoutComponentRendererSADirective","styles","changeDetection","find","itm","package","CustomComponentDataExtension","DynamicItemExtensionBase","onInit","instance","extensions","ComponentStylingExtension","changeDetector","componentElement","logger","destroyed","element","extensionsOptions","ext","destroy","ngOnInit","onOptionsSet","extension","initialize","nameof","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","detectChanges","_changes","LOGGER","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}