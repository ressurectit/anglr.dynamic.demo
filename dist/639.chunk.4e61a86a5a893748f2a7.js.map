{"version":3,"file":"639.chunk.4e61a86a5a893748f2a7.js","mappings":"0hBAWO,MAAMA,EAA6B,eAAAC,EAAAC,GAAqF,mBAAY,WAAW,0DAA+CC,8BAA+B,sBAA1L,OAAAF,EAAAG,MAAA,KAAAC,UAAA,KAK7BC,EAAgC,eAAAC,EAAAL,GAA6D,mBAAY,WAAW,8EAAkDM,iCAAkC,sBAAxK,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAKhCI,EAAiC,eAAAC,EAAAR,GAAiD,yBAAmB,iCAAkDS,4BAA4B,sBAAlJ,OAAAD,EAAAN,MAAA,KAAAC,UAAA,K,wKCKvC,IAAMO,EAAN,cAAmCC,EAAAA,EA6BhBC,gBAAAA,CAAiBC,GAAsB,I,EAAAC,EAAAA,IAAA,MAAAF,iBAAAG,EAAA,Y,EAAA,kBAEnDD,IAAAE,KAAAD,EAAuBF,IAE1BI,EAAAA,EAAAA,IAA6B,UAAWJ,IAEvCE,EAAKG,iBAAiBC,cAAcC,UAAYL,EAAKM,mBAAmBN,EAAKO,OAAS,GACzF,E,gLACL,CAOmBC,YAAAA,GAQZC,KAAKC,SAASC,WAEbF,KAAKH,iBAAmBM,IAAAA,QAAmBH,KAAKC,QAAQC,WAG5DF,KAAKN,iBAAiBC,cAAcC,UAAYI,KAAKH,mBAAmBG,KAAKF,OAAS,EAC1F,G,wDA1DSZ,KAAoBkB,GAApBlB,EAAoB,G,qBAApBA,EAAoBmB,UAAA,iBAAAC,OAAA,CAAAR,KAAA,QAAAS,YAAA,EAAAC,SAAA,CAAAC,EAAAA,EAAAA,EAAAA,GAAAC,MAAA,EAAAC,KAAA,EAAAT,SAAA,SAAAU,EAAAC,GAAA,EAAAC,OAAA,sCAAAC,gBAAA,IAApB7B,GAAoB8B,EAAAA,EAAAA,IAAA,EAHhCC,EAAAA,EAAAA,GAAyBlC,IACzBmC,EAAAA,EAAAA,GAAwBtC,IACxBuC,EAAAA,EAAAA,GAAqB7C,IACTY,E,gFCtBb,Q,QAAmC,EAEtBkC,EAAa,CAACC,EAAAA,E,iDCIrB,SAAUJ,EAAyBK,GAErC,OAAOC,EAAAA,EAAAA,GAA0ED,EAAgB,2BACrG,C,kDCLM,SAAUH,EAAqBG,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,gbCAM,MAAgBnC,EADtBqC,WAAAA,GAQc,KAAAJ,WAA+C,GAO/C,KAAAK,WAAqB,EAoCrB,KAAAC,gBAAoCC,EAAAA,EAAAA,IAAOC,EAAAA,GAK3C,KAAAlC,kBAA4CiC,EAAAA,EAAAA,IAAOE,EAAAA,IAKnD,KAAAC,UAAqBH,EAAAA,EAAAA,IAAOI,EAAAA,GAK5B,KAAAC,QAAiBL,EAAAA,EAAAA,IAAOM,EAAAA,G,CA9ClC,eAAcC,GAEV,IAAIlC,KAAKC,QAEL,MAAM,IAAIkC,MAAM,wCAGpB,OAAOnC,KAAKC,OAChB,CAOA,WAAcmC,GAEV,OAAOpC,KAAKN,gBAChB,CAKA,qBAAc2C,GAEV,OAAOrC,KAAKC,OAChB,CAkCOqC,WAAAA,GAKH,GAFAtC,KAAKgC,OAAOO,MAAM,uEAAwE,CAACd,UAAWzB,KAAKyB,aAExGzB,KAAKyB,UAAR,CAKAzB,KAAKyB,WAAY,EAEjB,IAAI,MAAMe,KAAOxC,KAAKoB,WAElBoB,EAAIC,UAGRzC,KAAK0C,W,CACT,CAOaC,aAAAA,GAAa,IAAApD,EAAA,YAAAf,GAAC,YAEvB,MAAM6D,EAAoB9C,EAAK8C,kBAK/B,SAHM9C,EAAKqD,eACLrD,EAAKQ,eAERsC,EAEC,IAAI,MAAMQ,KAAatD,EAAK6B,iBAElByB,EAAUC,WAAWvD,EAAKuC,SAAUvC,EAAK6C,QAAS7C,SAI1DA,EAAKwD,WAAY,GAfDvE,EAgB1B,CAKaY,gBAAAA,CAAiBC,GAAsB,IAAA2D,EAAA,YAAAxE,GAAA,YAGhD,IAAGiB,EAAAA,EAAAA,IAAsC,aAAcJ,EACvD,CAEQA,GAAQI,EAAAA,EAAAA,IAAsC,YAAYwD,oBAEpDD,EAAKjD,gBAGf,MAAMsC,EAAoBW,EAAKX,kBAG/B,GAAGA,EAEC,IAAI,MAAMQ,KAAaG,EAAK5B,iBAElByB,EAAUK,cAAcb,GAItC,GAAGhD,GAAQI,EAAAA,EAAAA,IAAsC,YAAYwD,YAEzD,aAGED,EAAKG,iB,QAGR9D,GAAQI,EAAAA,EAAAA,IAAsC,aAEjD2D,EAAAA,EAAAA,IAAc/D,IAEd2D,EAAKK,UAAUhE,EAClB,GAnC+Cb,EAoCpD,CAKO8E,kBAAAA,CAAmBlC,GAEtBpB,KAAKoB,WAAaA,CACtB,CAKOmC,iBAAAA,GAEHvD,KAAK0B,eAAe8B,eACxB,CAOUZ,MAAAA,GAEV,CAKUG,SAAAA,GAEV,CAKUI,eAAAA,GAEV,CAMUE,SAAAA,CAAUI,GAEpB,CAKU1D,YAAAA,GAEV,CAKU2C,SAAAA,GAEV,E,iCA9NkBvD,EAAmB,E,kBAAnBA,G,iMCHhB,MAAOkC,UAAuCqC,EAAAA,EAApDlC,WAAAA,G,oBAOc,KAAAmC,mBAA8C,KAK9C,KAAAC,iBAAmD,IAwCjE,CAjC6BhB,MAAAA,GAAM,I,EAAArD,EAAA,Y,EAAC,YAExBA,EAAKuC,UAAavC,EAAKsE,UAAatE,EAAKuE,WAK7CvE,EAAKoE,qBAALpE,EAAKoE,mBAAuBpE,EAAKuC,SAASiC,IAAIC,EAAAA,EAAoB,OAClEzE,EAAKqE,mBAALrE,EAAKqE,iBAAqBrE,EAAKuC,SAASiC,IAAIE,EAAAA,EAA2B,OAEnE1E,EAAKoE,oBAAuBpE,EAAKqE,mBAKrCrE,EAAKqE,iBAAiBM,kBAAkB3E,EAAKsE,SAASM,GAAI5E,EAAKuE,gBACzDvE,EAAKoE,mBAAmBS,YAC9B7E,EAAKoE,mBAAmBU,gBAAgB9E,EAAKsE,SAASM,KAAI,E,gLAC9D,CAKmBzB,SAAAA,GAEX1C,KAAK2D,oBAAuB3D,KAAK4D,kBAAqB5D,KAAK6D,WAK/D7D,KAAK2D,mBAAmBW,iBAAiBtE,KAAK6D,SAASM,IACvDnE,KAAK4D,iBAAiBW,oBAAoBvE,KAAK6D,SAASM,IAC5D,E,+VCnDE,MAAgBT,EA8BlBlC,WAAAA,CAAsBqC,GAAA,KAAAA,SAAAA,EAHZ,KAAAO,aAAuB,CAKjC,CAOatB,UAAAA,CAAWhB,EAAoBM,EAAkC0B,GAAmB,IAAAvE,EAAA,YAAAf,GAAA,YAE7Fe,EAAK6E,aAAc,EAEnB7E,EAAKuC,SAAWA,EAChBvC,EAAK6C,QAAUA,EACf7C,EAAKuE,SAAWA,QAEVvE,EAAKqD,QAAS,GARyEpE,EASjG,CAKa0E,aAAAA,CAAcjD,GAAiB,IAAA+C,EAAA,YAAAxE,GAAA,YAExCwE,EAAK/C,QAAUA,EAEX+C,EAAKoB,oBAKHpB,EAAKG,kBAAkB,GATW3E,EAU5C,CAKOiE,OAAAA,GAEHzC,KAAK0C,WACT,CAOUE,MAAAA,GAEV,CAKUO,eAAAA,GAEV,CAKUT,SAAAA,GAEV,E","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.metadata.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/dataBlock.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\n\n/**\n * Data block layout metadata loader\n */\nexport const DataBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DataBlockComponentOptions>> = async () => new (await import('./metadata/dataBlock.layoutMetadata')).DataBlockLayoutEditorMetadata();\n\n/**\n * Data block relations metadata loader\n */\nexport const DataBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/dataBlock.relationsMetadata')).DataBlockRelationsEditorMetadata();\n\n/**\n * Data block layout designer type loader\n */\nexport const DataBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/dataBlockDesigner.component')).DataBlockDesignerSAComponent;\n\n","import {Component, ChangeDetectionStrategy, SimpleChanges, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\nimport Handlebars from 'handlebars';\n\nimport {DataBlockComponentOptions} from './dataBlock.options';\nimport {DataBlockLayoutDesignerTypeLoader, DataBlockLayoutMetadataLoader, DataBlockRelationsMetadataLoader} from './dataBlock.metadata';\n\n/**\n * Component used for displaying data block\n */\n@Component(\n{\n    selector: 'data-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(DataBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(DataBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(DataBlockLayoutMetadataLoader)\nexport class DataBlockSAComponent extends LayoutComponentBase<DataBlockComponentOptions> implements LayoutComponent<DataBlockComponentOptions>, RelationsComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of compiled template\n     */\n    protected compiledTemplate: HandlebarsTemplateDelegate|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of data to be set to template\n     */\n    @Input()\n    public data: any;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public override async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.dynamicOnChanges(changes);\n\n        if(nameof<DataBlockSAComponent>('data') in changes)\n        {\n            this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        //TODO: check if required\n        // if(!this.initialized)\n        // {\n        //     return;\n        // }\n\n        if(this.options?.template)\n        {\n            this.compiledTemplate = Handlebars.compile(this.options.template);\n        }\n\n        this.componentElement.nativeElement.innerHTML = this.compiledTemplate?.(this.data) ?? '';\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {DataBlockSAComponent} from './dataBlock.component';\n\nexport default DataBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["DataBlockLayoutMetadataLoader","_ref","_asyncToGenerator","DataBlockLayoutEditorMetadata","apply","arguments","DataBlockRelationsMetadataLoader","_ref2","DataBlockRelationsEditorMetadata","DataBlockLayoutDesignerTypeLoader","_ref3","DataBlockDesignerSAComponent","DataBlockSAComponent","LayoutComponentBase","dynamicOnChanges","changes","_superprop_getDynamicOnChanges","_this","call","nameof","componentElement","nativeElement","innerHTML","compiledTemplate","data","onOptionsSet","this","options","template","Handlebars","t","selectors","inputs","standalone","features","i0","decls","vars","rf","ctx","styles","changeDetection","__decorate","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","destroyed","changeDetector","inject","ChangeDetectorRef","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onInit","extension","initialize","afterInit","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}