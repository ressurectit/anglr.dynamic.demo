{"version":3,"file":"7956.chunk.774e1433789179ba1568.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/node/customComponentNode.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/metadata/customComponent.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts"],"sourcesContent":["<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"custom\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\" *ngFor=\"let inputMeta of inputsMeta?.relationsOptions?.inputs\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"inputMeta.name\" [parent]=\"this\"></relation-node-input>\n                <div>{{inputMeta.name}}</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" *ngFor=\"let outputMeta of outputsMeta?.relationsOptions?.outputs\">\n                <div>{{outputMeta.name}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"outputMeta.name\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeOutputSAComponent, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentRelationsOptions} from '../customComponent.options';\nimport {ComponentInputsRelationsOptions} from '../../componentInputs';\nimport {ComponentOutputsRelationsOptions} from '../../componentOutputs';\nimport {LayoutComponentsRegister} from '../../../services';\nimport {getInputs, getOutputs} from '../customComponent.utils';\n\n/**\n * Relations node component for custom component\n */\n@Component(\n{\n    selector: 'custom-component-node',\n    templateUrl: 'customComponentNode.component.html',\n    // styleUrls: ['customComponentNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentNodeSAComponent extends RelationsNodeBase<CustomComponentRelationsOptions> implements RelationsNode<CustomComponentRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]> = inject(RELATIONS_METADATA_STORAGE);\n\n    /**\n     * Layout components register instance\n     */\n    protected layoutComponentsRegister: LayoutComponentsRegister = inject(LayoutComponentsRegister);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Metadata that contains information about available inputs\n     */\n    protected inputsMeta: RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined;\n\n    /**\n     * Metadata that contains information about available outputs\n     */\n    protected outputsMeta: RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(): Promise<void>\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            name: ''\n        };\n\n        const componentName = await this.layoutComponentsRegister.getComponentName(this.metadata.name);\n\n        if(!componentName)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.name = this.metadata.name;\n        const relations = await this.relationsMetadataStorage?.getMetadata(componentName) ?? [];\n        this.inputsMeta = getInputs(relations);\n        this.outputsMeta = getOutputs(relations);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentNodeSAComponent} from '../node/customComponentNode.component';\n\n/**\n * Custom component relations metadata\n */\nexport class CustomComponentRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        group: 'Components',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = CustomComponentNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}"],"names":["i0","CustomComponentNodeSAComponent","RelationsNodeBase","constructor","relationsMetadataStorage","inject","RELATIONS_METADATA_STORAGE","layoutComponentsRegister","LayoutComponentsRegister","initialize","metadata","relationsOptions","name","componentName","getComponentName","relations","getMetadata","inputsMeta","getInputs","outputsMeta","getOutputs","selectors","standalone","features","decls","vars","consts","template","CommonModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","CustomComponentRelationsEditorMetadata","metaInfo","group","nodeDefinition","Object","freeze","this","NodeRelationPath","destroying","_destroyingSubject","asObservable","_parentGroup","_relationManager","history","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","width","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","isPresent","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","package","error","Ignore","ThrowError","Error","createComponent","data","injector","node","subscribe","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","inputs","outputs","exportAs","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","element","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","height","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","ctx"],"sourceRoot":""}