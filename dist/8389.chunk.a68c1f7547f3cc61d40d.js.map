{"version":3,"file":"8389.chunk.a68c1f7547f3cc61d40d.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.module.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected store: StoreDataService,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n    {\n        return metadata;\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/layout/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {EditorComponent} from './editor/editor.component';\n\nexport const components =\n[\n    EditorComponent,\n];","import {ClassProvider, ExistingProvider, FactoryProvider, NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\n\nimport {components} from './layoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {DemoLayoutPackageManager} from '../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        <ExistingProvider>\n        {\n            provide: MetadataStorage,\n            useExisting: LAYOUT_METADATA_STORAGE,\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ]\n})\n@ModuleRoutes(components)\nexport class LayoutEditorModule\n{\n}","<div class=\"flex-row\">\n    <button class=\"btn-icon margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"flex-row\">\n        <select class=\"form-control flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"flex-row align-items-center margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"flex-1\">{{package}}</div>\n\n        <button class=\"btn-icon margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    styleUrls: ['packageManager.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\n\nimport {MetadataHistoryManager} from '../metadataHistoryManager/metadataHistoryManager.service';\nimport {MetadataStorage} from '../metadataStorage/metadataStorage.service';\n\n/**\n * Class that handles hotkeys for editors\n */\nexport class EditorHotkeys\n{\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,\n                protected historyManager: MetadataHistoryManager,\n                protected metadataStorage: MetadataStorage,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.metadataStorage.saveMetadata();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Saves current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.historyManager.undo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Undo current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.historyManager.redo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Redo current state of editor'));\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 100;\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: TMetadata[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return this.states[this.activeIndex];\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || !this.activeIndex)\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(this.states[this.activeIndex]);\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || !this.activeIndex)\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(this.states[this.activeIndex]);\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(this.activeIndex && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.parse(JSON.stringify(state)));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.parse(JSON.stringify(metadata)));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["EditorComponent","constructor","store","_metadata","emptyMetadata","id","generateId","displayName","package","name","options","children","_getMetadata","metadata","_loadDemo","this","DemoData","i0","selectors","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","StoreDataService","components","LayoutEditorModule","provide","LAYOUT_METADATA_STORAGE","useFactory","MetadataStorage","getData","deps","useExisting","createStoreDataServiceFactory","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","imports","DynamicLayoutEditorModule","LoadSaveNewSAComponent","ModuleRoutes","PackageManagerComponent","packageManager","detailVisible","usedPackages","availablePackages","ngOnInit","updatedAvailablePackages","addPackage","packageName","setUsedPackages","removePackage","filter","itm","packages","find","it","PackageManagerModule","CommonModule","ReactiveFormsModule","EditorHotkeys","hotkeys","historyManager","metadataStorage","destroy","init","add","Hotkey","saveMetadata","undo","redo","MetadataHistoryManager","metadataState","activeIndex","saveIndex","states","enabled","popSubject","Subject","historyChangeSubject","canUndo","isBlank","canRedo","length","saved","pop","asObservable","historyChange","state","next","getNewState","shift","splice","getMetadata","push","JSON","parse","stringify","save","setInitialState","clean","enable","disable","METADATA_STATE_MANAGER","factory","storageName","_usedPackages","initSubscriptions","Subscription","usedPackagesSubject","packagesChangeSubject","inject","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","get","source","packagesChange","subscribe","result","value","usedPackagesChange","set","refresh","unsubscribe"],"sourceRoot":""}