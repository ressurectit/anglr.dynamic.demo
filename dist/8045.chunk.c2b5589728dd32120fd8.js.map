{"version":3,"file":"8045.chunk.c2b5589728dd32120fd8.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">name</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"name\">\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"data.allowSkipInit\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\"><input type=\"checkbox\" formControlName=\"skipInit\"> skip init </label>\n    </div>\n\n    <div class=\"dynamic-flex-column dynamic-margin-bottom-extra-small\" *ngIf=\"!data.noDefaultValue\">\n        <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-align-self-center\" (click)=\"showCodeEditor()\">\n            <span>default value</span>\n        </button>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"true\">\n        <span>ok</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}","import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-margin-top-extra-small\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>ok</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}"],"names":["ComponentEndpointModel","constructor","value","defaultValue","name","skipInit","mapValuesToThis","this","i0","ConfigureNodeEndpointSAComponent","data","dialog","formModelBuilder","form","build","valueChanges","subscribe","extend","showCodeEditor","content","isPresent","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","languageModel","JsonLanguageModel","afterClosed","getJson","TITLED_DIALOG_DATA","selectors","standalone","features","FormModelBuilder","decls","vars","consts","template","ReactiveFormsModule","MatDialogModule","CommonModule","encapsulation","changeDetection","NodeRelationPath","destroying","_destroyingSubject","asObservable","_parentGroup","_relationManager","history","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","package","error","Ignore","ThrowError","Error","createComponent","injector","node","metadata","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","inputs","outputs","exportAs","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","element","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","ctx","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","label","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","noSemanticValidation","noSyntaxValidation","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","contentChange","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","dispose","editor","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","initialData","language","Uri","extension","setModel","editorContent","saveAndClose","close","LanguageModel","getModel"],"sourceRoot":""}