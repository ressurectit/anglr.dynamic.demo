{"version":3,"file":"4146.chunk.e4912610f7827763e536.js","mappings":"yWAMO,MAAMA,EAA4B,e,EAAAC,G,EAA6D,mBAAY,WAAW,wFAA8CC,6BAA8B,E,+KAAA,kBAAhK,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,yHCQlC,IAAMC,EAAN,MAmBH,oBAAWC,GAEP,OAAOC,KAAKC,iBAChB,CACA,oBAAWF,CAAiBG,GAExBF,KAAKC,kBAAoBC,EAEzBF,KAAKG,YACT,CAmBAC,WAAAA,CAAsBC,GAAA,KAAAA,SAAAA,EAElBL,KAAKM,aAAeN,KAAKK,SAASE,IAAIC,EAAAA,EAC1C,CAOOC,gBAAAA,CAAiBC,IAEjBC,EAAAA,EAAAA,IAAuB,eAAgBD,IAEtCV,KAAKY,MAAQZ,KAAKa,UAE1B,CAOOC,iBAAAA,GAEP,CAOUX,UAAAA,GAAU,IAAAY,EAAA,KAEhB,GAAGf,KAAKD,kBAEDC,KAAKD,iBAAiBiB,eAErB,IAAI,MAAMC,KAAQjB,KAAKD,iBAAiBiB,eACxC,CACI,MAAME,EAAgBlB,KAAKD,iBAAiBiB,eAAeC,GAExDC,EAAcC,MAEbC,OAAOC,eAAerB,KACAiB,EACA,CACIK,cAAc,EACdC,YAAY,EACZC,IAAK,WAAF,I,EAAA9B,G,EAAE,UAAMQ,GAEP,IAAIgB,EAAcC,KAEd,OAGJ,MAAMM,QAAkBV,EAAKT,aAAaoB,SAAwBR,EAAcS,GAAIT,EAAcC,MAElG,GAAIM,EAKJ,IAEIA,EAAUG,KAAKb,EAAfU,CAAqBvB,E,CAEzB,MAAM2B,GAEFC,QAAQC,MAAMF,E,CAEtB,E,+KAAC,gBAAAG,GAAA,OAAAtC,EAAAE,MAAA,KAAAC,UAAA,EAtBI,I,CA4BnD,IAxFOoC,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,OAAO,gEASDD,EAAAA,EAAAA,IAAA,EADNE,EAAAA,EAAAA,MAAe,2DA3CPrC,GAAcmC,EAAAA,EAAAA,IAAA,EAF1BG,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwB5C,IAA6B,6BAgDlB6C,EAAAA,KA/CvBxC,GCZb,S","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/state.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/state.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * State relations metadata loader\n */\nexport const StateRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/state.relationsMetadata')).StateRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {StateRelationsMetadataLoader} from './state.metadata';\nimport {StateRelationsOptions} from './state.options';\nimport {StatefullClass, InputFunction} from './state.interface';\n\n/**\n * State relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(StateRelationsMetadataLoader)\nexport class StateRelations<TState = unknown> implements RelationsComponent<StateRelationsOptions>, StatefullClass<TState>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: StateRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): StateRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: StateRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Initial state value that is set\n     */\n    @Input()\n    public initState: TState|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Data that represents current state\n     */\n    @DynamicOutput()\n    public state: TState|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.codeExecutor = this.injector.get(CodeExecutor);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<StateRelations>('initState') in changes)\n        {\n            this.state = this.initState;\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.inputFunctions)\n            {\n                for(const name in this.relationsOptions.inputFunctions)\n                {\n                    const inputFuncData = this.relationsOptions.inputFunctions[name];\n\n                    if(inputFuncData.code)\n                    {\n                        Object.defineProperty(this,\n                                              name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: async value =>\n                                                  {\n                                                      if(!inputFuncData.code)\n                                                      {\n                                                          return;\n                                                      }\n\n                                                      const inputFunc = await this.codeExecutor.loadData<InputFunction>(inputFuncData.id, inputFuncData.code);\n  \n                                                      if(!inputFunc)\n                                                      {\n                                                          return;\n                                                      }\n                                          \n                                                      try\n                                                      {\n                                                          inputFunc.bind(this)(value);\n                                                      }\n                                                      catch(e)\n                                                      {\n                                                          console.error(e);\n                                                      }\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n    }\n}","import {StateRelations} from './state.relations';\n\nexport default StateRelations;"],"names":["StateRelationsMetadataLoader","_ref","StateRelationsEditorMetadata","apply","arguments","StateRelations","relationsOptions","this","ɵRelationsOptions","value","initialize","constructor","injector","codeExecutor","get","CodeExecutor","dynamicOnChanges","changes","nameof","state","initState","invalidateVisuals","_this","inputFunctions","name","inputFuncData","code","Object","defineProperty","configurable","enumerable","set","inputFunc","loadData","id","bind","e","console","error","_x","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}