{"version":3,"file":"1969.chunk.dc72c4a4db701e1e9bad.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/misc/components/configureSyncProperty/configureSyncProperty.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/node/syncValuesNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/syncValues/metadata/syncValues.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputValidator.directive.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\n\n/**\n * Rest relations options model\n */\nexport class SyncValuesRelationsOptionsModel implements SyncValuesRelationsOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public triggerSync: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public idleTimeout: number|undefined|null = 0;\n\n    /**\n     * @inheritdoc\n     */\n    public syncProperties: string[]|null|undefined;\n    \n    //######################### constructor #########################\n    constructor(value: SyncValuesRelationsOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\n/**\n * Component used for displaying configuration of sync property\n */\n@Component(\n{\n    selector: 'configure-sync-property',\n    templateUrl: 'configureSyncProperty.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureSyncPropertySAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is bound sync property name\n     */\n    protected control: FormControl<string> = new FormControl();\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) data: string,)\n    {\n        this.control.setValue(data);\n    }\n}","<div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n    <label class=\"dynamic-control-label dynamic-text-uppercase\">name</label>\n    <input type=\"text\" class=\"dynamic-form-control\" [formControl]=\"control\">\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"control.value\">\n        <span>ok</span>\n    </button>\n</div>","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"sync values\"></relations-node-header>\n\n<div class=\"node-content\" [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">sync on</label>\n        \n        <select class=\"dynamic-form-control\" formControlName=\"triggerSync\">\n            <option [ngValue]=\"false\">idle</option>\n            <option [ngValue]=\"true\">trigger</option>\n        </select>\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"!metadata?.relationsOptions?.triggerSync\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">idle timeout</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"idleTimeout\" number required>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addProperty()\">\n        <span class=\"fas fa-plus\"></span>\n    </button>\n\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <ng-container *ngFor=\"let property of metadata?.relationsOptions?.syncProperties; let index=index\">\n                <div class=\"input\">\n                    <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"property\" [parent]=\"this\"></relation-node-input>\n                    <div>{{property}}</div>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); configureSyncProperty(index)\">\n                        <span class=\"fas fa-cog\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeProperty(index)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n            </ng-container>\n\n            <div class=\"input\" *ngIf=\"metadata?.relationsOptions?.triggerSync\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"trigger\" [parent]=\"this\"></relation-node-input>\n                <div>trigger</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <ng-container *ngFor=\"let property of metadata?.relationsOptions?.syncProperties\">\n                <div class=\"output\">\n                    <div>{{property}}</div>\n                    <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"property\" [parent]=\"this\"></relation-node-output>\n                </div>\n            </ng-container>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup, NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {SyncValuesRelationsOptions} from '../syncValues.options';\nimport {SyncValuesRelationsOptionsModel} from './syncValuesNode.model';\nimport {ConfigureSyncPropertySAComponent} from '../misc/components';\n\n/**\n * Sync values node component for negation\n */\n@Component(\n{\n    selector: 'sync-values-node',\n    templateUrl: 'syncValuesNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncValuesNodeSAComponent extends RelationsNodeBase<SyncValuesRelationsOptions> implements RelationsNode<SyncValuesRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form that is being used\n     */\n    protected form: FormGroup<FormModelGroup<SyncValuesRelationsOptions>>;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n        super(changeDetector, element);\n\n        this.form = formModelBuilder.build<SyncValuesRelationsOptions>(new SyncValuesRelationsOptionsModel(null));\n        this.form.valueChanges.subscribe(value =>\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                extend(this.metadata.relationsOptions, value);\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new property\n     */\n    protected async addProperty(): Promise<void>\n    {\n        await this.configureSyncProperty(this.metadata?.relationsOptions?.syncProperties?.length ?? 0);\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Removes property\n     * @param index - Index of property to be removed\n     */\n    protected removeProperty(index: number): void\n    {\n        if(!this.metadata?.relationsOptions?.syncProperties)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.syncProperties.splice(index, 1);\n        this.history.getNewState();\n    }\n\n    /**\n     * Configures sync property\n     * @param index - Index of sync property to be configured\n     */\n    protected async configureSyncProperty(index: number): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<ConfigureSyncPropertySAComponent, string, string|undefined|null>(ConfigureSyncPropertySAComponent,\n        {\n            title: 'configure sync property',\n            width: '60vw',\n            data: this.metadata?.relationsOptions?.syncProperties?.[index] ?? ''\n        }).afterClosed());\n\n        if(isPresent(result) && this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.syncProperties ??= [];\n            this.metadata.relationsOptions.syncProperties[index] = result;\n            this.history.getNewState();\n        }\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        this.form.patchValue(this.metadata.relationsOptions);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {SyncValuesNodeSAComponent} from '../node/syncValuesNode.component';\n\n/**\n * Sync values relations metadata\n */\nexport class SyncValuesRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Sync values',\n        description: 'Sync values, allowing triggered changes run at once',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = SyncValuesNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()',\n        '[disabled]': 'disabled',\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n\n    /**\n     * Indication whether is number input disabled\n     */\n    public disabled: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setDisabledState?(isDisabled: boolean): void\n    {\n        this.disabled = isDisabled;\n    }\n}\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}"],"names":["SyncValuesRelationsOptionsModel","constructor","value","triggerSync","idleTimeout","mapValuesToThis","this","ConfigureSyncPropertySAComponent","data","control","FormControl","setValue","TITLED_DIALOG_DATA","selectors","standalone","features","decls","vars","consts","template","i0","ReactiveFormsModule","MatDialogModule","encapsulation","changeDetection","$event","preventDefault","stopPropagation","SyncValuesNodeSAComponent","RelationsNodeBase","changeDetector","element","dialog","formModelBuilder","super","form","build","valueChanges","subscribe","metadata","relationsOptions","extend","history","getNewState","addProperty","configureSyncProperty","syncProperties","length","detectChanges","removeProperty","index","splice","result","lastValueFrom","open","title","width","afterClosed","isPresent","metadataSet","patchValue","FormModelBuilder","ctx","CommonModule","NumberInputModule","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","SyncValuesRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","NodeRelationPath","destroying","_destroyingSubject","asObservable","_parentGroup","_relationManager","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","x","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","package","error","Ignore","ThrowError","Error","createComponent","injector","node","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","inputs","outputs","exportAs","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","height","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","stopImmediatePropagation","destroyNode","indexOf","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","_renderer","_elementRef","onChange","onTouched","disabled","writeValue","setProperty","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","setDisabledState","isDisabled","Validators","static","isNaN","max","min","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","number"],"sourceRoot":""}