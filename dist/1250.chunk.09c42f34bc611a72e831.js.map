{"version":3,"file":"1250.chunk.09c42f34bc611a72e831.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/dynamicItems/select/metadata/select.model.ts","webpack://ng-universal-demo/../form/src/dynamicItems/select/metadata/select.layoutMetadata.ts","webpack://ng-universal-demo/../form/src/metadata/formComponentBase.model.ts","webpack://ng-universal-demo/../form/src/metadata/formFieldComponentBase.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts"],"sourcesContent":["import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\n\nimport {SelectComponentOptions} from '../select.options';\nimport {FormFieldComponentBaseModel} from '../../../metadata';\n\n\n/**\n * Select model for properties editor\n */\nexport class SelectModel extends FormFieldComponentBaseModel implements SelectComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Multiple')\n    @LayoutPropertyDescription('Indication whether select allow multi selection')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public multiple: boolean|undefined|null = null;\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {SelectComponentOptions} from '../select.options';\nimport {SelectModel} from './select.model';\n\n\n/**\n *  select layout metadata\n */\nexport class SelectLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<SelectComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<SelectComponentOptions> =\n    {\n        name: 'Select',\n        description: 'Dropdown',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: SelectModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<SelectModel>(['label', 'placeholder', 'multiple', 'controlName']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            label: 'Input label',\n            placeholder: 'Placeholder',\n            multiple: false,\n        },\n        group: 'Form fields'\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormComponentControlType} from '../misc/enums';\nimport {FormComponentOptions} from '../misc/formComponentBase.options';\n\n/**\n * Base form component model for properties editor\n */\nexport class FormComponentBaseModel implements FormComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Control name')\n    @LayoutPropertyDescription('Form control name')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public controlName: string|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public controlType: FormComponentControlType = FormComponentControlType.FormControl;\n\n    //######################### constructor #########################\n    constructor(value: FormComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {FormComponentBaseModel} from '@anglr/dynamic/form';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormFieldComponentOptions} from '../misc/formFieldBase.options';\n\nexport class FormFieldComponentBaseModel extends FormComponentBaseModel implements FormFieldComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Label')\n    @LayoutPropertyDescription('Form label')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public label: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Placeholder')\n    @LayoutPropertyDescription('Input placeholder')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public placeholder: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: FormFieldComponentOptions|undefined|null)\n    {\n        super(value);\n        mapValuesToThis.bind(this)(value);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};"],"names":["SelectModel","FormFieldComponentBaseModel","constructor","multiple","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","SelectLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","label","placeholder","group","Object","freeze","this","FormComponentBaseModel","value","controlName","controlType","FormComponentControlType","mapValuesToThis","super","LayoutPropertyMetadata","Symbol","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","t","standalone","decls","vars","consts","template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","ReactiveFormsModule","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","extractMetadata","metadata","cacheId","package","loadItem","metadataType","data","layoutEditorMetadata","warn","metadataData","LAYOUT_COMPONENTS_LOADER","factory","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","FormControl","childType","args"],"sourceRoot":""}