{"version":3,"file":"9541.chunk.a7d14aa0749569ad223b.js","mappings":"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","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/modules/codeEditor.module.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/cssLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.model.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {CodeEditorComponent} from '../components';\n\n/**\n * Module for code editor stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        CodeEditorComponent,\n    ],\n    exports:\n    [\n        CodeEditorComponent,\n    ]\n})\nexport class CodeEditorModule\n{\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {CodeEditorModule} from '@anglr/dynamic';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CodeEditorModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\nimport {CodeEditorDialogSAComponent} from '../codeEditorDialog/codeEditorDialog.component';\nimport {CodeEditorDialogData} from '../codeEditorDialog/codeEditorDialog.interface';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    styleUrls: ['codePropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await this.dialog.open<CodeEditorDialogSAComponent, CodeEditorDialogData, string|null>(CodeEditorDialogSAComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed()\n            .toPromise();\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        styleUrls: ['codePropertiesControl.component.css'],\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}","<button type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit {{property}}</span>\n</button>","import {LanguageModel} from './languageModel';\n\n/**\n * Css language model for code editor\n */\nexport const CssLanguageModel = new LanguageModel('css', 'css', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\n\n/**\n * Style block model for properties editor\n */\nexport class StyleBlockModel implements StyleBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public style: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: StyleBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {CssLanguageModel} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\nimport {StyleBlockModel} from './styleBlock.model';\n\n/**\n * Style block layout metadata\n */\nexport class StyleBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<StyleBlockComponentOptions> =\n    {\n        name: 'Style',\n        description: 'Style block - allows styling of content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata: \n            [\n                {\n                    modelType: StyleBlockModel,\n                    propertiesControls: \n                    [\n                        codePropertiesControlFor<StyleBlockModel>('style', CssLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StyleBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StyleBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [StyleBlockComponentOptions|undefined|null]> = options => options?.content ? [options?.content] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StyleBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}"],"names":["CodeEditorModule","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","constructor","element","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","this","languageModel","isPresent","content","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","language","Uri","extension","setModel","i0","selectors","inputs","outputs","features","decls","vars","template","styles","changeDetection","CodeEditorDialogSAComponent","data","dialog","TITLED_DIALOG_DATA","standalone","consts","_r0","ctx","i2","MatDialogModule","i1","encapsulation","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","super","showCodeEditor","property","result","open","title","width","height","form","get","value","afterClosed","toPromise","control","FormControl","setValue","codePropertiesControlFor","CodePropertiesControl","t","CssLanguageModel","getModel","StyleBlockModel","style","mapValuesToThis","StyleBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","addDescendant","metadata","canDropMetadata","getDescendants","removeDescendant","Object","freeze","_changeDetector","_extractor","_initialized","ngOnInit","resolvePromiseOr","_initialize","initialize","invalidateVisuals","detectChanges","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","cacheId","package","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","LAYOUT_COMPONENTS_LOADER","LOGGER","factory"],"sourceRoot":""}