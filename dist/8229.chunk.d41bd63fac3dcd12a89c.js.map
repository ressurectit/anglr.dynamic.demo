{"version":3,"file":"8229.chunk.d41bd63fac3dcd12a89c.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Grid panel layout metadata loader\n */\nexport const GridPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>> = async () => new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.cells\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId, PromiseOr} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadataLoader} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelComponentOptions>(options => options?.cells ?? [])\n@LayoutEditorMetadata(GridPanelLayoutMetadataLoader)\nexport class GridPanelSAComponent extends LayoutComponentBase<GridPanelComponentOptions> implements LayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this._fixCells();\n\n        const style = this.componentElement.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this.options?.rows && Array.isArray(this.options?.rows))\n        {\n            for(const row of this.options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this.options?.columns && Array.isArray(this.options?.columns))\n        {\n            for(const column of this.options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this.options.rows ?? []).length; y++)\n        for(let x = 0; x < (this.options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this.options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this.options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this.options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this.options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridPanelLayoutMetadataLoader","GridPanelLayoutEditorMetadata","i0","GridPanelSAComponent","LayoutComponentBase","onOptionsSet","this","_fixCells","style","componentElement","nativeElement","gridTemplateRows","gridTemplateColumns","options","rows","Array","isArray","row","height","columns","column","width","trim","cells","grid","y","length","x","cell","package","name","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","selectors","standalone","features","decls","vars","consts","template","CommonModule","LayoutComponentRendererSADirective","encapsulation","changeDetection","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}