{"version":3,"file":"3587.chunk.ef2933a50e9dc866c764.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/dynamicItems/numberField/metadata/numberField.model.ts","webpack://ng-universal-demo/../form/src/dynamicItems/numberField/metadata/numberField.layoutMetadata.ts","webpack://ng-universal-demo/../form/src/metadata/formComponentBase.model.ts","webpack://ng-universal-demo/../form/src/metadata/formFieldComponentBase.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts"],"sourcesContent":["import {LayoutPropertyName, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {NumberFieldComponentOptions} from '../numberField.options';\nimport {FormFieldComponentBaseModel} from '../../../metadata';\n\n\n/**\n * Number field model for properties editor\n */\nexport class NumberFieldModel extends FormFieldComponentBaseModel implements NumberFieldComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Min value')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputNumber')\n    public min: number|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Max value')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputNumber')\n    public max: number|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Decimal places')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputNumber')\n    public decimalPlaces: number|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: NumberFieldComponentOptions|undefined|null)\n    {\n        super(value);\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {NumberFieldComponentOptions} from '../numberField.options';\nimport {NumberFieldModel} from './numberField.model';\n\n\n/**\n *  Number field layout metadata\n */\nexport class NumberFieldLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<NumberFieldComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<NumberFieldComponentOptions> =\n    {\n        name: 'Number field',\n        description: 'Number field',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: NumberFieldModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<NumberFieldModel>(['label', 'placeholder', 'controlName', 'min', 'max', 'decimalPlaces']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            label: 'Input label',\n            placeholder: 'Placeholder',\n        },\n        group: 'Form fields'\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormComponentControlType} from '../misc/enums';\nimport {FormComponentOptions} from '../misc/formComponentBase.options';\n\n/**\n * Base form component model for properties editor\n */\nexport class FormComponentBaseModel implements FormComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Control name')\n    @LayoutPropertyDescription('Form control name')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public controlName: string|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public controlType: FormComponentControlType = FormComponentControlType.FormControl;\n\n    //######################### constructor #########################\n    constructor(value: FormComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {FormComponentBaseModel} from '@anglr/dynamic/form';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormFieldComponentOptions} from '../misc/formFieldBase.options';\n\nexport class FormFieldComponentBaseModel extends FormComponentBaseModel implements FormFieldComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Label')\n    @LayoutPropertyDescription('Form label')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public label: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Placeholder')\n    @LayoutPropertyDescription('Input placeholder')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public placeholder: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: FormFieldComponentOptions|undefined|null)\n    {\n        super(value);\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}"],"names":["NumberFieldModel","FormFieldComponentBaseModel","constructor","value","super","min","max","decimalPlaces","mapValuesToThis","bind","this","__decorate","LayoutPropertyName","LayoutPropertyType","NumberFieldLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","label","placeholder","group","Object","freeze","FormComponentBaseModel","controlName","controlType","FormComponentControlType","FormControl","LayoutPropertyDescription","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","_this","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","ctx_r3","property_r1","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","undefined","form","get","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","ctx_r0","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","t","standalone","decls","vars","consts","template","rf","ctx","GenericPropertiesControl_ng_container_0_Template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","DefaultGenericPropertiesControlComponent_ng_container_0_Template","ReactiveFormsModule","CastPipesModule","NumberInputModule"],"sourceRoot":""}