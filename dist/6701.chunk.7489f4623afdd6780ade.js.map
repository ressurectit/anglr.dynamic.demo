{"version":3,"file":"6701.chunk.7489f4623afdd6780ade.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts","webpack://ng-universal-demo/../../../src/decorators/debounceCall.decorator.ts","webpack://ng-universal-demo/../../../src/decorators/withSync.decorator.ts"],"sourcesContent":[null,"import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}","import {PromiseOr} from '../types/async';\r\nimport {Action1, Func} from '../types/functions';\r\nimport {isFunction, isPresent} from '../utils/lang';\r\n\r\n/**\r\n * Adds special functionality to method call, that debounce method call for specified time\r\n * @param delay - Number of miliseconds that delays function call\r\n */\r\nexport function DebounceCall(delay: number): MethodDecorator\r\n{\r\n    return function(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor)\r\n    {\r\n        const timeout = Symbol('ɵTimeout');\r\n        const resolve = Symbol('ɵResolve');\r\n        const result = Symbol('ɵResult');\r\n        const originalValue: Func<any> = descriptor.value ?? descriptor.get?.();\r\n\r\n        if(!isFunction(originalValue))\r\n        {\r\n            throw new Error(`Unable to apply @DebounceCall() decorator to '${propertyKey.toString()}', it is not a method.`);\r\n        }\r\n\r\n        descriptor.value = function<TResult>(this: {[timeout]: number|null, [resolve]: Action1<TResult|undefined>, [result]: Promise<TResult|undefined>}, ...args: unknown[]): Promise<TResult|undefined>\r\n        {\r\n            //result variable does not exists\r\n            if(!(resolve in this) && !(result in this))\r\n            {\r\n                let resolveFn: Action1<TResult|undefined>|undefined;\r\n                const promise = new Promise<TResult|undefined>(resolve => resolveFn = resolve);\r\n\r\n                Reflect.defineProperty(this,\r\n                                       resolve,\r\n                                       {\r\n                                           writable: true,\r\n                                           value: resolveFn,\r\n                                       });\r\n\r\n                Reflect.defineProperty(this,\r\n                                       result,\r\n                                       {\r\n                                           writable: true,\r\n                                           value: promise,\r\n                                       });\r\n            }\r\n\r\n            \r\n\r\n            if(isPresent(this[timeout]))\r\n            {\r\n                clearTimeout(this[timeout]);\r\n            }\r\n\r\n            //timeout variable does not exists\r\n            if(!(timeout in this))\r\n            {\r\n                Reflect.defineProperty(this,\r\n                                       timeout,\r\n                                       {\r\n                                           writable: true,\r\n                                           value: null,\r\n                                       });\r\n            }\r\n\r\n            this[timeout] = setTimeout(async () =>\r\n            {\r\n                this[resolve](await originalValue.apply<any, any[], PromiseOr<TResult>>(this, args));\r\n                this[result] = new Promise<TResult|undefined>(resolveFn => this[resolve] = resolveFn);\r\n                this[timeout] = null;\r\n            }, delay) as any;\r\n\r\n            return this[result];\r\n        };\r\n\r\n        return descriptor;\r\n    };\r\n}","import {Func, NoopAction} from '../types/functions';\nimport {isFunction} from '../utils/lang';\n\n/**\n * Adds special functionality to async method call, that allows only to call this method only when previous execution was finished\n */\nexport function WithSync(): MethodDecorator\n{\n    return function(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor)\n    {\n        const sync = Symbol('ɵSync');\n        const originalValue: Func<any> = descriptor.value ?? descriptor.get?.();\n\n        if(!isFunction(originalValue))\n        {\n            throw new Error(`Unable to apply @WithSync() decorator to '${propertyKey.toString()}', it is not a method.`);\n        }\n\n        descriptor.value = async function<TResult>(this: {[key: symbol]: Promise<void>}, ...args: unknown[]): Promise<TResult>\n        {\n            //sync variable does not exists\n            if(!(sync in this))\n            {\n                Reflect.defineProperty(this,\n                                       sync,\n                                       {\n                                           writable: true,\n                                           value: Promise.resolve(),\n                                       });\n            }\n\n            const syncPromise = this[sync];\n            let syncResolve: NoopAction|undefined;\n            this[sync] = new Promise(resolve => syncResolve = resolve);\n            await syncPromise;\n\n            const result = await originalValue.apply<any, any[], TResult>(this, args);\n\n            syncResolve?.();\n\n            return result;\n        };\n\n        return descriptor;\n    };\n}"],"names":["NEVER","Observable","noop","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","constructor","_factoryFn","_args","valueOf","this","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","Object","keys","formGroup","map","validator","filter","itm","propertyName","metadata","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector","i0","AsRequiredTypePipe","transform","value","_valueHash","DragDropModule","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","key","currentValue","sort","keyValueA","keyValueB","a","b","aString","String","bString","MatTabsModule","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","BindThis","_target","propertyKey","descriptor","originalValue","get","isFunction","Error","toString","configurable","bound","bind","defineProperty","writable","DebounceCall","delay","timeout","Symbol","resolve","result","resolveFn","promise","Promise","Reflect","isPresent","clearTimeout","setTimeout","apply","WithSync","sync","syncPromise","syncResolve"],"sourceRoot":""}