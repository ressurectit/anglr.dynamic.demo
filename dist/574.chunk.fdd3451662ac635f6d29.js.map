{"version":3,"file":"574.chunk.fdd3451662ac635f6d29.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.html","webpack://ng-universal-demo/../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.module.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleRelationsProvider/formDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../src/cdk/clipboard/pending-copy.ts","webpack://ng-universal-demo/../../../../src/cdk/clipboard/clipboard.ts","webpack://ng-universal-demo/../../../../material/src/directives/debugDataCopyClick/debugDataCopyClick.directive.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/debugData/components/debugData/debugData.component.html","webpack://ng-universal-demo/../../../../src/modules/debugData/components/debugData/debugData.component.ts","webpack://ng-universal-demo/../../../../src/modules/debugData/components/debugData/debugData.component.html"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-layout-editor-view',\n    templateUrl: 'layout.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'layout'})\n@ComponentRoute({path: 'layout/:id'})\nexport class FormLayoutComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutRelationsMetadata\n    {\n        return {\n            layout: metadata\n        };\n    }\n}\n","<div class=\"flex-row\">\r\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\r\n        <span>go back</span>\r\n    </button>\r\n\r\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsLayoutForm/layout\" (metadataChange)=\"_metadata = ($any($event?.layout) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <debug-data [copyClick]=\"_metadata\"><div class=\"margin-horizontal-small\">metadata</div></debug-data>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        } \n        else if (!parentIterator.parent)\n        {\n            return this._getActiveGroup(parentIterator.parent, group.root as FormGroup);\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","<div class=\"flex-row\">\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/layout', _available.value]\">layout</a>\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/relations', _available.value]\">relations</a>\r\n\r\n    <ng-select [formControl]=\"_available\" class=\"flex-1\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <debug-data [copyClick]=\"selectedMetadata\"><div class=\"margin-horizontal-small\">{{_available.value}}</div></debug-data>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_formGroup\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll thin-scrollbar\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL, provideFormLayout} from '@anglr/dynamic/form';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {provideBasicLayout} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayout} from '@anglr/dynamic/material-components';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {RelationsManager} from '../../../../../relations/src';\nimport {provideLayoutRelations} from '../../../../../layout-relations/src';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n        provideLayoutRelations(),\n        provideBasicLayout(),\n        provideMaterialLayout(),\n        provideFormLayout(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n    \n    protected selectedMetadata: LayoutRelationsMetadata|null = null;\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,\n                private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _injector: Injector,\n                private _formComponentControlBuilder: FormComponentControlBuilder,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(async ({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                const meta = this.selectedMetadata = this._store.getData(id);\n                this._metadata = meta?.layout;\n                this._relationsManager.setRelations(meta.relations ?? []);\n\n                this._formGroup = await this._formComponentControlBuilder.build(this._metadata);        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n                this._changeDetector.detectChanges();\n            }\n            else\n            {\n                this.selectedMetadata = null;\n                this._relationsManager.setRelations([]);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/relationsLayoutForm', 'form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Form submission\n     */\n    protected _submit(): void\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {LayoutManager, provideLayoutRelationsEditor} from '@anglr/dynamic/layout-relations';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideFormLayoutRelationsEditor} from '@anglr/dynamic/form';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-relations-editor-view',\n    templateUrl: 'relations.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations),\n            deps: [StoreDataService]\n        },\n        provideLayoutRelationsEditor(),\n        provideBasicLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideFormLayoutRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\n@ComponentRoute({path: 'relations/:id'})\nexport class FormRelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,\n                protected _layoutManager: LayoutManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: RelationsNodeMetadata[]): LayoutRelationsMetadata\n    {\n        return {\n            relations: metadata\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoRelationsComplexRelations;\n    }\n\n    protected _loadRestDemo(): void\n    {\n        this._metadata = DemoData.complexDemoRestRelations;\n    }\n\n    protected _loadFullDemo(): void\n    {\n        this._metadata = DemoData.complexDemoFullRelations;\n    }\n\n    protected setMetadata(metadata: LayoutRelationsMetadata): void\n    {\n        this._metadata = metadata?.relations ?? this.emptyMetadata;\n        this._layoutManager.setLayout(metadata?.layout);\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsLayoutForm/relations\" (metadataChange)=\"setMetadata($event)\" [history]=\"history\"></load-save-new>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>","import {FormLayoutComponent} from './layout/layout.component';\nimport {FormPreviewComponent} from './preview/preview.component';\nimport {FormRelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    FormPreviewComponent,\n    FormLayoutComponent,\n    FormRelationsComponent,\n];","import {FactoryProvider, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\nimport {NgSelectModule} from '@anglr/select';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './relationsLayoutForm.routes';\nimport {StoreDataService} from '../../services/storeData';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {LoadSaveNewSAComponent} from '../../components';\n\n/**\n * Module for relations layout form samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NgSelectModule,\n        LayoutComponentRendererSADirective,\n        RouterModule,\n        GoBackModule,\n        DynamicLayoutRelationsEditorModule,\n        DebugDataCopyClickModule,\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_RELATIONS_FORM_DATA'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsLayoutFormModule\n{\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module relations provider for form module types\n */\n@Injectable()\nexport class FormDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleRelationsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for form dynamic relations types provider\n */\nexport const FORM_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations nodes provider\n */\nexport const FORM_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for form package relations components provider\n */\nexport const FORM_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER, FORM_RELATIONS_COMPONENTS_PROVIDER, FORM_RELATIONS_MODULE_TYPES_PROVIDER, FORM_RELATIONS_NODES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormRelations(): Provider[]\n{\n    return [\n        FORM_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage layout\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n/**\n * Default providers for form subpackage relations\n */\nexport function provideFormRelationsEditor(): Provider[]\n{\n    return [\n        FORM_RELATIONS_MODULE_TYPES_PROVIDER,\n        FORM_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\n \n/**\n * Providers for layout relations editor form subpackage\n */\nexport function provideFormLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideFormRelationsEditor(),\n        ...provideFormLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations form subpackage\n */\nexport function provideFormLayoutRelations(): Provider[]\n{\n    return [\n        ...provideFormLayout(),\n        ...provideFormRelations(),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t34757,\n\t\t4757\n\t],\n\t\"./datepicker/type\": [\n\t\t96425,\n\t\t6425\n\t],\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t],\n\t\"./numberField/type\": [\n\t\t90560,\n\t\t560\n\t],\n\t\"./period/type\": [\n\t\t13487,\n\t\t3487\n\t],\n\t\"./radio/type\": [\n\t\t41197,\n\t\t1197\n\t],\n\t\"./select/type\": [\n\t\t98746,\n\t\t8746\n\t],\n\t\"./textField/type\": [\n\t\t80477,\n\t\t477\n\t],\n\t\"./textarea/type\": [\n\t\t25552,\n\t\t5552\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement | undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = (this._textarea = this._document.createElement('textarea'));\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n    textarea.readOnly = true;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {\n      // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      textarea.remove();\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","import {Directive, HostBinding, HostListener, Input} from '@angular/core';\nimport {Clipboard} from '@angular/cdk/clipboard';\n\n/**\n * Directive that allows to copy data to clipboard on click on debug-data\n */\n@Directive(\n{\n    selector: 'debug-data[copyClick]'\n})\nexport class DebugDataCopyClickDirective\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be copied as serialized json\n     */\n    @Input('copyClick')\n    public data: any;\n\n    //######################### public properties - host #########################\n\n    /**\n     * Adds css class clickable to this element\n     * \n     * @internal\n     */\n    @HostBinding('class.clickable')\n    public clickable: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _clipboard: Clipboard)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Copies data to clipboard on click\n     * \n     * @internal\n     */\n    @HostListener('click')\n    public copyData(): void\n    {\n        this._clipboard.copy(JSON.stringify(this.data, null, 4));\n    }\n}",null,"import {Component, ChangeDetectionStrategy, OnDestroy, OnInit, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DebugDataEnabledService} from '../../services/debugDataEnabled/debugDataEnabled.service';\n\n/**\n * Name of css class for enabled debug data\n */\nconst ENABLED = 'enabled';\n\n/**\n * Component used for displaying debug data\n */\n@Component(\n{\n    selector: 'debug-data',\n    templateUrl: 'debugData.component.html',\n    styleUrls: ['debugData.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DebugDataComponent implements OnDestroy, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for changes of debug data enabled\n     */\n    protected _debugDataEnabledChangeSubscription: Subscription;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is debug data enabled\n     *\n     * @internal\n     */\n    public enabled: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _debugDataEnabledSvc: DebugDataEnabledService,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.enabled = this._debugDataEnabledSvc.enabled;\n        this._setEnabledCssClass();\n\n        this._debugDataEnabledChangeSubscription = this._debugDataEnabledSvc.enabledChange.subscribe(() =>\n        {\n            this.enabled = this._debugDataEnabledSvc.enabled;\n            this._setEnabledCssClass();\n\n            this._changeDetector.detectChanges();\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._debugDataEnabledChangeSubscription?.unsubscribe();\n        this._debugDataEnabledChangeSubscription = null;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets enabled css class according enabled state\n     */\n    private _setEnabledCssClass(): void\n    {\n        if(this.enabled)\n        {\n            this._element.nativeElement.classList.add(ENABLED);\n        }\n        else\n        {\n            this._element.nativeElement.classList.remove(ENABLED);\n        }\n    }\n}","<ng-template [ngIf]=\"enabled\">\r\n    <ng-content></ng-content>\r\n</ng-template>"],"names":["FormLayoutComponent","constructor","_store","history","_metadata","emptyMetadata","id","generateId","displayName","package","name","options","children","_getMetadata","metadata","layout","i0","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","getData","deps","StoreDataService","provideLayoutEditor","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","MetadataHistoryManager","FormComponentControlBuilder","_iteratorsSvc","build","layoutMetadata","formGroup","FormGroup","activeGroup","getIteratorFor","iteratorItem","controlName","_getControlName","control","_getControlForMetadata","_getActiveGroup","parent","addControl","parentIterator","group","parentControlName","this","get","root","controlType","FormComponentControlType","FormArray","FormControl","factory","val_r2","ctx_r1","FormPreviewComponent","_relationsManager","_router","_route","_injector","_formComponentControlBuilder","_changeDetector","selectedMetadata","_available","_availableNames","ngOnInit","getStored","params","subscribe","setValue","meta","setRelations","relations","_formGroup","_formInjector","Injector","providers","FORM_COMPONENT_CONTROL","useValue","detectChanges","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","provideLayoutRelations","provideBasicLayout","provideMaterialLayout","provideFormLayout","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","Object","defineProperty","enumerable","configurable","writable","push","pathMatch","RelationsManager","Router","ActivatedRoute","ChangeDetectorRef","FormRelationsComponent","_layoutManager","_loadDemo","DemoData","_loadRestDemo","_loadFullDemo","setMetadata","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideLayoutRelationsEditor","provideBasicLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideFormLayoutRelationsEditor","DemoRelationsPackageManager","LayoutManager","components","RelationsLayoutFormModule","createStoreDataServiceFactory","imports","CommonModule","ReactiveFormsModule","NgSelectModule","RouterModule","GoBackModule","DynamicLayoutRelationsEditorModule","DebugDataCopyClickModule","LoadSaveNewSAComponent","ModuleRoutes","InjectionToken","FormDynamicModuleItemsProvider","_logger","tryToGet","source","debug","e","LOGGER","FormDynamicModuleTypesProvider","moduleName","FormDynamicModuleRelationsProvider","FORM_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","FORM_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","FORM_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideStaticPackageSource","provideFormLayoutRelations","getFormControl","parentControl","defaultControlType","defaultValue","getControlForType","type","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","module","exports","PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","readOnly","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","DOCUMENT","DebugDataCopyClickDirective","_clipboard","clickable","copyData","JSON","stringify","data","i1","ENABLED","DebugDataComponent","_debugDataEnabledSvc","_element","enabled","_setEnabledCssClass","_debugDataEnabledChangeSubscription","enabledChange","unsubscribe","nativeElement","classList","add","i2"],"sourceRoot":""}