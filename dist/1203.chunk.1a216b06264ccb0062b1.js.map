{"version":3,"file":"1203.chunk.1a216b06264ccb0062b1.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.module.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../tinymce-components/src/services/tinyMceDynamicModuleItemsProvider/tinyMceDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../tinymce-components/src/services/tinyMceDynamicModuleTypesProvider/tinyMceDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../tinymce-components/src/misc/providers.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t278,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/css-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('@anglr/dynamic/css-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Component, ChangeDetectionStrategy, ExistingProvider} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {DemoStorage} from '../../../services/metadataStorage';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        DemoStorage,\n        <ExistingProvider>\n        {\n            provide: MetadataStorage,\n            useExisting: DemoStorage\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: LayoutEditorMetadataManager,\n                protected store: StoreDataService,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): LayoutComponentMetadata\n    {\n        return this._manager.getMetadata();\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/layout/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {EditorComponent} from './editor/editor.component';\n\nexport const components =\n[\n    EditorComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from '@anglr/dynamic/css-components';\nimport {TINY_MCE_LAYOUT_COMPONENTS_PROVIDER, TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER} from '@anglr/dynamic/tinymce-components';\n\nimport {components} from './layoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\n\n/**\n * Module for layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        TINY_MCE_LAYOUT_COMPONENTS_PROVIDER,\n        TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER,\n    ]\n})\n@ModuleRoutes(components)\nexport class LayoutEditorModule\n{\n}","import {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\n\nimport {MetadataHistoryManager} from '../metadataHistoryManager/metadataHistoryManager.service';\nimport {MetadataStorage} from '../metadataStorage/metadataStorage.service';\n\n/**\n * Class that handles hotkeys for editors\n */\nexport class EditorHotkeys\n{\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,\n                protected historyManager: MetadataHistoryManager,\n                protected metadataStorage: MetadataStorage,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.metadataStorage.save();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Saves current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.historyManager.undo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Undo current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.historyManager.redo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Redo current state of editor'));\n    }\n}","import {Component, ChangeDetectionStrategy, Input, FactoryProvider, inject, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    // styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        <FactoryProvider>\n        {\n            provide: EditorHotkeys,\n            useFactory: (hotkeys: AppHotkeysService, storage: MetadataStorage) => new EditorHotkeys(hotkeys, inject(LAYOUT_HISTORY_MANAGER), storage),\n            deps: [AppHotkeysService, MetadataStorage],\n        },\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: EditorHotkeys,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,)\n    {\n        hotkeys.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys.destroy();\n    }\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>","import {Inject, Injectable} from '@angular/core';\nimport {Func, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {METADATA_HISTORY_MANAGER_GET_STATE} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 100;\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: TMetadata[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return this.states[this.activeIndex];\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_HISTORY_MANAGER_GET_STATE) protected getStateFn: Func<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || !this.activeIndex)\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(this.states[this.activeIndex]);\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || !this.activeIndex)\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(this.states[this.activeIndex]);\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(this.activeIndex && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        this.states.push(JSON.parse(JSON.stringify(this.getStateFn())));\n        this.activeIndex = this.states.length - 1;\n        this.historyChangeSubject.next();\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.parse(JSON.stringify(metadata)));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_HISTORY_MANAGER_GET_STATE} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for layout history manager get state function\n */\nexport const LAYOUT_HISTORY_MANAGER_GET_STATE: FactoryProvider =\n{\n    provide: METADATA_HISTORY_MANAGER_GET_STATE,\n    useFactory: () =>\n    {\n        const manager = inject(LayoutEditorMetadataManager);\n\n        return manager.getMetadata.bind(manager);\n    }\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {Injector} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n * @param injector - Injector used for obtaining dependencies\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata, injector: Injector): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_GET_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n */\nexport function provideLayoutEditor(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_GET_STATE,\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(),\n            ]\n        };\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default package layout components provider\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for tiny MCE module items\n */\n@Injectable()\nexport class TinyMceDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'tinymce-components':\n            {\n                try\n                {\n                    this._logger?.debug('TinyMceDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/tinymce-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('TinyMceDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for tiny MCE types\n */\n@Injectable()\nexport class TinyMceDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('TinyMceDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'tinymce-components':\n                    return await import('@anglr/dynamic/tinymce-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('TinyMceDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {TinyMceDynamicModuleItemsProvider, TinyMceDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for tiny MCE package layout components provider\n */\nexport const TINY_MCE_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: TinyMceDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for tiny MCE dynamic layout module types provider\n */\nexport const TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: TinyMceDynamicModuleTypesProvider,\n    multi: true\n};","var map = {\n\t\"./richTextBlock/type\": [\n\t\t31439,\n\t\t1439\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 49705;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","package","debug","name","i0","LOGGER","factory","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","EditorComponent","_manager","store","_metadata","emptyMetadata","generateId","displayName","options","children","_getMetadata","this","getMetadata","_loadDemo","DemoData","selectors","features","DemoStorage","MetadataStorage","useExisting","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","LayoutEditorMetadataManager","StoreDataService","components","LayoutEditorModule","createStoreDataServiceFactory","TINY_MCE_LAYOUT_COMPONENTS_PROVIDER","TINY_MCE_LAYOUT_MODULE_TYPES_PROVIDER","imports","DynamicLayoutEditorModule","LoadSaveNewSAComponent","ModuleRoutes","EditorHotkeys","hotkeys","historyManager","metadataStorage","destroy","init","add","Hotkey","save","undo","redo","LayoutEditorSAComponent","history","changeDetector","initSubscriptions","Subscription","metadata","ngOnInit","pop","subscribe","detectChanges","ngOnChanges","changes","nameof","clean","setInitialState","ngOnDestroy","unsubscribe","LAYOUT_HISTORY_MANAGER","inputs","standalone","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","useFactory","storage","inject","deps","AppHotkeysService","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","MatTabsModule","i2","styles","changeDetection","MetadataHistoryManager","getStateFn","activeIndex","saveIndex","states","enabled","popSubject","Subject","historyChangeSubject","canUndo","isBlank","canRedo","length","saved","asObservable","historyChange","state","next","getNewState","shift","splice","push","JSON","parse","stringify","enable","disable","METADATA_HISTORY_MANAGER_GET_STATE","LayoutDesignerDynamicModuleItemsProvider","warn","DefaultDynamicModuleTypesProvider","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENT_TRANSFORM","useValue","injector","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","defaultExportExtractor","Optional","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_GET_STATE","manager","bind","LAYOUT_HISTORY_MANAGER_PROVIDER","Symbol","provideLayoutEditor","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","data","Array","isArray","ngModule","providers","DynamicLayoutModule","extensionsExportsExtractor","localModule","extensionsObject","extensions","isJsObject","childExtensions","DEFAULT_LAYOUT_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_LOADER_PROVIDER","LAYOUT_COMPONENTS_LOADER","isLayoutComponentDef","isType","isPresent","some","itm","default","TinyMceDynamicModuleItemsProvider","TinyMceDynamicModuleTypesProvider"],"sourceRoot":""}