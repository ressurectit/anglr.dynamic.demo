{"version":3,"file":"857.chunk.b4683a9b6d623a70de00.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/node/valueNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/node/valueNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/metadata/value.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {ValueRelationsOptions} from '../value.options';\n\n/**\n * Relations node component for value\n */\n@Component(\n{\n    selector: 'value-node',\n    templateUrl: 'valueNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeOutputSAComponent,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ValueNodeSAComponent extends RelationsNodeBase<ValueRelationsOptions> implements RelationsNode<ValueRelationsOptions>\n{\n//######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.metadata?.relationsOptions?.value) ? JSON.stringify(this.metadata?.relationsOptions?.value, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        if(isPresent(result))\n        {\n            this.metadata.relationsOptions.value = getJson(result.content);\n            this.history.getNewState();\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" [name]=\"'value'|firstUppercaseLocalize\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>{{'value'|firstUppercaseLocalize}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"value\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" (click)=\"showCodeEditor()\">\n        <span>{{'edit'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {ValueNodeSAComponent} from '../node/valueNode.component';\n\n/**\n * Value relations metadata\n */\nexport class ValueRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Value',\n        description: 'Initial, default value',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = ValueNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}"],"names":["ValueNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","_this","content","isPresent","metadata","relationsOptions","value","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","languageModel","JsonLanguageModel","afterClosed","getJson","history","getNewState","i0","i1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","destroySubject","nodePosition","zoomLevel","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","ValueRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","typescript","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","_asyncToGenerator","emit","getValue","code","compiledCode","ngOnDestroy","dispose","_this2","editor","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","inputs","outputs","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","$event","_r1","_r0","LanguageModel","getModel"],"sourceRoot":""}