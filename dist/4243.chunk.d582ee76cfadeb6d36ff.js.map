{"version":3,"file":"4243.chunk.d582ee76cfadeb6d36ff.js","mappings":"mhBAUO,MAAMA,EAAiC,oBAAyF,mBAAY,WAAW,oEAAmDC,kCAA1E,IAAzF,qDAKjCC,EAAqC,oBAAiD,yBAAmB,iCAAsDC,gCAAzE,IAAjD,qD,kMCWrCC,EAAwB,cAASC,EAAAA,E,kCAOhC,KAAAC,iBAA4DC,EAAAA,EAAAA,IAAOC,EAAAA,IAOnE,KAAAC,SAAmD,IAuBhE,CAhB4BC,gBAAa,I,EAAA,c,EAAA,YAElC,IAAI,EAAKC,aAEL,OAGJ,MAAMC,EAAK,EAAKC,SAASC,SAErBF,IAKJ,EAAKH,eAAiB,EAAKH,gBAAgBS,YAAYH,GAdrB,E,gLAerC,G,6DApCQR,KAAwBY,GAAxBZ,EAAwB,E,qBAAxBA,EAAwBa,UAAAA,CAAAA,CAAAA,mBAAAC,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,4BAAAC,SAAAA,SAAAA,EAAAA,GAAA,KC1BrCC,EAAAA,GAAAA,EAAAA,G,KAAcA,EAAAA,EAAAA,0BAAAA,EAAAA,S,gBDoBNC,EAAAA,GAAkCC,OAAAA,CAAAA,qCAAAC,gBAAAA,IAM7BvB,GAAwB,UAFpCwB,EAAAA,EAAAA,GAAyB1B,IACzB2B,EAAAA,EAAAA,GAAqB7B,IACTI,E,+EEtBb,Q,SAAA,EAEa0B,EAAa,CAACC,EAAAA,E,4DCErB,MAAOA,UAAkCC,EAAAA,EAcxBC,UAEfC,KAAKC,eACR,CAKkBC,mBAEfF,KAAKC,eACR,CAOSA,gBAEN,MAAMtB,EAAUqB,KAAKG,SACfC,EAAQJ,KAAKK,UAAUC,cAAcF,MAExCJ,KAAKK,YAEDE,EAAAA,EAAAA,IAAUP,KAAKQ,eAEdR,KAAKK,SAASC,cAAcG,UAAUC,OAAOV,KAAKQ,cAGtDR,KAAKQ,aAAe7B,GAASgC,SAE1BhC,GAASgC,UAERX,KAAKK,UAAUC,cAAcG,UAAUG,IAAIjC,EAAQgC,YAIxDJ,EAAAA,EAAAA,IAAUH,KAENzB,GAASkC,UAELN,EAAAA,EAAAA,IAAU5B,EAAQkC,OAAOC,UAExBV,EAAMW,aAAepC,EAAQkC,OAAOC,SAGrCP,EAAAA,EAAAA,IAAU5B,EAAQkC,OAAOG,SAExBZ,EAAMa,YAActC,EAAQkC,OAAOG,QAGpCT,EAAAA,EAAAA,IAAU5B,EAAQkC,OAAOK,OAExBd,EAAMe,UAAYxC,EAAQkC,OAAOK,MAGlCX,EAAAA,EAAAA,IAAU5B,EAAQkC,OAAOO,QAExBhB,EAAMiB,WAAa1C,EAAQkC,OAAOO,OAIvCzC,GAAS2C,WAELf,EAAAA,EAAAA,IAAU5B,EAAQ2C,QAAQR,UAEzBV,EAAMmB,cAAgB5C,EAAQ2C,QAAQR,SAGvCP,EAAAA,EAAAA,IAAU5B,EAAQ2C,QAAQN,SAEzBZ,EAAMoB,aAAe7C,EAAQ2C,QAAQN,QAGtCT,EAAAA,EAAAA,IAAU5B,EAAQ2C,QAAQJ,OAEzBd,EAAMqB,WAAa9C,EAAQ2C,QAAQJ,MAGpCX,EAAAA,EAAAA,IAAU5B,EAAQ2C,QAAQF,QAEzBhB,EAAMsB,YAAc/C,EAAQ2C,QAAQF,OAIzCzC,GAASgD,eAELpB,EAAAA,EAAAA,IAAU5B,EAAQgD,YAAYC,YAE7BxB,EAAMwB,SAAWjD,EAAQgD,YAAYC,WAGtCrB,EAAAA,EAAAA,IAAU5B,EAAQgD,YAAYE,cAE7BzB,EAAMyB,WAAalD,EAAQgD,YAAYE,WAAWC,aAIjE,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/type.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\n\n/**\n * Template block layout metadata loader\n */\nexport const TemplateBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TemplateBlockComponentOptions>> = async () => new (await import('./metadata/templateBlock.layoutMetadata')).TemplateBlockLayoutEditorMetadata();\n\n/**\n * Template block layout designer type loader\n */\nexport const TemplateBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/templateBlockDesigner.component')).TemplateBlockDesignerSAComponent;","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\nimport {TemplateBlockLayoutDesignerTypeLoader, TemplateBlockLayoutMetadataLoader} from './templateBlock.metadata';\n\n/**\n * Component used for displaying template block\n */\n@Component(\n{\n    selector: 'template-block',\n    templateUrl: 'templateBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(TemplateBlockLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(TemplateBlockLayoutMetadataLoader)\nexport class TemplateBlockSAComponent extends LayoutComponentBase<TemplateBlockComponentOptions> implements LayoutComponent<TemplateBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected metadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onOptionsSet(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const id = this.options?.layoutId;\n\n        if(!id)\n        {\n            return;\n        }\n\n        this.metadata = await this.metadataStorage.getMetadata(id);\n    }\n}","<ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockSAComponent} from './templateBlock.component';\n\nexport default TemplateBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}"],"names":["TemplateBlockLayoutMetadataLoader","TemplateBlockLayoutEditorMetadata","TemplateBlockLayoutDesignerTypeLoader","TemplateBlockDesignerSAComponent","TemplateBlockSAComponent","LayoutComponentBase","metadataStorage","inject","LAYOUT_METADATA_STORAGE","metadata","_onOptionsSet","_initialized","id","options","layoutId","getMetadata","t","selectors","standalone","features","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","DynamicItemExtensionBase","_onInit","this","_applyStyling","_onOptionsChange","_options","style","_element","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}