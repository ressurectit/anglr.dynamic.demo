{"version":3,"file":"1476.chunk.ccca5273ea601ebe1a97.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/node/stateNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/node/stateNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/state.interface.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/state/metadata/state.relationsMetadata.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/typescriptLanguageModel.ts"],"sourcesContent":["<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" [name]=\"'state'|firstUppercaseLocalize\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"initState\" [parent]=\"this\"></relation-node-input>\n                <div>{{'init state'|firstUppercaseLocalize}}</div>\n            </div>\n\n            <div class=\"input\" *ngFor=\"let inputFunc of inputFunctions\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"inputFunc\" [parent]=\"this\"></relation-node-input>\n\n                <div class=\"dynamic-flex-row\">\n                    <div>{{inputFunc}}</div>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); rename(inputFunc)\">\n                        <span class=\"fas fa-pen\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); showCodeEditor(inputFunc)\">\n                        <span class=\"fas fa-code\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeInputFunc(inputFunc)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n            </div>\n\n            <div class=\"dynamic-flex-row\">\n                <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addInputFunc()\">\n                    <span class=\"fas fa-plus\"></span>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>{{'state'|firstUppercaseLocalize}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"state\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, TypescriptLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {ConfigureNodeEndpointData, ConfigureNodeEndpointSAComponent} from '@anglr/dynamic/layout-relations';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport typings from '!!raw-loader?esModule!@anglr/dynamic/typings/state';\nimport {languages} from 'monaco-editor';\n\nimport {StateRelationsEditorOptions, StateRelationsInputFunctionData, StateRelationsOptions} from '../state.options';\n\nlanguages.typescript.typescriptDefaults.addExtraLib(typings, 'file:///node_modules/@types/state/index.d.ts');\n\n/**\n * Relations node component for state\n */\n@Component(\n{\n    selector: 'state-node',\n    templateUrl: 'stateNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n        CommonModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StateNodeSAComponent extends RelationsNodeBase<StateRelationsOptions, StateRelationsEditorOptions> implements RelationsNode<StateRelationsOptions, StateRelationsEditorOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets added input function names\n     */\n    protected get inputFunctions(): string[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n        inputFunctions: {},\n        };\n\n        return Object.keys(this.metadata.relationsOptions.inputFunctions ?? {});\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new input function\n     */\n    protected async addInputFunc(): Promise<void>\n    {\n        const inputFunc: StateRelationsInputFunctionData = \n        {\n            id: generateId(12),\n            code: null,\n        };\n\n        const name: ConfigureNodeEndpointData =\n        {\n            name: `inputFunc${this.inputFunctions.length + 1}`,\n            defaultValue: null,\n            noDefaultValue: true,\n            skipInit: false,\n        };\n\n        if(await this.configureEndpoint(name))\n        {\n            if(!this.metadata?.relationsOptions || !this.metadata.nodeMetadata)\n            {\n                return;\n            }\n\n            this.metadata.relationsOptions.inputFunctions ??= {};\n            this.metadata.relationsOptions.inputFunctions[name.name] = inputFunc;\n\n            this.metadata.nodeMetadata.options ??= \n            {\n                contents: {}\n            };\n\n            if(this.metadata.nodeMetadata.options.contents)\n            {\n                this.metadata.nodeMetadata.options.contents[name.name] = '';\n            }\n\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Removes input function\n     * @param name - Name of input function to be removed\n     */\n    protected removeInputFunc(name: string): void\n    {\n        if(this.metadata?.relationsOptions?.inputFunctions && name in this.metadata.relationsOptions.inputFunctions)\n        {\n            delete this.metadata.relationsOptions.inputFunctions[name];\n\n            if(this.metadata.nodeMetadata?.options?.contents)\n            {\n                delete this.metadata.nodeMetadata.options.contents[name];\n            }\n\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Renames input func\n     * @param name - Allows renaming of input func\n     */\n    protected async rename(name: string): Promise<void>\n    {\n        await this.configureEndpoint(\n        {\n            name,\n            defaultValue: null,\n            noDefaultValue: true,\n            skipInit: false,\n        });\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Configures endpoint\n     * @param endpoint - Endpoint to be configured\n     */\n    protected async configureEndpoint(endpoint: ConfigureNodeEndpointData): Promise<boolean>\n    {\n        const copy = JSON.parse(JSON.stringify(endpoint));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ConfigureNodeEndpointData, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure input function',\n            width: '60vw',\n            data: copy,\n        }).afterClosed());\n\n        //rename\n        if(result)\n        {\n            if(this.metadata?.relationsOptions?.inputFunctions?.[endpoint.name] && (this.metadata.nodeMetadata?.options?.contents?.[endpoint.name] === '' || this.metadata.nodeMetadata?.options?.contents?.[endpoint.name]))\n            {\n                this.metadata.relationsOptions.inputFunctions[copy.name] = this.metadata.relationsOptions.inputFunctions[endpoint.name];\n                delete this.metadata.relationsOptions.inputFunctions[endpoint.name];\n    \n                this.metadata.nodeMetadata.options.contents[copy.name] = this.metadata.nodeMetadata.options.contents[endpoint.name];\n                delete this.metadata.nodeMetadata.options.contents[endpoint.name];\n    \n                this.history.getNewState();\n            }\n            else\n            {\n                endpoint.name = copy.name;\n            }\n        }\n\n        return result ?? false;\n    }\n\n    /**\n     * Shows code editor\n     * @param name - Name of input func\n     */\n    protected async showCodeEditor(name: string): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.nodeMetadata?.options?.contents?.[name] ?? '',\n                languageModel: TypescriptLanguageModel(\n`import {InputFunction} from 'state';\n\n/**\n * Input function that handles incoming data and can change state\n */\nconst inputFunc: InputFunction<any, any> = function(_data)\n{\n};\n\nexport default inputFunc;\n\n`),\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions || !result || !this.metadata.nodeMetadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.inputFunctions ??= {};\n        this.metadata.nodeMetadata.options ??= \n        {\n            contents: {}\n        };\n\n        this.metadata.nodeMetadata.options.contents ??= {};\n\n        this.metadata.relationsOptions.inputFunctions[name].code = result.code;\n        this.metadata.nodeMetadata.options.contents[name] = result.content;\n\n        this.history.getNewState();\n    }\n}","export default \"/**\\n * Function that is used for handling input value\\n * @param data - Data that are passed to this function for processing\\n */\\nexport type InputFunction<TData = unknown, TState = unknown> = (this: StatefullClass<TState>, data: TData) => void;\\n\\n/**\\n * Definition of statefull class\\n */\\nexport interface StatefullClass<TState = unknown>\\n{\\n    /**\\n     * Current state that is stored for this class\\n     */\\n    state: TState|undefined|null;\\n}\";","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {StateNodeSAComponent} from '../node/stateNode.component';\n\n/**\n * State relations metadata\n */\nexport class StateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'State',\n        description: 'Node that allows storing and manipulation with statefull object',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = StateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">{{'name'|firstUppercaseLocalize}}</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"name\">\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"data.allowSkipInit\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\"><input type=\"checkbox\" formControlName=\"skipInit\"> {{'skip init'|firstUppercaseLocalize}} </label>\n    </div>\n\n    <div class=\"dynamic-flex-column dynamic-margin-bottom-extra-small\" *ngIf=\"!data.noDefaultValue\">\n        <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-align-self-center\" (click)=\"showCodeEditor()\">\n            <span>{{'default value'|firstUppercaseLocalize}}</span>\n        </button>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"true\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n//TODO: sideeffect\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}","import {languages} from 'monaco-editor';\n\nimport {LanguageModel} from './languageModel';\n\n/**\n * Typescript language model for code editor\n * @param initialValue - Initial value to be used as initial code\n */\nexport const TypescriptLanguageModel = (initialValue: string): LanguageModel => new LanguageModel('typescript',\n                                                                                                  'ts',\n                                                                                                  async editor =>\n                                                                                                  {\n                                                                                                      const uri = editor.getModel()?.uri;\n                                                                                                  \n                                                                                                      if(!uri)\n                                                                                                      {\n                                                                                                          return '';\n                                                                                                      }\n                                                                                                  \n                                                                                                      const worker = await languages.typescript.getTypeScriptWorker();\n                                                                                                      const client = await worker(uri);\n                                                                                                      const result = await client.getEmitOutput(uri.toString());\n                                                                                                  \n                                                                                                      return result.outputFiles[0].text;\n                                                                                                  },\n                                                                                                  initialValue);\n"],"names":["i0","$event","inputFunc_r1","_r3","$implicit","ctx_r2","preventDefault","stopPropagation","rename","ctx_r4","showCodeEditor","ctx_r5","removeInputFunc","ctx_r0","nodePosition","zoomLevel","languages","typescript","typescriptDefaults","addExtraLib","StateNodeSAComponent","RelationsNodeBase","inputFunctions","this","metadata","_a","relationsOptions","Object","keys","constructor","changeDetector","element","dialog","super","addInputFunc","_this","_asyncToGenerator","inputFunc","id","generateId","code","name","length","defaultValue","noDefaultValue","skipInit","configureEndpoint","nodeMetadata","_b","options","contents","history","getNewState","_this2","detectChanges","endpoint","_this3","copy","JSON","parse","stringify","result","lastValueFrom","open","ConfigureNodeEndpointSAComponent","title","width","data","afterClosed","_this4","CodeEditorDialogComponent","height","content","languageModel","TypescriptLanguageModel","_c","i1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","StateNodeSAComponent_div_10_Template","destroySubject","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","CommonModule","i2","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","StateRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","freeze","ComponentEndpointModel","value","mapValuesToThis","bind","formModelBuilder","form","build","valueChanges","subscribe","extend","isPresent","JsonLanguageModel","getJson","TITLED_DIALOG_DATA","FormModelBuilder","ConfigureNodeEndpointSAComponent_div_6_Template","ConfigureNodeEndpointSAComponent_div_7_Template","allowSkipInit","ReactiveFormsModule","i3","MatDialogModule","i4","i5","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","target","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","compiledCode","ngOnDestroy","dispose","editor","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","inputs","outputs","editorContent","saveAndClose","close","_r1","_r0","LanguageModel","getModel","initialValue","_ref","uri","worker","getTypeScriptWorker","client","getEmitOutput","toString","outputFiles","text","_x","apply","arguments"],"sourceRoot":""}