{"version":3,"file":"644.chunk.a27fd41fd42b07940559.js","mappings":"uQAQM,MAAOA,EAqCTC,YAAYC,GA3BL,KAAAC,OAAgC,KAQhC,KAAAC,QAAiC,KAQjC,KAAAC,MAAgC,KAQhC,KAAAC,UAAmC,EAMtCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BL,EAC9B,GA/BDO,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,YACnBC,EAAAA,EAAAA,GAA0B,4DAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,6DAQAH,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,aACnBC,EAAAA,EAAAA,GAA0B,6DAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,8DAQAH,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,UACnBC,EAAAA,EAAAA,GAA0B,8BAC1BC,EAAAA,EAAAA,GAA8C,iBAC/C,6DAQAH,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,aACnBC,EAAAA,EAAAA,GAA0B,iDAC1BC,EAAAA,EAAAA,GAA8C,iBAC/C,+DClCE,MAAOC,EA0CTZ,cAnCO,KAAAa,SACP,CACIC,KAAM,gBACNC,YAAa,gBACbC,MAAO,UACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,IAGR,CACIH,UAAWpB,EACXsB,mBACA,EACIE,EAAAA,EAAAA,GAA+C,CAAC,SAAU,UAAW,QAAS,iBAK9FC,eACA,CACItB,OAAQ,KACRC,QAAS,MACTC,OAAO,EACPC,UAAU,IAOdoB,OAAOC,OAAOnB,KACjB,E,6FCzCC,SAAUoB,EAAqBC,EAAiBC,GAElD,MAAMC,EAAc,CAAC,EAErB,IAAI,MAAMC,KAAcF,EACxB,CACI,MAAMG,EAAeC,QAAQC,IAAIN,EAAKO,UAAWJ,IAEjDK,EAAAA,EAAAA,KAAO,EAAMN,EAAaE,EAC7B,CAED,OAAOK,EAAAA,EAAAA,GAAkD,CAACC,OAAQR,GAAcS,EAAAA,EACnF,C,oCChBK,MAAOC,EAiCTxC,YAAYC,GAxBZ,KAAAwC,IAA6B,KAO7B,KAAAC,MAA+B,KAO/B,KAAAC,OAAgC,KAOhC,KAAAC,KAA8B,KAM1BtC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BL,EAC9B,GA5BDO,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,eACnBC,EAAAA,EAAAA,GAA0B,4BAC3B,0DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,iBACnBC,EAAAA,EAAAA,GAA0B,8BAC3B,4DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,kBACnBC,EAAAA,EAAAA,GAA0B,+BAC3B,6DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,gBACnBC,EAAAA,EAAAA,GAA0B,6BAC3B,0DC9BE,MAAOmC,EAiCT7C,YAAYC,GAxBZ,KAAAwC,IAA6B,KAO7B,KAAAC,MAA+B,KAO/B,KAAAC,OAAgC,KAOhC,KAAAC,KAA8B,KAM1BtC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BL,EAC9B,GA5BDO,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,gBACnBC,EAAAA,EAAAA,GAA0B,6BAC3B,0DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,kBACnBC,EAAAA,EAAAA,GAA0B,+BAC3B,4DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,mBACnBC,EAAAA,EAAAA,GAA0B,gCAC3B,6DAOAF,EAAAA,EAAAA,IAAAA,EAFCC,EAAAA,EAAAA,GAAmB,iBACnBC,EAAAA,EAAAA,GAA0B,8BAC3B,0DC1BE,MAAOU,EAiCTpB,YAAYC,GA1BL,KAAA6C,SAAkC,KASlC,KAAAC,OAAgC,KAShC,KAAAC,QAAkC,KAKlC,KAAAC,YAA0C,KAM7C3C,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BL,GAE3BM,KAAKwC,OAAS,IAAIP,EAAYvC,GAAO8C,QACrCxC,KAAKyC,QAAU,IAAIH,EAAa5C,GAAO+C,QAC1C,GAjCDxC,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,cACnBC,EAAAA,EAAAA,GAA0B,kDAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,+DASAH,EAAAA,EAAAA,IAAAA,EAJCC,EAAAA,EAAAA,GAAmB,WACnBC,EAAAA,EAAAA,GAA0B,uBAC1BiB,EAAqBa,EAAa,CAACD,EAAAA,KACnCW,EAAAA,EAAAA,MACD,6DASA1C,EAAAA,EAAAA,IAAAA,EAJCC,EAAAA,EAAAA,GAAmB,YACnBC,EAAAA,EAAAA,GAA0B,wBAC1BiB,EAAqBkB,EAAc,CAACN,EAAAA,KACpCW,EAAAA,EAAAA,MACD,4D,6SCpBE,MAAOC,UAA6BC,EAAAA,G,6DAA7BD,KAAoBE,GAApBF,EAAoB,E,qBAApBA,EAAoBG,UAAAA,CAAAA,CAAAA,iBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,OAAAA,OAAAA,SAAAA,GAAAA,EAAAA,eAAAA,EAAAA,gBAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCjBjCC,EAAAA,GAAAA,EAAAA,QAAAA,G,2BAA+CA,EAAAA,EAAAA,cAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,U,2KCkBzC,MAAOC,UAA2BT,EAAAA,EARxCpD,c,oBAec,KAAA8D,OAAmC,IAAIC,EAAAA,GAAyB,MAKhE,KAAAC,MAA6B,IAAID,EAAAA,GAAoB,KAAM,CAACE,aAAa,GA+DtF,CAxDsBC,cAEf,MAAMjE,EAAQM,KAAK4D,UAAUlE,MAE7B,GAAGA,EACH,CACI,MAAMmE,EAAU,6BAA6BC,KAAKpE,GAElD,GAAGmE,EAKC,OAHA7D,KAAKuD,OAAOQ,UAAUF,EAAQ,SAC9B7D,KAAKyD,MAAMM,SAASF,EAAQ,GAInC,CAED7D,KAAKyD,MAAMM,SAAS,MACpB/D,KAAKuD,OAAOQ,SAAS,KACxB,CAKkBC,cAEfhE,KAAKuD,OAAOU,aAAaC,WAAUxE,IAE/B,MAAMyE,EAAOnE,KAAKyD,MAAM/D,MAGpBA,GAAUyE,EAOdnE,KAAKoE,SAASL,SAAS,GAAGrE,IAAQyE,KAL9BnE,KAAK4D,UAAUG,SAAS,KAK5B,IAGJ/D,KAAKyD,MAAMQ,aAAaC,WAAUC,IAE9B,MAAMzE,EAAQM,KAAKuD,OAAO7D,MAGtBA,GAAUyE,EAOdnE,KAAKoE,SAASL,SAAS,GAAGrE,IAAQyE,KAL9BnE,KAAK4D,UAAUG,SAAS,KAK5B,GAEP,E,6DA1EQT,KAAkBR,GAAlBQ,EAAkB,E,qBAAlBA,EAAkBP,UAAAA,CAAAA,CAAAA,eAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,WAAAA,CAAAA,EAAAA,UAAAA,WAAAC,SAAAA,SAAAA,EAAAA,GAAA,KClB/BC,EAAAA,GAAAA,EAAAA,eAAAA,EAAAA,CAAgD,oB,MAAlCA,EAAAA,EAAAA,UAAAA,EAAAA,QAAiDA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,MAAAA,CAAiB,SAAAA,EAAAA,GAAAA,EAAAA,I,qGCiB1E,MAAOgB,UAA+BC,EAAAA,EAO1BC,cAEV,OAAOvE,KAAKwE,MAAMC,SAASjC,MAC9B,E,6DAVQ6B,KAAsBvB,GAAtBuB,EAAsB,E,qBAAtBA,EAAsBtB,UAAAA,CAAAA,CAAAA,mBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,GAAAC,KAAAA,GAAAC,OAAAA,CAAAA,CAAAA,EAAAA,eAAAA,CAAAA,EAAAA,oBAAAA,EAAAA,WAAAA,CAAAA,EAAAA,YAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,WAAAA,CAAAA,EAAAA,QAAAA,OAAAA,SAAAA,OAAAA,SAAAA,mBAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCjBnCC,EAAAA,GAAAA,EAAAA,OAAKA,EAAAA,EAAAA,EAAAA,UAAMA,EAAAA,KAEXA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,aAAAA,G,wBAEAA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAsB,WAEdA,EAAAA,GAAAA,EAAAA,aAAAA,G,wBACJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEAA,EAAAA,GAAAA,GAAAA,MAAAA,GACIA,EAAAA,GAAAA,GAAAA,aAAAA,G,yBACJA,EAAAA,IAAAA,GAGJA,EAAAA,GAAAA,GAAAA,aAAAA,G,yBACJA,EAAAA,M,MAf0CA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,MAAAA,EAAAA,QAAAA,SAAAA,KAAAA,EAAAA,QAAAA,SAAAA,MAIlBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,MAAAA,EAAAA,QAAAA,SAAAA,KAAAA,EAAAA,QAAAA,SAAAA,OAMAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,EAAAA,MAAAA,EAAAA,SAAAA,MAAAA,EAAAA,QAAAA,SAAAA,KAAAA,EAAAA,QAAAA,SAAAA,QAIkBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAAA,MAAAA,EAAAA,QAAAA,SAAAA,KAAAA,EAAAA,QAAAA,SAAAA,S,2DCApC,MAAOqB,UAAgCJ,EAAAA,EAO3BK,eAEV,OAAO3E,KAAKwE,MAAMC,SAAShC,OAC9B,E,wBC1BiFY,EAAAA,GAAAA,EAAAA,OAAAA,G,mBAAmFA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,oBAAAA,MAAAA,EAAAA,mBAAAA,SAAAA,KAAAA,EAAAA,mBAAAA,SAAAA,Y,+DDgB5JqB,KAAuB5B,GAAvB4B,EAAuB,E,qBAAvBA,EAAuB3B,UAAAA,CAAAA,CAAAA,oBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,GAAAC,KAAAA,GAAAC,OAAAA,CAAAA,CAAAA,EAAAA,eAAAA,CAAAA,EAAAA,oBAAAA,EAAAA,WAAAA,CAAAA,EAAAA,YAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,WAAAA,CAAAA,EAAAA,QAAAA,OAAAA,SAAAA,OAAAA,SAAAA,mBAAAC,SAAAA,SAAAA,EAAAA,GAAA,MEjBpCC,EAAAA,GAAAA,EAAAA,OAAKA,EAAAA,EAAAA,EAAAA,WAAOA,EAAAA,KAEZA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,aAAAA,G,wBAEAA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAsB,WAEdA,EAAAA,GAAAA,EAAAA,aAAAA,G,wBACJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEAA,EAAAA,GAAAA,GAAAA,MAAAA,GACIA,EAAAA,GAAAA,GAAAA,aAAAA,G,yBACJA,EAAAA,IAAAA,GAGJA,EAAAA,GAAAA,GAAAA,aAAAA,G,yBACJA,EAAAA,M,MAf0CA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,MAIlBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,OAMAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,EAAAA,MAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,QAIkBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,GAAAA,MAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,S,2DCFpC,MAAOtC,UAAmDuD,EAAAA,G,6DAAnDvD,KAA0C+B,GAA1C/B,EAA0C,E,qBAA1CA,EAA0CgC,UAAAA,CAAAA,CAAAA,sBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,cAAAA,CAAAA,EAAAA,iBAAAA,CAAAA,QAAAA,qBAAAA,EAAAA,UAAAA,EAAAA,QAAAA,CAAAA,EAAAA,WAAAA,CAAAA,EAAAA,OAAAA,sBAAAA,CAAAA,EAAAA,MAAAA,iBAAAA,EAAAA,YAAAC,SAAAA,SAAAA,EAAAA,G,GAAA,MFfvDC,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAwB,aACSA,EAAAA,EAAAA,GAAqDA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,GAAgJA,EAAAA,KAClOA,EAAAA,GAAAA,EAAAA,eAAAA,G,qBACJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,iBAAAA,EAAAA,CAAyF,wB,WAJxDA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GAAAA,QAAAA,EAAAA,MAAAA,EAAAA,oBAAAA,MAAAA,EAAAA,mBAAAA,SAAAA,KAAAA,EAAAA,mBAAAA,SAAAA,YAAAA,IAAAA,EAAAA,EAAAA,WAAAA,KAA4DA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,oBAAAA,MAAAA,EAAAA,mBAAAA,SAAAA,KAAAA,EAAAA,mBAAAA,SAAAA,aAC3EA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,MAAAA,MAAAA,EAAAA,KAAAA,SAAAA,KAAAA,EAAAA,KAAAA,SAAAA,WAGFA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,EAAAA,KAAAA,CAAa,qBAAAuB,EAAAA,oBACZvB,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,EAAAA,KAAAA,CAAa,qBAAAuB,EAAAA,mB,+JGGvB,MAAMC,EAAuE,IAAIC,EAAAA,EAAyC,8BAKpHC,EAAgF,IAAID,EAAAA,EAA2C,qCAK/HE,EAAyF,IAAIF,EAAAA,EAA6C,4CAK1IG,EAA8E,IAAIH,EAAAA,EAAwC,sCAK1HI,EAAkF,IAAIJ,EAAAA,EAAsD,2B,6FCpBnJ,MAAOK,EAGT1F,YAAgD2F,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkB3F,EAA+C4F,GAEpE,OAAGC,EAAAA,EAAAA,IAAQ7F,GAEA,KAGRA,aAAiB8D,EAAAA,GAET9D,GAGXM,KAAKoF,SAASI,KAAK,iDAEZ,KACV,E,iCA7BQL,GAAAA,EAAAA,EAGuBM,EAAAA,GAAMA,I,0CAH7BN,E,2DCHP,MAAOO,EAQFL,UAAU3F,EAA6BiG,EAAqBL,GAE/D,OAAO5F,GAASiG,CACnB,E,iCAXQD,E,uCAAAA,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/metadata/toggleButton.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/metadata/toggleButton.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {ToggleButtonComponentOptions} from '../toggleButton.options';\n\n/**\n * Toggle button model for properties editor\n */\nexport class ToggleButtonModel implements ToggleButtonComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('ON text')\n    @LayoutPropertyDescription('Text to be displayed in toggle button when button is on')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public onText: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('OFF text')\n    @LayoutPropertyDescription('Text to be displayed in toggle button when button is off')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public offText: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('State')\n    @LayoutPropertyDescription('State of button on or off')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public state: boolean|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Disabled')\n    @LayoutPropertyDescription('Indication whether is toggle button disabled')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public disabled: boolean|undefined|null = false;\n    \n    //######################### constructor #########################\n    constructor(value: ToggleButtonComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {ToggleButtonComponentOptions} from '../toggleButton.options';\nimport {ToggleButtonModel} from './toggleButton.model';\n\n/**\n * Toggle button layout metadata\n */\nexport class ToggleButtonLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<ToggleButtonComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<ToggleButtonComponentOptions> =\n    {\n        name: 'Toggle button',\n        description: 'Toggle button',\n        group: 'Buttons',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: ToggleButtonModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<ToggleButtonModel>(['onText', 'offText', 'state', 'disabled']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            onText: 'On',\n            offText: 'Off',\n            state: true,\n            disabled: false,\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject, LayoutPropertyType} from '../../decorators';\nimport {DefaultKnownPropertyTypes, LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    @LayoutPropertyName('Css class')\n    @LayoutPropertyDescription('Css class that should be applied to component')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public cssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number [control]=\"_value\"></input-number> <select-value [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<div>Margin</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div class=\"form-group\">\n    <label class=\"control-label\">{{propertiesMetadata?.cssClass?.name ?? 'cssClass'}} <span *ngIf=\"propertiesMetadata?.cssClass?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.cssClass?.description\"></span></label>\n    <input-string [control]=\"form?.controls?.cssClass | asRequired\"></input-string>\n</div>\n\n<margin-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","<div>Padding</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["ToggleButtonModel","constructor","value","onText","offText","state","disabled","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","ToggleButtonLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","Object","freeze","LayoutPropertyObject","type","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","DynamicPropertyMetadata","object","LayoutPropertyMetadata","MarginModel","top","right","bottom","left","PaddingModel","cssClass","margin","padding","textStyling","FormGroupProperty","InputNumberComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","InputSizeComponent","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","control","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ctx","LAYOUT_COMPONENT_TRANSFORM","InjectionToken","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_COMPONENTS_LOADER","AsFormControlPipe","_logger","transform","_valueHash","isBlank","warn","LOGGER","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}