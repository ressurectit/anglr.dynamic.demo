{"version":3,"file":"3464.chunk.ac1119f24c3ba6d2d71b.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/node/richTextSourceNode.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/node/richTextSourceNode.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/metadata/richTextSource.relationsMetadata.ts"],"sourcesContent":["import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {RichTextSourceRelationsOptions} from '../richTextSource.options';\nimport {RichTextBlockEditorDialogSAComponent} from '../../richTextBlock/misc/components';\n\n/**\n * Relations node component for rich text source\n */\n@Component(\n{\n    selector: 'rich-text-source-node',\n    templateUrl: 'richTextSourceNode.component.html',\n    // styleUrls: ['richTextSourceNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextSourceNodeSAComponent extends RelationsNodeBase<RichTextSourceRelationsOptions> implements RelationsNode<RichTextSourceRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.metadata?.relationsOptions?.content ?? ''\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.content = result;\n                this.history.getNewState();\n            }\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"rich text source\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n    \n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>html string</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"htmlString\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" (click)=\"showCodeEditor()\">\n        <span>content</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {RichTextSourceNodeSAComponent} from '../node/richTextSourceNode.component';\n\n/**\n * Rich text source relations metadata\n */\nexport class RichTextSourceRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Rich text source',\n        description: 'Provides rich text source node',\n        group: 'Texts',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = RichTextSourceNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["NodeRelationPath","destroying","this","_destroyingSubject","asObservable","constructor","_parentGroup","_relationManager","history","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","width","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","isPresent","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","error","Ignore","ThrowError","Error","createComponent","data","injector","node","subscribe","metadata","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","i0","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","element","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","height","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","ctx","CommonModule","encapsulation","changeDetection","RichTextBlockEditorDialogSAComponent","dialog","content","TITLED_DIALOG_DATA","decls","vars","consts","template","_r0","MatDialogModule","EditorModule","RichTextSourceNodeSAComponent","RelationsNodeBase","changeDetector","super","showCodeEditor","result","lastValueFrom","open","title","relationsOptions","afterClosed","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","RichTextSourceRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze"],"sourceRoot":""}