{"version":3,"file":"49.chunk.e4d06a1dd6b9840e4546.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../basic-components/src/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/gridPanel/type.ts","webpack://ng-universal-demo/../layout/src/directives/componentStyling/componentStyling.directive.ts","webpack://ng-universal-demo/../layout/src/components/styledLayoutComponentBase/styledLayoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {GenericLayoutAsyncMetadata, LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Text block layout metadata descriptor\n */\nexport class GridPanelLayoutMetadata extends GenericLayoutAsyncMetadata<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async _getInstance(): Promise<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>>\n    {\n        return new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n    }\n}","<ng-container *ngFor=\"let type of options?.cells\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponentRendererSADirective, StyledLayoutComponent, StyledLayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadata} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    styleUrls: ['gridPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(GridPanelLayoutMetadata)\nexport class GridPanelSAComponent extends StyledLayoutComponentBase<GridPanelComponentOptions> implements StyledLayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _optionsSet(): void\n    {\n        this._fixCells();\n\n        const style = this._element.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this._options?.rows && Array.isArray(this._options?.rows))\n        {\n            for(const row of this._options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this._options?.columns && Array.isArray(this._options?.columns))\n        {\n            for(const column of this._options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        this._options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this._options.rows ?? []).length; y++)\n        for(let x = 0; x < (this._options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this._options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this._options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this._options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this._options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}","import {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;","import {Directive, ElementRef, Input} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from './componentStyling.options';\n\n/**\n * Directive that applies some styling to component\n */\n@Directive(\n{\n    selector: '[componentStyling]',\n    exportAs: 'componentStyling',\n    standalone: true\n})\nexport class ComponentStylingSADirective\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of styling options\n     */\n    protected _options: ComponentStylingOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets instance of styling options\n     */\n    @Input('componentStyling')\n    public get options(): ComponentStylingOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: ComponentStylingOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._applyStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies styles to layout component\n     */\n    protected _applyStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        if(this._options?.margin)\n        {\n            if(isPresent(this._options.margin.bottom))\n            {\n                style.marginBottom = this._options.margin.bottom;\n            }\n\n            if(isPresent(this._options.margin.right))\n            {\n                style.marginRight = this._options.margin.right;\n            }\n\n            if(isPresent(this._options.margin.top))\n            {\n                style.marginTop = this._options.margin.top;\n            }\n\n            if(isPresent(this._options.margin.left))\n            {\n                style.marginLeft = this._options.margin.left;\n            }\n        }\n\n        if(this._options?.padding)\n        {\n            if(isPresent(this._options.padding.bottom))\n            {\n                style.paddingBottom = this._options.padding.bottom;\n            }\n\n            if(isPresent(this._options.padding.right))\n            {\n                style.paddingRight = this._options.padding.right;\n            }\n\n            if(isPresent(this._options.padding.top))\n            {\n                style.paddingTop = this._options.padding.top;\n            }\n\n            if(isPresent(this._options.padding.left))\n            {\n                style.paddingLeft = this._options.padding.left;\n            }\n        }\n\n        if(this._options?.textStyling)\n        {\n            if(isPresent(this._options.textStyling.fontSize))\n            {\n                style.fontSize = this._options.textStyling.fontSize;\n            }\n\n            if(isPresent(this._options.textStyling.fontWeight))\n            {\n                style.fontWeight = this._options.textStyling.fontWeight.toString();\n            }\n        }\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, HostBinding, Inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {ComponentStylingOptions, ComponentStylingSADirective} from '../../directives';\nimport {StyledLayoutComponent} from '../../interfaces';\nimport {LayoutComponentBase} from '../layoutComponentBase/layoutComponentBase';\n\n/**\n * Base component for layout component which allows to be styled\n */\n@Directive()\nexport abstract class StyledLayoutComponentBase<TOptions> extends LayoutComponentBase<TOptions&ComponentStylingOptions> implements StyledLayoutComponent<TOptions&ComponentStylingOptions>\n{\n    //######################### public properties - host #########################\n\n    /**\n     * Instance of attached component styling directive\n     */\n    @HostBinding('attr.componentStyling')\n    public _componentStyling: ComponentStylingSADirective = new ComponentStylingSADirective(this._element);\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                @Inject(LOGGER) @Optional() logger?: Logger,)\n    {\n        super(changeDetector, element, logger);\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override invalidateVisuals(): void\n    {\n        this._componentStyling.options = this.options;\n\n        this._changeDetector.detectChanges();\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["GridPanelLayoutMetadata","GenericLayoutAsyncMetadata","_getInstance","GridPanelLayoutEditorMetadata","i0","GridPanelSAComponent","StyledLayoutComponentBase","_optionsSet","this","_fixCells","style","_element","nativeElement","gridTemplateRows","gridTemplateColumns","_options","rows","Array","isArray","row","height","columns","column","width","trim","cells","_a","grid","y","length","x","cell","package","name","options","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","t","selectors","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","ComponentStylingSADirective","constructor","value","_applyStyles","margin","isPresent","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","inputs","exportAs","LayoutComponentBase","changeDetector","element","logger","super","_componentStyling","invalidateVisuals","_changeDetector","detectChanges","LOGGER","hostVars","hostBindings","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_metadataTransformer","_logger","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","component","instance","componentRef","ngOnChanges","changes","debug","ngOnDestroy","clear","nameof","injector","customInjector","layoutComponentType","loadItem","warn","createComponent","Ignore","ThrowError","Error","type","next","resolvePromiseOr","initialize","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","outputs","DynamicItemLoader","_providers","_extractors","_cachedDynamicItems","error","source","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","tryToGet","extractor","dynamicItemType","tryToExtract","isType","result","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS","factory","providedIn","Promise"],"sourceRoot":""}