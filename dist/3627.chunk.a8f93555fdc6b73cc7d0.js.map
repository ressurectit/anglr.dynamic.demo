{"version":3,"file":"3627.chunk.a8f93555fdc6b73cc7d0.js","mappings":"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","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/node/dataTemplateNode.component.html","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataTemplate/metadata/dataTemplate.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/modules/codeEditor.module.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {CodeEditorDialogData, CodeEditorDialogSAComponent} from '@anglr/dynamic/layout-editor';\nimport {HandlebarsLanguageModel} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {DataTemplateRelationsOptions} from '../dataTemplate.options';\n\n/**\n * Relations node component for data template\n */\n@Component(\n{\n    selector: 'data-template-node',\n    templateUrl: 'dataTemplateNode.component.html',\n    // styleUrls: ['dataTemplateNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTemplateNodeSAComponent extends RelationsNodeBase<DataTemplateRelationsOptions> implements RelationsNode<DataTemplateRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await this.dialog.open<CodeEditorDialogSAComponent, CodeEditorDialogData, string|null>(CodeEditorDialogSAComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.relationsOptions?.template ?? '',\n                languageModel: HandlebarsLanguageModel,\n\n            }\n        }).afterClosed()\n            .toPromise();\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.template = result;\n            }\n        }\n    }\n}","<relations-node-header>data template</relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"template\" [parent]=\"this\"></relation-node-input>\n                <div>template</div>\n            </div>\n            \n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n                <div>data</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>output</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"output\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"showCodeEditor()\">\n        <span>template</span>\n    </button>\n</div>\n","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DataTemplateNodeSAComponent} from '../node/dataTemplateNode.component';\n\n/**\n * Data template relations metadata\n */\nexport class DataTemplateRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Data template',\n        description: 'Renders data into template',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DataTemplateNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {CodeEditorComponent} from '../components';\n\n/**\n * Module for code editor stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        CodeEditorComponent,\n    ],\n    exports:\n    [\n        CodeEditorComponent,\n    ]\n})\nexport class CodeEditorModule\n{\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {CodeEditorModule} from '@anglr/dynamic';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n//TODO: maybe move into core\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CodeEditorModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, Inject, Optional} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeDestroySubject, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,\n                @Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() destroySubject?: RelationsNodeDestroySubject,)\n    {\n        if(destroySubject)\n        {\n            destroySubject.destroy = this.destroySubject;\n        }\n\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","<div class=\"header-content\"><ng-content></ng-content></div>\n<div *ngIf=\"destroySubject?.destroy\" class=\"destroy-icon\" (click)=\"destroySubject?.destroy?.next()\">x</div>","import {Component, ChangeDetectionStrategy, Inject, Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationsNodeDestroySubject} from '../../interfaces';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../../misc/tokens';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    // styleUrls: ['relationsNodeHeader.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() protected destroySubject?: RelationsNodeDestroySubject,)\n    {\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}"],"names":["DataTemplateNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","open","CodeEditorDialogSAComponent","title","width","height","data","content","metadata","relationsOptions","template","languageModel","HandlebarsLanguageModel","afterClosed","toPromise","isPresent","i0","selectors","standalone","features","RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER","decls","vars","consts","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","DataTemplateRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","CodeEditorModule","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","language","Uri","extension","setModel","inputs","outputs","styles","TITLED_DIALOG_DATA","_r0","i2","MatDialogModule","i1","destroySubject","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","Subject","zoomLevel","destroy","classList","add","updatePosition","id","allOutputs","ɵAllOutputs","ɵInputs","ɵOutputs","asObservable","nodeMetadata","coordinates","metadataSet","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","updateRelations","onMouseUp","updateInputs","inputsChildren","forEach","input","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","RELATIONS_NODE_DESTROY_SUBJECT","viewQuery","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","ctx_r1","ngContentSelectors","CommonModule","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","t","hostBindings","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","LanguageModel","getModel"],"sourceRoot":""}