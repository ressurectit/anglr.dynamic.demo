{"version":3,"file":"59.chunk.377ab778745b2ae3cb6d.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/node/componentInputsNode.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/node/componentInputsNode.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/metadata/componentInputs.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public skipInit: boolean = false;\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div [formGroup]=\"form\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">{{'name'|firstUppercaseLocalize}}</label>\n        <input type=\"text\" class=\"dynamic-form-control\" formControlName=\"name\">\n    </div>\n\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small\" *ngIf=\"data.allowSkipInit\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\"><input type=\"checkbox\" formControlName=\"skipInit\"> {{'skip init'|firstUppercaseLocalize}} </label>\n    </div>\n\n    <div class=\"dynamic-flex-column dynamic-margin-bottom-extra-small\" *ngIf=\"!data.noDefaultValue\">\n        <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-align-self-center\" (click)=\"showCodeEditor()\">\n            <span>{{'default value'|firstUppercaseLocalize}}</span>\n        </button>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"true\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\nimport {ConfigureNodeEndpointData} from './configureNodeEndpoint.interface';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n        CommonModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ConfigureNodeEndpointData,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result.content);\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" [name]=\"'component inputs'|firstUppercaseLocalize\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" *ngFor=\"let endpoint of endpoints\">\n                <div class=\"dynamic-flex-row\">\n                    <div>{{endpoint.name}}</div>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); configureEndpoint(endpoint)\">\n                        <span class=\"fas fa-cog\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"dynamic-btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeEndpoint(endpoint)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"endpoint.name\" [parent]=\"this\"></relation-node-output>\n            </div>\n\n            <div class=\"dynamic-flex-row dynamic-flex-end\">\n                <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-right-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addEndpoint()\">\n                    <span class=\"fas fa-plus\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {extend} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs.options';\nimport {ConfigureNodeEndpointData, ConfigureNodeEndpointSAComponent} from '../../../components';\n\n/**\n * Relations node component for component inputs\n */\n@Component(\n{\n    selector: 'component-inputs-node',\n    templateUrl: 'componentInputsNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeOutputSAComponent,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentInputsNodeSAComponent extends RelationsNodeBase<ComponentInputsRelationsOptions> implements RelationsNode<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets component inputs\n     */\n    protected get endpoints(): ConfigureNodeEndpointData[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            inputs: []\n        };\n\n        return (this.metadata.relationsOptions.inputs ??= []);\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new input endpoint\n     */\n    protected async addEndpoint(): Promise<void>\n    {\n        const param: ConfigureNodeEndpointData = \n        {\n            name: '',\n            defaultValue: null,\n            skipInit: false,\n            allowSkipInit: true,\n        };\n\n        if(await this.configureEndpoint(param))\n        {\n            this.endpoints.push(param);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Removes endpoint\n     * @param endpoint - Endpoint to be removed\n     */\n    protected removeEndpoint(endpoint: ConfigureNodeEndpointData): void\n    {\n        const index = this.endpoints.indexOf(endpoint);\n\n        if(index >= 0)\n        {\n            this.endpoints.splice(index, 1);\n            this.history.getNewState();\n        }\n    }\n\n    /**\n     * Configures endpoint\n     * @param endpoint - Endpoint to be configured\n     */\n    protected async configureEndpoint(endpoint: ConfigureNodeEndpointData): Promise<boolean>\n    {\n        const original = JSON.parse(JSON.stringify(endpoint));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ConfigureNodeEndpointData, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure component input',\n            width: '60vw',\n            data: endpoint\n        }).afterClosed());\n\n        if(!result)\n        {\n            extend(endpoint, original);\n        }\n        else\n        {\n            this.history.getNewState();\n        }\n\n        return result ?? false;\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsNodeSAComponent} from '../node/componentInputsNode.component';\n\n/**\n * Component inputs relations metadata\n */\nexport class ComponentInputsRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Component inputs',\n        description: 'Definition of relations component inputs',\n        group: 'Component',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = ComponentInputsNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n//TODO: sideeffect\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}"],"names":["ComponentEndpointModel","constructor","value","defaultValue","name","skipInit","mapValuesToThis","bind","this","i0","_r3","ctx_r2","showCodeEditor","ConfigureNodeEndpointSAComponent","data","dialog","formModelBuilder","form","build","valueChanges","subscribe","extend","_this","content","isPresent","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","languageModel","JsonLanguageModel","afterClosed","getJson","TITLED_DIALOG_DATA","i1","i2","selectors","standalone","features","FormModelBuilder","decls","vars","consts","template","rf","ctx","ConfigureNodeEndpointSAComponent_div_6_Template","ConfigureNodeEndpointSAComponent_div_7_Template","allowSkipInit","noDefaultValue","ReactiveFormsModule","i3","MatDialogModule","i4","CommonModule","i5","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","$event","endpoint_r1","$implicit","preventDefault","stopPropagation","configureEndpoint","ctx_r4","removeEndpoint","ctx_r0","nodePosition","zoomLevel","ComponentInputsNodeSAComponent","RelationsNodeBase","endpoints","metadata","_a","relationsOptions","inputs","_b","changeDetector","element","super","addEndpoint","_asyncToGenerator","param","push","history","getNewState","endpoint","index","indexOf","splice","_this2","original","parse","ComponentInputsNodeSAComponent_div_6_Template","destroySubject","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","ComponentInputsRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","typescript","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","outputs","editorContent","saveAndClose","close","_r1","_r0","LanguageModel","getModel"],"sourceRoot":""}