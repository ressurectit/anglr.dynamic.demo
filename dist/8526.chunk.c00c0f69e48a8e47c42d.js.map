{"version":3,"file":"8526.chunk.c00c0f69e48a8e47c42d.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/customRelation.utils.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/customRelation.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/customRelation.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null;\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.relationsProcessor = this.injector.get(RelationsProcessor, null);\n\n        this.componentManager = this.injector.get(RelationsComponentManager, null);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsProcessor, RelationsWithInjector} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null;\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.relationsProcessor = this.injector.get(RelationsProcessor, null);\n\n        this.componentManager = this.injector.get(RelationsComponentManager, null);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: output.name,\n                                          });\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs/componentInputs.options';\nimport {ComponentOutputsRelationsOptions} from '../componentOutputs/componentOutputs.options';\n\n/**\n * Gets custom relation inputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getInputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-relations' && itm.name == 'relationsInputs');\n}\n\n/**\n * Gets custom relation outputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getOutputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-relations' && itm.name == 'relationsOutputs');\n}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Custom relation relations metadata loader\n */\nexport const CustomRelationRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/customRelation.relationsMetadata')).CustomRelationRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {PureRelationsComponent, RELATIONS_METADATA_STORAGE, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {MetadataStorage, isDestroyable} from '@anglr/dynamic';\n\nimport {CustomRelationRelationsMetadataLoader} from './customRelation.metadata';\nimport {CustomRelationRelationsOptions} from './customRelation.options';\nimport {ComponentInputsRelations} from '../componentInputs/componentInputs.relations';\nimport {ComponentOutputsRelations} from '../componentOutputs/componentOutputs.relations';\nimport {getInputs, getOutputs} from './customRelation.utils';\n\n/**\n * Custom relation relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(CustomRelationRelationsMetadataLoader)\nexport class CustomRelationRelations implements RelationsComponent<CustomRelationRelationsOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of inputs relations if it exists\n     */\n    protected inputsRelations: ComponentInputsRelations|null = null;\n\n    /**\n     * Instance of outputs relations if it exists\n     */\n    protected outputsRelations: ComponentOutputsRelations|null = null;\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null;\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null;\n\n    /**\n     * Parent relations processor instance\n     */\n    protected parentRelationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Parent relations component manager\n     */\n    protected parentComponentManager: RelationsComponentManager|null;\n\n    /**\n     * Instance of injector for custom relation\n     */\n    protected injector: Injector;\n\n    /**\n     * Id of current relation\n     */\n    public id: string = '';\n\n    /**\n     * Value of relations options\n     */\n    protected ɵrelationsOptions: CustomRelationRelationsOptions|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): CustomRelationRelationsOptions|undefined|null\n    {\n        return this.ɵrelationsOptions;\n    }\n    public set relationsOptions(value: CustomRelationRelationsOptions|undefined|null)\n    {\n        this.ɵrelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### constructor #########################\n    constructor(protected parentInjector: Injector)\n    {\n        this.relationsMetadataStorage = this.parentInjector.get(RELATIONS_METADATA_STORAGE, null, {optional: true});\n        this.parentRelationsProcessor = this.parentInjector.get(RelationsProcessor, null, {optional: true});\n        this.parentComponentManager = this.parentInjector.get(RelationsComponentManager, null, {optional: true});\n\n        //TODO: relations debugger missing\n        this.injector = Injector.create(\n        {\n            parent: this.parentInjector,\n            providers:\n            [\n                RelationsComponentManager,\n                RelationsManager,\n                RelationsProcessor,\n                RelationsChangeDetector,\n            ]\n        });\n\n        this.relationsManager = this.injector.get(RelationsManager, null, {optional: true});\n    }\n\n    //######################### public methods - implementation of DynamicOnChanges #########################\n\n    /**\n     * Called before initialization and every time some property changes\n     * @param changes - Information about changes that occured\n     */\n    public async dynamicOnChanges?(changes: SimpleChanges): Promise<void>\n    {\n        this.inputsRelations?.dynamicOnChanges(changes);\n    }\n\n    //######################### public methods - implementation of RelationsOnDestroy #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy?(): void\n    {\n        if(!this.parentRelationsProcessor || !this.parentComponentManager)\n        {\n            return;\n        }\n\n        this.parentRelationsProcessor.destroyComponent(this.id);\n        this.parentComponentManager.unregisterComponent(this.id);\n        \n        if(isDestroyable(this.injector))\n        {\n            this.injector.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of Invalidatable #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected async initialize(): Promise<void>\n    {\n        if(!this.ɵrelationsOptions)\n        {\n            throw new Error('CustomRelationRelations: missing relations options!');\n        }\n\n        this.id = this.ɵrelationsOptions.id;\n        let relations: RelationsNodeMetadata[]|null = null;\n\n        //gets and initialize inner relations of custom component\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            relations = await this.relationsMetadataStorage.getMetadata(this.ɵrelationsOptions.name);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n\n        //if relations available initialize custom component inputs\n        if(relations)\n        {\n            const inputsMeta = getInputs(relations);\n\n            if(inputsMeta)\n            {\n                this.inputsRelations = new ComponentInputsRelations(this.injector);\n                this.inputsRelations.initInputs(inputsMeta, inputsMeta.id);\n            }\n\n            const outputsMeta = getOutputs(relations);\n\n            if(outputsMeta)\n            {\n                this.outputsRelations = new ComponentOutputsRelations(this.injector);\n                this.outputsRelations.initOutputs(outputsMeta, outputsMeta.id, this);\n            }\n        }\n\n        //initialize and register relations from outside world to this custom component\n        if(this.parentComponentManager && this.parentRelationsProcessor)\n        {\n            this.parentComponentManager.registerComponent(this.id, this);\n            await this.parentRelationsProcessor.initialized;\n            this.parentRelationsProcessor.updateRelations(this.id);\n        }\n    }\n}","import {CustomRelationRelations} from './customRelation.relations';\n\nexport default CustomRelationRelations;\n"],"names":["ComponentInputsRelationsMetadataLoader","_ref","ComponentInputsRelationsEditorMetadata","apply","arguments","ComponentInputsRelations","constructor","injector","id","this","relationsProcessor","get","RelationsProcessor","componentManager","RelationsComponentManager","dynamicOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","relationsOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","_this","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","__decorate","RelationsEditorMetadata","Injector","ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","customComponent","initOutputs","outputRelations","output","outputs","ɵɵinjector","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","getInputs","relations","find","itm","package","getOutputs","CustomRelationRelationsMetadataLoader","CustomRelationRelationsEditorMetadata","CustomRelationRelations","ɵrelationsOptions","initialize","parentInjector","inputsRelations","outputsRelations","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","parentRelationsProcessor","parentComponentManager","create","parent","providers","RelationsManager","relationsManager","_asyncToGenerator","isDestroyable","destroy","_this2","Error","getMetadata","setRelations","inputsMeta","outputsMeta","PureRelationsComponent"],"sourceRoot":""}