{"version":3,"file":"4243.chunk.7964286e9bc67a3b613c.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\n\n/**\n * Template block layout metadata loader\n */\nexport const TemplateBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TemplateBlockComponentOptions>> = async () => new (await import('./metadata/templateBlock.layoutMetadata')).TemplateBlockLayoutEditorMetadata();\n\n/**\n * Template block layout designer type loader\n */\nexport const TemplateBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/templateBlockDesigner.component')).TemplateBlockDesignerSAComponent;","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\nimport {TemplateBlockLayoutDesignerTypeLoader, TemplateBlockLayoutMetadataLoader} from './templateBlock.metadata';\n\n/**\n * Component used for displaying template block\n */\n@Component(\n{\n    selector: 'template-block',\n    templateUrl: 'templateBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(TemplateBlockLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(TemplateBlockLayoutMetadataLoader)\nexport class TemplateBlockSAComponent extends LayoutComponentBase<TemplateBlockComponentOptions> implements LayoutComponent<TemplateBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onOptionsSet(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        const id = this.options?.layoutId;\n\n        if(!id)\n        {\n            return;\n        }\n\n        this.metadata = await this.layoutMetadataStorage.getMetadata(id);\n\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            const relations = await this.relationsMetadataStorage.getMetadata(id);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n    }\n}","<ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockSAComponent} from './templateBlock.component';\n\nexport default TemplateBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TemplateBlockLayoutMetadataLoader","_ref","_asyncToGenerator","TemplateBlockLayoutEditorMetadata","apply","arguments","TemplateBlockLayoutDesignerTypeLoader","_ref2","TemplateBlockDesignerSAComponent","TemplateBlockSAComponent","LayoutComponentBase","constructor","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","metadata","onOptionsSet","_this","initialized","id","options","layoutId","getMetadata","relations","setRelations","t","selectors","standalone","features","i0","RelationsComponentManager","RelationsProcessor","RelationsChangeDetector","decls","vars","consts","template","rf","ctx","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","this","componentElement","extensionsOptions","changeDetector","injector","logger","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","i1","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}