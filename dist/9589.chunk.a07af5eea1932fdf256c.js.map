{"version":3,"file":"9589.chunk.a07af5eea1932fdf256c.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/node/richTextSourceNode.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/node/richTextSourceNode.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextSource/metadata/richTextSource.relationsMetadata.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, Inject, Optional} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeDestroySubject, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,\n                @Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() destroySubject?: RelationsNodeDestroySubject,)\n    {\n        if(destroySubject)\n        {\n            destroySubject.destroy = this.destroySubject;\n        }\n\n        this.updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {isPresent} from '@jscrpt/common';\n\nimport {RichTextSourceRelationsOptions} from '../richTextSource.options';\nimport {RichTextBlockEditorDialogSAComponent} from '../../richTextBlock/misc/components';\n\n/**\n * Relations node component for rich text source\n */\n@Component(\n{\n    selector: 'rich-text-source-node',\n    templateUrl: 'richTextSourceNode.component.html',\n    styleUrls: ['richTextSourceNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextSourceNodeSAComponent extends RelationsNodeBase<RichTextSourceRelationsOptions> implements RelationsNode<RichTextSourceRelationsOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.metadata?.relationsOptions?.content ?? ''\n        }).afterClosed()\n            .toPromise();\n\n        if(isPresent(result))\n        {\n            if(this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.content = result;\n            }\n        }\n    }\n}","<div class=\"node-header\">\n    <div class=\"flex-1\">Rich text source</div>\n    <div (click)=\"destroySubject.next()\">x</div>\n</div>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs margin-right-small\">\n        </div>\n    \n        <div class=\"outputs margin-left-small\">\n            <div class=\"flex-row margin-bottom-extra-small\">\n                <div class=\"margin-right-extra-small\">html string</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"htmlString\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"showCodeEditor()\">\n        <span>content</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {RichTextSourceNodeSAComponent} from '../node/richTextSourceNode.component';\n\n/**\n * Rich text source relations metadata\n */\nexport class RichTextSourceRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Rich text source',\n        description: 'Provides rich text source node',\n        group: 'Texts',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = RichTextSourceNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["RelationsNodeBase","constructor","changeDetector","element","destroySubject","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","Subject","zoomLevel","destroy","this","updatePosition","id","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","updateRelations","onMouseUp","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","nativeElement","style","left","top","i0","RELATIONS_NODE_DESTROY_SUBJECT","viewQuery","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","ctx","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","ngOnDestroy","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","t","selectors","hostBindings","CommonModule","styles","changeDetection","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","RichTextBlockEditorDialogSAComponent","data","dialog","content","TITLED_DIALOG_DATA","standalone","features","decls","vars","consts","template","_r0","MatDialogModule","i1","EditorModule","i2","encapsulation","RichTextSourceNodeSAComponent","super","showCodeEditor","result","open","title","width","height","relationsOptions","afterClosed","toPromise","isPresent","RichTextSourceRelationsEditorMetadata","metaInfo","description","group","nodeDefinition"],"sourceRoot":""}