{"version":3,"file":"4921.chunk.93c0fe2dd3f343414b08.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n\n/**\n * If block layout designer type loader\n */\nexport const IfBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/ifBlockDesigner.component')).IfBlockDesignerSAComponent;\n","@if(condition)\n{\n    <ng-container *layoutComponentRenderer=\"options?.content\"/>\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutDesignerTypeLoader, IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<IfBlockSAComponent>('condition'),\n    ],\n})\n@DescendantsGetter<IfBlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorDesignerType(IfBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.condition = this.options?.condition ?? false;\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["IfBlockLayoutMetadataLoader","_ref","_asyncToGenerator","IfBlockLayoutEditorMetadata","apply","arguments","IfBlockRelationsMetadataLoader","_ref2","IfBlockRelationsEditorMetadata","IfBlockLayoutDesignerTypeLoader","_ref3","IfBlockDesignerSAComponent","i0","IfBlockSAComponent_Conditional_0_ng_container_0_Template","ctx_r0","options","content","IfBlockSAComponent","LayoutComponentBase","constructor","condition","onOptionsSet","this","t","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","IfBlockSAComponent_Conditional_0_Template","CommonModule","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DebugData","nameof","DescendantsGetter","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","provide","useValue","DynamicItemExtensionBase","relationsProcessor","componentManager","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}