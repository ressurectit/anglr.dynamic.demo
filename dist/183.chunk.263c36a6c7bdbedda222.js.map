{"version":3,"file":"183.chunk.263c36a6c7bdbedda222.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutComponentTransform, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {optional: true}) :\n            !!this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true,}));\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout designer component transform function\n     */\n    public get layoutDesignerComponentTransform(): LayoutComponentTransform|null\n    {\n        //current transform\n        const transform = this.injector.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true});\n\n        //current or parent custom component transform\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LAYOUT_COMPONENT_TRANSFORM, null, {skipSelf: true, optional: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations debugger instance that is used for placeholders\n     */\n    public get relationsDebugger(): RelationsDebugger|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsDebugger, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {{@id}}', {id: this.id});\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","IdSetterExtension","DynamicItemExtensionBase","onInit","_this","instance","setId","metadata","id","PlaceholderHandler","this","ɵid","injector","get","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LAYOUT_COMPONENT_TRANSFORM","optional","skipSelf","placeholderContainer","layoutDesignerComponentTransform","findRelatedCustomComponentHandler","relationsComponentManager","getParentCustomComponentHandler","RelationsComponentManager","undefined","relationsProcessor","RelationsProcessor","relationsChangeDetector","RelationsChangeDetector","relationsDebugger","RelationsDebugger","relationsManager","RelationsManager","constructor","customComponent","inject","Injector","logger","LOGGER","getOptions","options","placeholderContainers","initOptions","custom","containerId","_a","name","package","displayName","error","placeholders","customComponents","Error","LayoutComponentBase","element","componentElement","extensionsOptions","changeDetector","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_asyncToGenerator","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","features","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","LocalizeSAPipe","styles","changeDetection","LayoutComponentRendererSADirective","component","ɵComponentRef","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","createComponent","Ignore","ThrowError","usedInjector","create","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","i1","inputs","outputs","exportAs"],"sourceRoot":""}