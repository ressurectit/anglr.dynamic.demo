{"version":3,"file":"9678.chunk.182ab7c668635c5d67e4.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.model.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodePropertiesEditor/relationsNodePropertiesEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toColor/toColor.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts"],"sourcesContent":["import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, OnDestroy, inject} from '@angular/core';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_HISTORY_MANAGER} from '../misc/tokens';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    protected canvas: RelationsCanvasSAComponent = inject(RelationsCanvasSAComponent);\n\n    /**\n     * Canvas position change subscription\n     */\n    protected canvasPositionChangeSubscription: Subscription|null|undefined = null;\n\n    /**\n     * Instance of resize observer\n     */\n    protected observer: ResizeObserver;\n\n    /**\n     * Metadata history manager\n     */\n    protected history: MetadataHistoryManager<RelationsNodeMetadata[]> = inject(RELATIONS_HISTORY_MANAGER);\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether user moved node during drag\n     */\n    protected moved: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseMovePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Last mouse down offset position\n     */\n    protected lastMouseDownOffset: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    /**\n     * Node bounding box\n     */\n    public get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,)\n    {\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n\n        this.observer = new ResizeObserver(() =>this.updateRelations());\n        this.observer.observe(this.element.nativeElement);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(): void\n    {\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.moved = false;\n        this.isDragging = true;\n\n        this.lastMouseDownOffset =\n        {\n            x: event.clientX - this.boundingBox.left,\n            y: event.clientY - this.boundingBox.top\n        };\n\n        this.canvasPositionChangeSubscription = this.canvas.convasPositionChanged.subscribe(() => \n        {\n            this.nodePosition = this.canvas.getPositionInCanvas({\n                x: this.lastMouseMovePosition.x - this.lastMouseDownOffset.x,\n                y: this.lastMouseMovePosition.y - this.lastMouseDownOffset.y,\n            });\n\n            this.invalidateVisuals();\n\n            this.updatePosition();\n            this.updateRelations();\n        });\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.moved = true;\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            this.nodePosition = this.canvas.getPositionInCanvas({\n                x: this.lastMouseMovePosition.x - this.lastMouseDownOffset.x,\n                y: this.lastMouseMovePosition.y - this.lastMouseDownOffset.y,\n            });\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            if(this.moved)\n            {\n                this.history.getNewState();\n            }\n\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, HostBinding, Input, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Canvas position change subscription\n     */\n    protected canvasPositionChangeSubscription: Subscription|null = null;\n\n    /**\n     * Node relation\n     */\n    protected relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Indication whether node endpoint is highlighted\n     */\n    @HostBinding('class.highlighted')\n    protected isHighlighted: boolean = false;\n\n    /**\n     * Last mouse move position\n     */\n    protected lastMouseMovePosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>,\n                protected relationManager: RelationsNodeManager,\n                protected canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this.element.nativeElement.offsetLeft + this.element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this.element.nativeElement.offsetTop + this.element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Highlight node endpoit\n     */\n    public highlight(): void\n    {\n        this.isHighlighted = true;\n    }\n\n    /**\n     * Cancel highlight for node endpoint\n     */\n    public cancelHighlight(): void\n    {\n        this.isHighlighted = false;\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RelationsNodeProperties} from './relationsNodePropertiesEditor.interface';\n\n/**\n * Relations node properties model\n */\nexport class RelationsNodePropertiesModel implements RelationsNodeProperties\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public displayName: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public scope: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RelationsNodeProperties|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","<div class=\"dynamic-form-group\" [formGroup]=\"form\">\n    <label class=\"dynamic-control-label\">{{'display name'|firstUppercaseLocalize}}</label>\n    <input class=\"dynamic-form-control\" type=\"text\" formControlName=\"displayName\">\n\n    <label class=\"dynamic-control-label\">{{'scope'|firstUppercaseLocalize}}</label>\n    <input class=\"dynamic-form-control\" type=\"text\" formControlName=\"scope\" [readonly]=\"true\" *ngIf=\"!data.scopeConfigurable\">\n\n    <select class=\"dynamic-form-control\" formControlName=\"scope\" *ngIf=\"data.scopeConfigurable\">\n        <option value=\"\">---</option>\n        <option *ngFor=\"let scope of scopes\" [value]=\"scope\">{{scope}}</option>\n    </select>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"form.value\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\n\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from './relationsNodePropertiesEditor.interface';\nimport {RelationsNodePropertiesModel} from './relationsNodePropertiesEditor.model';\n\n/**\n * Component used for editing display name of relations node\n */\n@Component(\n{\n    selector: 'relations-node-properties-editor',\n    templateUrl: 'relationsNodePropertiesEditor.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        FirstUppercaseLocalizeSAPipe\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodePropertiesEditorSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control for editation of display name\n     */\n    protected form: FormGroup<FormModelGroup<RelationsNodeProperties>>;\n\n    /**\n     * Array of available scopes\n     */\n    protected scopes: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: RelationsNodePropertiesEditorData,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.form = formModelBuilder.build<RelationsNodeProperties>(new RelationsNodePropertiesModel(data.properties));\n        this.scopes = data.scopeRegister.scopes;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\nimport {stringToColour} from '../../misc/utils';\n\n/**\n * Converts string to color code\n */\n@Pipe({name: 'toColor', standalone: true})\nexport class ToColorSAPipe implements PipeTransform\n{\n    /**\n     * Converts string to color code\n     * @param value - String to be converted\n     */\n    public transform(value: string|undefined|null): string|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        return stringToColour(value);\n    }\n}","<div class=\"header-content\">{{parent?.metadata?.displayName || name || parent?.metadata?.id}}</div>\n\n<span *ngIf=\"parent?.metadata?.scope\" [tooltip]=\"parent?.metadata?.scope\" [style.color]=\"parent?.metadata?.scope | toColor\" class=\"dynamic-margin-horizontal-extra-small dynamic-bold\">&#123;&#125;</span>\n\n<button type=\"button\" class=\"dynamic-btn-icon edit-icon\" (click)=\"editProperties()\">\n    <span class=\"fas fa-pen\"></span>\n</button>\n\n<button type=\"button\" *ngIf=\"destroySubject\" class=\"dynamic-btn-icon destroy-icon\" (click)=\"destroySubject.next()\">\n    <span class=\"fas fa-times\"></span>\n</button>","import {Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {TooltipModule} from '@anglr/common';\nimport {lastValueFrom, Subject} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodePropertiesEditorSAComponent} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.component';\nimport {RelationsNodeProperties, RelationsNodePropertiesEditorData} from '../relationsNodePropertiesEditor/relationsNodePropertiesEditor.interface';\nimport {ToColorSAPipe} from '../../pipes/toColor/toColor.pipe';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\nimport {ScopeRegister} from '../../services';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        ToColorSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent relations node of node header\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    /**\n     * Subject used for destroying relations node\n     */\n    @Input()\n    public destroySubject: Subject<void>|undefined|null;\n\n    /**\n     * Name of node to be displayed\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected dialog: TitledDialogService,\n                protected changeDetector: ChangeDetectorRef,\n                protected scopeRegister: ScopeRegister,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Opens editation of properties\n     */\n    protected async editProperties(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RelationsNodePropertiesEditorSAComponent, RelationsNodePropertiesEditorData, RelationsNodeProperties|undefined|null>(RelationsNodePropertiesEditorSAComponent,\n        {\n            title: 'edit properties',\n            width: '30vw',\n            data: \n            {\n                properties: \n                {\n                    displayName: this.parent?.metadata?.displayName || this.name || this.parent?.metadata?.id || '',\n                    scope: this.parent?.metadata?.scope ?? '',\n                },\n                scopeConfigurable: this.parent?.metadata?.nodeMetadata?.scopeConfigurable ?? false,\n                scopeRegister: this.scopeRegister,\n            }\n        }).afterClosed());\n\n        if(result && this.parent?.metadata)\n        {\n            this.parent.metadata.displayName = result.displayName ?? undefined;\n            this.parent.metadata.scope = result.scope ?? undefined;\n            this.history.getNewState();\n\n            this.changeDetector.detectChanges();\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.relation)\n        {\n            this.relation.destroy();\n        }\n\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this.relation)\n        {\n            //Same relation\n            if (this.relation.start?.x === relation.start?.x &&\n                this.relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this.relation.destroy();\n        }\n\n        this.relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this.relation)\n        {\n            return;\n        }\n\n        this.relation.end = this.getCoordinates();\n        this.relation.input = this;\n        this.relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this.relationManager.setActiveInput(this);\n        }\n\n        this.relation?.highlight();\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this.relationManager.setActiveInput(null);\n        }\n\n        this.relation?.cancelHighlight();\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._tempRelation = this.relation;\n        this.relation = null;\n        this.isDragging = true;\n\n        this.canvasPositionChangeSubscription = this.canvas?.convasPositionChanged.subscribe(() => \n        {\n            if (this._tempRelation)\n            {\n                this._tempRelation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n\n                this._tempRelation.invalidateVisuals();\n            }\n        });\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n//TODO: optimize window events, do not register for all time\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected ɵrelations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this.ɵrelations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵrelations)\n        {\n            const relations = [...this.ɵrelations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n\n        this.canvasPositionChangeSubscription?.unsubscribe();\n        this.canvasPositionChangeSubscription = null;\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this.canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this.ɵrelations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this.ɵrelations.splice(index, 1);\n            }\n        });\n\n        this.ɵrelations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this.ɵrelations)\n        {\n            return;\n        }\n\n        for (const relation of this.ɵrelations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.isDragging = true;\n        this.canvasPositionChangeSubscription = this.canvas?.convasPositionChanged.subscribe(() => \n        {\n            if (this.relation)\n            {\n                this.relation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n                this.relation.invalidateVisuals();\n            }\n        });\n\n        this.relation = this.startRelation();\n    }\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(_: MouseEvent): void\n    {\n        this.ɵrelations?.forEach(relation => relation?.highlight());\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(_: MouseEvent): void\n    {\n        this.ɵrelations?.forEach(relation => relation?.cancelHighlight());\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this.isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.lastMouseMovePosition =\n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            if (this.relation)\n            {\n                this.relation.end = this.canvas.getPositionInCanvas({x: this.lastMouseMovePosition.x, y: this.lastMouseMovePosition.y});\n                this.relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            this.canvasPositionChangeSubscription?.unsubscribe();\n            this.canvasPositionChangeSubscription = null;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this.relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}"],"names":["RelationsNodeBase","id","this","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","destroy","destroySubject","asObservable","boundingBox","element","nativeElement","getBoundingClientRect","constructor","changeDetector","canvas","inject","RelationsCanvasSAComponent","canvasPositionChangeSubscription","history","RELATIONS_HISTORY_MANAGER","initialized","isDragging","moved","lastMouseMovePosition","x","y","lastMouseDownOffset","nodePosition","Subject","zoomLevel","classList","add","updatePosition","observer","ResizeObserver","updateRelations","observe","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","ngOnDestroy","disconnect","unsubscribe","invalidateVisuals","detectChanges","initEndpoints","initialize","onMouseDown","event","clientX","left","clientY","top","convasPositionChanged","subscribe","getPositionInCanvas","stopImmediatePropagation","onMouseMove","preventDefault","onMouseUp","getNewState","updateInputs","inputsChildren","forEach","input","name","Object","freeze","updateOutputs","outputsChildren","toArray","output","updateRelation","style","i0","viewQuery","rf","ctx","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","$event","RelationNodeEndpointBase","parentId","parent","relationManager","isHighlighted","parentCoordiantes","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","highlight","cancelHighlight","i1","i2","hostVars","hostBindings","RelationsNodePropertiesModel","value","displayName","scope","mapValuesToThis","bind","scope_r3","RelationsNodePropertiesEditorSAComponent_select_9_option_3_Template","ctx_r1","scopes","RelationsNodePropertiesEditorSAComponent","data","formModelBuilder","form","build","properties","scopeRegister","TITLED_DIALOG_DATA","selectors","standalone","features","FormModelBuilder","decls","vars","consts","template","RelationsNodePropertiesEditorSAComponent_input_8_Template","RelationsNodePropertiesEditorSAComponent_select_9_Template","scopeConfigurable","CommonModule","MatDialogModule","i3","ReactiveFormsModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","ToColorSAPipe","transform","stringToColour","pure","ctx_r0","_r3","ctx_r2","next","RelationsNodeHeaderSAComponent","dialog","editProperties","_this","result","lastValueFrom","open","title","width","afterClosed","undefined","RelationsNodeHeaderSAComponent_span_2_Template","RelationsNodeHeaderSAComponent_button_5_Template","TooltipModule","relation","addRelation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","LEFT","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","t","ɵrelations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","_"],"sourceRoot":""}