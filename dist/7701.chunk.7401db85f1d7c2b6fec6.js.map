{"version":3,"file":"7701.chunk.7401db85f1d7c2b6fec6.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/dynamicItems/radio/metadata/radio.model.ts","webpack://ng-universal-demo/../form/src/dynamicItems/radio/misc/components/radioPropertiesControl/radioPropertiesControl.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/radio/misc/components/radioPropertiesControl/radioPropertiesControl.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/radio/metadata/radio.layoutMetadata.ts","webpack://ng-universal-demo/../form/src/metadata/formComponentBase.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts"],"sourcesContent":["import {FormGroup, FormArray} from '@angular/forms';\nimport {FormComponentBaseModel} from '@anglr/dynamic/form';\nimport {ModelPropertyMetadata} from '@anglr/common/forms';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {RadioComponentOptions} from '../radio.options';\nimport {RadioOption} from '../radio.interface';\n\n\nexport class RadioOptionModel implements RadioOption\n{\n    public code: string|null|undefined = '';\n    \n    public text: string|null|undefined = '';\n\n    //######################### constructor #########################\n    constructor(value?: RadioOption)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}\n\n/**\n * Radio model for properties editor\n */\nexport class RadioModel extends FormComponentBaseModel implements RadioComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @ModelPropertyMetadata({childType: FormGroup, type: FormArray})\n    public options: RadioOptionModel[]|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: RadioComponentOptions|undefined|null)\n    {\n        super(value);\n        mapValuesToThis.bind(this)(value);\n\n        if (this.options?.length)\n        {\n            this.options = this.options.map(itm => new RadioOptionModel(itm));\n        }\n    }\n}","<div class=\"properties-form-group\">\n    <label class=\"properties-control-label\">{{'options'|firstUppercaseLocalize}}</label>\n    <div>\n        <div class=\"dynamic-flex-row\" *ngFor=\"let tabControl of optionsControls; let i = index\" [formGroup]=\"tabControl\">\n            <div class=\"dynamic-flex-1\">\n                <input class=\"properties-form-control dynamic-flex-1\" type=\"text\" [placeholder]=\"'code'|firstUppercaseLocalize\" formControlName=\"code\">\n                <textarea class=\"properties-form-control dynamic-flex-1\" type=\"text\" [placeholder]=\"'text'|firstUppercaseLocalize\" formControlName=\"text\"></textarea>\n            </div>\n            <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeOption(i)\">\n                <span class=\"fas fa-times\"></span>\n            </button>\n        </div>\n        \n        <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\" (click)=\"addOption()\">\n            <span>{{'add option'|firstUppercaseLocalize}}</span>\n        </button>\n    </div>\n</div>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormArray, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\n\nimport {RadioComponentOptions} from '../../../radio.options';\nimport {RadioOptionModel} from '../../../metadata/radio.model';\n\n\n/**\n * Component used for displaying material tab group properties control\n */\n@Component(\n{\n    selector: 'radio-properties-control',\n    templateUrl: 'radioPropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioPropertiesControlSAComponent extends PropertiesControlBase<RadioComponentOptions> implements PropertiesControl<RadioComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options control\n     */\n    protected get optionsControl(): FormArray|null|undefined\n    {\n        return <FormArray>this.form?.controls.options;\n    }\n\n    /**\n     * Options control form groups\n     */\n    protected get optionsControls(): FormGroup[]|null|undefined\n    {\n        return <FormGroup[]>this.optionsControl?.controls;\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,\n                protected formModelBuilder: FormModelBuilder)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new tab to tab group\n     */\n    protected async addOption(): Promise<void>\n    {\n        this.optionsControl?.push(this.formModelBuilder.build(new RadioOptionModel()));\n    }\n\n    /**\n     * Removes tab on specified index in form array\n     * @param index Tab index to remove\n     */\n    protected removeOption(index: number): void\n    {\n        this.optionsControl?.removeAt(index);\n    }\n}\n","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RadioComponentOptions} from '../radio.options';\nimport {RadioModel} from './radio.model';\nimport {RadioPropertiesControlSAComponent} from '../misc/components';\n\n\n/**\n * Radio layout metadata\n */\nexport class RadioLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RadioComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RadioComponentOptions> =\n    {\n        name: 'Radio',\n        description: 'Radio',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: RadioModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<RadioModel>(['controlName']),\n                    ],\n                },\n                {\n                    modelType: RadioModel,\n                    propertiesControls: \n                    [\n                        RadioPropertiesControlSAComponent,\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            options: [\n                {\n                    code: '1',\n                    text: 'Text'\n                }\n            ]\n        },\n        group: 'Form fields'\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {FormComponentControlType} from '../misc/enums';\nimport {FormComponentOptions} from '../misc/formComponentBase.options';\n\n/**\n * Base form component model for properties editor\n */\nexport class FormComponentBaseModel implements FormComponentOptions\n{\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Control name')\n    @LayoutPropertyDescription('Form control name')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public controlName: string|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public controlType: FormComponentControlType = FormComponentControlType.FormControl;\n\n    //######################### constructor #########################\n    constructor(value: FormComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}"],"names":["RadioOptionModel","constructor","value","code","text","mapValuesToThis","bind","this","RadioModel","FormComponentBaseModel","super","options","length","map","itm","__decorate","ModelPropertyMetadata","childType","FormGroup","type","FormArray","i0","$event","i_r2","_r4","index","ctx_r3","preventDefault","stopPropagation","removeOption","tabControl_r1","RadioPropertiesControlSAComponent","PropertiesControlBase","optionsControl","form","controls","optionsControls","changeDetector","metadataExtractor","dialog","formModelBuilder","addOption","_this","push","build","removeAt","i1","i2","i3","selectors","standalone","features","decls","vars","consts","template","rf","ctx","RadioPropertiesControlSAComponent_div_5_Template","CommonModule","i4","ReactiveFormsModule","i5","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","RadioLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","group","Object","freeze","controlName","controlType","FormComponentControlType","FormControl","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","inputs","property_r1","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","undefined","get","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","ctx_r0","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","properties","GenericPropertiesControl","t","GenericPropertiesControl_ng_container_0_Template","TooltipModule","PropertyTypeControlsModule","FormPipesModule","DefaultGenericPropertiesControlComponent_ng_container_0_Template","CastPipesModule","NumberInputModule"],"sourceRoot":""}