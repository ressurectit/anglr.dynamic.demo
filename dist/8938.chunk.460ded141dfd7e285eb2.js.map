{"version":3,"file":"8938.chunk.460ded141dfd7e285eb2.js","mappings":"+QAgBM,MAAgBA,UAAkFC,EAAAA,EADxGC,WAAAA,G,oBAoBc,KAAAC,QAA2B,IAAIC,EAAAA,GAU/B,KAAAC,eAAgDC,EAAAA,EAAAA,IAAOC,EAAAA,EAAwB,CAACC,UAAU,G,CAOpG,SACWC,CAAMA,GAEb,MAAMC,EAAWC,KAAKF,MACtBE,KAAKC,YAAcH,EAEfA,IAAUC,GAEVC,KAAKR,SAASU,WAAWJ,EAEjC,CACA,SAAWA,GAEP,OAAOE,KAAKC,WAChB,CAKA,YACWE,CAASL,GAEhBE,KAAKI,UAAYN,GAEH,IAAVA,EAMJE,KAAKR,SAASa,iBAAiBC,EAAAA,GAAWH,UAJtCH,KAAKR,SAASe,cAAcD,EAAAA,GAAWH,SAK/C,CACA,YAAWA,GAEP,OAAOH,KAAKI,SAChB,CAKA,YACWI,CAASV,GAEhBE,KAAKS,UAAYX,GAEH,IAAVA,EAMJE,KAAKR,SAASkB,SAJVV,KAAKR,SAASmB,SAKtB,CACA,YAAWH,GAEP,OAAOR,KAAKS,SAChB,CAemBG,YAAAA,GAEXZ,KAAKa,UAKTb,KAAKc,qBAAqBC,cAC1Bf,KAAKc,oBAAsB,KAE3Bd,KAAKR,QAAUQ,KAAKgB,gBAAgBhB,KAAKa,SAASI,YAAajB,KAAKN,cAAewB,EAAAA,EAAyBzB,YAAaO,KAAKF,OAC9HE,KAAKmB,uBACLnB,KAAKc,oBAAsBd,KAAKR,SAC1B4B,cACAC,WAAUvB,IAERE,KAAKC,YAAcH,CAAK,IAEpC,CAOUqB,oBAAAA,GACT,CAYOH,eAAAA,CAAgBC,EAAoCvB,EAA+C4B,EAA+CJ,EAAAA,EAAyBzB,YAAa8B,GAE5L,IAAI/B,GAAUgC,EAAAA,EAAAA,IAAeP,EAAavB,EAAe4B,EAAoBC,GAmB7E,OAjBK/B,IAEDQ,KAAKyB,QAAQC,KAAK,gEAAiE,CAACC,KAAMV,IAE1FzB,GAAUoC,EAAAA,EAAAA,IAAkBN,EAAoBC,IAGhDvB,KAAKG,UAELX,EAAQe,cAAcD,EAAAA,GAAWH,UAGjCH,KAAKQ,UAELhB,EAAQmB,UAGLnB,CACX,E,wDAvKkBH,KAAiBwC,GAAjBxC,EAAiB,G,qBAAjBA,EAAiByC,OAAA,CAAAhC,MAAA,QAAAK,SAAA,WAAAK,SAAA,YAAAuB,SAAA,CAAAC,EAAAA,MAoG5BC,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,gE,meC1Gb,MAAMC,EAA0B,eAAAC,EAAAC,GAAkF,mBAAY,WAAW,0DAA4CC,2BAA4B,sBAAjL,OAAAF,EAAAG,MAAA,KAAAC,UAAA,KAK1BC,EAA6B,eAAAC,EAAAL,GAA6D,mBAAY,WAAW,8EAA+CM,8BAA+B,sBAAlK,OAAAD,EAAAH,MAAA,KAAAC,UAAA,K,kLCiBnC,IAAMI,EAAN,cAAgCvD,EAAAA,I,wDAA1BuD,KAAiBf,GAAjBe,EAAiB,G,qBAAjBA,EAAiBC,UAAA,kBAAAC,YAAA,EAAAf,SAAA,CAAAC,EAAAA,EAAAA,EAAAA,GAAAe,MAAA,EAAAC,KAAA,EAAAC,OAAA,kCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IC/B9BnB,EAAAA,GAAA,WAAOA,EAAAA,EAAA,GAAkBA,EAAAA,KACzBA,EAAAA,GAAA,a,oDADOA,EAAAA,EAAA,GAAAA,EAAAA,GAAA,MAAAoB,EAAAvC,QAAA,KAAAuC,EAAAvC,QAAAwC,OACsDrB,EAAAA,EAAA,GAAAA,EAAAA,EAAA,cAAAA,EAAAA,GAAA,IAAAA,EAAAA,GAAA,IAAAoB,EAAA5D,WAA1CwC,EAAAA,EAAA,oBAAAoB,EAAAvC,QAAA,KAAAuC,EAAAvC,QAAAyC,a,gBDsBXC,EAAAA,EAAeC,EAAAA,EACfC,EAAAA,EAAeC,EAAAA,EAEfC,EAAAA,EAAmBC,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAC,OAAA,sCAAAC,gBAAA,IAKdlB,GAAiBX,EAAAA,EAAAA,IAAA,EAF7B8B,EAAAA,EAAAA,GAAwBtB,IACxBuB,EAAAA,EAAAA,GAAqB7B,IACTS,GEzBb,UAEaqB,EAAa,CAACC,EAAAA,EAA2BC,EAAAA,E,mCCF/C,MAAMvE,EAA2D,I,SAAIwE,GAAgC,yB,kDCEtG,SAAUJ,EAAqBK,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,gbCAM,MAAgB/E,EADtBC,WAAAA,GAQc,KAAA0E,WAA+C,GAO/C,KAAAM,WAAqB,EAoCrB,KAAAC,gBAAoC7E,EAAAA,EAAAA,IAAO8E,EAAAA,GAK3C,KAAAC,kBAA4C/E,EAAAA,EAAAA,IAAOgF,EAAAA,IAKnD,KAAAC,UAAqBjF,EAAAA,EAAAA,IAAOkF,EAAAA,GAK5B,KAAApD,QAAiB9B,EAAAA,EAAAA,IAAOmF,EAAAA,G,CA9ClC,eAAcC,GAEV,IAAI/E,KAAKa,QAEL,MAAM,IAAImE,MAAM,wCAGpB,OAAOhF,KAAKa,OAChB,CAOA,WAAcoE,GAEV,OAAOjF,KAAK0E,gBAChB,CAKA,qBAAcQ,GAEV,OAAOlF,KAAKa,OAChB,CAkCOsE,WAAAA,GAKH,GAFAnF,KAAKyB,OAAO2D,MAAM,uEAAwE,CAACb,UAAWvE,KAAKuE,aAExGvE,KAAKuE,UAAR,CAKAvE,KAAKuE,WAAY,EAEjB,IAAI,MAAMc,KAAOrF,KAAKiE,WAElBoB,EAAIC,UAGRtF,KAAKuF,W,CACT,CAOaC,aAAAA,GAAa,IAAAC,EAAA,YAAApD,GAAC,YAEvB,MAAM6C,EAAoBO,EAAKP,kBAK/B,SAHMO,EAAKC,eACLD,EAAK7E,eAERsE,EAEC,IAAI,MAAMS,KAAaF,EAAKxB,iBAElB0B,EAAUC,WAAWH,EAAKb,SAAUa,EAAKR,QAASQ,SAI1DA,EAAKI,WAAY,GAfDxD,EAgB1B,CAKayD,gBAAAA,CAAiBC,GAAsB,IAAAC,EAAA,YAAA3D,GAAA,YAGhD,IAAG4D,EAAAA,EAAAA,IAAsC,aAAcF,EACvD,CAEQA,GAAQE,EAAAA,EAAAA,IAAsC,YAAYC,oBAEpDF,EAAKpF,gBAGf,MAAMsE,EAAoBc,EAAKd,kBAG/B,GAAGA,EAEC,IAAI,MAAMS,KAAaK,EAAK/B,iBAElB0B,EAAUQ,cAAcjB,GAItC,GAAGa,GAAQE,EAAAA,EAAAA,IAAsC,YAAYC,YAEzD,aAGEF,EAAKI,iB,QAGRL,GAAQE,EAAAA,EAAAA,IAAsC,aAEjDI,EAAAA,EAAAA,IAAcN,IAEdC,EAAKM,UAAUP,EAClB,GAnC+C1D,EAoCpD,CAKOkE,kBAAAA,CAAmBtC,GAEtBjE,KAAKiE,WAAaA,CACtB,CAKOuC,iBAAAA,GAEHxG,KAAKwE,eAAeiC,eACxB,CAOUf,MAAAA,GAEV,CAKUG,SAAAA,GAEV,CAKUO,eAAAA,GAEV,CAMUE,SAAAA,CAAUI,GAEpB,CAKU9F,YAAAA,GAEV,CAKU2E,SAAAA,GAEV,E,iCA9NkBjG,EAAmB,E,kBAAnBA,G,6DCHhB,MAAO4E,UAAkCyC,EAAAA,EAcxBjB,MAAAA,GAEf1F,KAAK4G,cACT,CAKmBR,eAAAA,GAEfpG,KAAK4G,cACT,CAOUA,YAAAA,GAEN,MAAM/F,EAAUb,KAAKa,QACfgG,EAAQ7G,KAAKiF,SAAS6B,cAAcD,MAE1C,GAAG7G,KAAKiF,QACR,CACI,IAAG8B,EAAAA,EAAAA,IAAU/G,KAAKgH,cAEd,IAAI,MAAMC,KAAYjH,KAAKgH,aAAaE,MAAM,KAEvCD,GAECjH,KAAKiF,QAAQ6B,cAAcK,UAAUC,OAAOH,GAOxD,GAFAjH,KAAKgH,aAAenG,GAASoG,SAE1BpG,GAASoG,SAER,IAAI,MAAMA,KAAYpG,EAAQoG,SAASC,MAAM,KAEtCD,GAECjH,KAAKiF,SAAS6B,cAAcK,UAAUE,IAAIJ,E,EAMvDF,EAAAA,EAAAA,IAAUF,KAENhG,GAASyG,SAERT,EAAMU,aAAe1G,EAAQyG,OAAOE,QAAU,GAC9CX,EAAMY,YAAc5G,EAAQyG,OAAOI,OAAS,GAC5Cb,EAAMc,UAAY9G,EAAQyG,OAAOM,KAAO,GACxCf,EAAMgB,WAAahH,EAAQyG,OAAOQ,MAAQ,IAG3CjH,GAASkH,UAERlB,EAAMmB,cAAgBnH,EAAQkH,QAAQP,QAAU,GAChDX,EAAMoB,aAAepH,EAAQkH,QAAQL,OAAS,GAC9Cb,EAAMqB,WAAarH,EAAQkH,QAAQH,KAAO,GAC1Cf,EAAMsB,YAActH,EAAQkH,QAAQD,MAAQ,IAG7CjH,GAASuH,cAERvB,EAAMwB,SAAWxH,EAAQuH,YAAYC,UAAY,GACjDxB,EAAMyB,WAAazH,EAAQuH,YAAYE,YAAYC,YAAc,IAG7E,E,iMCxFE,MAAOpE,UAAuCwC,EAAAA,EAApDpH,WAAAA,G,oBAOc,KAAAiJ,mBAA8C,KAK9C,KAAAC,iBAAmD,IAwCjE,CAjC6B/C,MAAAA,GAAM,I,EAAAD,EAAA,Y,EAAC,YAExBA,EAAKb,UAAaa,EAAKiD,UAAajD,EAAKkD,WAK7ClD,EAAK+C,qBAAL/C,EAAK+C,mBAAuB/C,EAAKb,SAASgE,IAAIC,EAAAA,EAAoB,OAClEpD,EAAKgD,mBAALhD,EAAKgD,iBAAqBhD,EAAKb,SAASgE,IAAIE,EAAAA,EAA2B,OAEnErD,EAAK+C,oBAAuB/C,EAAKgD,mBAKrChD,EAAKgD,iBAAiBM,kBAAkBtD,EAAKiD,SAASM,GAAIvD,EAAKkD,gBACzDlD,EAAK+C,mBAAmBS,YAC9BxD,EAAK+C,mBAAmBU,gBAAgBzD,EAAKiD,SAASM,KAAI,E,gLAC9D,CAKmBzD,SAAAA,GAEXvF,KAAKwI,oBAAuBxI,KAAKyI,kBAAqBzI,KAAK0I,WAK/D1I,KAAKwI,mBAAmBW,iBAAiBnJ,KAAK0I,SAASM,IACvDhJ,KAAKyI,iBAAiBW,oBAAoBpJ,KAAK0I,SAASM,IAC5D,E,+VCnDE,MAAgBrC,EA8BlBpH,WAAAA,CAAsBmJ,GAAA,KAAAA,SAAAA,EAHZ,KAAAO,aAAuB,CAKjC,CAOarD,UAAAA,CAAWhB,EAAoBK,EAAkC0D,GAAmB,IAAAlD,EAAA,YAAApD,GAAA,YAE7FoD,EAAKwD,aAAc,EAEnBxD,EAAKb,SAAWA,EAChBa,EAAKR,QAAUA,EACfQ,EAAKkD,SAAWA,QAEVlD,EAAKC,QAAS,GARyErD,EASjG,CAKa8D,aAAAA,CAActF,GAAiB,IAAAmF,EAAA,YAAA3D,GAAA,YAExC2D,EAAKnF,QAAUA,EAEXmF,EAAKiD,oBAKHjD,EAAKI,kBAAkB,GATW/D,EAU5C,CAKOiD,OAAAA,GAEHtF,KAAKuF,WACT,CAOUG,MAAAA,GAEV,CAKUU,eAAAA,GAEV,CAKUb,SAAAA,GAEV,E,8FC7FE,MAAO8D,EAGuCC,QAAhD/J,WAAAA,CAAgD+J,GAAA,KAAAA,QAAAA,CAEhD,CASOC,SAAAA,CAAkBzJ,EAA+C0J,GAEpE,OAAGC,EAAAA,EAAAA,IAAQ3J,GAEA,KAGRA,aAAiBL,EAAAA,GAETK,GAGXE,KAAKsJ,SAAS5H,KAAK,iDAEZ,KACX,C,sCA7BS2H,GAAiB,IAGMvE,EAAAA,GAAM,M,6CAH7BuE,EAAiBK,MAAA,I,6DCexB,MAAOjG,E,sCAAAA,EAAe,E,uBAAfA,I","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/period/period.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/period/period.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/period/period.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/period/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {Directive, Input, inject} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    /**\n     * Instance of parent control\n     */\n    protected parentControl: AbstractControl|undefined|null = inject(FORM_COMPONENT_CONTROL, {optional: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this.parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|undefined|null, parentControl: AbstractControl|undefined|null, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {{@name}}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {PeriodComponentOptions} from './period.options';\n\n/**\n * Period layout metadata loader\n */\nexport const PeriodLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PeriodComponentOptions>> = async () => new (await import('./metadata/period.layoutMetadata')).PeriodLayoutEditorMetadata();\n\n/**\n * Period relations metadata loader\n */\nexport const PeriodRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/period.relationsMetadata')).PeriodRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {PeriodLayoutMetadataLoader, PeriodRelationsMetadataLoader} from './period.metadata';\nimport {PeriodComponentOptions} from './period.options';\n\n/**\n * Component used for displaying period\n */\n@Component(\n{\n    selector: 'form-period',\n    templateUrl: 'period.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n    ]\n})\n@RelationsEditorMetadata(PeriodRelationsMetadataLoader)\n@LayoutEditorMetadata(PeriodLayoutMetadataLoader)\nexport class PeriodSAComponent extends FormComponentBase<PeriodComponentOptions> implements FormComponent<PeriodComponentOptions>\n{}","<label>{{options?.label}}</label>\n<input type=\"text\" [attr.placeholder]=\"options?.placeholder\" [formControl]=\"control|asFormControl|asRequired\"/>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {PeriodSAComponent} from './period.component';\n\n\nexport default PeriodSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","control","FormControl","parentControl","inject","FORM_COMPONENT_CONTROL","optional","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","t","inputs","features","i0","__decorate","DynamicOutput","PeriodLayoutMetadataLoader","_ref","_asyncToGenerator","PeriodLayoutEditorMetadata","apply","arguments","PeriodRelationsMetadataLoader","_ref2","PeriodRelationsEditorMetadata","PeriodSAComponent","selectors","standalone","decls","vars","consts","template","rf","ctx","label","placeholder","FormPipesModule","i1","CastPipesModule","i2","ReactiveFormsModule","i3","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","InjectionToken","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent","AsFormControlPipe","_logger","transform","_valueHash","isBlank","pure"],"sourceRoot":""}