{"version":3,"file":"4335.chunk.ce50c927a7a95fb5a1a7.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/extensions/stackPanelFlex.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Child extension that applies flex styling to child\n */\nexport class StackPanelFlexExtension extends DynamicItemExtensionBase<StackPanelFlexExtensionOptions> implements DynamicItemExtension<StackPanelFlexExtensionOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies flex styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n\n        if(isPresent(options?.flex))\n        {\n            const style = this.element?.nativeElement.style;\n\n            if(style && this.options)\n            {\n                style.flex = this.options.flex ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata loader\n */\nexport const StackPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>> = async () => new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadataLoader} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<StackPanelComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(StackPanelLayoutMetadataLoader)\nexport class StackPanelSAComponent extends LayoutComponentBase<StackPanelComponentOptions> implements LayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n\n        style.flexDirection = this.options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this.options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {StackPanelFlexExtension} from './extensions';\nimport {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;\n\nexport const childExtensions = [StackPanelFlexExtension];\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["StackPanelFlexExtension","DynamicItemExtensionBase","onInit","this","_applyStyling","onOptionsChange","options","isPresent","flex","style","element","nativeElement","StackPanelLayoutMetadataLoader","_ref","StackPanelLayoutEditorMetadata","apply","arguments","i0","StackPanelSAComponent_ng_container_0_ng_template_1_Template","type_r1","StackPanelSAComponent","LayoutComponentBase","onOptionsSet","_setStyles","componentElement","flexDirection","horizontal","flexWrap","wrap","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","StackPanelSAComponent_ng_container_0_Template","children","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","childExtensions","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}