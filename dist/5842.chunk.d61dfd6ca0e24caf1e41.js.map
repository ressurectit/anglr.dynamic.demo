{"version":3,"file":"5842.chunk.d61dfd6ca0e24caf1e41.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCorePaletteItem/dndCorePaletteItem.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/widthResizer/widthResizer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     */\n    public transform(value: ComponentsPaletteItem): LayoutComponentDragData\n    {\n        return {\n            metadata:\n            {\n                id: '',\n                displayName: '',\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null,\n            index: null,\n        };\n    }\n}","import {Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {extend, generateId} from '@jscrpt/common';\nimport {DndService, DragSource} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService} from '../../../../services';\nimport {DndBusService} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from '../dndCoreDesigner/dndCoreDesigner.interface';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout component palette item\n */\n@Directive(\n{\n    selector: '[dndCorePaletteItem]',\n})\nexport class DndCorePaletteItemDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for palette item connection to DOM\n     */\n    protected itemConnection: Subscription|undefined|null;\n\n    /**\n     * Drag source used for dragging palette item\n     */\n    protected drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('METADATA',\n                                                                                       {\n                                                                                           beginDrag: () =>\n                                                                                           {\n                                                                                               this.draggingSvc.setDragging(true);\n                                                                                               const dragData = extend(true, {}, this.dragData);\n\n                                                                                               if(dragData.metadata)\n                                                                                               {\n                                                                                                   const newId = `${dragData.metadata.name}-${generateId(16)}`;\n\n                                                                                                   dragData.metadata.id = newId;\n                                                                                                   dragData.metadata.displayName = newId;\n                                                                                               }\n\n                                                                                               return {\n                                                                                                   dragData,\n                                                                                               };\n                                                                                           },\n                                                                                           endDrag: monitor =>\n                                                                                           {\n                                                                                               //dropped into drop zone\n                                                                                               if(monitor.didDrop())\n                                                                                               {\n                                                                                                   const item = monitor.getItem();\n                                                                                                   const dropResult = monitor.getDropResult();\n\n                                                                                                   if(!item)\n                                                                                                   {\n                                                                                                       return;\n                                                                                                   }\n\n                                                                                                   item.dragData.index = dropResult.index;\n\n                                                                                                   this.bus.setDropData(\n                                                                                                   {\n                                                                                                       data: item.dragData,\n                                                                                                       id: dropResult.id,\n                                                                                                   });\n\n                                                                                                   this.itemDrop.emit();\n                                                                                               }\n\n                                                                                               this.bus.setDropPlaceholderPreview(null);\n                                                                                               this.draggingSvc.setDragging(false);\n                                                                                           },\n                                                                                       },\n                                                                                       this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCorePaletteItem')\n    public dragData!: LayoutComponentDragData;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when item was succesfully dropped\n     */\n    @Output()\n    public itemDrop: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected paletteItemElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected bus: DndBusService,\n                protected zone: NgZone,)\n    {\n        this.connectDragToItem();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.itemConnection?.unsubscribe();\n        this.itemConnection = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Connects palette item element to drag source\n     */\n    protected connectDragToItem(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.itemConnection?.unsubscribe();\n            this.itemConnection = this.drag.connectDragSource(this.paletteItemElement.nativeElement, {dropEffect: 'copy'});\n        });\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 [dndCorePaletteItem]=\"item | toLayoutDragData\"\n                 (itemDrop)=\"refreshPipe = !refreshPipe\">\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LAYOUT_MODULE_TYPES_LOADER, REFRESH_PALETTE_OBSERVABLES} from '../../misc/tokens';\nimport {LayoutDndCoreModule} from '../../modules';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutDndCoreModule,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Used for refreshing pipe value\n     */\n    protected refreshPipe: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.initItems()));\n\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.initItems()));\n            }\n        }\n\n        await this.initItems();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize items in palette\n     */\n    protected async initItems(): Promise<void>\n    {\n        this.groupedItems = {};\n        this.allItems = [];\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this.moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this.metadataExtractor.extractMetadata(itemSource);\n\n                if(!metadata)\n                {\n                    this.logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }\n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this.changeDetector.detectChanges();\n    }\n}","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDropFn())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button type=\"button\" mat-icon-button [disabled]=\"!hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" *ngIf=\"hasChildren\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        \n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n        <!-- (cdkDropListDropped)=\"data?.component?.addDescendant($event)\" -->\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDropFn() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button type=\"button\" mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button type=\"button\" mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CastPipesModule, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n        CastPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {Directive, EventEmitter, HostListener, Inject, NgZone, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BindThis, isBlank} from '@jscrpt/common';\n\n/**\n * Directive used for resizing/changing of width\n */\n@Directive(\n{\n    selector: '[widthResizer]',\n    standalone: true,\n})\nexport class WidthResizerSADirective\n{\n    /**\n     * Value of last recorded x coordinate of mouse\n     */\n    protected lastXCoordinate: number|null = null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when size changes, represents difference, positive is that X increases, negative is if x decreases\n     */\n    @Output()\n    public size: EventEmitter<number> = new EventEmitter<number>();\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document,\n                protected ngZone: NgZone,)\n    {\n    }\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Handles start of dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected dragStart(event: MouseEvent): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.document.addEventListener('mousemove', this.drag);\n            this.document.addEventListener('mouseup', this.dragEnd);\n        });\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = event.clientX;\n    }\n\n    /**\n     * Handles drag itself\n     * @param event - Mouse event that occured\n     */\n    @BindThis\n    protected drag(event: MouseEvent): void\n    {\n        if(isBlank(this.lastXCoordinate))\n        {\n            return;\n        }\n\n        this.size.emit(event.clientX - this.lastXCoordinate);\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = event.clientX;\n    }\n\n    /**\n     * Handles end of dragging\n     * @param event - Mouse event that occured\n     */\n    @BindThis\n    protected dragEnd(event: MouseEvent): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.document.removeEventListener('mousemove', this.drag);\n            this.document.removeEventListener('mouseup', this.dragEnd);\n        });\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = null;\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"!state.opened\" class=\"properties-toolbar\">\n    <button type=\"button\" class=\"btn-icon props-buttons\" (click)=\"toggleCollapsed()\">\n        <span class=\"text-vertical\">properties</span>\n    </button>\n</div>\n\n<ng-container *ngIf=\"state.opened\">\n    <div class=\"properties-main\" [style.width.px]=\"state.width\">\n        <div class=\"header\">\n            <div class=\"header-title\">properties</div>\n\n            <button type=\"button\" class=\"btn-icon\" (click)=\"toggleCollapsed()\">\n                <span class=\"fas fa-times\"></span>\n            </button>\n        </div>\n\n        <ng-container *ngIf=\"component\">\n            <div class=\"static-properties\">\n                <div class=\"properties-form-group\">\n                    <label class=\"properties-control-label\">type</label>\n                    <div class=\"properties-form-static\">{{metadata?.metaInfo?.name ?? component.options?.typeMetadata?.name}}</div>\n\n                    <label class=\"properties-control-label\">id</label>\n                    <div class=\"properties-form-static\">{{component.options?.typeMetadata?.id}}</div>\n\n                    <label class=\"properties-control-label\">display name</label>\n                    <input class=\"properties-form-control\" type=\"text\" [formControl]=\"displayName\">\n                </div>\n            </div>\n\n\n            <div class=\"thin-scrollbar properties-controls\">\n                <ng-container *ngFor=\"let props of propertiesData\">\n                    <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n                        <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n\n    <div class=\"properties-resizer\" widthResizer (size)=\"updateSize($event)\"></div>\n</ng-container>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER, PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {addSimpleChange, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DebounceCall, Dictionary, extend, isPresent, NoopAction} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutEditorPropertiesDefinitionMetadata, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {WidthResizerSADirective} from '../../directives';\n\nconst PROPERTIES_EDITOR_STATE = 'PROPERTIES_EDITOR_STATE';\n\n/**\n * State of properties editor\n */\ninterface PropertiesEditorState\n{\n    /**\n     * Indication whether is properties editor opened\n     */\n    opened: boolean;\n\n    /**\n     * Current width of properties editor\n     */\n    width: number;\n}\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n        WidthResizerSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected optionsFormSubscription: Subscription|null = null;\n\n    /**\n     * Promise used for syncing async operations\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * Id of last component that was used for property editation\n     */\n    protected lastComponentId: string|null = null;\n\n    /**\n     * Instance of last component that was used for property editation\n     */\n    protected lastComponent: LayoutDesignerSAComponent|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of selected designer component\n     */\n    protected component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected propertiesData: PropertiesEditorData[] = [];\n\n    /**\n     * Instance of properties editor state\n     */\n    protected state: PropertiesEditorState = {opened: false, width: 350};\n\n    //######################### constructor #########################\n    constructor(protected manager: LayoutEditorMetadataManager,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected formModelBuilder: FormModelBuilder,\n                protected changeDetector: ChangeDetectorRef,\n                @Inject(PERMANENT_STORAGE) protected storage: PermanentStorage,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        const state = this.storage.get<PropertiesEditorState|null>(PROPERTIES_EDITOR_STATE);\n\n        if(state)\n        {\n            this.state = state;\n        }\n\n        this.initSubscriptions.add(this.manager.layoutChange.subscribe(() => this.initProperties()));\n        this.initSubscriptions.add(this.manager.selectedChange.subscribe(() => this.initProperties()));\n\n        this.displayName\n            .valueChanges\n            .subscribe(async displayName =>\n            {\n                if(this.component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this.component.options.typeMetadata.displayName = displayName;\n\n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n\n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await this.component.ngOnChanges?.(changes);\n                    this.manager.displayNameUpdated();\n                    this.history.getNewState();\n                }\n            });\n\n        await this.initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Toggles collapsed state of properties\n     */\n    protected toggleCollapsed(): void\n    {\n        this.state.opened = !this.state.opened;\n\n        this.storage.set(PROPERTIES_EDITOR_STATE, this.state);\n    }\n\n    protected updateSize(size: number): void\n    {\n        this.state.width -= size;\n\n        this.storage.set(PROPERTIES_EDITOR_STATE, this.state);\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    @DebounceCall(10)\n    protected async initProperties(): Promise<void>\n    {\n        await this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n\n        if(isPresent(this.manager.selectedComponent))\n        {\n            const component = this.manager.getComponent(this.manager.selectedComponent);\n\n            if(this.lastComponent == component && this.lastComponentId == this.manager.selectedComponent)\n            {\n                syncResolve?.();\n\n                return;\n            }\n            \n            this.lastComponent = component;\n            this.lastComponentId = this.manager.selectedComponent;\n\n            if(component)\n            {\n                this.component = component;\n\n                await this.getMetadata();\n            }\n            else\n            {\n                this.hide();\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n\n        syncResolve?.();\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async getMetadata(): Promise<void>\n    {\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = new Subscription();\n        this.propertiesData = [];\n\n        if(this.component?.options?.typeMetadata)\n        {\n            this.displayName.setValue(this.component.options.typeMetadata.displayName || this.component.options.typeMetadata.id, {emitEvent: false});\n\n            this.metadata = await this.metadataExtractor.extractMetadata(this.component.options?.typeMetadata);\n\n            if(!this.metadata)\n            {\n                this.logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this.component.options?.typeMetadata.package, name: this.component.options?.typeMetadata.name});\n\n                this.hide();\n            }\n\n            //properties metadata\n            if(this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    this.initDynamicProperty(props);\n                }\n            }\n\n            if(this.component)\n            {\n                const parent = this.manager.getParent(this.component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this.metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            this.initDynamicProperty(props);\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected hide(): void\n    {\n        this.lastComponent = null;\n        this.lastComponentId = null;\n        this.component = null;\n        this.metadata = null;\n        this.propertiesData = [];\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize dynamic property\n     * @param props - Property to be initialized\n     */\n    protected initDynamicProperty(props: LayoutEditorPropertiesDefinitionMetadata): void\n    {\n        const form = this.formModelBuilder.build(new props.modelType(this.component?.options?.typeMetadata.options));\n        const metadata = this.propertyExtractor.extract(props.modelType);\n\n        if(this.optionsFormSubscription)\n        {\n            this.optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n            {\n                if(this.component?.options?.typeMetadata)\n                {\n                    extend(true, this.component.options.typeMetadata.options, data);\n    \n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n    \n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await this.component.ngOnChanges?.(changes);\n                    this.component.invalidateVisuals();\n                    this.history.getNewState();\n                }\n            }));\n    \n            this.propertiesData.push(\n            {\n                form,\n                metadata,\n                controls: props.propertiesControls,\n            });\n        }\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n    ],\n    exports:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this._components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this._components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}"],"names":["ToLayoutDragDataSAPipe","transform","value","metadata","id","displayName","package","itemSource","name","options","extend","metaInfo","defaultOptions","parentId","index","pure","standalone","DndCorePaletteItemDirective","constructor","dnd","paletteItemElement","draggingSvc","bus","zone","initSubscriptions","Subscription","drag","this","dragSource","beginDrag","setDragging","dragData","newId","generateId","endDrag","monitor","didDrop","item","getItem","dropResult","getDropResult","setDropData","data","itemDrop","emit","setDropPlaceholderPreview","EventEmitter","connectDragToItem","ngOnInit","Error","ngOnDestroy","unsubscribe","itemConnection","runOutsideAngular","connectDragSource","nativeElement","dropEffect","i0","selectors","inputs","outputs","ComponentsPaletteSAComponent","moduleTypesLoader","changeDetector","packageManager","metadataExtractor","_refreshObservables","logger","allItems","groupedItems","refreshPipe","add","usedPackagesChange","subscribe","initItems","Array","isArray","obs","packageName","usedPackages","types","loadItem","type","extractMetadata","push","warn","group","_a","detectChanges","LAYOUT_MODULE_TYPES_LOADER","REFRESH_PALETTE_OBSERVABLES","LOGGER","features","decls","vars","consts","template","CommonModule","i3","LayoutDndCoreModule","i4","styles","changeDetection","ConnectDropListsSADirective","_cdkDropList","_manager","_initSubscriptions","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","layoutChange","pipe","debounceTime","connectedTo","flatTree","filter","itm","component","canDropFn","map","reverse","exportAs","child_r3","ComponentsTreeItemSAComponent","_changeDetector","open","_canDrop","hasChildren","children","length","selectedChange","highlightedChange","displayNameChange","toggle","expand","nodeId","typeMetadata","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","event","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","viewQuery","ctx","i2","MatButtonModule","DragDropModule","ctx_r1","ctx_r3","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","CastPipesModule","WidthResizerSADirective","document","ngZone","lastXCoordinate","size","dragStart","addEventListener","dragEnd","stopImmediatePropagation","clientX","isBlank","removeEventListener","DOCUMENT","hostBindings","__decorate","BindThis","MouseEvent","PropertiesControlRendererDirective","_viewContainerRef","_logger","_componentRef","propertiesMetadata","ngOnChanges","debug","clear","injector","createComponent","instance","form","initialize","invalidateVisuals","destroy","props_r6","PROPERTIES_EDITOR_STATE","PropertiesEditorSAComponent","manager","propertyExtractor","formModelBuilder","storage","history","optionsFormSubscription","syncPromise","Promise","resolve","lastComponentId","lastComponent","FormControl","propertiesData","state","opened","width","get","initProperties","valueChanges","isPresent","changes","addSimpleChange","displayNameUpdated","getNewState","toggleCollapsed","set","updateSize","syncResolve","getComponent","getMetadata","hide","setValue","emitEvent","error","optionsMetadata","props","initDynamicProperty","parent","getParent","parentMetadata","childPropertiesMetadata","build","modelType","extract","controls","propertiesControls","PERMANENT_STORAGE","LAYOUT_HISTORY_MANAGER","FormModelBuilder","ReactiveFormsModule","i5","DebounceCall","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","dropDataChange","asObservable","newDropPlaceholderPreviewChange","oldDropPlaceholderPreviewChange","dropPlaceholderPreviewIndex","next","factory","NumberInputModule","DragActiveService","_dragging","_draggingChange","dragging","draggingChange","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","metadataType","layoutEditorMetadata","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","highlightedComponent","_buildFlatTree","selectComponent","unselectComponent","registerLayoutDesignerComponent","componentItem","getIndex","indexOf","getComponentDef","unregisterLayoutDesignerComponent","splice","_buildFlatTreeForComponent","result","concat","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","propSymbol","meta","Reflect","prototype","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES"],"sourceRoot":""}