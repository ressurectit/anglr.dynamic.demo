{"version":3,"file":"8229.chunk.1ade5041e9a21bdaecd5.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/gridPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\n\n/**\n * Grid panel layout metadata loader\n */\nexport const GridPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelComponentOptions>> = async () => new (await import('./metadata/gridPanel.layoutMetadata')).GridPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.cells\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {generateId, PromiseOr} from '@jscrpt/common';\n\nimport {GridPanelComponentOptions} from './gridPanel.options';\nimport {GridPanelLayoutMetadataLoader} from './gridPanel.metadata';\n\n/**\n * Component used for displaying grid panel layout\n */\n@Component(\n{\n    selector: 'grid-panel',\n    templateUrl: 'gridPanel.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelComponentOptions>(options => options?.cells ?? [])\n@LayoutEditorMetadata(GridPanelLayoutMetadataLoader)\nexport class GridPanelSAComponent extends LayoutComponentBase<GridPanelComponentOptions> implements LayoutComponent<GridPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this._fixCells();\n\n        const style = this.componentElement.nativeElement.style;\n        let gridTemplateRows: string = '';\n        let gridTemplateColumns: string = '';\n\n        if(this.options?.rows && Array.isArray(this.options?.rows))\n        {\n            for(const row of this.options.rows)\n            {\n                gridTemplateRows += `${row.height} `;\n            }\n        }\n\n        if(this.options?.columns && Array.isArray(this.options?.columns))\n        {\n            for(const column of this.options.columns)\n            {\n                gridTemplateColumns += `${column.width} `;\n            }\n        }\n\n        style.gridTemplateRows = gridTemplateRows.trim();\n        style.gridTemplateColumns = gridTemplateColumns.trim();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Fixes cell metadata\n     */\n    protected _fixCells(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.cells ??= [];\n\n        const grid: string[][] = [];\n\n        for(let y = 0; y < (this.options.rows ?? []).length; y++)\n        for(let x = 0; x < (this.options.columns ?? []).length; x++)\n        {\n            grid[y] ??= [];\n            grid[y][x] = '';\n        }\n\n        for(const cell of this.options.cells)\n        {\n            cell.package = 'basic-components';\n            cell.name = 'gridPanelCell';\n\n            for(let y = (cell.options?.gridRowStart ?? 1); y < (cell.options?.gridRowEnd ?? 2); y++)\n            for(let x = (cell.options?.gridColumnStart ?? 1); x < (cell.options?.gridColumnEnd ?? 2); x++)\n            {\n                const yCoordinate = y - 1;\n                const xCoordinate = x - 1;\n\n                if(grid[yCoordinate][xCoordinate] === '')\n                {\n                    grid[yCoordinate][xCoordinate] = cell.id;\n                }\n            }\n        }\n\n        for(let y = 1; y <= (this.options.rows ?? []).length; y++)\n        for(let x = 1; x <= (this.options.columns ?? []).length; x++)\n        {\n            if(grid[y - 1][x - 1] === '')\n            {\n                this.options.cells.push(\n                {\n                    id: `${generateId(6)}-r${y}-${y+1}-c${x}-${x+1}`,\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options:\n                    {\n                        gridRowStart: y,\n                        gridRowEnd: y + 1,\n                        gridColumnStart: x,\n                        gridColumnEnd: x + 1\n                    }\n                });\n            }\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {GridPanelSAComponent} from './gridPanel.component';\n\nexport default GridPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridPanelLayoutMetadataLoader","_ref","GridPanelLayoutEditorMetadata","apply","arguments","i0","GridPanelSAComponent_ng_container_0_ng_template_1_Template","type_r1","GridPanelSAComponent","LayoutComponentBase","onOptionsSet","this","_fixCells","style","componentElement","nativeElement","gridTemplateRows","gridTemplateColumns","options","rows","Array","isArray","row","height","columns","column","width","trim","_a","cells","grid","y","length","x","cell","package","name","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","yCoordinate","xCoordinate","id","push","generateId","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","GridPanelSAComponent_ng_container_0_Template","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","styles","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}