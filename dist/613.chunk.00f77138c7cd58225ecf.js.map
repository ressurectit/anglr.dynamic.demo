{"version":3,"file":"613.chunk.00f77138c7cd58225ecf.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions> extends LayoutComponentBase<TOptions>\n{\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _control?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected _formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected override _onInit(): PromiseOr<void>\n    {\n        this._formInjector = Injector.create(\n            {\n                parent: this._injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: FORM_COMPONENT_CONTROL,\n                        useValue: this.options?.controlName ? this._control?.get(this.options.controlName) : null,\n                    }\n                ]\n            }\n        );\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_control","_logger","super","i0","FORM_COMPONENT_CONTROL","LOGGER","features","FormGroupLayoutMetadataLoader","FormGroupLayoutEditorMetadata","ctx_r0","FormGroupSAComponent","_onInit","this","_formInjector","Injector","parent","providers","provide","useValue","options","controlName","get","t","selectors","standalone","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","_metadata","injector","instance","_instance"],"sourceRoot":""}