{"version":3,"file":"4403.chunk.3aeb44bcae7fbcbbc834.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/type.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, ElementRef, EmbeddedViewRef, OnDestroy, OnInit} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected _observer?: ResizeObserver;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected _layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new ResizeObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                this._updatedDimensions(change.contentRect);\n            }\n        });\n\n        this._initSubscriptions.add(this._layoutComponentRendererDirective?.componentChange.subscribe(componentRef =>\n        {\n            if(!componentRef)\n            {\n                this._observer?.disconnect();\n\n                return;\n            }\n\n            const element = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n            this._updatedDimensions(element.getBoundingClientRect());\n\n            this._observer?.observe(element);\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    protected _updatedDimensions(rect: DOMRect): void\n    {\n        //no height, apply min height\n\n        if(rect.height != 30)\n        {\n            if(rect.height <= 0)\n            {\n                this._element.nativeElement.style.minHeight = '30px';\n            }\n            else\n            {\n                this._element.nativeElement.style.minHeight = '';\n            }\n        }\n\n        if(rect.width != 30)\n        {\n            //no width, apply min width\n            if(rect.width <= 0)\n            {\n                this._element.nativeElement.style.minWidth = '30px';\n            }\n            else\n            {\n                this._element.nativeElement.style.minWidth = '';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    styleUrls: ['layoutDesignerOverlayFor.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected _observer?: MutationObserver;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected _htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new MutationObserver(() => this._changeDetector.detectChanges());\n\n        //TODO: make this working\n        this._htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this._htmlElement)\n        {\n            this._observer?.observe(this._htmlElement, {attributeFilter: ['style']});\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"_htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"_htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"_htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"_htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"_htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"_htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"_htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"_htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"_htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"_htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"_htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"_htmlElement?.style?.borderRight\"></div>","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter} from '@angular/core';\nimport {nameof, isPresent, isString} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected _placement: PositionPlacement|null|undefined;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected _source!: HTMLElement;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement\n    {\n        return this._source;\n    }\n    public set source(value: HTMLElement)\n    {\n        if(value instanceof ElementRef)\n        {\n            this._source = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this._source = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|null|undefined\n    {\n        return this._placement;\n    }\n    public set placement(value: PositionPlacement|null|undefined)\n    {\n        if(isString(value))\n        {\n            this._placement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this._placement = value;\n    }\n\n    // //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected _target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected _position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected async _applyPosition(): Promise<void>\n    {\n        const options: Partial<PositionOptions> =\n        {\n        };\n\n        if(this._placement)\n        {\n            options.placement = this._placement;\n        }\n\n        const result = await this._position.placeElement(this._target.nativeElement,\n                                                         this._source,\n                                                         options).toPromise();\n\n        applyPositionResult(result);\n\n        if(result.flip)\n        {\n            this.flip.next();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `positionTo` input\n     */\n    public static ngAcceptInputType_positionTo: HTMLElement|ElementRef<HTMLElement>;\n}\n","<div class=\"designer-overlay\" \n     #layoutDesigner\n     cdkDrag\n     cdkDropList\n     designerMinWidth\n     connectDropLists\n     [id]=\"id\"\n     [copyDesignerStyles]=\"_renderedType\"\n     [cdkDragData]=\"{metadata: _renderedType, parentId: _parent?._renderedType?.id}\"\n     [cdkDragDisabled]=\"dragDisabled\"\n     [cdkDropListEnterPredicate]=\"canDrop\"\n     [cdkDropListOrientation]=\"_orientation\"\n     (mouseleave)=\"_hideOverlay($event)\"\n     (mouseover)=\"_showOverlay($event)\"\n     (cdkDropListDropped)=\"addDescendant($event)\"\n     (click)=\"_selectComponent($event)\"\n     (dblclick)=\"_unselectComponent($event)\">\n    <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n    <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"_editorMetadata\" [layoutMetadata]=\"_renderedType\"></layout-editor-drag-preview>\n    <ng-template #renderer=\"layoutComponentRenderer\" [layoutComponentRenderer]=\"_renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n    <ng-container *ngIf=\"highlighted || selected\">\n        <div class=\"designer-overlay-border\"></div>\n        <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"renderer\"></div>\n\n        <div class=\"designer-overlay-title\"\n             [positionTo]=\"layoutDesigner\"\n             placement=\"TopStart\">{{_editorMetadata?.metaInfo?.name ?? _renderedType?.name}}</div>\n\n        <div *ngIf=\"!!_parent && _parent._editorMetadata?.removeDescendant\" class=\"designer-overlay-remove\" (click)=\"_remove()\">x</div>\n    </ng-container>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDragDrop, DragDropModule, DropListOrientation} from '@angular/cdk/drag-drop';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Func, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {ConnectDropListsSADirective, CopyDesignerStylesSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n//TODO: when new is clicked only after event new item can be dropped into \n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    styleUrls: ['layoutDesigner.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        PositionModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        ConnectDropListsSADirective,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### public properties #########################\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this._options?.typeMetadata?.id ?? '';\n    }\n\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    protected _canDropValue: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    protected _editorMetadata: LayoutEditorMetadataDescriptor<LayoutDesignerComponentOptions>|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this._layoutEditorMetadataManager.selectedComponent === this._options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this._layoutEditorMetadataManager.highlightedComponent === this._options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected _renderedType: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Orientation of drop list\n     */\n    protected _orientation: DropListOrientation = 'vertical';\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this._designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this._options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected _designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this._parent || !!this._editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Gets predicate that returns indication whether item can be dropped into this list\n     */\n    public canDrop: Func<boolean> = () => this._canDropValue;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected _parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(options: LayoutDesignerComponentOptions|undefined|null): Promise<void>\n    {\n        if(!options)\n        {\n            return;\n        }\n\n        this._options = options;\n\n        //TODO: optimize\n        this._initSubscriptions.add(this._layoutEditorMetadataManager.selectedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._layoutEditorMetadataManager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this._editorMetadata = await this._metadataExtractor.extractMetadata(options.typeMetadata);\n        this._canDropValue = this._editorMetadata?.canDropMetadata?.(options.typeMetadata.options) ?? false;\n        this._layoutEditorMetadataManager.registerLayoutDesignerComponent(this, options.typeMetadata.id, this._parent?._options?.typeMetadata.id);\n        \n        super.initialize(options);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this._logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this._options?.typeMetadata.id});\n\n        this._initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this._options)\n        {\n            this._layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this._options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: CdkDragDrop<LayoutComponentDragData, LayoutComponentDragData, LayoutComponentDragData>): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        const parentId = dragData.item.data.parentId;\n        this._logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.item.data.metadata.id, parent: this._options.typeMetadata.id});\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this._layoutEditorMetadataManager.getComponent(parentId)?._removeDescendant(dragData.item.data.metadata.id);\n        }\n\n        this._editorMetadata?.addDescendant?.(dragData.item.data.metadata, this._options.typeMetadata.options, dragData.currentIndex);\n        this._canDropValue = this._editorMetadata?.canDropMetadata?.(this._options.typeMetadata.options) ?? false;\n\n        this._renderedType = {...this._options.typeMetadata};\n        this._changeDetector.markForCheck();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    protected _removeDescendant(id: string): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        this._logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this._options.typeMetadata.id, child: id});\n\n        this._editorMetadata?.removeDescendant?.(id, this._options.typeMetadata.options);\n        this._canDropValue = this._editorMetadata?.canDropMetadata?.(this._options.typeMetadata.options) ?? false;\n        this._renderedType = {...this._options.typeMetadata};\n        this._changeDetector.markForCheck();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected _showOverlay(event: Event): void\n    {\n        this._logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this._options?.typeMetadata.name, id: this._options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.highlightComponent(this._options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected _hideOverlay(event: Event): void\n    {\n        if(isPresent(this._parent))\n        {\n            return;\n        }\n\n        this._logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this._options?.typeMetadata.name, id: this._options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected _selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this._options)\n        {\n            this._layoutEditorMetadataManager.selectComponent(this._options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected _unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected _remove(): void\n    {\n        if(!this._parent || !this._options)\n        {\n            return;\n        }\n\n        this._parent._removeDescendant(this._options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _optionsSet(): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        this._renderedType = {...this._options.typeMetadata};\n        \n        this._orientation = this._editorMetadata?.isHorizontalDrop?.(this._options.typeMetadata.options) ? 'horizontal' : 'vertical';\n    }\n}","import {LayoutDesignerSAComponent} from './layoutDesigner.component';\n\nexport default LayoutDesignerSAComponent;","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDrop())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options used for rendering this component\n     */\n    protected _options: TOptions|undefined|null;\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this._options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get options(): TOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: TOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._optionsSet();\n\n        const extensionsOptions = this.extensionsOptions;\n\n        if(extensionsOptions)\n        {\n            for(const ext of this._extensions)\n            {\n                ext.optionsChange(extensionsOptions);\n            }\n        }\n    }\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(options: TOptions|undefined|null): Promise<void>\n    {\n        if(!options)\n        {\n            return;\n        }\n\n        this.options = options;\n\n        const extensionsOptions = this.extensionsOptions;\n\n        if(extensionsOptions)\n        {\n            for(const ext of this._extensions)\n            {\n                ext.initialize(this._injector, this.element, extensionsOptions);\n            }\n        }\n    }\n\n    /**\n     * Registers extensions for component\n     * @param extensions - Array of extensions that should be added to component\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Method that is called when options are set, allows register custom code that is called when options are changing\n     */\n    protected _optionsSet(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, Type, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: Type<DynamicItemExtension>[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this.component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm()) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm()) ?? [],\n                ]);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n"],"names":["PositionModule","DesignerMinDimensionSADirective","constructor","_element","_initSubscriptions","Subscription","ngOnInit","this","_observer","ResizeObserver","changes","change","_updatedDimensions","contentRect","add","_layoutComponentRendererDirective","componentChange","subscribe","componentRef","disconnect","element","hostView","rootNodes","getBoundingClientRect","observe","ngOnDestroy","unsubscribe","rect","height","nativeElement","style","minHeight","width","minWidth","i0","selectors","contentQueries","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","_metadataExtractor","metadata","_metadata","value","_copyDesignerStyles","applyDesignerStyles","extractMetadata","options","inputs","exportAs","standalone","LayoutDesignerOverlayForSAComponent","_changeDetector","MutationObserver","detectChanges","_htmlElement","layoutComponentRendererDirective","attributeFilter","features","attrs","decls","vars","consts","template","PositionToDirective","_target","_position","flip","EventEmitter","source","_source","ElementRef","placement","_placement","isString","PositionPlacement","ngOnChanges","nameof","isPresent","_applyPosition","result","placeElement","toPromise","applyPositionResult","next","POSITION","ctx_r2","LayoutDesignerSAComponent","LayoutComponentBase","changeDetector","injector","_layoutEditorMetadataManager","logger","_parent","super","_canDropValue","_editorMetadata","_orientation","canDrop","id","_options","typeMetadata","selected","selectedComponent","highlighted","highlightedComponent","_designerElement","extensionsOptions","dragDisabled","metaInfo","initialize","selectedChange","highlightedChange","canDropMetadata","registerLayoutDesignerComponent","_logger","debug","unregisterLayoutDesignerComponent","addDescendant","dragData","parentId","item","data","parent","getComponent","_removeDescendant","currentIndex","_renderedType","markForCheck","child","removeDescendant","_showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","_hideOverlay","cancelHighlightedComponent","_selectComponent","selectComponent","_unselectComponent","unselectComponent","_remove","_optionsSet","isHorizontalDrop","LOGGER","viewQuery","ctx","CommonModule","i2","i3","DragDropModule","i4","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","ConnectDropListsSADirective","styles","changeDetection","editorMetadata","layoutMetadata","_cdkDropList","_manager","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","layoutChange","pipe","debounceTime","connectedTo","flatTree","filter","itm","component","map","reverse","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","root","isBlank","asObservable","displayNameChange","_buildFlatTree","error","componentItem","children","splice","length","getParent","index","indexOf","displayNameUpdated","getMetadata","_buildFlatTreeForComponent","concat","factory","_injector","_extensions","ext","optionsChange","destroy","registerExtensions","extensions","invalidateVisuals","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","instance","clear","customInjector","layoutComponentType","loadItem","warn","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","resolvePromiseOr","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","Object","assign","target","top","left","transform","x","y","DragDrop","CdkScrollableModule"],"sourceRoot":""}