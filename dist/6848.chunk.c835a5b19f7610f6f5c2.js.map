{"version":3,"file":"6848.chunk.c835a5b19f7610f6f5c2.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/layout/layout.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/relationsWithLayoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsWithLayoutEditor/relationsWithLayoutEditor.module.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentMetadata|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parentMetadata, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - Metadata for parent layout component\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parentMetadata: LayoutComponentMetadata<TOptions>|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        this._items.push(\n        {\n            metadata,\n            parentMetadata,\n            levelIndex,\n            level\n        });\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], metadata, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = type.data;\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutEditorModule, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule} from '@anglr/dynamic/relations-editor';\n\nimport {provideLayoutRelationsEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(),\n                provideLayoutEditor(),\n            ]\n        };\n    }\n\n    // /**\n    //  * Creates DynamicRelationsEditorModule extended with providers for static components\n    //  * @param staticRegister - Type that represents implementation of static components register\n    //  */\n    // public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    // {\n    //     return {\n    //         ngModule: DynamicRelationsEditorModule,\n    //         providers:\n    //         [\n    //             provideRelationsEditorWithStatic(staticRegister),\n    //         ]\n    //     };\n    // }\n}","import {Provider} from '@angular/core';\nimport {provideRelationsEditor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager} from '../services';\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n    ];\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../misc';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'layout.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'layout'})\n@ComponentRoute({path: 'layout/:id'})\nexport class LayoutComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: LayoutEditorMetadataManager,\n                protected _store: StoreDataService<LayoutRelationsMetadata>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): LayoutRelationsMetadata\n    {\n        return {\n            layout: this._manager.getMetadata()\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\r\n        <span>go back</span>\r\n    </button>\r\n\r\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsWithLayoutEditor/layout\" (metadataChange)=\"_metadata = ($any($event?.layout) ?? emptyMetadata)\"></load-save-new>\r\n    \r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","<div class=\"flex-row\">\r\n    <a class=\"margin-horizontal-small\" routerLink=\"/relationsWithLayoutEditor/layout\">layout</a>\r\n    <a class=\"margin-horizontal-small\" routerLink=\"/relationsWithLayoutEditor/relations\">relations</a>\r\n\r\n    <ng-select [formControl]=\"_available\" class=\"flex-1\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../misc';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService<LayoutRelationsMetadata>,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id)?.layout;\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/relationsWithLayoutEditor/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeManager, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {LayoutManager} from '@anglr/dynamic/layout-relations';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../misc';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relations.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\n@ComponentRoute({path: 'relations/:id'})\nexport class RelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: RelationsNodeManager,\n                protected _store: StoreDataService<LayoutRelationsMetadata>,\n                protected _layoutManager: LayoutManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): LayoutRelationsMetadata\n    {\n        return {\n            relations: this._manager.getMetadata()\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.relationsDemo;\n    }\n\n    protected setMetadata(metadata: LayoutRelationsMetadata): void\n    {\n        this._metadata = metadata?.relations ?? this.emptyMetadata;\n        this._layoutManager.setLayout(metadata?.layout);\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsWithLayoutEditor/relations\" (metadataChange)=\"setMetadata($event)\"></load-save-new>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\n        <span>demo</span>\n    </button>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>","import {LayoutComponent} from './layout/layout.component';\nimport {PreviewComponent} from './preview/preview.component';\nimport {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    PreviewComponent,\n    LayoutComponent,\n    RelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './relationsWithLayoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\n\n/**\n * Module for relations with layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        NgSelectModule,\n        GoBackModule,\n        DynamicLayoutRelationsEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('LAYOUT_RELATIONS_DATA'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsWithLayoutEditorModule\n{\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     */\n    public transform(value: NodesPaletteItem, id: string): RelationsNodeDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? item.itemSource.name : item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n//TODO: add new provider for refresh required of palette items\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        // this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        // this._getDesignerDropLists();\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components', 'static-components', 'layout-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n    }\n}","<div class=\"flex-row flex-1\">\n    <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["LayoutComponentsIterator","constructor","_layoutMetadata","_extractor","_logger","_items","_initialized","_initPromise","Symbol","asyncIterator","x","initPromise","this","_getInitPromise","items","next","length","value","done","forEach","callback","item","metadata","parentMetadata","levelIndex","level","_getComponents","_getComponent","push","meta","extractMetadata","debug","package","name","getDescendants","childrenMeta","options","LayoutComponentsIteratorService","getIteratorFor","layoutMetadata","i0","LOGGER","factory","LayoutManager","_layout","_layoutChange","Subject","layout","layoutChange","asObservable","setLayout","LayoutComponentsRegister","_layoutManager","_loader","_iteratorSvc","_initSubscriptions","Subscription","_definedTypes","add","subscribe","types","_initializeTypes","then","Object","keys","ngOnDestroy","unsubscribe","getType","layoutComponents","component","type","loadItem","id","data","LAYOUT_COMPONENTS_LOADER","LayoutComponentsRelationsNodesProvider","_componentsRegister","tryToGet","source","default","LayoutComponentsRelationsTypesProvider","resultTypes","RELATIONS_NODES_LOADER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","DynamicLayoutRelationsEditorModule","ngModule","providers","provideRelationsEditor","provideLayoutEditor","DynamicLayoutEditorModule","DynamicRelationsEditorModule","LayoutComponent","_manager","_store","_metadata","emptyMetadata","generateId","displayName","children","_getMetadata","getMetadata","_loadDemo","DemoData","selectors","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","LayoutEditorMetadataManager","StoreDataService","val_r1","PreviewComponent","_router","_route","_available","FormControl","_availableNames","ngOnInit","getStored","params","setValue","getData","valueChanges","val","navigate","skipLocationChange","replaceUrl","Router","ActivatedRoute","RelationsComponent","relations","setMetadata","RelationsNodeManager","components","RelationsWithLayoutEditorModule","createStoreDataServiceFactory","imports","CommonModule","ReactiveFormsModule","RouterModule","NgSelectModule","GoBackModule","withProviders","LoadSaveNewSAComponent","ModuleRoutes","ToRelationsDragDataSAPipe","transform","newId","itemSource","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","y","pure","standalone","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_changeDetector","_metadataManager","_allItems","_groupedItems","_newCompnentId","_isDragOverPalette","packageName","warn","group","_a","detectChanges","_generateNewId","RELATIONS_MODULE_TYPES_LOADER","inputs","canvasDropList","features","i2","DragDropModule","i3","styles","changeDetection","RelationsEditorSAComponent","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","RelationsCanvasSAComponent","i1","staticRegister","provideRelationsEditorWithStatic","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","GoBackDirective","_location","goBack","preventDefault","stopPropagation","back"],"sourceRoot":""}