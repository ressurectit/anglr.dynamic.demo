{"version":3,"file":"2021.chunk.2d0d7c8429565a5754a0.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/previousNextPaging/metadata/previousNextPaging.model.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/previousNextPaging/metadata/previousNextPaging.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {PreviousNextPagingComponentOptions} from '../previousNextPaging.options';\n\n/**\n * Previous next paging model for properties editor\n */\nexport class PreviousNextPagingModel implements PreviousNextPagingComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Initial items per page')\n    @LayoutPropertyDescription('Initial items per page for paging')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputNumber')\n    public initialItemsPerPage: number|undefined|null = 15;\n    \n    //######################### constructor #########################\n    constructor(value: PreviousNextPagingComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo, genericPropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {Func0} from '@jscrpt/common';\n\nimport {PreviousNextPagingComponentOptions} from '../previousNextPaging.options';\nimport {PreviousNextPagingModel} from './previousNextPaging.model';\n\n/**\n * Previous next paging layout metadata\n */\nexport class PreviousNextPagingLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<PreviousNextPagingComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<PreviousNextPagingComponentOptions> =\n    {\n        name: 'Previous next paging',\n        description: 'Previous next paging grid plugin for paging data',\n        group: 'Grid',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: PreviousNextPagingModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<PreviousNextPagingModel>(['initialItemsPerPage']),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            initialItemsPerPage: 15,\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public customDragType?: Func0<{tree: string, layout: string}> = () =>\n    {\n        return {\n            layout: 'PAGING',\n            tree: 'TREE_PAGING',\n        };\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Dictionary, extend, globalDefine, isBlank, noop} from '@jscrpt/common';\n\ndeclare const ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//TODO: sideeffect\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["PreviousNextPagingModel","constructor","value","initialItemsPerPage","mapValuesToThis","bind","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","PreviousNextPagingLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","genericPropertiesControlFor","defaultOptions","customDragType","layout","tree","Object","freeze","DynamicPropertyMetadata","LayoutPropertyMetadata","type","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","_this","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","ctx_r3","property_r1","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","undefined","form","get","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","ctx_r0","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","t","standalone","decls","vars","consts","template","rf","ctx","GenericPropertiesControl_ng_container_0_Template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","DefaultGenericPropertiesControlComponent_ng_container_0_Template","_changeDetector","_extractor","_initialized","ngOnInit","_asyncToGenerator","_initialize","_this2","detectChanges","property","target","propertyKey","metadata","Reflect","propertyMetadata","_a","extend","has","defineProperty","globalDefine","global","isBlank","ngDesignerMetadata","AsFormControlPipe","transform","_valueHash","FormControl","warn","pure"],"sourceRoot":""}