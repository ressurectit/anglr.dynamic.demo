{"version":3,"file":"739.chunk.cecb0fb42b61cfa4c3ad.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../src/services/dynamicModuleTypesLoader/dynamicModuleTypesLoader.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout/src/types/textStyling.types.ts","webpack://ng-universal-demo/./app/services/layoutData/layoutData.service.ts","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts"],"sourcesContent":["<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button mat-icon-button *ngIf=\"hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        (cdkDropListDropped)=\"data?.component?.addDescendant($event)\"\n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDrop() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_MODULE_TYPES_PROVIDER} from '../../misc/tokens';\nimport {DynamicModule, DynamicModuleDataExtractor} from '../../interfaces';\nimport {DynamicModuleTypesProvider} from './dynamicModuleTypesLoader.interface';\n\n/**\n * Service used for loading dynamic module types\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicModuleTypesLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic module types\n     */\n    protected _cachedDynamicModuleTypes: Dictionary<string[]> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_MODULE_TYPES_PROVIDER) protected _providers: DynamicModuleTypesProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<string[]>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicModuleTypesLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicModuleTypesLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic module types, or null if not found\n     * @param moduleName - Name of module containing dynamic types\n     */\n    public async loadTypes(moduleName: string): Promise<string[]|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n\n        //try to get from cache\n        if(this._cachedDynamicModuleTypes[moduleName])\n        {\n            this._logger?.verbose('DynamicModuleTypesLoader: Loading from cache {@source}', {moduleName});\n\n            return this._cachedDynamicModuleTypes[moduleName];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(moduleName);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicModuleTypesLoader: Failed to get dynamic module {@source}', {moduleName});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicModuleTypes = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicModuleTypes)\n            {\n                this._cachedDynamicModuleTypes[moduleName] = dynamicModuleTypes;\n\n                return dynamicModuleTypes;\n            }\n        }\n\n        this._logger?.debug('DynamicModuleTypesLoader: Failed to extract dynamic module types {@source}', {moduleName});\n\n        return null;\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"_designerDropLists\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemSource, DynamicModuleTypesLoader} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _moduleTypesLoader: DynamicModuleTypesLoader,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        this._getDesignerDropLists();\n\n        const types = (await this._moduleTypesLoader.loadTypes('basic-components')) ?? [];\n\n        for(const type of types)\n        {\n            const itemSource: DynamicItemSource = {package: 'basic-components', name: type};\n            const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n\n            if(!metadata)\n            {\n                this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n            }\n            else\n            {\n                this._allItems.push(\n                {\n                    itemSource,\n                    metadata\n                });\n            }\n        }\n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"_visible\" class=\"properties-main\">\n    <div class=\"header\">Properties <span class=\"bold\">{{_metadata?.metaInfo?.name ?? _component?.options?.typeMetadata?.name}} - {{_component?.options?.typeMetadata?.id}}</span></div>\n\n    <div class=\"form-group\">\n        <label class=\"control-label\">Display name</label>\n        <input class=\"form-control\" type=\"text\" [formControl]=\"_displayName\">\n    </div>\n\n    <ng-container *ngFor=\"let props of _propertiesData\">\n        <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n            <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {Dictionary, extend, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected _optionsFormSubscription: Subscription|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected _visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected _component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected _metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected _displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected _propertiesData: PropertiesEditorData[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected _formModelBuilder: FormModelBuilder,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => this._initProperties()));\n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => this._initProperties()));\n\n        this._displayName\n            .valueChanges\n            .subscribe(displayName =>\n            {\n                if(this._component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this._component.options.typeMetadata.displayName = displayName;\n\n                    // eslint-disable-next-line no-self-assign\n                    this._component.options = this._component.options;\n                    this._manager.displayNameUpdated();\n                }\n            });\n\n        this._initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    protected async _initProperties(): Promise<void>\n    {\n        if(isPresent(this._manager.selectedComponent))\n        {\n            this._visible = true;\n            const component = this._manager.getComponent(this._manager.selectedComponent);\n\n            if(component)\n            {\n                this._visible = true;\n                this._component = component;\n\n                await this._getMetadata();\n            }\n            else\n            {\n                this._hide();\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async _getMetadata(): Promise<void>\n    {\n        if(this._component?.options?.typeMetadata)\n        {\n            this._displayName.setValue(this._component.options.typeMetadata.displayName || this._component.options.typeMetadata.id, {emitEvent: false});\n\n            this._metadata = await this._metadataExtractor.extractMetadata(this._component.options?.typeMetadata);\n\n            if(!this._metadata)\n            {\n                this._logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this._component.options?.typeMetadata.package, name: this._component.options?.typeMetadata.name});\n\n                this._hide();\n            }\n\n            this._optionsFormSubscription?.unsubscribe();\n            this._optionsFormSubscription = new Subscription();\n            this._propertiesData = [];\n\n            //properties metadata\n            if(this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                    const metadata = this._propertyExtractor.extract(props.modelType);\n    \n                    this._optionsFormSubscription.add(form.valueChanges.subscribe(data =>\n                    {\n                        if(this._component?.options?.typeMetadata)\n                        {\n                            extend(true, this._component.options.typeMetadata.options, data);\n    \n                            // eslint-disable-next-line no-self-assign\n                            this._component.options = this._component.options;\n                            this._component.invalidateVisuals();\n                        }\n                    }));\n\n                    this._propertiesData.push(\n                    {\n                        form,\n                        metadata,\n                        controls: props.propertiesControls,\n                    });\n                }\n            }\n\n            if(this._component)\n            {\n                const parent = this._manager.getParent(this._component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this._metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                            const metadata = this._propertyExtractor.extract(props.modelType);\n            \n                            this._optionsFormSubscription.add(form.valueChanges.subscribe(data =>\n                            {\n                                if(this._component?.options?.typeMetadata)\n                                {\n                                    extend(true, this._component.options.typeMetadata.options, data);\n            \n                                    // eslint-disable-next-line no-self-assign\n                                    this._component.options = this._component.options;\n                                    this._component.invalidateVisuals();\n                                }\n                            }));\n        \n                            this._propertiesData.push(\n                            {\n                                form,\n                                metadata,\n                                controls: props.propertiesControls,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected _hide(): void\n    {\n        this._visible = false;\n        this._component = null;\n        this._metadata = null;\n        this._propertiesData = [];\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n        this._changeDetector.detectChanges();\n    }\n}","/**\n * Available types of font weight\n */\nexport enum TextFontWeight\n{\n    /**\n     * Font weight light\n     */\n    Light = 200,\n\n    /**\n     * Font weight normal\n     */\n    Normal = 400,\n\n    /**\n     * Font weight semi-bold\n     */\n    SemiBold = 600,\n\n    /**\n     * Font weight bold\n     */\n    Bold = 700,\n}\n\n/**\n * Available types of font size units\n */\nexport enum StyleSizeUnit\n{\n    /**\n     * Style size unit is in pixels\n     */\n    px,\n\n    /**\n     * Style size unit is in points\n     */\n    pt,\n    \n    /**\n     * Style size unit is in em\n     */\n    em,\n}","import {Inject, Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nconst DATA = 'LAYOUT_DATA';\n\n/**\n * Service used for obtaining and storing layout data\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutDataService\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    public setLayoutData(name: string, data: LayoutComponentMetadata): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(DATA, store);\n    }\n\n    public getLayoutData(name: string): LayoutComponentMetadata|null\n    {\n        return (this._storage.get(DATA)?.[name]) ?? null;\n    }\n\n    public removeLayoutData(name: string): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        delete store[name];\n\n        this._storage.set(DATA, store);\n    }\n\n    public getStoredLayouts(): string[]\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        return Object.keys(store);\n    }\n}","<div class=\"flex-row\">\r\n    <ng-select [formControl]=\"_available\" style=\"width: 180px\">\r\n        <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\r\n        <span>remove</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\r\n        <span>load</span>\r\n    </button>\r\n\r\n    <input type=\"text\" [formControl]=\"_name\">\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\r\n        <span>save</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\r\n        <span>new</span>\r\n    </button>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <mat-tab-group>\r\n        <mat-tab label=\"Hierarchy\">\r\n            <components-tree></components-tree>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"Palette\">\r\n            <components-palette></components-palette>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n      \r\n    <div class=\"flex-1\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n\r\n    <properties-editor></properties-editor>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {ComponentStylingOptions, LayoutComponentMetadata, TextFontWeight} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager, LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout-editor';\nimport {GridPanelCellComponentOptions, GridPanelComponentOptions, StackPanelComponentOptions, StackPanelFlexExtensionOptions, TextBlockComponentOptions} from '@anglr/dynamic/basic-components';\nimport {generateId} from '@jscrpt/common';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n    \n    protected _available: FormControl = new FormControl('');\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _manager: LayoutEditorMetadataManager,\n                private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStoredLayouts();\n        \n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata =\n                {\n                    id: `stackPanel-${generateId(10)}`,\n                    package: 'basic-components',\n                    name: 'stackPanel',\n                    options: <StackPanelComponentOptions>\n                    {\n                        children: [],\n                    },\n                };\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this._store.getLayoutData(this._available.value);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this._store.getLayoutData(this._available.value);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate(['/editor', this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this._store.setLayoutData(this._name.value, this._manager.getMetadata());\n\n        this._availableNames = this._store.getStoredLayouts();\n        this._router.navigate(['/editor', this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _delete(): void\n    {\n        this._store.removeLayoutData(this._available.value);\n\n        this._availableNames = this._store.getStoredLayouts();\n        this._router.navigate(['/editor'], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata =\n        {\n            id: `stackPanel-${generateId(10)}`,\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate(['/editor'], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = {\n            id: 'gridPanelTest',\n            package: 'basic-components',\n            name: 'gridPanel',\n            options: <GridPanelComponentOptions&ComponentStylingOptions>\n            {\n                columns:\n                [\n                    {\n                        width: '1fr'\n                    },\n                    {\n                        width: '2fr'\n                    },\n                    {\n                        width: '1fr'\n                    },\n                    {\n                        width: '100px'\n                    },\n                ],\n                rows:\n                [\n                    {\n                        height: '300px'\n                    },\n                ],\n                cells:\n                [\n                    {\n                        id: 'celltest',\n                        package: 'basic-components',\n                        name: 'gridPanelCell',\n                        options: <GridPanelCellComponentOptions>\n                        {\n                            gridColumnStart: 2,\n                            gridColumnEnd: 3,\n                            gridRowStart: 1,\n                            gridRowEnd: 2,\n                            component:\n                            {\n                                id: 'stackPanelTest',\n                                package: 'basic-components',\n                                name: 'stackPanel',\n                                options: <StackPanelComponentOptions&ComponentStylingOptions>\n                                {\n                                    padding:\n                                    {\n                                        top: '20px'\n                                    },\n                                    children:\n                                    [\n                                        {\n                                            package: 'basic-components',\n                                            id: 'textTest',\n                                            name: 'textBlock',\n                                            options: <TextBlockComponentOptions&ComponentStylingOptions&StackPanelFlexExtensionOptions>\n                                            {\n                                                text: 'toto je text',\n                                                margin:\n                                                {\n                                                    top: '10px',\n                                                    bottom: '6px',\n                                                    left: '12px',\n                                                    right: '14pt'\n                                                },\n                                                padding:\n                                                {\n                                                    top: '8px',\n                                                    bottom: '8px',\n                                                    left: '12px',\n                                                    right: '12px'\n                                                },\n                                                textStyling:\n                                                {\n                                                    fontSize: '20px'\n                                                },\n                                                flex: '1'\n                                            }\n                                        },\n                                        {\n                                            package: 'basic-components',\n                                            id: 'text2Test',\n                                            name: 'textBlock',\n                                            options: <TextBlockComponentOptions&ComponentStylingOptions>\n                                            {\n                                                text: 'druhý riadok je toto',\n                                                textStyling:\n                                                {\n                                                    fontWeight: TextFontWeight.Bold\n                                                }\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    {\n                        id: 'anotherCell',\n                        package: 'basic-components',\n                        name: 'gridPanelCell',\n                        options: <GridPanelCellComponentOptions>\n                        {\n                            gridColumnStart: 3,\n                            gridColumnEnd: 4,\n                            gridRowStart: 1,\n                            gridRowEnd: 2,\n                            component:\n                            {\n                                package: 'basic-components',\n                                id: 'textJeTo',\n                                name: 'textBlock',\n                                options: <TextBlockComponentOptions>\n                                {\n                                    text: 'nový text',\n                                }\n                            }\n                        }\n                    },\n                    {\n                        id: 'gridCellxxx',\n                        package: 'basic-components',\n                        name: 'gridPanelCell',\n                        options: <GridPanelCellComponentOptions>\n                        {\n                            gridColumnStart: 4,\n                            gridColumnEnd: 5,\n                            gridRowStart: 1,\n                            gridRowEnd: 2,\n                            component:\n                            {\n                                id: 'stackPanelxxx',\n                                package: 'basic-components',\n                                name: 'stackPanel',\n                                options: <StackPanelComponentOptions>\n                                {\n                                    horizontal: true,\n                                    children: []\n                                }\n                            }\n                        }\n                    },\n                ]\n            }\n        };\n    }\n\n    // /**\n    //  * Gets metadata for current metadata manager\n    //  */\n    // protected getMetadata(): void\n    // {\n        \n    //     console.log(this._manager.root);\n    //     console.log(this._manager.flatTree);\n    //     console.log(this._manager.flatTree.map(itm => itm.component.options.typeMetadata.id));\n    // }\n}\n","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'preview')\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStoredLayouts();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getLayoutData(id);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {EditorComponent} from './editor/editor.component';\nimport {PreviewComponent} from './preview/preview.component';\n\nexport const components =\n[\n    EditorComponent,\n    PreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {LayoutComponentRendererSADirective, ComponentStylingSADirective} from '@anglr/dynamic/layout';\nimport {ComponentsPaletteSAComponent, ComponentsTreeSAComponent, PropertiesEditorSAComponent} from '@anglr/dynamic/layout-editor';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule,\n        LayoutComponentRendererSADirective,\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        ComponentStylingSADirective,\n        MatTabsModule,\n    ],\n    declarations:\n    [\n        ...components\n    ]\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {InputBooleanComponent, InputStringComponent} from '../modules/propertyTypeControls';\nimport {LayoutPropertyMetadata} from './types';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES', {providedIn: 'root', factory: () => [LayoutPropertyMetadata]});\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () =>\n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }});","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}"],"names":["i0","child_r5","ctx_r6","ComponentsTreeItemSAComponent","constructor","_manager","_changeDetector","_initSubscriptions","Subscription","open","_canDrop","this","data","component","canDrop","hasChildren","children","length","ngOnInit","add","layoutChange","subscribe","detectChanges","selectedChange","highlightedChange","displayNameChange","ngOnDestroy","unsubscribe","toggle","expand","nodeId","options","typeMetadata","id","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","event","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","ctx_r1","ctx_r3","selectors","viewQuery","ctx","CommonModule","i2","MatButtonModule","i3","DragDropModule","i4","ConnectDropListsSADirective","styles","changeDetection","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","ToLayoutDragDataSAPipe","transform","value","newId","itemSource","name","metadata","displayName","package","extend","metaInfo","defaultOptions","parentId","pure","standalone","DynamicModuleTypesLoader","_providers","_extractors","_logger","_cachedDynamicModuleTypes","Array","isArray","error","loadTypes","moduleName","dynamicModule","verbose","provider","asyncDynamicModule","tryToGet","resolvePromiseOr","debug","extractor","dynamicModuleTypes","tryToExtract","DYNAMIC_MODULE_TYPES_PROVIDER","DYNAMIC_MODULE_DATA_EXTRACTORS","LOGGER","factory","providedIn","ComponentsPaletteSAComponent","_moduleTypesLoader","_metadataExtractor","_metadataManager","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","_getDesignerDropLists","types","type","extractMetadata","push","warn","item","group","_a","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","currentIdx","source","dropContainer","getSortedItems","findIndex","splice","flatTree","map","itm","reverse","features","decls","vars","consts","template","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","extract","result","propSymbol","meta","Reflect","get","prototype","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","propertiesMetadata","ngOnChanges","clear","injector","createComponent","instance","form","initialize","invalidateVisuals","destroy","props_r2","inputs","PropertiesEditorSAComponent","_propertyExtractor","_formModelBuilder","_optionsFormSubscription","_visible","_component","_metadata","_displayName","FormControl","_propertiesData","_initProperties","valueChanges","displayNameUpdated","getComponent","_getMetadata","_hide","setValue","emitEvent","optionsMetadata","props","build","modelType","controls","propertiesControls","parent","getParent","parentMetadata","childPropertiesMetadata","FormModelBuilder","ReactiveFormsModule","i5","TextFontWeight","StyleSizeUnit","DATA","LayoutDataService","_storage","setLayoutData","store","set","getLayoutData","removeLayoutData","getStoredLayouts","Object","keys","PERMANENT_STORAGE","val_r1","EditorComponent","_store","_router","_route","_available","_name","_availableNames","params","_load","navigate","skipLocationChange","replaceUrl","_save","getMetadata","_delete","_new","_loadDemo","columns","width","rows","height","cells","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","padding","top","text","margin","bottom","left","right","textStyling","fontSize","flex","fontWeight","Bold","horizontal","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LayoutEditorMetadataManager","ComponentRoute","path","Router","ActivatedRoute","PreviewComponent","val","ComponentRedirectRoute","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","MatTabsModule","ModuleRoutes","InputStringComponent","PropertyTypeControlBase","t","InputBooleanComponent","InjectionToken","LayoutPropertyMetadata","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","Symbol","_initialized","values","control","_control","_controlSet","_initialize","CastPipesModule","NumberInputModule"],"sourceRoot":""}