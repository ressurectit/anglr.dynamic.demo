{"version":3,"file":"671.chunk.549ac01fe47e88945bbd.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.model.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.ts","webpack://ng-universal-demo/../layout-relations/src/components/configureNodeEndpoint/configureNodeEndpoint.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/node/componentInputsNode.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/node/componentInputsNode.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/metadata/componentInputs.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {ComponentEndpointDef} from '../../interfaces';\n\n/**\n * Component endopoint model\n */\nexport class ComponentEndpointModel<TValue = any> implements ComponentEndpointDef<TValue>\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public defaultValue: TValue|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public name: string = '';\n    \n    //######################### constructor #########################\n    constructor(value: ComponentEndpointDef|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {TitledDialogService, TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ComponentEndpointDef} from '../../interfaces';\nimport {ComponentEndpointModel} from './configureNodeEndpoint.model';\n\n/**\n * Component used for configuring node endpoint\n */\n@Component(\n{\n    selector: 'configure-node-endpoint',\n    templateUrl: 'configureNodeEndpoint.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        MatDialogModule,\n    ],\n    providers:\n    [\n        FormModelBuilder,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ConfigureNodeEndpointSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form group that is bound to form\n     */\n    protected form: FormGroup<FormModelGroup<ComponentEndpointDef>>;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: ComponentEndpointDef,\n                protected dialog: TitledDialogService,\n                formModelBuilder: FormModelBuilder,)\n    {\n\n        this.form = formModelBuilder.build<ComponentEndpointDef>(new ComponentEndpointModel(data));\n        this.form.valueChanges.subscribe(value => extend(data, value));\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.data.defaultValue) ? JSON.stringify(this.data.defaultValue, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, string|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            this.data.defaultValue = getJson(result);\n        }\n    }\n}","<div [formGroup]=\"form\">\n    <div class=\"form-group margin-bottom-extra-small\">\n        <label class=\"control-label text-uppercase\">name</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n    </div>\n\n    <div class=\"flex-column\">\n        <button type=\"button\" class=\"btn btn-primary align-self-center\" (click)=\"showCodeEditor()\">\n            <span>default value</span>\n        </button>\n    </div>\n</div>\n\n<div class=\"flex-row flex-end\">\n    <button type=\"button\" class=\"btn btn-info margin-right-extra-small\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" [mat-dialog-close]=\"true\">\n        <span>ok</span>\n    </button>\n</div>","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"component inputs\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\" *ngFor=\"let endpoint of endpoints\">\n                <div class=\"flex-row\">\n                    <div>{{endpoint.name}}</div>\n\n                    <button type=\"button\" class=\"btn-icon margin-horizontal-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); configureEndpoint(endpoint)\">\n                        <span class=\"fas fa-cog\"></span>\n                    </button>\n\n                    <button type=\"button\" class=\"btn-icon\" (click)=\"$event.preventDefault(); $event.stopPropagation(); removeEndpoint(endpoint)\">\n                        <span class=\"fas fa-times\"></span>\n                    </button>\n                </div>\n\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"endpoint.name\" [parent]=\"this\"></relation-node-output>\n            </div>\n\n            <div class=\"flex-row flex-end\">\n                <button type=\"button\" class=\"btn-icon margin-right-extra-small\" (click)=\"$event.preventDefault(); $event.stopPropagation(); addEndpoint()\">\n                    <span class=\"fas fa-plus\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {extend} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs.options';\nimport {ConfigureNodeEndpointSAComponent} from '../../../components';\nimport {ComponentEndpointDef} from '../../../interfaces';\n\n/**\n * Relations node component for component inputs\n */\n@Component(\n{\n    selector: 'component-inputs-node',\n    templateUrl: 'componentInputsNode.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentInputsNodeSAComponent extends RelationsNodeBase<ComponentInputsRelationsOptions> implements RelationsNode<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Gets component inputs\n     */\n    protected get endpoints(): ComponentEndpointDef[]\n    {\n        if(!this.metadata)\n        {\n            return [];\n        }\n\n        this.metadata.relationsOptions ??= \n        {\n            inputs: []\n        };\n\n        return (this.metadata.relationsOptions.inputs ??= []);\n    }\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new input endpoint\n     */\n    protected async addEndpoint(): Promise<void>\n    {\n        const param: ComponentEndpointDef = \n        {\n            name: '',\n            defaultValue: null,\n        };\n\n        if(await this.configureEndpoint(param))\n        {\n            this.endpoints.push(param);\n        }\n    }\n\n    /**\n     * Removes endpoint\n     * @param endpoint - Endpoint to be removed\n     */\n    protected removeEndpoint(endpoint: ComponentEndpointDef): void\n    {\n        const index = this.endpoints.indexOf(endpoint);\n\n        if(index >= 0)\n        {\n            this.endpoints.splice(index, 1);\n        }\n    }\n\n    /**\n     * Configures endpoint\n     * @param endpoint - Endpoint to be configured\n     */\n    protected async configureEndpoint(endpoint: ComponentEndpointDef): Promise<boolean>\n    {\n        const original = JSON.parse(JSON.stringify(endpoint));\n        \n        const result = await lastValueFrom(this.dialog.open<ConfigureNodeEndpointSAComponent, ComponentEndpointDef, true|undefined|null>(ConfigureNodeEndpointSAComponent,\n        {\n            title: 'configure component input',\n            width: '60vw',\n            data: endpoint\n        }).afterClosed());\n\n        if(!result)\n        {\n            extend(endpoint, original);\n        }\n\n        return result ?? false;\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsNodeSAComponent} from '../node/componentInputsNode.component';\n\n/**\n * Component inputs relations metadata\n */\nexport class ComponentInputsRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Component inputs',\n        description: 'Definition of relations component inputs',\n        group: 'Component',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = ComponentInputsNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button type=\"button\" class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}"],"names":["ComponentEndpointModel","constructor","value","defaultValue","name","mapValuesToThis","this","ConfigureNodeEndpointSAComponent","data","dialog","formModelBuilder","form","build","valueChanges","subscribe","extend","showCodeEditor","content","isPresent","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","languageModel","JsonLanguageModel","afterClosed","getJson","i0","TITLED_DIALOG_DATA","selectors","standalone","features","FormModelBuilder","decls","vars","consts","template","ctx","ReactiveFormsModule","i3","MatDialogModule","i4","encapsulation","changeDetection","$event","preventDefault","stopPropagation","ctx_r0","endpoint_r1","ComponentInputsNodeSAComponent","RelationsNodeBase","changeDetector","element","super","endpoints","metadata","relationsOptions","_a","inputs","_b","addEndpoint","param","configureEndpoint","push","removeEndpoint","endpoint","index","indexOf","splice","original","parse","CommonModule","i2","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","ComponentInputsRelationsEditorMetadata","metaInfo","description","group","nodeDefinition","Object","freeze","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","language","Uri","extension","setModel","outputs","styles","_r0","LanguageModel","getModel"],"sourceRoot":""}