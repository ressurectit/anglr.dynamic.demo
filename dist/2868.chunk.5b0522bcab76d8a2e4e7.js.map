{"version":3,"file":"2868.chunk.5b0522bcab76d8a2e4e7.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/type.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\n\n/**\n * Material expansion panel layout metadata loader\n */\nexport const MaterialExpansionPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialExpansionPanelComponentOptions>> = async () => new (await import('./metadata/expansionPanel.layoutMetadata')).MaterialExpansionPanelLayoutEditorMetadata();\n","<mat-expansion-panel [expanded]=\"expanded\">\n    <mat-expansion-panel-header>\n        <mat-panel-title>{{title}}</mat-panel-title>\n        <mat-panel-description>{{description}}</mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <ng-container *ngFor=\"let type of options?.children\">\n        <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n    </ng-container>\n</mat-expansion-panel>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\nimport {MaterialExpansionPanelLayoutMetadataLoader} from './expansionPanel.metadata';\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-expansion-panel',\n    templateUrl: 'expansionPanel.component.html',\n    styleUrls: ['expansionPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatExpansionModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(MaterialExpansionPanelLayoutMetadataLoader)\nexport class MaterialExpansionPanelSAComponent extends LayoutComponentBase<MaterialExpansionPanelComponentOptions> implements LayoutComponent<MaterialExpansionPanelComponentOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether panel is expanded\n     */\n    @Input()\n    public expanded: boolean = true;\n\n    /**\n     * Expansion panel title\n     */\n    @Input()\n    public title: string|null|undefined;\n\n    /**\n     * Expansion panel description\n     */\n    @Input()\n    public description: string|null|undefined;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        this.expanded = this.options?.expanded ?? false;\n        this.title = this.options?.title;\n        this.description = this.options?.description;\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialExpansionPanelSAComponent} from './expansionPanel.component';\n\nexport default MaterialExpansionPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","element","this","extensionsOptions","options","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","i0","LOGGER","features","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","selectors","standalone","decls","vars","consts","template","LayoutComponentRendererSADirective","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","debug","id","clear","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","MaterialExpansionPanelLayoutMetadataLoader","MaterialExpansionPanelLayoutEditorMetadata","MaterialExpansionPanelSAComponent","expanded","title","description","t","CommonModule","i1","MatExpansionModule","i2","styles","changeDetection","_metadata","_instance","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","PACKAGE_SOURCES","packages","packagesChange","NEVER","refresh","multi"],"sourceRoot":""}