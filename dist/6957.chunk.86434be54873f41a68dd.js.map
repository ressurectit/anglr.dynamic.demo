{"version":3,"file":"6957.chunk.86434be54873f41a68dd.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/editor.module.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/TinyMCE.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/Events.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/utils/Utils.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/utils/ScriptLoader.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/editor.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.model.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.layoutMetadata.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { EditorComponent } from './editor.component';\n\n@NgModule({\n  imports: [ CommonModule, FormsModule ],\n  declarations: [ EditorComponent ],\n  exports: [ EditorComponent ]\n})\nexport class EditorModule {}\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getTinymce = () => {\n  const w = typeof window !== 'undefined' ? (window as any) : undefined;\n  return w && w.tinymce ? w.tinymce : null;\n};\n\nexport { getTinymce };\n","import { Output, EventEmitter, Directive } from '@angular/core';\nimport { Editor as TinyMCEEditor } from 'tinymce';\n\nexport interface EventObj<T> {\n  event: T;\n  editor: TinyMCEEditor;\n}\n\n@Directive()\nexport class Events {\n  @Output() public onBeforePaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onBlur: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onClick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onContextMenu: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onCopy: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onCut: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onDblclick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onDrag: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragEnd: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragGesture: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragOver: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onFocus: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusIn: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusOut: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onKeyDown: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyPress: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyUp: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onMouseDown: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseEnter: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseLeave: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseMove: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOut: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOver: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseUp: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onPaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onSelectionChange: EventEmitter<EventObj<Event>> = new EventEmitter();\n  @Output() public onActivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeRenderUI: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onClearUndos: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDeactivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDirty: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onHide: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInitNgModel: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onLoadContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onNodeChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostRender: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onProgressState: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRedo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRemove: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onReset: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onResizeEditor: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSaveContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetAttrib: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResizeStart: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResized: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectSelected: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onShow: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSubmit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onVisualAid: EventEmitter<EventObj<any>> = new EventEmitter();\n}\n\nexport const validEvents: (keyof Events)[] = [\n  'onActivate',\n  'onAddUndo',\n  'onBeforeAddUndo',\n  'onBeforeExecCommand',\n  'onBeforeGetContent',\n  'onBeforeRenderUI',\n  'onBeforeSetContent',\n  'onBeforePaste',\n  'onBlur',\n  'onChange',\n  'onClearUndos',\n  'onClick',\n  'onContextMenu',\n  'onCopy',\n  'onCut',\n  'onDblclick',\n  'onDeactivate',\n  'onDirty',\n  'onDrag',\n  'onDragDrop',\n  'onDragEnd',\n  'onDragGesture',\n  'onDragOver',\n  'onDrop',\n  'onExecCommand',\n  'onFocus',\n  'onFocusIn',\n  'onFocusOut',\n  'onGetContent',\n  'onHide',\n  'onInit',\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n  'onLoadContent',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onNodeChange',\n  'onObjectResizeStart',\n  'onObjectResized',\n  'onObjectSelected',\n  'onPaste',\n  'onPostProcess',\n  'onPostRender',\n  'onPreProcess',\n  'onProgressState',\n  'onRedo',\n  'onRemove',\n  'onReset',\n  'onResizeEditor',\n  'onSaveContent',\n  'onSelectionChange',\n  'onSetAttrib',\n  'onSetContent',\n  'onShow',\n  'onSubmit',\n  'onUndo',\n  'onVisualAid'\n];\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { EventEmitter } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { EditorComponent } from '../editor/editor.component';\nimport { validEvents, Events } from '../editor/Events';\n\n// Caretaker note: `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n// will be invoked upon subscription and teardown.\nconst listenTinyMCEEvent = (\n  editor: any,\n  eventName: string,\n  destroy$: Subject<void>\n) => fromEvent(editor as HasEventTargetAddRemove<unknown> | ArrayLike<HasEventTargetAddRemove<unknown>>, eventName).pipe(takeUntil(destroy$));\n\nconst bindHandlers = (ctx: EditorComponent, editor: any, destroy$: Subject<void>): void => {\n  const allowedEvents = getValidEvents(ctx);\n  allowedEvents.forEach((eventName) => {\n    const eventEmitter: EventEmitter<any> = ctx[eventName];\n\n    listenTinyMCEEvent(editor, eventName.substring(2), destroy$).subscribe((event) => {\n      // Caretaker note: `ngZone.run()` runs change detection since it notifies the forked Angular zone that it's\n      // being re-entered. We don't want to run `ApplicationRef.tick()` if anyone listens to the specific event\n      // within the template. E.g. if the `onSelectionChange` is not listened within the template like:\n      // `<editor (onSelectionChange)=\"...\"></editor>`\n      // then its `observers` array will be empty, and we won't run \"dead\" change detection.\n      if (eventEmitter.observers.length > 0) {\n        ctx.ngZone.run(() => eventEmitter.emit({ event, editor }));\n      }\n    });\n  });\n};\n\nconst getValidEvents = (ctx: EditorComponent): (keyof Events)[] => {\n  const ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);\n  const allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(\n    (event) => validEvents.includes(event as (keyof Events)) && !ignoredEvents.includes(event)) as (keyof Events)[];\n  return allowedEvents;\n};\n\nconst parseStringProperty = (property: string | string[] | undefined, defaultValue: (keyof Events)[]): string[] => {\n  if ( typeof property === 'string') {\n    return property.split(',').map((value) => value.trim());\n  }\n  if ( Array.isArray(property)) {\n    return property;\n  }\n  return defaultValue;\n};\n\nlet unique = 0;\n\nconst uuid = (prefix: string): string => {\n  const date = new Date();\n  const time = date.getTime();\n  const random = Math.floor(Math.random() * 1000000000);\n\n  unique++;\n\n  return prefix + '_' + random + unique + String(time);\n};\n\nconst isTextarea = (element?: Element): element is HTMLTextAreaElement => typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n\nconst normalizePluginArray = (plugins?: string | string[]): string[] => {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nconst mergePlugins = (initPlugins: string | string[], inputPlugins?: string | string[]) =>\n  normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop: (...args: any[]) => void = () => { };\n\nconst isNullOrUndefined = (value: any): value is null | undefined => value === null || value === undefined;\n\nexport {\n  listenTinyMCEEvent,\n  bindHandlers,\n  uuid,\n  isTextarea,\n  normalizePluginArray,\n  mergePlugins,\n  noop,\n  isNullOrUndefined\n};\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { defer, fromEvent, Observable, OperatorFunction } from 'rxjs';\nimport { mapTo, shareReplay, take } from 'rxjs/operators';\n\nexport interface IStateObj {\n  script$: Observable<void> | null;\n}\n\nconst createState = (): IStateObj => ({\n  script$: null,\n});\n\ninterface ScriptLoader {\n  load: (doc: Document, url: string) => Observable<void>;\n  reinitialize: () => void;\n}\n\nconst CreateScriptLoader = (): ScriptLoader => {\n  let state = createState();\n\n  const load = (doc: Document, url: string) => (\n    state.script$ ||\n    // Caretaker note: the `script$` is a multicast observable since it's piped with `shareReplay`,\n    // so if there're multiple editor components simultaneously on the page, they'll subscribe to the internal\n    // `ReplaySubject`. The script will be loaded only once, and `ReplaySubject` will cache the result.\n    (state.script$ = defer(() => {\n      const scriptTag = doc.createElement('script');\n      scriptTag.referrerPolicy = 'origin';\n      scriptTag.type = 'application/javascript';\n      scriptTag.src = url;\n      doc.head.appendChild(scriptTag);\n      return fromEvent(scriptTag, 'load').pipe(take(1), mapTo(undefined) as OperatorFunction<Event, undefined>);\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true })))\n  );\n\n  // Only to be used by tests.\n  const reinitialize = () => {\n    state = createState();\n  };\n\n  return {\n    load,\n    reinitialize,\n  };\n};\n\nconst ScriptLoader = CreateScriptLoader();\n\nexport { ScriptLoader };\n","/* eslint-disable @typescript-eslint/no-parameter-properties */\nimport { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, forwardRef, Inject, Input, NgZone, OnDestroy, PLATFORM_ID, InjectionToken, Optional } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { getTinymce } from '../TinyMCE';\nimport { listenTinyMCEEvent, bindHandlers, isTextarea, mergePlugins, uuid, noop, isNullOrUndefined } from '../utils/Utils';\nimport { EventObj, Events } from './Events';\nimport { ScriptLoader } from '../utils/ScriptLoader';\nimport { Editor as TinyMCEEditor, TinyMCE } from 'tinymce';\n\ntype EditorOptions = Parameters<TinyMCE['init']>[0];\n\nexport const TINYMCE_SCRIPT_SRC = new InjectionToken<string>('TINYMCE_SCRIPT_SRC');\n\nconst EDITOR_COMPONENT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => EditorComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'editor',\n  template: '<ng-template></ng-template>',\n  styles: [ ':host { display: block; }' ],\n  providers: [ EDITOR_COMPONENT_VALUE_ACCESSOR ]\n})\nexport class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {\n\n  @Input() public cloudChannel = '6';\n  @Input() public apiKey = 'no-api-key';\n  @Input() public init: EditorOptions | undefined;\n  @Input() public id = '';\n  @Input() public initialValue: string | undefined;\n  @Input() public outputFormat: 'html' | 'text' | undefined;\n  @Input() public inline: boolean | undefined;\n  @Input() public tagName: string | undefined;\n  @Input() public plugins: string | undefined;\n  @Input() public toolbar: string | string[] | undefined;\n  @Input() public modelEvents = 'change input undo redo';\n  @Input() public allowedEvents: string | string[] | undefined;\n  @Input() public ignoreEvents: string | string[] | undefined;\n  @Input()\n  public set disabled(val) {\n    this._disabled = val;\n    if (this._editor && this._editor.initialized) {\n      if (typeof this._editor.mode?.set === 'function') {\n        this._editor.mode.set(val ? 'readonly' : 'design');\n      } else {\n        this._editor.setMode(val ? 'readonly' : 'design');\n      }\n    }\n  }\n\n  public get disabled() {\n    return this._disabled;\n  }\n\n  public get editor() {\n    return this._editor;\n  }\n\n  public ngZone: NgZone;\n\n  private _elementRef: ElementRef;\n  private _element: HTMLElement | undefined;\n  private _disabled: boolean | undefined;\n  private _editor: TinyMCEEditor | undefined;\n\n  private onTouchedCallback = noop;\n  private onChangeCallback: any;\n\n  private destroy$ = new Subject<void>();\n\n  public constructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(TINYMCE_SCRIPT_SRC) private tinymceScriptSrc?: string\n  ) {\n    super();\n    this._elementRef = elementRef;\n    this.ngZone = ngZone;\n  }\n\n  public writeValue(value: string | null): void {\n    if (this._editor && this._editor.initialized) {\n      this._editor.setContent(isNullOrUndefined(value) ? '' : value);\n    } else {\n      this.initialValue = value === null ? undefined : value;\n    }\n  }\n\n  public registerOnChange(fn: (_: any) => void): void {\n    this.onChangeCallback = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  public ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.id = this.id || uuid('tiny-angular');\n      this.inline = this.inline !== undefined ? this.inline !== false : !!(this.init?.inline);\n      this.createElement();\n      if (getTinymce() !== null) {\n        this.initialise();\n      } else if (this._element && this._element.ownerDocument) {\n        // Caretaker note: the component might be destroyed before the script is loaded and its code is executed.\n        // This will lead to runtime exceptions if `initialise` will be called when the component has been destroyed.\n        ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc())\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(this.initialise);\n      }\n    }\n  }\n\n  public ngOnDestroy() {\n    this.destroy$.next();\n\n    if (getTinymce() !== null) {\n      getTinymce().remove(this._editor);\n    }\n  }\n\n  public createElement() {\n    const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n    this._element = document.createElement(this.inline ? tagName : 'textarea');\n    if (this._element) {\n      if (document.getElementById(this.id)) {\n        /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n        console.warn(`TinyMCE-Angular: an element with id [${this.id}] already exists. Editors with duplicate Id will not be able to mount`);\n      }\n      this._element.id = this.id;\n      if (isTextarea(this._element)) {\n        this._element.style.visibility = 'hidden';\n      }\n      this._elementRef.nativeElement.appendChild(this._element);\n    }\n  }\n\n  public initialise = (): void => {\n    const finalInit: EditorOptions = {\n      ...this.init,\n      selector: undefined,\n      target: this._element,\n      inline: this.inline,\n      readonly: this.disabled,\n      plugins: mergePlugins((this.init && this.init.plugins) as string, this.plugins),\n      toolbar: this.toolbar || (this.init && this.init.toolbar),\n      setup: (editor: TinyMCEEditor) => {\n        this._editor = editor;\n\n        listenTinyMCEEvent(editor, 'init', this.destroy$).subscribe(() => {\n          this.initEditor(editor);\n        });\n\n        bindHandlers(this, editor, this.destroy$);\n\n        if (this.init && typeof this.init.setup === 'function') {\n          this.init.setup(editor);\n        }\n      }\n    };\n\n    if (isTextarea(this._element)) {\n      this._element.style.visibility = '';\n    }\n\n    this.ngZone.runOutsideAngular(() => {\n      getTinymce().init(finalInit);\n    });\n  };\n\n  private getScriptSrc() {\n    return isNullOrUndefined(this.tinymceScriptSrc) ?\n      `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` :\n      this.tinymceScriptSrc;\n  }\n\n  private initEditor(editor: TinyMCEEditor) {\n    listenTinyMCEEvent(editor, 'blur', this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.onTouchedCallback());\n    });\n\n    listenTinyMCEEvent(editor, this.modelEvents, this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.emitOnChange(editor));\n    });\n\n    if (typeof this.initialValue === 'string') {\n      this.ngZone.run(() => {\n        editor.setContent(this.initialValue as string);\n        if (editor.getContent() !== this.initialValue) {\n          this.emitOnChange(editor);\n        }\n        if (this.onInitNgModel !== undefined) {\n          this.onInitNgModel.emit(editor as unknown as EventObj<any>);\n        }\n      });\n    }\n  }\n\n  private emitOnChange(editor: TinyMCEEditor) {\n    if (this.onChangeCallback) {\n      this.onChangeCallback(editor.getContent({ format: this.outputFormat }));\n    }\n  }\n}\n","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\nimport {isPresent} from '@jscrpt/common';\n\nimport {RichTextBlockEditorDialogSAComponent} from '../richTextBlockEditorDialog/richTextBlockEditorDialog.component';\nimport {RichTextBlockComponentOptions} from '../../../richTextBlock.options';\n\n/**\n * Component used for displaying rich text block properties control\n */\n@Component(\n{\n    selector: 'rich-text-block-properties-control',\n    templateUrl: 'richTextBlockPropertiesControl.component.html',\n    styleUrls: ['richTextBlockPropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockPropertiesControlSAComponent extends PropertiesControlBase<RichTextBlockComponentOptions> implements PropertiesControl<RichTextBlockComponentOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text block editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.form?.controls.content.value\n        }).afterClosed()\n            .toPromise();\n\n        console.log(result);\n\n        if(isPresent(result))\n        {\n            const control = this.form?.controls.content;\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n","<button type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit rich text block</span>\n</button>","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\n\n/**\n * Rich text block model for properties editor\n */\nexport class RichTextBlockModel implements RichTextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: RichTextBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockPropertiesControlSAComponent} from '../misc/components';\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\nimport {RichTextBlockModel} from './richTextBlock.model';\n\n/**\n * Rich text block layout metadata\n */\nexport class RichTextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RichTextBlockComponentOptions> =\n    {\n        name: 'Rich text block',\n        description: 'WYSIWYG editor allowing formatting of multiline text',\n        group: 'Texts',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: RichTextBlockModel,\n                    propertiesControls: \n                    [\n                        RichTextBlockPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["PropertiesControlBase","constructor","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","resolvePromiseOr","_initialize","initialize","invalidateVisuals","this","detectChanges","i0","inputs","form","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","data","layoutEditorMetadata","warn","debug","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","EditorModule","CommonModule","FormsModule","getTinymce","w","window","undefined","tinymce","Events","onBeforePaste","EventEmitter","onBlur","onClick","onContextMenu","onCopy","onCut","onDblclick","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onFocus","onFocusIn","onFocusOut","onKeyDown","onKeyPress","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPaste","onSelectionChange","onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onChange","onClearUndos","onDeactivate","onDirty","onExecCommand","onGetContent","onHide","onInit","onInitNgModel","onLoadContent","onNodeChange","onPostProcess","onPostRender","onPreInit","onPreProcess","onProgressState","onRedo","onRemove","onReset","onResizeEditor","onSaveContent","onSetAttrib","onObjectResizeStart","onObjectResized","onObjectSelected","onSetContent","onShow","onSubmit","onUndo","onVisualAid","validEvents","listenTinyMCEEvent","editor","eventName","destroy$","fromEvent","pipe","takeUntil","parseStringProperty","property","defaultValue","split","map","value","trim","Array","isArray","unique","isTextarea","element","tagName","toLowerCase","normalizePluginArray","plugins","noop","isNullOrUndefined","ScriptLoader","state","script$","load","doc","url","defer","scriptTag","createElement","referrerPolicy","src","head","appendChild","take","mapTo","shareReplay","bufferSize","refCount","reinitialize","CreateScriptLoader","TINYMCE_SCRIPT_SRC","InjectionToken","EDITOR_COMPONENT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","EditorComponent","multi","elementRef","ngZone","platformId","tinymceScriptSrc","super","cloudChannel","apiKey","id","modelEvents","onTouchedCallback","Subject","initialise","finalInit","init","selector","target","_element","inline","readonly","disabled","initPlugins","inputPlugins","concat","toolbar","setup","_editor","subscribe","initEditor","ctx","ignoredEvents","ignoreEvents","allowedEvents","filter","event","includes","getValidEvents","forEach","eventEmitter","substring","observers","length","run","emit","bindHandlers","style","visibility","runOutsideAngular","_elementRef","val","_disabled","initialized","mode","set","setMode","writeValue","setContent","initialValue","registerOnChange","fn","onChangeCallback","registerOnTouched","setDisabledState","isDisabled","ngAfterViewInit","isPlatformBrowser","prefix","time","Date","getTime","random","Math","floor","String","uuid","ownerDocument","getScriptSrc","ngOnDestroy","next","remove","document","getElementById","console","nativeElement","emitOnChange","getContent","format","outputFormat","PLATFORM_ID","RichTextBlockEditorDialogSAComponent","dialog","content","TITLED_DIALOG_DATA","selectors","standalone","features","decls","vars","consts","template","_r0","MatDialogModule","i1","i2","encapsulation","changeDetection","RichTextBlockPropertiesControlSAComponent","changeDetector","metadataExtractor","showCodeEditor","result","open","title","width","height","controls","afterClosed","toPromise","log","isPresent","control","FormControl","setValue","RichTextBlockModel","mapValuesToThis","RichTextBlockLayoutEditorMetadata","metaInfo","description","group","optionsMetadata","modelType","propertiesControls","dialogElementUid","MatDialogClose","dialogRef","_dialog","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","_closeDialogVia","screenX","screenY","MatDialogTitle","_dialogRef","Promise","resolve","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","parent","parentElement","classList","contains","find"],"sourceRoot":""}