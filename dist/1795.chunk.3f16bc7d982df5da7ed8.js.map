{"version":3,"file":"1795.chunk.3f16bc7d982df5da7ed8.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/material/core/private/ripple-loader.ts","webpack://ng-universal-demo/../../../../src/material/button/button-base.ts","webpack://ng-universal-demo/../../../../src/material/button/icon-button.ts","webpack://ng-universal-demo/../../../../src/material/button/icon-button.html","webpack://ng-universal-demo/../../../../src/material/button/button.html","webpack://ng-universal-demo/../../../../src/material/button/module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple} from '../ripple';\nimport {Platform} from '@angular/cdk/platform';\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {capture: true};\n\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n */\n@Injectable({providedIn: 'root'})\nexport class MatRippleLoader implements OnDestroy {\n  private _document = inject(DOCUMENT, {optional: true});\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n\n  constructor() {\n    this._ngZone.runOutsideAngular(() => {\n      for (const event of rippleInteractionEvents) {\n        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    for (const event of rippleInteractionEvents) {\n      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n    }\n  }\n\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(\n    host: HTMLElement,\n    config: {\n      className?: string;\n      centered?: boolean;\n      disabled?: boolean;\n    },\n  ): void {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, '');\n\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n\n  /** Returns the ripple instance for the given host element. */\n  getRipple(host: HTMLElement): MatRipple | undefined {\n    if ((host as any).matRipple) {\n      return (host as any).matRipple;\n    }\n    return this.createRipple(host);\n  }\n\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host: HTMLElement, disabled: boolean): void {\n    const ripple = (host as any).matRipple as MatRipple | undefined;\n\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.disabled = disabled;\n      return;\n    }\n\n    // Otherwise, set an attribute so we know what the\n    // disabled state should be when the ripple is initialized.\n    if (disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n\n  /** Handles creating and attaching component internals when a component it is initially interacted with. */\n  private _onInteraction = (event: Event) => {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const eventTarget = event.target as HTMLElement;\n\n    // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n\n    const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n    if (element) {\n      this.createRipple(element as HTMLElement);\n    }\n  };\n\n  /** Creates a MatRipple and appends it to the given element. */\n  createRipple(host: HTMLElement): MatRipple | undefined {\n    if (!this._document) {\n      return;\n    }\n\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document!.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName)!);\n    host.append(rippleEl);\n\n    // Create the MatRipple.\n    const ripple = new MatRipple(\n      new ElementRef(rippleEl),\n      this._ngZone,\n      this._platform,\n      this._globalRippleOptions ? this._globalRippleOptions : undefined,\n      this._animationMode ? this._animationMode : undefined,\n    );\n    ripple._isInitialized = true;\n    ripple.trigger = host;\n    ripple.centered = host.hasAttribute(matRippleCentered);\n    ripple.disabled = host.hasAttribute(matRippleDisabled);\n    this.attachRipple(host, ripple);\n    return ripple;\n  }\n\n  attachRipple(host: Element, ripple: MatRipple): void {\n    host.removeAttribute(matRippleUninitialized);\n    (host as any).matRipple = ripple;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterViewInit,\n  booleanAttribute,\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {MatRipple, MatRippleLoader} from '@angular/material/core';\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {attribute: string; mdcClasses: string[]}[] = [\n  {\n    attribute: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    attribute: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    attribute: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    attribute: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    attribute: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab'],\n  },\n  {\n    attribute: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    attribute: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  },\n];\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase implements AfterViewInit, OnDestroy {\n  private readonly _focusMonitor = inject(FocusMonitor);\n\n  /**\n   * Handles the lazy creation of the MatButton ripple.\n   * Used to improve initial load time of large applications.\n   */\n  _rippleLoader: MatRippleLoader = inject(MatRippleLoader);\n\n  /** Whether this button is a FAB. Used to apply the correct class on the ripple. */\n  _isFab = false;\n\n  /**\n   * Reference to the MatRipple instance of the button.\n   * @deprecated Considered an implementation detail. To be removed.\n   * @breaking-change 17.0.0\n   */\n  get ripple(): MatRipple {\n    return this._rippleLoader?.getRipple(this._elementRef.nativeElement)!;\n  }\n  set ripple(v: MatRipple) {\n    this._rippleLoader?.attachRipple(this._elementRef.nativeElement, v);\n  }\n\n  /** Theme color palette of the button */\n  @Input() color?: string | null;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input({transform: booleanAttribute})\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: any) {\n    this._disableRipple = value;\n    this._updateRippleDisabled();\n  }\n  private _disableRipple: boolean = false;\n\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: any) {\n    this._disabled = value;\n    this._updateRippleDisabled();\n  }\n  private _disabled: boolean = false;\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _platform: Platform,\n    public _ngZone: NgZone,\n    public _animationMode?: string,\n  ) {\n    this._rippleLoader?.configureRipple(this._elementRef.nativeElement, {\n      className: 'mat-mdc-button-ripple',\n    });\n\n    const element = this._elementRef.nativeElement;\n    const classList = (element as HTMLElement).classList;\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const {attribute, mdcClasses} of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (element.hasAttribute(attribute)) {\n        classList.add(...mdcClasses);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (_origin) {\n      this._focusMonitor.focusVia(this._elementRef.nativeElement, _origin, options);\n    } else {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n\n  private _updateRippleDisabled(): void {\n    this._rippleLoader?.setDisabled(\n      this._elementRef.nativeElement,\n      this.disableRipple || this.disabled,\n    );\n  }\n}\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  '[attr.disabled]': 'disabled || null',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n  '[attr.aria-disabled]': 'disabled.toString()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase implements OnInit, OnDestroy {\n  @Input({\n    transform: (value: unknown) => {\n      return value == null ? undefined : numberAttribute(value);\n    },\n  })\n  tabIndex: number;\n\n  constructor(elementRef: ElementRef, platform: Platform, ngZone: NgZone, animationMode?: string) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n\n  ngOnInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('click', this._haltDisabledEvents);\n    });\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._elementRef.nativeElement.removeEventListener('click', this._haltDisabledEvents);\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  NgZone,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatAnchorBase, MatButtonBase} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'icon-button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n\n    this._rippleLoader.configureRipple(this._elementRef.nativeElement, {centered: true});\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {\n  constructor(\n    elementRef: ElementRef,\n    platform: Platform,\n    ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, platform, ngZone, animationMode);\n  }\n}\n","<span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span>\n\n<ng-content></ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n","<span\n    class=\"mat-mdc-button-persistent-ripple\"\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-mdc-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton, MatMiniFabAnchor, MatMiniFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n})\nexport class MatButtonModule {}\n"],"names":["eventListenerOptions","capture","rippleInteractionEvents","matRippleUninitialized","matRippleClassName","matRippleCentered","matRippleDisabled","MatRippleLoader","constructor","_document","inject","DOCUMENT","optional","_animationMode","ANIMATION_MODULE_TYPE","_globalRippleOptions","MAT_RIPPLE_GLOBAL_OPTIONS","_platform","Platform","_ngZone","NgZone","_onInteraction","event","target","HTMLElement","element","closest","this","createRipple","runOutsideAngular","addEventListener","ngOnDestroy","removeEventListener","configureRipple","host","config","setAttribute","className","hasAttribute","centered","disabled","getRipple","matRipple","setDisabled","ripple","removeAttribute","querySelector","remove","rippleEl","createElement","classList","add","getAttribute","append","MatRipple","ElementRef","undefined","_isInitialized","trigger","attachRipple","factory","ɵfac","providedIn","HOST_SELECTOR_MDC_CLASS_PAIR","attribute","mdcClasses","MatButtonBase","_rippleLoader","_elementRef","nativeElement","v","disableRipple","_disableRipple","value","_updateRippleDisabled","_disabled","_focusMonitor","FocusMonitor","_isFab","ngAfterViewInit","monitor","stopMonitoring","focus","_origin","options","focusVia","inputs","color","booleanAttribute","features","MatAnchorBase","elementRef","platform","ngZone","animationMode","super","_haltDisabledEvents","preventDefault","stopImmediatePropagation","ngOnInit","tabIndex","numberAttribute","_c0","_c1","_c2","_c3","MatIconButton","i0","i1","selectors","hostVars","hostBindings","rf","ctx","styles","encapsulation","changeDetection","MatIconAnchor","MatButtonModule","MatCommonModule","MatRippleModule"],"sourceRoot":""}