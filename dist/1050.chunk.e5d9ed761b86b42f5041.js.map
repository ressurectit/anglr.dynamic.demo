{"version":3,"file":"1050.chunk.e5d9ed761b86b42f5041.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/syncDataLoader/syncDataLoader.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/syncDataLoader/syncDataLoader.component.ts","webpack://ng-universal-demo/../../../../extensions/src/extensions/setSyncData.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/syncDataLoader/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../src/internal/operators/toArray.ts","webpack://ng-universal-demo/../../../../src/plugins/dataLoader/sync/syncDataLoader.component.ts","webpack://ng-universal-demo/../../../../src/internal/operators/reduce.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {SyncDataLoaderComponentOptions} from './syncDataLoader.options';\n\n/**\n * Sync data loader layout metadata loader\n */\nexport const SyncDataLoaderLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<SyncDataLoaderComponentOptions>> = async () => new (await import('./metadata/syncDataLoader.layoutMetadata')).SyncDataLoaderLayoutEditorMetadata();\n\n/**\n * Sync data loader relations metadata loader\n */\nexport const SyncDataLoaderRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/syncDataLoader.relationsMetadata')).SyncDataLoaderRelationsEditorMetadata();\n\n/**\n * Sync data loader layout designer type loader\n */\nexport const SyncDataLoaderLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/syncDataLoaderDesigner.component')).SyncDataLoaderDesignerSAComponent;","import {Component, ChangeDetectionStrategy, Input, SimpleChanges} from '@angular/core';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, PluginDescription, SyncDataLoaderOptions, SyncDataLoaderSAComponent as GridSyncDataLoader} from '@anglr/grid';\nimport {setSyncData} from '@anglr/grid/extensions';\nimport {PromiseOr, RecursivePartial, nameof} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {first} from 'rxjs';\n\nimport {SyncDataLoaderComponentOptions, SyncDataLoaderRelationsOptions} from './syncDataLoader.options';\nimport {SyncDataLoaderLayoutDesignerTypeLoader, SyncDataLoaderLayoutMetadataLoader, SyncDataLoaderRelationsMetadataLoader} from './syncDataLoader.metadata';\nimport {GridPluginComponent} from '../../interfaces';\n\n/**\n * Component used for displaying sync data loader\n */\n@Component(\n{\n    selector: 'sync-data-loader',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(SyncDataLoaderLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(SyncDataLoaderRelationsMetadataLoader)\n@LayoutEditorMetadata(SyncDataLoaderLayoutMetadataLoader)\nexport class SyncDataLoaderSAComponent extends LayoutComponentBase<SyncDataLoaderComponentOptions> implements GridPluginComponent<GridSyncDataLoader, SyncDataLoaderComponentOptions, SyncDataLoaderOptions>, RelationsComponent<SyncDataLoaderRelationsOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of grid\n     */\n    protected grid: Grid|undefined|null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: SyncDataLoaderRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data that are displayed in grid using sync data loader\n     */\n    @Input()\n    public data: unknown[] = [];\n\n    //######################### public properties - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Description of plugin that will be used in grid\n     */\n    public pluginDescription: PluginDescription<GridSyncDataLoader, RecursivePartial<SyncDataLoaderOptions>> =\n    {\n        instance: null,\n        instanceCallback: null,\n        options:\n        {\n            data: [],\n        },\n        type: GridSyncDataLoader,\n    };\n\n    //######################### public methods - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Sets grid instance to this type\n     * @param grid - Instance of grid\n     */\n    public setGridInstance(grid: Grid): void\n    {\n        this.grid = grid;\n\n        this.setData();\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        if(nameof<SyncDataLoaderSAComponent>('data') in changes)\n        {\n            this.setData();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets data to data loader\n     */\n    protected async setData(): Promise<void>\n    {\n        if(!this.grid)\n        {\n            return;\n        }\n\n        await lastValueFrom(this.grid.initialized.pipe(first(itm => itm)));\n\n        this.grid.execute(setSyncData(this.data));\n    }\n}","import {GridAction, DataLoader, GridPluginType, SyncDataLoaderOptions} from '@anglr/grid';\nimport {isArray} from '@jscrpt/common';\n\n/**\n * Sets data for SyncDataLoader\n * @param data - data that should be replaced\n * @param force - Indication that data should be reloaded \n */\nexport function setSyncData(data: unknown[], force?: boolean): GridAction\n{\n    return grid =>\n    {\n        const dataLoader = grid.getPlugin<DataLoader>(GridPluginType.DataLoader);\n\n        (dataLoader.options as SyncDataLoaderOptions).data = isArray(data) ? data : [];\n        dataLoader.loadData(force);\n    };\n}\n","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {SyncDataLoaderSAComponent} from './syncDataLoader.component';\n\nexport default SyncDataLoaderSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}",null,"import {Component, ChangeDetectionStrategy, Inject, Optional, WritableSignal, signal, Signal} from '@angular/core';\nimport {OrderByDirection} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {from, Observable} from 'rxjs';\nimport {skip, take, toArray} from 'rxjs/operators';\n\nimport {SyncDataLoaderOptions, SyncDataLoader} from './syncDataLoader.interface';\nimport {DataLoaderAbstractComponent} from '../dataLoaderAbstract.component';\nimport {DataResponse, SimpleOrdering} from '../../../interfaces';\nimport {DATA_LOADER_OPTIONS} from '../../../misc/tokens';\nimport {DataLoaderState} from '../../../misc/enums';\n\n/**\n * Default options for sync data loader\n */\nconst defaultOptions: SyncDataLoaderOptions<Record<string, number>, SimpleOrdering> =\n{\n    autoLoadData: true,\n    accumulateData: false,\n    debounceDataCallback: 30,\n    data: [],\n    orderData: (data: Record<string, number>[], ordering?: SimpleOrdering) =>\n    {\n        if(!ordering)\n        {\n            return data;\n        }\n\n        return data.sort((a, b) =>\n        {\n            if(a[ordering.orderBy] < b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? -1 : 1;\n            }\n            else if(a[ordering.orderBy] > b[ordering.orderBy])\n            {\n                return ordering.orderByDirection == OrderByDirection.Ascending ? 1 : -1;\n            }\n\n            return 0;\n        });\n    }\n};\n\n/**\n * Data loader that allows synchronous data loading\n *\n * You must set options before end of sync call of `ngOnInit`, if you set it later you have to disable auto initialization of grid and initialize it manualy\n */\n@Component(\n{\n    selector: 'ng-sync-data-loader',\n    template: '',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SyncDataLoaderSAComponent<TData = unknown, TOrdering = unknown> extends DataLoaderAbstractComponent<SyncDataLoaderOptions<TData, TOrdering>, TOrdering, DataResponse<TData>> implements SyncDataLoader<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Current result of data loader\n     */\n    protected ɵresult: WritableSignal<DataResponse<TData>> = signal(\n    {\n        data: [],\n        totalCount: 0\n    });\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get result(): Signal<DataResponse<TData>>\n    {\n        return this.ɵresult.asReadonly();\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(DATA_LOADER_OPTIONS) @Optional() options?: SyncDataLoaderOptions<TData, TOrdering>)\n    {\n        super(defaultOptions as unknown as SyncDataLoaderOptions<TData, TOrdering>, options);\n    }\n\n    //######################### protected methodes - implements DataLoaderAbstractComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadGridData(force?: boolean): Promise<void>\n    {\n        if(!force && !this.checkChanges())\n        {\n            return;\n        }\n\n        let data = [...this.ɵoptions.data];\n\n        this.ɵstate.set((data && data.length) ? DataLoaderState.DataLoading : DataLoaderState.NoDataLoading);\n\n        if(this.ɵoptions.orderData)\n        {\n            data = this.ɵoptions.orderData(data, this.ordering?.ordering() ?? undefined);\n        }\n\n        const page = this.paging?.page() ?? 1;\n        const itemsPerPage = this.paging?.itemsPerPage() ?? 0;\n\n        data = await lastValueFrom(from(data)\n            .pipe(skip((page - 1) * (isNaN(itemsPerPage) ? 0 : itemsPerPage)),\n                  isNaN(itemsPerPage) ? ((source: Observable<TData>) => source) : take(itemsPerPage),\n                  toArray()));\n\n        this.ɵstate.set((data && data.length) ? DataLoaderState.Loaded : DataLoaderState.NoData);\n\n        this.ɵresult.set(\n        {\n            data: this.ɵoptions.accumulateData ? [...this.ɵresult().data, ...data] : data,\n            totalCount: this.ɵoptions.data.length\n        });\n    }\n}"],"names":["SyncDataLoaderLayoutMetadataLoader","_ref","_asyncToGenerator","SyncDataLoaderLayoutEditorMetadata","apply","arguments","SyncDataLoaderRelationsMetadataLoader","_ref2","SyncDataLoaderRelationsEditorMetadata","SyncDataLoaderLayoutDesignerTypeLoader","_ref3","SyncDataLoaderDesignerSAComponent","SyncDataLoaderSAComponent","LayoutComponentBase","constructor","data","pluginDescription","instance","instanceCallback","options","type","GridSyncDataLoader","setGridInstance","grid","this","setData","onChanges","changes","nameof","_this","lastValueFrom","initialized","pipe","first","itm","execute","dataLoader","getPlugin","GridPluginType","DataLoader","isArray","loadData","force","t","selectors","inputs","standalone","features","i0","decls","vars","template","rf","ctx","styles","changeDetection","__decorate","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","arrReducer","arr","value","push","defaultOptions","autoLoadData","accumulateData","debounceDataCallback","orderData","ordering","sort","a","b","orderBy","orderByDirection","OrderByDirection","Ascending","DataLoaderAbstractComponent","ɵresult","signal","totalCount","result","asReadonly","super","loadGridData","checkChanges","ɵoptions","ɵstate","set","length","DataLoaderState","DataLoading","NoDataLoading","undefined","page","paging","itemsPerPage","from","skip","isNaN","source","take","operate","subscriber","accumulator","seed","scanInternals","reduce","subscribe","Loaded","NoData","DATA_LOADER_OPTIONS"],"sourceRoot":""}