{"version":3,"file":"9831.chunk.9283ec4be7e6cde3d655.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/block.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/block/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\n\n/**\n * Block layout metadata loader\n */\nexport const BlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<BlockComponentOptions>> = async () => new (await import('./metadata/block.layoutMetadata')).BlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {BlockComponentOptions} from './block.options';\nimport {BlockLayoutMetadataLoader} from './block.metadata';\n\n/**\n * Component used for displaying block\n */\n@Component(\n{\n    selector: 'block',\n    templateUrl: 'block.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<BlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorMetadata(BlockLayoutMetadataLoader)\nexport class BlockSAComponent extends LayoutComponentBase<BlockComponentOptions> implements LayoutComponent<BlockComponentOptions>\n{\n}","<ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {BlockSAComponent} from './block.component';\n\nexport default BlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["BlockLayoutMetadataLoader","_ref","BlockLayoutEditorMetadata","apply","arguments","BlockSAComponent","LayoutComponentBase","t","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","BlockSAComponent_ng_template_0_Template","options","content","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","element","this","componentElement","extensionsOptions","constructor","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","create","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","i1","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","metadata"],"sourceRoot":""}