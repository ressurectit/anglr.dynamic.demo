{"version":3,"file":"6272.chunk.5b9f9161cf03ed6bd31e.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleItemsProvider/customComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleTypesProvider/customComponentsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleRelationsProvider/customComponentsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/services/codeExecutor/codeExecutor.service.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        //TODO: add type for return\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n        const scope = await this._componentsRegister.getScope(source.name);\n\n        return {\n            default: type,\n            displayName,\n            scope,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for custom components module items\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleItemsProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        switch(source.name)\n        {\n            case 'componentInputs':\n            {\n                return await import('../../dynamicItems/componentInputs/type');\n            }\n            case 'componentOutputs':\n            {\n                return await import('../../dynamicItems/componentOutputs/type');\n            }\n            default:\n            {\n                return await import('../../dynamicItems/customComponent/type');\n            }\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.getRegisteredComponents();\n\n        if(!types.length)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleRelationsProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        return {\n            default: [\n                'componentInputs',\n                'componentOutputs',\n            ]\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, CustomComponentsDynamicModuleItemsProvider, CustomComponentsDynamicModuleRelationsProvider, CustomComponentsDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package layout components provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic layout module types provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic relations types provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations nodes provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations components provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};","import {Injectable, OnDestroy} from '@angular/core';\nimport {ScopeRegister as RelationsScopeRegister} from '@anglr/dynamic/relations-editor';\nimport {DebounceCall, WithSync} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Service that is used for obtaining existing scopes from layout\n */\n@Injectable()\nexport class ScopeRegister extends RelationsScopeRegister implements OnDestroy\n{\n    //######################### protoected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                protected componentRegister: LayoutComponentsRegister,)\n    {\n        super();\n\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.getScopes()));\n        this.getScopes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets available scopes\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async getScopes(): Promise<void>\n    {\n        this.ɵScopes = [];\n        const types = await this.componentRegister.types;\n\n        for(const type of types)\n        {\n            let scope: string|undefined|null = null;\n\n            if((scope = await this.componentRegister.getScope(type)))\n            {\n                if(this.ɵScopes.indexOf(scope) < 0)\n                {\n                    this.ɵScopes.push(scope);\n                }\n            }\n        }\n\n        this.scopesChangeSubject.next();\n    }\n}","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, ScopeRegister as RelationsScopeRegister, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DefaultDynamicPackage, provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager, CustomComponentsRegister, ScopeRegister} from '../services';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsCustomComponents(): Provider[]\n{\n    return [\n        ...provideLayoutRelations(),\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditor(packages?: DefaultDynamicPackage[]): Provider[]\n{\n    const relationsProviders = provideRelationsEditor([]);\n    relationsProviders.splice(relationsProviders.indexOf(RelationsScopeRegister), 1);\n\n    return [\n        ...provideLayoutEditor(false, packages),\n        ...relationsProviders,\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <ClassProvider>\n        {\n            provide: RelationsScopeRegister,\n            useClass: ScopeRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers that enables use of custom relations components in relations editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorRelationsCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                       customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    return [\n        CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers that enables use of custom layout components in layout editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorLayoutCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                    customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    //TODO: maybe remove first parameter\n\n    return [\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(packages),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>,\n                                       packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n\n    /**\n     * Name of layout component\n     */\n    name: string;\n\n    /**\n     * Scope of layout component\n     */\n    scope: string|undefined;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this.initPromise ??= this.initializeTypes();\n\n        return this.initPromise.then(() =>\n        {\n            return Object.keys(this.definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.displayName ?? undefined;\n    }\n\n    /**\n     * Gets scope of type by its name\n     * @param name - Name of type that scope should be obtained\n     */\n    public async getScope(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.scope;\n    }\n\n    /**\n     * Gets component name of type byt its name\n     * @param name - Name of type that component name should be obtained\n     */\n    public async getComponentName(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.name ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async initializeTypes(): Promise<void>\n    {\n        this.definedTypes = {};\n\n        if(!this.layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this.iteratorSvc.getIteratorFor(this.layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this.loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this.definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n                name: component.metadata.name,\n                scope: component.metadata.scope,\n            };\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {CodeExecutor, RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        CodeExecutor,\n    ];\n}","import {Injectable, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {generateId, Dictionary} from '@jscrpt/common';\n\n/**\n * Class used for executing javascript code and obtaining types from executed javascript code\n */\n@Injectable()\nexport class CodeExecutor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Loaded data cache for relations id\n     */\n    protected loadedDataCache: Dictionary<any> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads data from dynamicaly executed code\n     * @param relationsId - Id of relations for which is data loaded from code\n     * @param code - Code used for obtaining data\n     */\n    public async loadData<TResult>(relationsId: string, code: string): Promise<TResult|null>\n    {\n        if(this.loadedDataCache[relationsId])\n        {\n            return this.loadedDataCache[relationsId];\n        }\n\n        const scriptElement = this.document.createElement('script');\n        const loadHelper = `loadType${generateId(12)}`;\n        let result: TResult|null = null;\n\n        scriptElement.innerText = `\n        (function(exports, loadType, require)\n        {\n            ${code}\n\n            loadType(exports);\n        })({}, ${loadHelper}.loadType, ${loadHelper}.require);`;\n\n        (window as any)[loadHelper] =\n        {\n            loadType: (exp: {default: any}) => result = exp.default ?? null,\n            require: (requireName: string) =>\n            {\n                console.log(requireName);\n\n                return null;\n            }\n        };\n\n        this.document.getElementsByTagName('head')[0].appendChild(scriptElement);\n        delete (window as any)[loadHelper];\n        scriptElement.remove();\n\n        this.loadedDataCache[relationsId] = result;\n\n        return result;\n    }\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n"],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","LayoutComponentsRelationsNodesProvider","_componentsRegister","_logger","tryToGet","source","package","debug","name","type","getType","default","displayName","getDisplayName","scope","getScope","i0","LOGGER","LayoutComponentsRelationsTypesProvider","_loader","types","resultTypes","loadItem","data","push","RELATIONS_NODES_LOADER","CustomComponentsDynamicModuleItemsProvider","CustomComponentsDynamicModuleTypesProvider","getRegisteredComponents","length","CustomComponentsDynamicModuleRelationsProvider","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","ScopeRegister","RelationsScopeRegister","layoutManager","componentRegister","initSubscriptions","Subscription","this","add","layoutChange","subscribe","getScopes","ngOnDestroy","unsubscribe","ɵScopes","indexOf","scopesChangeSubject","next","provideLayoutRelations","provideLayout","provideRelations","provideLayoutRelationsCustomComponents","provideLayoutRelationsEditor","packages","relationsProviders","provideRelationsEditor","splice","provideLayoutEditor","LayoutManager","LayoutComponentsRegister","LayoutComponentsIteratorService","REFRESH_PALETTE_OBSERVABLES","useFactory","deps","provideStaticPackageSource","provideEditorRelationsCustomComponents","layoutRelationsEditorProviders","customComponentRegister","CustomComponentsRegister","provideEditorLayoutCustomComponents","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","__decorate","DebounceCall","WithSync","DynamicLayoutRelationsEditorModule","ngModule","providers","DynamicLayoutEditorModule","DynamicRelationsEditorModule","loader","iteratorSvc","definedTypes","initPromise","initializeTypes","then","Object","keys","undefined","getComponentName","layout","layoutComponents","getIteratorFor","component","metadata","id","LAYOUT_COMPONENTS_LOADER","_layout","_layoutChange","Subject","asObservable","setLayout","provideRelationsEditorWithStatic","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","Optional","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","isBlank","isType","RelationsComponentManager","RelationsManager","RelationsProcessor","CodeExecutor","document","loadedDataCache","loadData","relationsId","code","scriptElement","createElement","loadHelper","generateId","result","innerText","window","loadType","exp","require","requireName","console","log","getElementsByTagName","appendChild","remove","DOCUMENT","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","GoBackModule","DragDropModule","DragDrop","CdkScrollableModule"],"sourceRoot":""}