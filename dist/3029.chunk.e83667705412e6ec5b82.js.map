{"version":3,"file":"3029.chunk.e83667705412e6ec5b82.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/metadata/stackPanel.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/metadata/stackPanel.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Stack panel model for properties editor\n */\nexport class StackPanelModel implements StackPanelComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Horizontal')\n    @LayoutPropertyDescription('Indication whether display stacked elements horizontally')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public horizontal: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Wrap')\n    @LayoutPropertyDescription('Indication whether wrap children if there is not enough space')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public wrap: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public children: LayoutComponentMetadata[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}\n\n/**\n * Stack panel flex extension model for properties editor\n */\nexport class StackPanelFlexExtensionModel implements StackPanelFlexExtensionOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Flex')\n    @LayoutPropertyDescription('Definition of flex behavior')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public flex: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelFlexExtensionOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionModel, StackPanelModel} from './stackPanel.model';\n\n/**\n * Stack panel layout metadata\n */\nexport class StackPanelLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StackPanelComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo =\n    {\n        name: 'Stack',\n        description: 'Layout component that stacks items horizontally or vertically',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: StackPanelModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelModel>(['horizontal', 'wrap'])\n                    ],\n                },\n            ],\n            childPropertiesMetadata:\n            [\n                {\n                    modelType: StackPanelFlexExtensionModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelFlexExtensionModel>(['flex'])\n                    ],\n                },\n            ]\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StackPanelComponentOptions, number]> = (metadata, options, index) =>\n    {\n        options.children ??= [];\n        options.children.splice(index, 0, metadata);\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = () => true;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [StackPanelComponentOptions|undefined|null]> = options => options?.children ?? [];\n\n    /**\n     * @inheritdoc\n     */\n    public isHorizontalDrop?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = options => !!options?.horizontal;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StackPanelComponentOptions]> = (id, options) =>\n    {\n        options.children ??= [];\n        const index = options.children.findIndex(itm => itm.id === id);\n        options.children.splice(index, 1);\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\">\n        <label class=\"properties-control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["StackPanelModel","constructor","value","horizontal","wrap","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","StackPanelFlexExtensionModel","flex","StackPanelLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","childPropertiesMetadata","addDescendant","metadata","options","index","children","splice","canDropMetadata","getDescendants","isHorizontalDrop","removeDescendant","id","findIndex","itm","Object","freeze","LayoutPropertyMetadata","Symbol","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","GenericPropertiesControl","t","standalone","decls","vars","consts","template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","ReactiveFormsModule","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","extractMetadata","cacheId","package","loadItem","metadataType","data","layoutEditorMetadata","warn","metadataData","LAYOUT_COMPONENTS_LOADER","factory","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","FormControl","childType","args","AsFormControlPipe","transform","_valueHash","isBlank"],"sourceRoot":""}