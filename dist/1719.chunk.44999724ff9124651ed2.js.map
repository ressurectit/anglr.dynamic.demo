{"version":3,"file":"1719.chunk.44999724ff9124651ed2.js","mappings":"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","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/node/dataBlockNode.component.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/node/dataBlockNode.component.html","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/metadata/dataBlock.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations node component for data block\n */\n@Component(\n{\n    selector: 'data-block-node',\n    templateUrl: 'dataBlockNode.component.html',\n    styleUrls: ['dataBlockNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationNodeInputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataBlockNodeSAComponent extends RelationsNodeBase implements RelationsNode\n{\n}","<div class=\"node-header\">\n    <div class=\"flex-1\">{{metadata?.id}}</div>\n    <div (click)=\"destroySubject.next()\">x</div>\n</div>\n\n<div class=\"node-content\">\n    <div class=\"inputs margin-right-small\">\n        <div class=\"flex-row\">\n            <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n            <div class=\"margin-left-extra-small\">Data</div>\n        </div>\n    </div>\n\n    <div class=\"outputs margin-left-small\">\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DataBlockNodeSAComponent} from '../node/dataBlockNode.component';\n\n/**\n * Data block relations metadata\n */\nexport class DataBlockRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Data',\n        description: 'Data block - allows displaying data in template',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DataBlockNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, Inject, Optional} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeDestroySubject, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,\n                @Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() destroySubject?: RelationsNodeDestroySubject,)\n    {\n        if(destroySubject)\n        {\n            destroySubject.destroy = this.destroySubject;\n        }\n\n        this.updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}"],"names":["DataBlockNodeSAComponent","RelationsNodeBase","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationNodeInputSAComponent","styles","changeDetection","DataBlockRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","changeDetector","element","destroySubject","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","Subject","zoomLevel","destroy","updatePosition","id","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","updateRelations","onMouseUp","updateInputs","inputsChildren","forEach","input","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","nativeElement","style","left","top","RELATIONS_NODE_DESTROY_SUBJECT","viewQuery","RelationNodeOutputSAComponent","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","ngOnDestroy","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","hostBindings","CommonModule","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target"],"sourceRoot":""}