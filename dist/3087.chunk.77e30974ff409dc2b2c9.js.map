{"version":3,"file":"3087.chunk.77e30974ff409dc2b2c9.js","mappings":"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","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/htmlLanguageModel.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.layoutMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/modules/codeEditor.module.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Html language model for code editor\n */\nexport const HtmlLanguageModel = new LanguageModel('html', 'html', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\n\n//TODO: check all models for \"public\" \n\n/**\n * Html block model for properties editor\n */\nexport class HtmlBlockModel implements HtmlBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    public content: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: HtmlBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {HtmlLanguageModel} from '@anglr/dynamic';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\nimport {HtmlBlockModel} from './htmlBlock.model';\n\n/**\n * Html block layout metadata\n */\nexport class HtmlBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<HtmlBlockComponentOptions> =\n    {\n        name: 'Html block',\n        description: 'Html block - displays html or string',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: HtmlBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<HtmlBlockModel>('content', HtmlLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {CodeEditorComponent} from '../components';\n\n/**\n * Module for code editor stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        CodeEditorComponent,\n    ],\n    exports:\n    [\n        CodeEditorComponent,\n    ]\n})\nexport class CodeEditorModule\n{\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public saveContent(): void\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            // bracketPairColorization: \n            // {\n            //     enabled: true,\n            // },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(() =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel(this.content, this.languageModel.language, Uri.file(`index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {CodeEditorModule} from '@anglr/dynamic';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\n\n//TODO: maybe move into core\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CodeEditorModule,\n        MatDialogModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected content: string|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data.content;\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"content = $event.content\"></code-editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"editor.saveContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\nimport {CodeEditorDialogSAComponent} from '../codeEditorDialog/codeEditorDialog.component';\nimport {CodeEditorDialogData} from '../codeEditorDialog/codeEditorDialog.interface';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    styleUrls: ['codePropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogSAComponent, CodeEditorDialogData, string|null>(CodeEditorDialogSAComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        styleUrls: ['codePropertiesControl.component.css'],\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}","<button type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit {{property}}</span>\n</button>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {Func} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func<string, [editor.IStandaloneCodeEditor]>,)\n    {\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["HtmlLanguageModel","LanguageModel","editor","getModel","getValue","HtmlBlockModel","constructor","value","content","mapValuesToThis","this","HtmlBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","codePropertiesControlFor","Object","freeze","CodeEditorModule","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","CodeEditorComponent","element","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","languageModel","isPresent","updateContent","ngAfterViewInit","createEditor","saveContent","emit","code","compiledCode","ngOnDestroy","dispose","nativeElement","theme","model","lightbulb","enabled","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","language","Uri","extension","setModel","i0","selectors","inputs","outputs","features","decls","vars","template","styles","changeDetection","CodeEditorDialogSAComponent","data","dialog","TITLED_DIALOG_DATA","standalone","consts","_r0","ctx","i2","MatDialogModule","i1","encapsulation","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","super","showCodeEditor","property","result","lastValueFrom","open","title","width","height","form","get","afterClosed","control","FormControl","setValue","CodePropertiesControl","t","InputStringComponent","PropertyTypeControlBase","_changeDetector","_initialized","values","_control","_controlSet","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","val_r1","SelectValueComponent","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","LAYOUT_COMPONENT_TRANSFORM","InjectionToken","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","AsFormControlPipe","transform","_valueHash","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}