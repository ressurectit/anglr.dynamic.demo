{"version":3,"file":"778.chunk.d8c228a575c717f802e5.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleItemsProvider/customComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleTypesProvider/customComponentsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleRelationsProvider/customComponentsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n\n        return {\n            default: type,\n            displayName,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for custom components module items\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleItemsProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        switch(source.name)\n        {\n            case 'componentInputs':\n            {\n                return await import('../../dynamicItems/componentInputs/type');\n            }\n            case 'componentOutputs':\n            {\n                return await import('../../dynamicItems/componentOutputs/type');\n            }\n            default:\n            {\n                return await import('../../dynamicItems/customComponent/type');\n            }\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.getRegisteredComponents();\n\n        if(!types.length)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleRelationsProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        return {\n            default: [\n                'componentInputs',\n                'componentOutputs',\n            ]\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, CustomComponentsDynamicModuleItemsProvider, CustomComponentsDynamicModuleRelationsProvider, CustomComponentsDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package layout components provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic layout module types provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic relations types provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations nodes provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations components provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DefaultDynamicPackage, provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager, CustomComponentsRegister} from '../services';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsCustomComponents(): Provider[]\n{\n    return [\n        ...provideLayoutRelations(),\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditor(packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutEditor(false, packages),\n        ...provideRelationsEditor([]),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers that enables use of custom relations components in relations editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorRelationsCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                       customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    return [\n        CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers that enables use of custom layout components in layout editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorLayoutCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                    customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    //TODO: maybe remove first parameter\n\n    return [\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(packages),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>,\n                                       packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n\n    /**\n     * Name of layout component\n     */\n    name: string;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this.initPromise ??= this.initializeTypes();\n\n        return this.initPromise.then(() =>\n        {\n            return Object.keys(this.definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.displayName ?? undefined;\n    }\n\n    /**\n     * Gets component name of type byt its name\n     * @param name - Name of type that component name should be obtained\n     */\n    public async getComponentName(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.name ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async initializeTypes(): Promise<void>\n    {\n        this.definedTypes = {};\n\n        if(!this.layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this.iteratorSvc.getIteratorFor(this.layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this.loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this.definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n                name: component.metadata.name,\n            };\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","LayoutComponentsRelationsNodesProvider","_componentsRegister","_logger","tryToGet","source","package","debug","name","type","getType","default","displayName","getDisplayName","i0","LOGGER","LayoutComponentsRelationsTypesProvider","_loader","types","resultTypes","loadItem","data","push","RELATIONS_NODES_LOADER","CustomComponentsDynamicModuleItemsProvider","CustomComponentsDynamicModuleTypesProvider","getRegisteredComponents","length","CustomComponentsDynamicModuleRelationsProvider","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideLayoutRelations","provideLayout","provideRelations","provideLayoutRelationsCustomComponents","provideLayoutRelationsEditor","packages","provideLayoutEditor","provideRelationsEditor","LayoutManager","LayoutComponentsRegister","LayoutComponentsIteratorService","REFRESH_PALETTE_OBSERVABLES","useFactory","layoutManager","layoutChange","deps","provideStaticPackageSource","provideEditorRelationsCustomComponents","layoutRelationsEditorProviders","customComponentRegister","CustomComponentsRegister","provideEditorLayoutCustomComponents","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","DynamicLayoutRelationsEditorModule","ngModule","providers","DynamicLayoutEditorModule","DynamicRelationsEditorModule","loader","iteratorSvc","initSubscriptions","Subscription","definedTypes","initPromise","this","add","subscribe","initializeTypes","then","Object","keys","ngOnDestroy","unsubscribe","undefined","getComponentName","layout","layoutComponents","getIteratorFor","component","metadata","id","LAYOUT_COMPONENTS_LOADER","_layout","_layoutChange","Subject","asObservable","setLayout","next","provideRelationsEditorWithStatic","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","Optional","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","isBlank","isType","RelationsComponentManager","RelationsManager","RelationsProcessor","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","GoBackModule"],"sourceRoot":""}