{"version":3,"file":"1001.chunk.bc6884144aa11dc90fdf.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/node/valueNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/node/valueNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/value/metadata/value.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/jsonLanguageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, getJson, JsonLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {ValueRelationsOptions} from '../value.options';\n\n/**\n * Relations node component for value\n */\n@Component(\n{\n    selector: 'value-node',\n    templateUrl: 'valueNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ValueNodeSAComponent extends RelationsNodeBase<ValueRelationsOptions> implements RelationsNode<ValueRelationsOptions>\n{\n//######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const content = isPresent(this.metadata?.relationsOptions?.value) ? JSON.stringify(this.metadata?.relationsOptions?.value, null, 4) : '';\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content,\n                languageModel: JsonLanguageModel,\n\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions)\n        {\n            return;\n        }\n\n        if(isPresent(result))\n        {\n            this.metadata.relationsOptions.value = getJson(result.content);\n            this.history.getNewState();\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"value\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>value</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"value\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"showCodeEditor()\">\n        <span>edit</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {ValueNodeSAComponent} from '../node/valueNode.component';\n\n/**\n * Value relations metadata\n */\nexport class ValueRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Value',\n        description: 'Initial, default value',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = ValueNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeMetadata} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>> = new InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>>('RELATIONS_HISTORY_MANAGER');","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}","import {languages} from 'monaco-editor';\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return 'dist/json.worker.js';\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return 'dist/css.worker.js';\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return 'dist/html.worker.js';\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return 'dist/ts.worker.js';\n        }\n\n        return 'dist/editor.worker.js';\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    styleUrls: ['codeEditor.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"flex-row flex-end margin-top-extra-small\">\n    <button type=\"button\" class=\"btn btn-info margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>ok</span>\n    </button>\n</div>","import {LanguageModel} from './languageModel';\n\n/**\n * Json language model for code editor\n */\nexport const JsonLanguageModel = new LanguageModel('json', 'json', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}",null,"import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}"],"names":["ValueNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","content","isPresent","metadata","relationsOptions","value","JSON","stringify","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","languageModel","JsonLanguageModel","afterClosed","getJson","history","getNewState","i0","selectors","standalone","features","decls","vars","consts","template","ctx","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","ValueRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","InjectionToken","RELATIONS_MODULE_TYPES_PROVIDERS","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_DATA_EXTRACTORS","RELATIONS_NODES_PROVIDERS","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","RELATIONS_HISTORY_MANAGER","defaultExportExtractor","module","logger","localModule","debug","default","addSimpleChange","changes","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","provide","PACKAGE_SOURCES","useValue","packages","packagesChange","NEVER","refresh","multi","jsonString","parse","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","moduleResolution","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","noSemanticValidation","noSyntaxValidation","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","isBlank","initialData","language","Uri","extension","setModel","inputs","outputs","styles","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","LanguageModel","getModel","Observable","noop","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector"],"sourceRoot":""}