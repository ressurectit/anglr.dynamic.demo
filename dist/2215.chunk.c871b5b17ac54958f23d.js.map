{"version":3,"file":"2215.chunk.c871b5b17ac54958f23d.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/misc/classes/queryStringSerializer.ts","webpack://ng-universal-demo/../../../src/misc/utils.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/rest.metadata.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/rest.relations.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/type.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpParams} from '@angular/common/http';\nimport {Dictionary, isBlank, isBoolean, isFunction, isJsObject, isNumber, isString} from '@jscrpt/common';\n\nimport {REST_DATE_API} from '../tokens';\nimport {RestDateApi} from '../../interfaces';\n\n/**\n * Query string serializer used for serializing objects into query string\n */\n@Injectable({providedIn: 'root'})\nexport class QueryStringSerializer<TDate = unknown>\n{\n    //######################### constructor #########################\n    constructor(@Inject(REST_DATE_API) protected _dateApi: RestDateApi<TDate>)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Serializes object into query string\n     * @param obj - Object to be serialized\n     * @param keyPrefix - Key prefix to be used\n     */\n    public serializeObject(obj: Object, keyPrefix: string = ''): string|null\n    {\n        if(!isJsObject(obj))\n        {\n            return null;\n        }\n\n        const queryParams: string[] = [];\n\n        const switchVal = (key: string, val: unknown) =>\n        {\n            //ignore empty values\n            if(isBlank(val) || isFunction(val))\n            {\n                return;\n            }\n            else if(Array.isArray(val))\n            {\n                val.forEach((itm, index) =>\n                {\n                    switchVal(isJsObject(itm) ? `${key}[${index}]` : key, itm);\n                });\n            }\n            //is date\n            else if(this._dateApi.isDate(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${this._dateApi.toString(val)}`);\n            }\n            else if(isString(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${val}`);\n            }\n            else if(isNumber(val) || isBoolean(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${val.toString()}`);\n            }\n            else if(isJsObject(val))\n            {\n                queryParams.push(this.serializeObject(val, `${key}.`)!);\n            }\n        };\n\n        Object.keys(obj).forEach(key =>\n        {\n            const val = (obj as Dictionary)[key];\n\n            switchVal(key, val);\n        });\n\n        return queryParams.join('&');\n    }\n\n    /**\n     * Serializes object into HttpParams object\n     * @param obj - Object to be serialized\n     */\n    public serializeObjectToParams(obj: object): HttpParams|null\n    {\n        const queryString = this.serializeObject(obj);\n\n        if(isBlank(queryString))\n        {\n            return null;\n        }\n\n        return new HttpParams({fromString: queryString});\n    }\n}","import {HttpParams} from '@angular/common/http';\nimport {isPresent, StringDictionary} from '@jscrpt/common';\n\nimport {QueryStringSerializer} from './classes/queryStringSerializer';\nimport {BuildMiddlewaresFn, ParameterTransformFunc, ParamsDataIteratorItem, RestMiddleware, RestMiddlewareRunMethod} from '../interfaces';\nimport type {RESTClientBase} from './classes/restClientBase';\nimport {RestMiddlewareOrderType, RestMiddlewareType} from './types';\nimport {NotType} from './classes/notType';\n\ntype RestClientWithTransform = RESTClientBase&{transformFn: ParameterTransformFunc};\n\n/**\n * Builds and returns array of middleware run functions\n * @param middlewares - Array of set middleware types\n * @param middlewaresOrder - Array of middleware types in order that should be executed\n */\nexport const buildMiddlewares: BuildMiddlewaresFn = function buildMiddlewares(middlewares: RestMiddlewareType<RestMiddleware>[],\n                                                                              middlewaresOrder: RestMiddlewareOrderType<string>[]): RestMiddlewareRunMethod[]\n{\n    const usedMiddlewares: Array<RestMiddlewareType<RestMiddleware>|undefined> = [];\n\n    middlewares\n        .filter(middleware => !isNotType(middleware))\n        .forEach(middleware =>\n        {\n            const type: RestMiddlewareType<RestMiddleware> = getType(middleware);\n            const index = middlewaresOrder.findIndex(itm => itm == type || type.id == itm);\n\n            //middleware does not have defined order\n            if(index < 0)\n            {\n                return;\n            }\n\n            usedMiddlewares[index] = type;\n        });\n\n    //removes not middlewares\n    middlewares\n        .filter(middleware => isNotType(middleware))\n        .forEach(middleware =>\n        {\n            const type: RestMiddlewareType<RestMiddleware> = getType(middleware);\n            const index = middlewaresOrder.findIndex(itm => itm == type || type.id == itm);\n\n            if(index < 0)\n            {\n                return;\n            }\n\n            usedMiddlewares.splice(index, 1, undefined);\n        });\n\n    const runMethods: RestMiddlewareRunMethod[] = [];\n\n    usedMiddlewares.forEach(middleware =>\n    {\n        if(middleware)\n        {\n            runMethods.push(new middleware().run);\n        }\n    });\n\n    return runMethods;\n};\n\n/**\n * Creates NotType from Type, this type will be removed from middlewares\n * @param type - Type that will be set as NotType\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function not(type: RestMiddlewareType<RestMiddleware<any, any, any, any, any>>): RestMiddlewareType<RestMiddleware>\n{\n    return new NotType<RestMiddleware>(type) as unknown as RestMiddlewareType<RestMiddleware>;\n}\n\n/**\n * Gets underlying type for Type and NotType\n * @param type - Type that is going to be used for extraction\n */\nexport function getType<TType extends RestMiddleware>(type: RestMiddlewareType<TType>): RestMiddlewareType<TType>\n{\n    if(type instanceof NotType)\n    {\n        return type.ɵtype;\n    }\n\n    return type;\n}\n\n/**\n * Tests whether is provided type NotType\n * @param type - Type to be tested for NotType\n */\nexport function isNotType<TType extends RestMiddleware>(type: RestMiddlewareType<TType>): boolean\n{\n    return type instanceof NotType;\n}\n\n/**\n * Handles query param and fills params dictionary\n * @param data - Data for creating query param\n * @param params - Params where should be new value placed\n * @param args - Array of all arguments passed to handled function\n */\nexport async function handleQueryParam(data: ParamsDataIteratorItem, params: StringDictionary, args: unknown[]): Promise<void>\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = await (data as unknown as RestClientWithTransform).transformFn(data.value, ...args);\n    }\n\n    // if the value is a instance of Object, we stringify it\n    if (data.value instanceof Object)\n    {\n        data.value = JSON.stringify(data.value);\n    }\n\n    //only non null and non undefined values\n    if(isPresent(data.value))\n    {\n        params[data.key] = data.value as string;\n    }\n}\n\n/**\n * Handles header param and fills headers dictionary\n * @param data - Data for creating header param\n * @param headers - Params where should be new value placed\n * @param args - Array of all arguments passed to handled function\n */\nexport async function handleHeaderParam(data: ParamsDataIteratorItem, headers: StringDictionary, args: unknown[]): Promise<void>\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = await (data as unknown as RestClientWithTransform).transformFn(data.value, ...args);\n    }\n\n    //only non null and non undefined values\n    if(isPresent(data.value))\n    {\n        headers[data.key] = data.value as string;\n    }\n}\n\n/**\n * Handles path param and return updated url\n * @param data - Data for creating path param\n * @param url - Current url to be updated\n * @param args - Array of all arguments passed to handled function\n */\nexport async function handlePathParam(data: ParamsDataIteratorItem, url: string, args: unknown[]): Promise<string>\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = await (data as unknown as RestClientWithTransform).transformFn(data.value, ...args);\n    }\n\n    return url.replace('{' + data.key + '}', (data.value as string) ?? '');\n}\n\n/**\n * Handles query object param and fills serialized query string array\n * @param data - Data for creating query object param\n * @param queryStrings - Array of query serialized query strings\n * @param querySerializer - Serializer for query object\n * @param args - Array of all arguments passed to handled function\n */\nexport async function handleQueryObjectParam(data: ParamsDataIteratorItem, queryStrings: string[], querySerializer: QueryStringSerializer, args: unknown[]): Promise<void>\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = await (data as unknown as RestClientWithTransform).transformFn(data.value, ...args);\n    }\n\n    const serializedObj = querySerializer.serializeObject((data.value as object));\n\n    if(serializedObj)\n    {\n        queryStrings.push(serializedObj);\n    }\n}\n\n/**\n * Merges serialized query objects data with existing http params\n * @param queryStrings - Serialized query objects data\n * @param requestParams - Existing http params to be merged with\n */\nexport function mergeQueryObjectParamsWithHttpParams(queryStrings: string[], requestParams: HttpParams): HttpParams\n{\n    const queryString = queryStrings.join('&');\n    const params: HttpParams = new HttpParams({fromString: queryString});\n\n    params.keys().forEach(key =>\n    {\n        const newValues = params.getAll(key);\n\n        if(newValues)\n        {\n            newValues.forEach((value, index) =>\n            {\n                //first item, set\n                if(!index)\n                {\n                    requestParams = requestParams.set(key, value);\n                }\n                //rest append\n                else\n                {\n                    requestParams = requestParams.append(key, value);\n                }\n            });\n        }\n    });\n\n    return requestParams;\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n","import {Injector} from '@angular/core';\nimport {HttpClient, HttpEventType, HttpParams, HttpRequest} from '@angular/common/http';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {LOGGER, Logger, ProgressIndicatorService} from '@anglr/common';\nimport {handleHeaderParam, handlePathParam, handleQueryObjectParam, handleQueryParam, mergeQueryObjectParamsWithHttpParams, QueryStringSerializer} from '@anglr/rest';\nimport {isBlank, isEmptyObject, StringDictionary} from '@jscrpt/common';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY, Subscription} from 'rxjs';\n\nimport {RestRelationsMetadataLoader} from './rest.metadata';\nimport {RestRelationsOptions} from './rest.options';\n\n//TODO: add required to rest param\n\n/**\n * Rest relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RestRelationsMetadataLoader)\nexport class RestRelations implements RelationsComponent<RestRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RestRelationsOptions|undefined|null;\n\n    /**\n     * Instance of http client\n     */\n    protected http: HttpClient;\n\n    /**\n     * Instance of logger\n     */\n    protected logger: Logger;\n\n    /**\n     * Instance of query string serializer\n     */\n    protected queryStringSerializer: QueryStringSerializer;\n\n    /**\n     * Subscription for running request\n     */\n    protected runningRequestSubscription: Subscription|undefined|null;\n\n    /**\n     * Service used for handling progress indicator\n     */\n    protected progressIndicator: ProgressIndicatorService;\n\n    /**\n     * Indication whether there is null or undefined required param\n     */\n    protected emptyParam: boolean[] = [];\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RestRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RestRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    @DynamicOutput()\n    public success: unknown;\n\n    /**\n     * Error output for rest result\n     */\n    @DynamicOutput()\n    public error: unknown;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.http = injector.get(HttpClient);\n        this.logger = injector.get(LOGGER);\n        this.queryStringSerializer = injector.get(QueryStringSerializer);\n        this.progressIndicator = injector.get(ProgressIndicatorService);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(): void\n    {\n        this.makeRequest();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n            {\n                for(const index in this.relationsOptions.params)\n                {\n                    const param = this.relationsOptions.params[index];\n                    this.emptyParam.push(true);\n\n                    if(param.configurable && param.name)\n                    {\n                        Object.defineProperty(this,\n                                              param.name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: value =>\n                                                  {\n                                                      param.value = value;\n\n                                                      this.emptyParam[index] = isBlank(value);\n                                                  },\n                                                  get: () => param.value\n                                              });\n                    }\n                }\n            }\n        }\n\n        if(this.relationsOptions?.runImmediately)\n        {\n            this.makeRequest();\n        }\n    }\n\n    /**\n     * Make http request\n     */\n    protected async makeRequest(): Promise<void>\n    {\n        //on empty param\n        if(this.emptyParam.find(itm => itm))\n        {\n            return;\n        }\n\n        if(this.runningRequestSubscription)\n        {\n            this.runningRequestSubscription.unsubscribe();\n            this.progressIndicator.hideProgress();\n        }\n\n        if(!this.relationsOptions ||\n           !this.relationsOptions.method ||\n           !this.relationsOptions.url)\n        {\n            this.logger.warn('RestRelations: missing options for craeting http request {{@data}}', {data: this.relationsOptions});\n\n            return;\n        }\n\n        let body: any = null;\n        let url: string = this.relationsOptions.url;\n        const params: StringDictionary = {};\n        const headers: StringDictionary = {};\n        const queryStrings: string[] = [];\n\n        if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n        {\n            for(const param of this.relationsOptions.params)\n            {\n                if(!param.name)\n                {\n                    continue;\n                }\n\n                const data =\n                {\n                    index: 0,\n                    key: param.name,\n                    value: param.value,\n                    transformFn: null\n                };\n\n                switch(param.type)\n                {\n                    case 'PATH':\n                    {\n                        url = await handlePathParam(data, url, []);\n\n                        break;\n                    }\n                    case 'BODY':\n                    {\n                        body = param.value;\n\n                        break;\n                    }\n                    case 'QUERY':\n                    {\n                        await handleQueryParam(data, params, []);\n\n                        break;\n                    }\n                    case 'QUERY OBJECT':\n                    {\n                        await handleQueryObjectParam(data, queryStrings, this.queryStringSerializer, []);\n\n                        break;\n                    }\n                    case 'HEADER':\n                    {\n                        await handleHeaderParam(data, headers, []);\n\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        let request: HttpRequest<any> = new HttpRequest(this.relationsOptions.method,\n                                                        url,\n                                                        body,\n                                                        {\n                                                            reportProgress: false,\n                                                            responseType: 'json',\n                                                        });\n\n        // query params\n        if(!isEmptyObject(params))\n        {\n            request = request.clone(\n            {\n                setParams: params\n            });\n        }\n\n        // header params\n        if(!isEmptyObject(headers))\n        {\n            request = request.clone(\n            {\n                setHeaders: headers\n            });\n        }\n\n        // query object params\n        if(queryStrings.length)\n        {\n            const requestParams: HttpParams = mergeQueryObjectParamsWithHttpParams(queryStrings, request.params);\n\n            request = request.clone(\n            {\n                params: requestParams\n            });\n        }\n\n        this.runningRequestSubscription = this.http.request(request)\n            .pipe(catchError(error =>\n            {\n                //TODO: proper handling\n                this.success = null;\n                this.error = error;\n\n                return EMPTY;\n            }))\n            .subscribe(result =>\n            {\n                if(result.type == HttpEventType.Response)\n                {\n                    if(result.status >= 200 && result.status <= 300)\n                    {\n                        this.success = result.body;\n                        this.error = null;\n\n                        return;\n                    }\n                }\n            });\n    }\n}","import {RestRelations} from './rest.relations';\n\nexport default RestRelations;"],"names":["QueryStringSerializer","_dateApi","constructor","serializeObject","obj","keyPrefix","isJsObject","queryParams","switchVal","key","val","isBlank","isFunction","Array","isArray","forEach","itm","index","this","isDate","push","toString","isString","isNumber","isBoolean","Object","keys","join","serializeObjectToParams","queryString","HttpParams","fromString","REST_DATE_API","factory","ɵfac","providedIn","handleQueryParam","_x","_x2","_x3","_handleQueryParam","apply","arguments","_asyncToGenerator","data","params","args","transformFn","value","JSON","stringify","isPresent","handleHeaderParam","_x4","_x5","_x6","_handleHeaderParam","headers","handlePathParam","_x7","_x8","_x9","_handlePathParam","url","replace","handleQueryObjectParam","_x10","_x11","_x12","_x13","_handleQueryObjectParam","queryStrings","querySerializer","serializedObj","RestRelationsMetadataLoader","_ref","RestRelationsEditorMetadata","RestRelations","relationsOptions","ɵRelationsOptions","initialize","injector","emptyParam","http","get","HttpClient","logger","LOGGER","queryStringSerializer","progressIndicator","ProgressIndicatorService","dynamicOnChanges","makeRequest","invalidateVisuals","param","configurable","name","defineProperty","enumerable","set","runImmediately","_this","find","runningRequestSubscription","unsubscribe","hideProgress","method","warn","body","type","request","HttpRequest","reportProgress","responseType","isEmptyObject","clone","setParams","setHeaders","length","requestParams","newValues","getAll","append","mergeQueryObjectParamsWithHttpParams","pipe","catchError","error","success","EMPTY","subscribe","result","HttpEventType","Response","status","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}