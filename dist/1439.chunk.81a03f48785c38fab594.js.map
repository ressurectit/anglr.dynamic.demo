{"version":3,"file":"1439.chunk.81a03f48785c38fab594.js","mappings":"uJAQM,SAAUA,EAAqBC,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBAC1G,C,wbCAM,MAAgBE,EAwBlB,WAAcC,GAEV,OAAOC,KAAKC,gBAChB,CAKA,qBAAcC,GAEV,OAAOF,KAAKG,OAChB,CAUAC,WAAAA,CAAsBC,EACAJ,EACAK,EAC4BC,GAH5B,KAAAF,eAAAA,EACA,KAAAJ,iBAAAA,EACA,KAAAK,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAC,WAA+C,GAK/C,KAAAC,aAAuB,EAKvB,KAAAC,WAAqB,CAiC/B,CAOOC,WAAAA,GAEH,IAAGX,KAAKU,UAAR,CAKAV,KAAKU,WAAY,EAEjB,IAAI,MAAME,KAAOZ,KAAKQ,WAElBI,EAAIC,UAGRb,KAAKc,W,CACT,CAOaC,QAAAA,GAAQ,IAAAC,EAAA,YAAAC,GAAC,YAElB,GAAGD,EAAKP,YAEJ,OAGJO,EAAKP,aAAc,EACnB,MAAMP,EAAoBc,EAAKd,kBAK/B,SAHMc,EAAKE,eACLF,EAAKG,eAERjB,EAEC,IAAI,MAAMkB,KAAaJ,EAAKR,iBAElBY,EAAUC,WAAWL,EAAKV,SAAUU,EAAKjB,QAASiB,SAI1DA,EAAKM,WAAY,GArBNL,EAsBrB,CAKaM,WAAAA,CAAYC,GAAsB,IAAAC,EAAA,YAAAR,GAAA,YAG3C,IAAGS,EAAAA,EAAAA,IAAsC,aAAcF,EACvD,OACUC,EAAKN,eAEX,MAAMjB,EAAoBuB,EAAKvB,kBAG/B,GAAGA,EAEC,IAAI,MAAMkB,KAAaK,EAAKjB,iBAElBY,EAAUO,cAAczB,GAItC,IAAIuB,EAAKhB,YAEL,aAGEgB,EAAKG,iB,QAGRJ,GAAQE,EAAAA,EAAAA,IAAsC,aAEjDG,EAAAA,EAAAA,IAAcL,IAEdC,EAAKK,UAAUN,EAClB,GA/B0CP,EAgC/C,CAKOc,kBAAAA,CAAmBvB,GAEtBR,KAAKQ,WAAaA,CACtB,CAKOwB,iBAAAA,GAEHhC,KAAKK,eAAe4B,eACxB,CAOUf,MAAAA,GAEV,CAKUI,SAAAA,GAEV,CAKUM,eAAAA,GAEV,CAMUE,SAAAA,CAAUI,GAEpB,CAKUf,YAAAA,GAEV,CAKUL,SAAAA,GAEV,E,iCAvMkBhB,GAAmBqC,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBC,EAAAA,GAAM,K,kBAhDRtC,EAAmBuC,SAAA,CAAAF,EAAAA,I,8MCHlC,MAAMG,EAAiC,e,EAAAC,G,EAAyF,mBAAY,WAAW,0DAAmDC,kCAAmC,E,+KAAA,kBAAtM,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,+CCYvC,IAAMC,EAAN,cAAuC7C,EAAAA,EAOvBqB,YAAAA,GAEfnB,KAAKC,iBAAiB2C,cAAcC,UAAY7C,KAAKG,SAAS2C,SAAW,EAC7E,G,wDAVSH,KAAwBI,GAAxBJ,EAAwB,G,qBAAxBA,EAAwBK,UAAA,sBAAAC,YAAA,EAAAZ,SAAA,CAAAF,EAAAA,EAAAA,EAAAA,GAAAe,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAC,OAAA,sCAAAC,gBAAA,IAAxBb,GAAwBc,EAAAA,EAAAA,IAAA,EADpC9D,EAAAA,EAAAA,GAAqB2C,IACTK,GClBb,S","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/richTextBlock.metadata.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/richTextBlock.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/type.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockComponentOptions} from './richTextBlock.options';\n\n/**\n * Rich text block layout metadata loader\n */\nexport const RichTextBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>> = async () => new (await import('./metadata/richTextBlock.layoutMetadata')).RichTextBlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {RichTextBlockComponentOptions} from './richTextBlock.options';\nimport {RichTextBlockLayoutMetadataLoader} from './richTextBlock.metadata';\n\n/**\n * Component used for displaying rich text block\n */\n@Component(\n{\n    selector: 'rich-text-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(RichTextBlockLayoutMetadataLoader)\nexport class RichTextBlockSAComponent extends LayoutComponentBase<RichTextBlockComponentOptions> implements LayoutComponent<RichTextBlockComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.componentElement.nativeElement.innerHTML = this.options?.content ?? '';\n    }\n}","import {RichTextBlockSAComponent} from './richTextBlock.component';\n\nexport default RichTextBlockSAComponent;"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","element","this","componentElement","extensionsOptions","options","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","_asyncToGenerator","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","i0","LOGGER","features","RichTextBlockLayoutMetadataLoader","_ref","RichTextBlockLayoutEditorMetadata","apply","arguments","RichTextBlockSAComponent","nativeElement","innerHTML","content","t","selectors","standalone","decls","vars","template","rf","ctx","styles","changeDetection","__decorate"],"sourceRoot":""}