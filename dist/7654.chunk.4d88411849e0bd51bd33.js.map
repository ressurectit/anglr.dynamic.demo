{"version":3,"file":"7654.chunk.4d88411849e0bd51bd33.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/../css-components/src/misc/utils.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts"],"sourcesContent":["var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t1934,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/css-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('@anglr/dynamic/css-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout css subpackage\n */\nexport function provideCssLayout(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor css subpackage\n */\nexport function provideCssLayoutEditor(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('css-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor css subpackage\n */\nexport function provideCssLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations css subpackage\n */\nexport function provideCssLayoutRelations(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef, Optional} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndBusService} from '../../modules';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        DndBusService,\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        PackageManagerModule,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <package-manager></package-manager>\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1 layout-content thin-scrollbar\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true, packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     * @param designerLayout - Indication whether provide extractor for layout designer types\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(designerLayout: boolean = true,\n                                packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(designerLayout, packages),\n            ]\n        };\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default package layout components provider\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","package","debug","name","i0","LOGGER","factory","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideCssLayout","provideCssLayoutEditor","provideStaticPackageSource","provideCssLayoutRelationsEditor","provideCssLayoutRelations","DemoLayoutPackageManager","PackageManager","super","LayoutEditorSAComponent","history","changeDetector","hotkeys","initSubscriptions","Subscription","metadata","init","ngOnInit","this","add","pop","subscribe","detectChanges","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","ngOnDestroy","unsubscribe","destroy","LAYOUT_HISTORY_MANAGER","selectors","inputs","standalone","features","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","DndBusService","decls","vars","consts","template","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","PackageManagerModule","i2","MatTabsModule","i3","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","warn","DefaultDynamicModuleTypesProvider","layoutDesignerTypeExtractor","logger","def","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","data","layoutEditorDesignerType","type","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENT_TRANSFORM","useValue","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","Symbol","provideLayoutEditor","designerLayout","packages","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","pkg","isBlank","Array","isArray","DynamicLayoutEditorModule","ngModule","providers","DynamicLayoutModule","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","clear","injector","customInjector","layoutComponentType","loadItem","createComponent","Ignore","ThrowError","usedInjector","Injector","parent","LAYOUT_COMPONENT_CHILD_EXTENSIONS","registerExtensions","itm","addSimpleChange","invalidateVisuals","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","outputs","exportAs","DEFAULT_LAYOUT_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","isLayoutComponentDef","isType","some","extensionsObject","isJsObject"],"sourceRoot":""}