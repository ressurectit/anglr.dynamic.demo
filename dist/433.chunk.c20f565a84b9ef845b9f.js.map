{"version":3,"file":"433.chunk.c20f565a84b9ef845b9f.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../basic-components/src/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/type.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/extensions/stackPanelFlex.extension.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata loader\n */\nexport const StackPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>> = async () => new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponentRendererSADirective, StyledLayoutComponent, StyledLayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadataLoader} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styleUrls: ['stackPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StackPanelLayoutMetadataLoader)\nexport class StackPanelSAComponent extends StyledLayoutComponentBase<StackPanelComponentOptions> implements StyledLayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _optionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        style.flexDirection = this._options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this._options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","\nimport {StackPanelFlexExtension} from './extensions';\nimport {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;\n\nexport const childExtensions = [StackPanelFlexExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Child extension that applies flex styling to child\n */\nexport class StackPanelFlexExtension implements DynamicItemExtension\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension data\n     */\n    protected _options?: StackPanelFlexExtensionOptions;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(injector: Injector, element: ElementRef<HTMLElement>, options: StackPanelFlexExtensionOptions): void\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._options = options;\n\n        this.optionsChange(this._options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public optionsChange(options: StackPanelFlexExtensionOptions): void\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        if(isPresent(options.flex))\n        {\n            const style = this._element?.nativeElement.style;\n\n            if(style && this._options)\n            {\n                style.flex = this._options.flex ?? '';\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, Type, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: Type<DynamicItemExtension>[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this.component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm()) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm()) ?? [],\n                ]);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS, DYNAMIC_ITEM_EXTENSIONS_EXTRACTORS} from '../../misc/tokens';\nimport {DynamicItemExtensionsExtractor, DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(DYNAMIC_ITEM_EXTENSIONS_EXTRACTORS) protected _extensionsExtractors: DynamicItemExtensionsExtractor[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n\n        //extensions extractors is not an array\n        if(!Array.isArray(this._extensionsExtractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extensions extractors!');\n\n            this._extensionsExtractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        let result: DynamicItemType<TType>|null = null;\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                this._cachedDynamicItems[cacheId] = result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                break;\n            }\n        }\n\n        if(!result)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extensions extractors, return result from first that returns non null value\n        for(const extractor of this._extensionsExtractors)\n        {\n            const extensions = extractor.tryToExtract(dynamicModule);\n\n            if(extensions)\n            {\n                result.extensions = extensions.extensions;\n                result.childExtensions = extensions.childExtensions;\n\n                break;\n            }\n        }\n\n        return result;\n    }\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["StackPanelLayoutMetadataLoader","StackPanelLayoutEditorMetadata","i0","StackPanelSAComponent","StyledLayoutComponentBase","_optionsSet","this","_setStyles","style","_element","nativeElement","flexDirection","_options","horizontal","flexWrap","wrap","t","selectors","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","childExtensions","constructor","_initialized","initialize","injector","element","options","_injector","optionsChange","isPresent","flex","destroy","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_metadataTransformer","_logger","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","component","instance","componentRef","ngOnChanges","changes","debug","id","ngOnDestroy","clear","nameof","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","type","next","registerExtensions","map","itm","extensions","resolvePromiseOr","invalidateVisuals","designer","LAYOUT_COMPONENT_TRANSFORM","LOGGER","inputs","outputs","exportAs","DynamicItemLoader","_providers","_extractors","_extensionsExtractors","_cachedDynamicItems","Array","isArray","error","source","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","tryToGet","result","extractor","dynamicItemType","tryToExtract","isType","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS","DYNAMIC_ITEM_EXTENSIONS_EXTRACTORS","factory","providedIn","value","Promise"],"sourceRoot":""}