{"version":3,"file":"3833.chunk.699e5a0582574b3ed975.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/pipes/control/control.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/checkbox/checkbox.metadata.ts","webpack://ng-universal-demo/../material-components/src/checkbox/checkbox.component.ts","webpack://ng-universal-demo/../material-components/src/checkbox/checkbox.component.html","webpack://ng-universal-demo/../material-components/src/checkbox/type.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions> extends LayoutComponentBase<TOptions>\n{\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _control?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","export enum FormComponentControlType\n{\n    FormControl,\n    FormArray,\n    FormGroup,\n}\n","import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FormComponentControlType} from '../../misc/enums';\n\n/**\n * Transforms control name to FormControl|FormArray|FormGroup\n */\n@Pipe({name: 'formComponentControl', standalone: true})\nexport class FormComponentControlSAPipe implements PipeTransform\n{\n    constructor(@Inject(LOGGER) protected _logger: Logger,)\n    {}\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms control name to FormControl|FormArray|FormGroup\n     */\n    public transform(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl): AbstractControl\n    {\n        if (!parentControl ||\n            !controlName)\n        {\n            return this._getControlForType(defaultControlType);\n        }\n\n        const control = parentControl.get(controlName);\n\n        if (!control)\n        {\n            this._logger?.warn('FormComponentControlSAPipe: Unable to find control with name {@name}', {name: controlName});\n        }\n\n        return control ?? this._getControlForType(defaultControlType);\n    }\n\n    //######################### private methods ########################\n\n    /**\n     * Generate dummy abstract control of specified type\n     * @param type \n     * @returns \n     */\n    private _getControlForType(type: FormComponentControlType): FormControl|FormArray|FormGroup\n    {\n        switch (type)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray<any>([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options used for rendering this component\n     */\n    protected _options: TOptions|undefined|null;\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this._options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get options(): TOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: TOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._optionsSet();\n\n        const extensionsOptions = this.extensionsOptions;\n\n        if(extensionsOptions)\n        {\n            for(const ext of this._extensions)\n            {\n                ext.optionsChange(extensionsOptions);\n            }\n        }\n    }\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(options: TOptions|undefined|null): Promise<void>\n    {\n        if(!options)\n        {\n            return;\n        }\n\n        this.options = options;\n\n        const extensionsOptions = this.extensionsOptions;\n\n        if(extensionsOptions)\n        {\n            for(const ext of this._extensions)\n            {\n                ext.initialize(this._injector, this.element, extensionsOptions);\n            }\n        }\n    }\n\n    /**\n     * Registers extensions for component\n     * @param extensions - Array of extensions that should be added to component\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Method that is called when options are set, allows register custom code that is called when options are changing\n     */\n    protected _optionsSet(): void\n    {\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Child extension that applies common component styling to child\n */\nexport class ComponentStylingExtension implements DynamicItemExtension\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension data\n     */\n    protected _options?: ComponentStylingOptions;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(injector: Injector, element: ElementRef<HTMLElement>, options: ComponentStylingOptions): void\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._options = options;\n\n        this.optionsChange(this._options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public optionsChange(options: ComponentStylingOptions): void\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        const style = this._element?.nativeElement.style;\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Material checkbox layout metadata loader\n */\nexport const MaterialCheckboxLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialCheckboxComponentOptions>> = async () => new (await import('./metadata/checkbox.layoutMetadata')).MaterialCheckboxLayoutEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\n\nimport {MaterialCheckboxLayoutMetadataLoader} from './checkbox.metadata';\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Component used for displaying material checkbox\n */\n@Component(\n{\n    selector: 'material-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatCheckboxModule,\n        ReactiveFormsModule,\n    ]\n})\n@LayoutEditorMetadata(MaterialCheckboxLayoutMetadataLoader)\nexport class MaterialCheckboxSAComponent extends FormComponentBase<MaterialCheckboxComponentOptions> implements FormComponent<MaterialCheckboxComponentOptions>\n{}","<mat-checkbox [formControl]=\"options?.controlName|formComponentControl:_control|asFormControl|asRequired\">{{options?.label}}</mat-checkbox>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialCheckboxSAComponent} from './checkbox.component';\n\n\nexport default MaterialCheckboxSAComponent;\n\nexport const extensions = [ComponentStylingExtension];"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_control","_logger","super","i0","FORM_COMPONENT_CONTROL","LOGGER","features","InjectionToken","FormComponentControlType","FormComponentControlSAPipe","transform","controlName","parentControl","defaultControlType","FormControl","this","_getControlForType","control","get","warn","name","type","FormArray","FormGroup","pure","standalone","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","_extensions","element","extensionsOptions","_options","options","value","_optionsSet","ext","optionsChange","ngOnDestroy","destroy","initialize","registerExtensions","extensions","invalidateVisuals","detectChanges","ComponentStylingExtension","_initialized","injector","style","nativeElement","isPresent","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialCheckboxLayoutMetadataLoader","MaterialCheckboxLayoutEditorMetadata","MaterialCheckboxSAComponent","t","selectors","decls","vars","consts","template","FormPipesModule","i1","CastPipesModule","i2","MatCheckboxModule","i3","ReactiveFormsModule","i4","styles","changeDetection"],"sourceRoot":""}