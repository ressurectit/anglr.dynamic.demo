{"version":3,"file":"309.chunk.da6f063f98b175bbde42.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../src/rest/queryStringSerializer.ts","webpack://ng-universal-demo/../../../src/rest/utils.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/rest.metadata.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/rest.relations.ts","webpack://ng-universal-demo/../rest-components/src/dynamicItems/rest/type.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpParams} from '@angular/common/http';\nimport {Dictionary, isBlank, isBoolean, isFunction, isJsObject, isNumber, isString} from '@jscrpt/common';\n\nimport {RestDateApi} from './rest.interface';\nimport {REST_DATE_API} from './tokens';\n\n/**\n * Query string serializer used for serializing objects into query string\n */\n@Injectable({providedIn: 'root'})\nexport class QueryStringSerializer<TDate = any>\n{\n    //######################### constructor #########################\n    constructor(@Inject(REST_DATE_API) protected _dateApi: RestDateApi<TDate>)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Serializes object into query string\n     * @param obj - Object to be serialized\n     * @param keyPrefix - Key prefix to be used\n     */\n    public serializeObject(obj: Object, keyPrefix: string = ''): string|null\n    {\n        if(!isJsObject(obj))\n        {\n            return null;\n        }\n\n        const queryParams: string[] = [];\n\n        const switchVal = (key: string, val: any) =>\n        {\n            //ignore empty values\n            if(isBlank(val) || isFunction(val))\n            {\n                return;\n            }\n            else if(Array.isArray(val))\n            {\n                val.forEach((itm, index) =>\n                {\n                    switchVal(isJsObject(itm) ? `${key}[${index}]` : key, itm);\n                });\n            }\n            //is date\n            else if(this._dateApi.isDate(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${this._dateApi.toString(val)}`);\n            }\n            else if(isString(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${val}`);\n            }\n            else if(isNumber(val) || isBoolean(val))\n            {\n                queryParams.push(`${keyPrefix}${key}=${val.toString()}`);\n            }\n            else if(isJsObject(val))\n            {\n                queryParams.push(this.serializeObject(val, `${key}.`)!);\n            }\n        };\n\n        Object.keys(obj).forEach(key =>\n        {\n            const val = (obj as Dictionary)[key];\n\n            switchVal(key, val);\n        });\n\n        return queryParams.join('&');\n    }\n\n    /**\n     * Serializes object into HttpParams object\n     * @param obj - Object to be serialized\n     */\n    public serializeObjectToParams(obj: object): HttpParams|null\n    {\n        const queryString = this.serializeObject(obj);\n\n        if(isBlank(queryString))\n        {\n            return null;\n        }\n\n        return new HttpParams({fromString: queryString});\n    }\n}","import {HttpParams} from '@angular/common/http';\nimport {StringDictionary} from '@jscrpt/common';\n\nimport {ParameterTransformFunc, RESTClient} from './common';\nimport {ParamsDataIteratorItem} from './paramsData.iterator';\nimport {QueryStringSerializer} from './queryStringSerializer';\nimport {RestMiddleware, RestMiddlewareRunMethod, NotType, BuildMiddlewaresFn, RestMiddlewareType, RestMiddlewareOrderType} from './rest.interface';\n\ntype RestClientWithTransform = RESTClient&{transformFn: ParameterTransformFunc};\n\n/**\n * Builds and returns array of middleware run functions\n * @param middlewares - Array of set middleware types\n * @param middlewaresOrder - Array of middleware types in order that should be executed\n */\nexport const buildMiddlewares: BuildMiddlewaresFn = function buildMiddlewares(middlewares: RestMiddlewareType<RestMiddleware>[],\n                                                                              middlewaresOrder: RestMiddlewareOrderType<string>[]): RestMiddlewareRunMethod[]\n{\n    const usedMiddlewares: RestMiddlewareType<RestMiddleware>[] = [];\n\n    middlewares\n        .filter(middleware => !isNotType(middleware))\n        .forEach(middleware =>\n        {\n            const type: RestMiddlewareType<RestMiddleware> = getType(middleware);\n            const index = middlewaresOrder.findIndex(itm => itm == type || type.id == itm);\n\n            //middleware does not have defined order\n            if(index < 0)\n            {\n                return;\n            }\n\n            usedMiddlewares[index] = type;\n        });\n\n    //removes not middlewares\n    middlewares\n        .filter(middleware => isNotType(middleware))\n        .forEach(middleware =>\n        {\n            const type: RestMiddlewareType<RestMiddleware> = getType(middleware);\n            const index = middlewaresOrder.findIndex(itm => itm == type || type.id == itm);\n\n            if(index < 0)\n            {\n                return;\n            }\n\n            usedMiddlewares.splice(index, 1);\n        });\n\n    const runMethods: RestMiddlewareRunMethod[] = [];\n\n    usedMiddlewares.forEach(middleware =>\n    {\n        runMethods.push(new middleware().run);\n    });\n\n    return runMethods;\n};\n\n/**\n * Creates NotType from Type, this type will be removed from middlewares\n * @param type - Type that will be set as NotType\n */\nexport function not(type: RestMiddlewareType<RestMiddleware>): RestMiddlewareType<RestMiddleware>\n{\n    return new NotType<RestMiddleware>(type) as unknown as RestMiddlewareType<RestMiddleware>;\n}\n\n/**\n * Gets underlying type for Type and NotType\n * @param type - Type that is going to be used for extraction\n */\nexport function getType<TType extends RestMiddleware>(type: RestMiddlewareType<TType>): RestMiddlewareType<TType>\n{\n    if(type instanceof NotType)\n    {\n        return type.ɵtype;\n    }\n\n    return type;\n}\n\n/**\n * Tests whether is provided type NotType\n * @param type - Type to be tested for NotType\n */\nexport function isNotType<TType extends RestMiddleware>(type: RestMiddlewareType<TType>): boolean\n{\n    return type instanceof NotType;\n}\n\n/**\n * Handles query param and fills params dictionary\n * @param data - Data for creating query param\n * @param params - Params where should be new value placed\n */\nexport function handleQueryParam(data: ParamsDataIteratorItem, params: StringDictionary): void\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = (data as any as RestClientWithTransform).transformFn(data.value);\n    }\n\n    // if the value is a instance of Object, we stringify it\n    if (data.value instanceof Object)\n    {\n        data.value = JSON.stringify(data.value);\n    }\n\n    params[data.key] = data.value;\n}\n\n/**\n * Handles header param and fills headers dictionary\n * @param data - Data for creating header param\n * @param headers - Params where should be new value placed\n */\nexport function handleHeaderParam(data: ParamsDataIteratorItem, headers: StringDictionary): void\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = (data as any as RestClientWithTransform).transformFn(data.value);\n    }\n\n    headers[data.key] = data.value;\n}\n\n/**\n * Handles path param and return updated url\n * @param data - Data for creating path param\n * @param url - Current url to be updated\n */\nexport function handlePathParam(data: ParamsDataIteratorItem, url: string): string\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = (data as any as RestClientWithTransform).transformFn(data.value);\n    }\n\n    return url.replace('{' + data.key + '}', data.value);\n}\n\n/**\n * Handles query object param and fills serialized query string array\n * @param data - Data for creating query object param\n * @param queryStrings - Array of query serialized query strings\n * @param querySerializer - Serializer for query object\n */\nexport function handleQueryObjectParam(data: ParamsDataIteratorItem, queryStrings: string[], querySerializer: QueryStringSerializer): void\n{\n    //apply parameter transform\n    if(data.transformFn)\n    {\n        data.value = (data as any as RestClientWithTransform).transformFn(data.value);\n    }\n\n    const serializedObj = querySerializer.serializeObject(data.value);\n\n    if(serializedObj)\n    {\n        queryStrings.push(serializedObj);\n    }\n}\n\n/**\n * Merges serialized query objects data with existing http params\n * @param queryStrings - Serialized query objects data\n * @param requestParams - Existing http params to be merged with\n */\nexport function mergeQueryObjectParamsWithHttpParams(queryStrings: string[], requestParams: HttpParams): HttpParams\n{\n    const queryString = queryStrings.join('&');\n    const params: HttpParams = new HttpParams({fromString: queryString});\n\n    params.keys().forEach(key =>\n    {\n        const newValues = params.getAll(key);\n\n        if(newValues)\n        {\n            newValues.forEach((value, index) =>\n            {\n                //first item, set\n                if(!index)\n                {\n                    requestParams = requestParams.set(key, value);\n                }\n                //rest append\n                else\n                {\n                    requestParams = requestParams.append(key, value);\n                }\n            });\n        }\n    });\n\n    return requestParams;\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {HttpClient, HttpEventType, HttpParams, HttpRequest} from '@angular/common/http';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {LOGGER, Logger, ProgressIndicatorService} from '@anglr/common';\nimport {handleHeaderParam, handlePathParam, handleQueryObjectParam, handleQueryParam, mergeQueryObjectParamsWithHttpParams, QueryStringSerializer} from '@anglr/rest';\nimport {isBlank, isEmptyObject, StringDictionary} from '@jscrpt/common';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY, Subscription} from 'rxjs';\n\nimport {RestRelationsMetadataLoader} from './rest.metadata';\nimport {RestRelationsOptions} from './rest.options';\n\n//TODO: add required to rest param\n\n/**\n * Rest relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RestRelationsMetadataLoader)\nexport class RestRelations implements RelationsComponent<RestRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RestRelationsOptions|undefined|null;\n\n    /**\n     * Instance of http client\n     */\n    protected http: HttpClient;\n\n    /**\n     * Instance of logger\n     */\n    protected logger: Logger;\n\n    /**\n     * Instance of query string serializer\n     */\n    protected queryStringSerializer: QueryStringSerializer;\n\n    /**\n     * Subscription for running request\n     */\n    protected runningRequestSubscription: Subscription|undefined|null;\n\n    /**\n     * Service used for handling progress indicator\n     */\n    protected progressIndicator: ProgressIndicatorService;\n\n    /**\n     * Indication whether there is null or undefined required param\n     */\n    protected emptyParam: boolean[] = [];\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RestRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RestRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    @DynamicOutput()\n    public success: any = {test: true};\n\n    /**\n     * Error output for rest result\n     */\n    @DynamicOutput()\n    public error: any = null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.http = injector.get(HttpClient);\n        this.logger = injector.get(LOGGER);\n        this.queryStringSerializer = injector.get(QueryStringSerializer);\n        this.progressIndicator = injector.get(ProgressIndicatorService);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(_changes: SimpleChanges): void\n    {\n        this.makeRequest();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n            {\n                for(const index in this.relationsOptions.params)\n                {\n                    const param = this.relationsOptions.params[index];\n                    this.emptyParam.push(true);\n\n                    if(param.configurable && param.name)\n                    {\n                        Object.defineProperty(this,\n                                              param.name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: value =>\n                                                  {\n                                                      param.value = value;\n\n                                                      this.emptyParam[index] = isBlank(value);\n                                                  }\n                                              });\n                    }\n                }\n            }\n        }\n\n        if(this.relationsOptions?.runImmediately)\n        {\n            this.makeRequest();\n        }\n    }\n\n    /**\n     * Make http request\n     */\n    protected makeRequest(): void\n    {\n        //on empty param\n        if(this.emptyParam.find(itm => itm))\n        {\n            return;\n        }\n\n        if(this.runningRequestSubscription)\n        {\n            this.runningRequestSubscription.unsubscribe();\n            this.progressIndicator.hideProgress();\n        }\n\n        if(!this.relationsOptions ||\n           !this.relationsOptions.method ||\n           !this.relationsOptions.url)\n        {\n            this.logger.warn('RestRelations: missing options for craeting http request {@data}', this.relationsOptions);\n\n            return;\n        }\n\n        let body: any = null;\n        let url: string = this.relationsOptions.url;\n        const params: StringDictionary = {};\n        const headers: StringDictionary = {};\n        const queryStrings: string[] = [];\n\n        if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n        {\n            for(const param of this.relationsOptions.params)\n            {\n                if(!param.name)\n                {\n                    continue;\n                }\n\n                const data =\n                {\n                    index: 0,\n                    key: param.name,\n                    value: param.value,\n                    transformFn: null\n                };\n\n                switch(param.type)\n                {\n                    case 'PATH':\n                    {\n                        url = handlePathParam(data, url);\n\n                        break;\n                    }\n                    case 'BODY':\n                    {\n                        body = param.value;\n\n                        break;\n                    }\n                    case 'QUERY':\n                    {\n                        handleQueryParam(data, params);\n\n                        break;\n                    }\n                    case 'QUERY OBJECT':\n                    {\n                        handleQueryObjectParam(data, queryStrings, this.queryStringSerializer);\n\n                        break;\n                    }\n                    case 'HEADER':\n                    {\n                        handleHeaderParam(data, headers);\n\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        let request: HttpRequest<any> = new HttpRequest(this.relationsOptions.method,\n                                                        url,\n                                                        body,\n                                                        {\n                                                            reportProgress: false,\n                                                            responseType: 'json',\n                                                        });\n\n        // query params\n        if(!isEmptyObject(params))\n        {\n            request = request.clone(\n            {\n                setParams: params\n            });\n        }\n\n        // header params\n        if(!isEmptyObject(headers))\n        {\n            request = request.clone(\n            {\n                setHeaders: headers\n            });\n        }\n\n        // query object params\n        if(queryStrings.length)\n        {\n            const requestParams: HttpParams = mergeQueryObjectParamsWithHttpParams(queryStrings, request.params);\n\n            request = request.clone(\n            {\n                params: requestParams\n            });\n        }\n\n        this.runningRequestSubscription = this.http.request(request)\n            .pipe(catchError(error =>\n            {\n                //TODO: proper handling\n                this.success = null;\n                this.error = error;\n\n                return EMPTY;\n            }))\n            .subscribe(result =>\n            {\n                if(result.type == HttpEventType.Response)\n                {\n                    if(result.status >= 200 && result.status <= 300)\n                    {\n                        this.success = result.body;\n                        this.error = null;\n\n                        return;\n                    }\n                }\n            });\n    }\n}","import {RestRelations} from './rest.relations';\n\nexport default RestRelations;"],"names":["QueryStringSerializer","constructor","_dateApi","serializeObject","obj","keyPrefix","isJsObject","queryParams","switchVal","key","val","isBlank","isFunction","Array","isArray","forEach","itm","index","this","isDate","push","toString","isString","isNumber","isBoolean","Object","keys","join","serializeObjectToParams","queryString","HttpParams","fromString","handleQueryParam","data","params","transformFn","value","JSON","stringify","handleHeaderParam","headers","handlePathParam","url","replace","handleQueryObjectParam","queryStrings","querySerializer","serializedObj","REST_DATE_API","RestRelationsMetadataLoader","RestRelationsEditorMetadata","RestRelations","injector","emptyParam","success","test","error","http","get","HttpClient","logger","LOGGER","queryStringSerializer","progressIndicator","ProgressIndicatorService","relationsOptions","ɵRelationsOptions","initialize","ngOnChanges","_changes","makeRequest","invalidateVisuals","param","configurable","name","defineProperty","enumerable","set","runImmediately","find","runningRequestSubscription","unsubscribe","hideProgress","method","warn","body","type","request","HttpRequest","reportProgress","responseType","isEmptyObject","clone","setParams","setHeaders","length","requestParams","newValues","getAll","append","mergeQueryObjectParamsWithHttpParams","pipe","catchError","EMPTY","subscribe","result","HttpEventType","status","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}