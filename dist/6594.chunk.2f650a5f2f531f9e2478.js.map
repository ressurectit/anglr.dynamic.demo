{"version":3,"file":"6594.chunk.2f650a5f2f531f9e2478.js","mappings":";kKAoCO,MAAMA,EAAQ,IAAIC,EAAAA,EAAkBC,EAAAA,mDCbrC,MAAOC,EADbC,cAEU,KAAAC,WAAkD,EA6B3D,CAtBCC,OAAOC,EAAYC,GACjB,IAAK,IAAIC,KAAYC,KAAKL,WACxBI,EAASF,EAAIC,EAEhB,CAMDG,OAAOF,GAEL,OADAC,KAAKL,WAAWO,KAAKH,GACd,KACLC,KAAKL,WAAaK,KAAKL,WAAWQ,QAAQC,GACjCL,IAAaK,GADtB,CAIH,CAEDC,cACEL,KAAKL,WAAa,EACnB,mCA7BUF,wBAAAA,UAAAA,EAAAA,gBADY,0DCJlB,MAAMa,EAAmC,oCAwBnCC,EAGT,CAEFC,iBAAiBC,EAAAA,EAAAA,IAAQ,kBAAmB,EAC1CC,EAAAA,EAAAA,IAAM,mBAAmBC,EAAAA,EAAAA,IAAM,CAACC,UAAW,mBAC3CF,EAAAA,EAAAA,IAAM,YAAYC,EAAAA,EAAAA,IAAM,CAACC,UAAW,qBACpCC,EAAAA,EAAAA,IACE,6CACAC,EAAAA,EAAAA,IAAQR,MAIZS,eAAeN,EAAAA,EAAAA,IAAQ,gBAAiB,EACtCC,EAAAA,EAAAA,IAAM,mBAAmBC,EAAAA,EAAAA,IAAM,CAACK,OAAQ,MAAOC,WAAY,aAC3DP,EAAAA,EAAAA,IAAM,YAAYC,EAAAA,EAAAA,IAAM,CAACK,OAAQ,IAAKC,WAAY,cAClDJ,EAAAA,EAAAA,IACE,6CACAC,EAAAA,EAAAA,IAAQR,mEC7CR,MAAOY,oCAAAA,sBAAAA,yDC2BP,MAAOC,oCAAAA,sBAAAA,0BApBDC,EAAAA,EAAcC,EAAAA,GAAiBH,EAAoBI,EAAAA,kYClB/D,mCAAM,2GCqCAC,GAAoCC,EAAAA,EAAAA,GAH1C,SAiCM,MAAOC,UACHF,EAKR7B,YACiBgC,EACPC,EACAC,EACAC,EAGRC,EACkDC,EAC3BC,GAEvBC,QAVe,KAAAP,MAAAA,EACP,KAAAC,SAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,mBAAAA,EAI0C,KAAAE,eAAAA,EAV5C,KAAAG,0BAA4BC,EAAAA,GAAAA,MAclC,MAAMC,EAA4BV,EAAMW,UACpCX,EAAMW,UAAUC,cAAcC,MAC5BpC,EAAAA,EAAAA,IAAOqC,MAAcA,EAAO,aAAkBA,EAAO,mBAEvDC,EAAAA,EACJzC,KAAKgC,SAAWU,SAASV,GAAY,KAAO,EAI5ChC,KAAKkC,2BAA4BS,EAAAA,EAAAA,GAC/BjB,EAAMkB,OACNlB,EAAMmB,OACNT,EACAV,EAAMoB,cAAcP,MAClBpC,EAAAA,EAAAA,IAAOqC,MACKA,EAAO,YAAkBA,EAAO,UAAgBA,EAAO,oBAGrEO,WAAU,IAAM/C,KAAK6B,mBAAmBmB,iBAG1CtB,EAAMmB,OACHN,MAAKpC,EAAAA,EAAAA,IAAO,IAAMuB,EAAMuB,oBACxBF,WAAU,IAAMnB,EAAcsB,SAASvB,EAAU,aAEhDG,IACF9B,KAAKmD,eAAiBrB,EAAeqB,eACrCnD,KAAKoD,gBAAkBtB,EAAesB,gBAEzC,CAYGC,eACF,OAAOrD,KAAK0B,MAAM2B,QACnB,CAGDC,UACOtD,KAAKqD,UACRrD,KAAK0B,MAAM6B,QAEd,CAGDC,cACE,OAAOxD,KAAK0B,MAAM+B,QACnB,CAGDC,oBACE,OAAO1D,KAAK0B,MAAMgC,mBACnB,CAGDC,cACE,OAAO3D,KAAK0B,MAAM7B,EACnB,CAGD+D,qBACE,OAAO5D,KAAK0B,MAAMmC,cACnB,CAGDC,cACE,OAAQ9D,KAAK0B,MAAMqC,aAAe/D,KAAK0B,MAAM2B,QAC9C,CAMDW,mBACE,MAAMC,EAAajE,KAAKwD,cACxB,OAAIS,GAAcjE,KAAKmD,eACdnD,KAAKmD,gBACFc,GAAcjE,KAAKoD,gBACtBpD,KAAKoD,gBAEP,IACR,CAGDc,SAASC,GACP,OAAQA,EAAMC,SAEZ,KAAKC,EAAAA,GACL,KAAKC,EAAAA,IACEC,EAAAA,EAAAA,GAAeJ,KAClBA,EAAMK,iBACNxE,KAAKsD,WAGP,MACF,QAKE,YAJItD,KAAK0B,MAAMW,WACbrC,KAAK0B,MAAMW,UAAUoC,qBAAqBN,IAKjD,CAODO,MAAMC,EAAsBC,GACtBD,EACF3E,KAAK4B,cAAcsB,SAASlD,KAAK2B,SAAUgD,EAAQC,GAEnD5E,KAAK2B,SAASkD,cAAcH,MAAME,EAErC,CAEDE,kBACE9E,KAAK4B,cAAcmD,QAAQ/E,KAAK2B,UAAUoB,WAAU4B,IAC9CA,GAAU3E,KAAK0B,MAAMW,WACvBrC,KAAK0B,MAAMW,UAAU2C,mBAAmBhF,KACzC,GAEJ,CAEDK,cACEL,KAAKkC,0BAA0B+C,cAC/BjF,KAAK4B,cAAcsD,eAAelF,KAAK2B,SACxC,mCA1JUF,GAAAA,EAAAA,EAAuB0D,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAWxBC,EAAAA,GAAmCA,GAAAA,EAAAA,EAGvBC,EAAAA,GAAqBA,GAAAA,EAAAA,EAC9B,gCAfF5D,+DAAuB,0IAAvB,y0BDxEb,iBACE,QACA,UACA,gBAEF,6BAAgD,+CEEhD6D,EAAAA,ugDD+Cc,CAAC/E,EAAAA,EAAAA,sCAwLT,MAAOgF,oCAAAA,sBAAAA,iGAWP,MAAOC,oCAAAA,sBAAAA,iNE5Ob,IAAIC,EAAS,EAON,MAAMC,EAAgB,IAAIC,EAAAA,EAA6B,gBAUxD,MAAOC,EALblG,cAOW,KAAA4C,cAAgB,IAAIuD,EAAAA,EAGpB,KAAAC,qBAAyC,IAAID,EAAAA,EAG7C,KAAAhG,GAAa,iBAAiB4F,IAU/B,KAAAM,QAAkB,CAsB3B,CA5BKC,YACF,OAAOhG,KAAK+F,MACb,CACGC,UAAMA,GACRhG,KAAK+F,QAASE,EAAAA,EAAAA,GAAsBD,EACrC,CAIDE,UACMlG,KAAK+F,QACP/F,KAAK8F,qBAAqBK,MAAK,EAElC,CAGDC,WACEpG,KAAK8F,qBAAqBK,MAAK,EAChC,CAEDE,YAAY7D,GACVxC,KAAKsC,cAAc6D,KAAK3D,EACzB,CAEDnC,cACEL,KAAKsC,cAAcgE,WACnBtG,KAAK8F,qBAAqBQ,UAC3B,mCAvCUV,sBAAAA,sHAFA,CAAC,CAACW,QAASb,EAAec,YAAaZ,KAAvC,sDCHb,IAAIH,EAAS,EAeP,MAAOgB,EAiEX/G,YACwD2C,EAC9CR,EACE6E,GAF4C,KAAArE,UAAAA,EAC9C,KAAAR,mBAAAA,EACE,KAAA6E,qBAAAA,EAlEJ,KAAAC,0BAA4BxE,EAAAA,GAAAA,MAEjB,KAAAU,OAA6B,IAAI+D,EAAAA,EAEjC,KAAAhE,OAA6B,IAAIgE,EAAAA,EAEjC,KAAAC,UAAgC,IAAID,EAAAA,EAOpC,KAAAE,eAAwC,IAAIF,EAAAA,EAGtD,KAAA/G,GAAa,uBAAuB4F,IAgCrC,KAAAsB,WAAY,EAUZ,KAAAC,WAAY,EAGZ,KAAAC,+BAA6C,OAOnDjH,KAAKiH,+BAAiCP,EAAqBzG,QACzD,CAACJ,EAAYqH,KAETlH,KAAKqC,YACJrC,KAAKqC,UAAU2D,OAChBhG,KAAKqC,UAAUxC,KAAOqH,GACtBlH,KAAKH,KAAOA,IAEZG,KAAKyD,UAAW,EACjB,IAKDzD,KAAKqC,YACPrC,KAAK2G,0BAA4B3G,KAAKmH,kCAEzC,CAjEG1D,eACF,OAAOzD,KAAK+G,SACb,CACGtD,aAASA,GAIX,GAHAA,GAAWwC,EAAAA,EAAAA,GAAsBxC,GAG7BzD,KAAK+G,YAActD,EAAU,CAI/B,GAHAzD,KAAK+G,UAAYtD,EACjBzD,KAAK8G,eAAeM,KAAK3D,GAErBA,EAAU,CACZzD,KAAK4C,OAAOwE,OAKZ,MAAMF,EAAclH,KAAKqC,UAAYrC,KAAKqC,UAAUxC,GAAKG,KAAKH,GAC9DG,KAAK0G,qBAAqB9G,OAAOI,KAAKH,GAAIqH,EAC3C,MACClH,KAAK6C,OAAOuE,OAKdpH,KAAK6B,mBAAmBmB,cACzB,CACF,CAKGK,eACF,OAAOrD,KAAKgH,SACb,CACG3D,aAASA,GACXrD,KAAKgH,WAAYf,EAAAA,EAAAA,GAAsB5C,EACxC,CA+BDhD,cACEL,KAAK4C,OAAO0D,WACZtG,KAAK6C,OAAOyD,WACZtG,KAAK6G,UAAUO,OACfpH,KAAK6G,UAAUP,WACftG,KAAKiH,iCACLjH,KAAK2G,0BAA0B1B,aAChC,CAGD1B,SACOvD,KAAKqD,WACRrD,KAAKyD,UAAYzD,KAAKyD,SAEzB,CAGD4D,QACOrH,KAAKqD,WACRrD,KAAKyD,UAAW,EAEnB,CAGD6D,OACOtH,KAAKqD,WACRrD,KAAKyD,UAAW,EAEnB,CAEO0D,kCACN,OAAOnH,KAAKqC,UAAUyD,qBAAqB/C,WAAUU,IAE9CzD,KAAKqD,WACRrD,KAAKyD,SAAWA,EACjB,GAEJ,mCA/HUgD,GAAAA,EAAAA,EAkEWf,EAAaA,IAAAA,EAAAA,EAAA6B,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,uBAlExBd,6PANA,CAGT,CAACF,QAASb,EAAe8B,cAAUC,wFCKhC,MAAMC,EAAgB,IAAI/B,EAAAA,EAAiC,gCClB3D,MAAMgC,EAAsB,IAAIhC,EAAAA,EAAsC,sCCNvE,MAAOiC,EACXlI,YACSmI,EACyCC,GADzC,KAAAD,UAAAA,EACyC,KAAAC,gBAAAA,CAC9C,mCAJOF,GAAAA,EAAAA,EAAwBL,EAAAA,IAAAA,EAAAA,EAGzBI,EAAmBA,uBAHlBC,4SC8Bb,IAAIG,EAAW,EAqBR,MAAM3C,EACX,IAAIO,EAAAA,EAAgD,uCA6BhD,MAAOqC,UACHvB,EAoDR/G,YACiD2C,EAC/CR,EACAoG,EACQC,EACUC,EACgCpG,EAGlDD,GAEAG,MAAMI,EAAWR,EAAoBoG,GAP7B,KAAAC,kBAAAA,EAE0C,KAAAnG,eAAAA,EAtD5C,KAAAqG,aAAc,EAsBH,KAAAC,YAAc,IAAIzB,EAAAA,EAGlB,KAAA0B,cAAgB,IAAI1B,EAAAA,EAG9B,KAAA9D,cAAgB,IAAI+C,EAAAA,EAe7B,KAAA0C,UAAY,8BAA8BR,IAGjC,KAAAS,mBAAqB,IAAI3C,EAAAA,EAchC7F,KAAKqC,UAAYA,EACjBrC,KAAKmI,UAAYA,EAIjBnI,KAAKwI,mBACFjG,MACCkG,EAAAA,EAAAA,IAAqB,CAACC,EAAGC,IAChBD,EAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,WAGzD9F,WAAUoB,IACe,SAApBA,EAAMyE,YACc,aAAlBzE,EAAM0E,QACR7I,KAAKqI,YAAYjB,OACU,cAAlBjD,EAAM0E,SACf7I,KAAKsI,cAAclB,OAEtB,IAGDtF,IACF9B,KAAK+D,WAAajC,EAAeiC,WAEpC,CA/EGA,iBACF,OAAO/D,KAAKoI,aAAgBpI,KAAKqC,WAAarC,KAAKqC,UAAU0B,UAC9D,CACGA,eAAW+E,GACb9I,KAAKoI,aAAcnC,EAAAA,EAAAA,GAAsB6C,EAC1C,CAIGjF,qBACF,OAAO7D,KAAK+I,iBAAoB/I,KAAKqC,WAAarC,KAAKqC,UAAUwB,cAClE,CACGA,mBAAeiF,GACjB9I,KAAK+I,gBAAkBD,CACxB,CAoEDE,cACE,QAAIhJ,KAAKqC,WACArC,KAAKyD,UAA2C,YAA/BzD,KAAKqC,UAAU4G,WAG1C,CAGDvF,oBACE,OAAO1D,KAAKyD,SAAW,WAAa,WACrC,CAGQF,SACPvD,KAAKyD,UAAYzD,KAAKyD,QACvB,CAGQ4D,QACPrH,KAAKyD,UAAW,CACjB,CAGQ6D,OACPtH,KAAKyD,UAAW,CACjB,CAEDyF,qBACMlJ,KAAKmJ,cAAgBnJ,KAAKmJ,aAAarB,kBAAoB9H,MAE7DA,KAAK4C,OACFL,MACC6G,EAAAA,EAAAA,GAAU,OACVjJ,EAAAA,EAAAA,IAAO,IAAMH,KAAKyD,WAAazD,KAAKqJ,WACpCC,EAAAA,EAAAA,GAAK,IAENvG,WAAU,KACT/C,KAAKqJ,QAAU,IAAIE,EAAAA,GAAevJ,KAAKmJ,aAAatB,UAAW7H,KAAKkI,kBAApE,GAGP,CAED7B,YAAY7D,GACVxC,KAAK8C,cAAcqD,KAAK3D,EACzB,CAEQnC,cACP4B,MAAM5B,cACNL,KAAKwI,mBAAmBlC,WACxBtG,KAAK8C,cAAcwD,UACpB,CAGDrD,iBACE,GAAIjD,KAAKwJ,MAAO,CACd,MAAMC,EAAiBzJ,KAAKmI,UAAUuB,cAChCC,EAAc3J,KAAKwJ,MAAM3E,cAC/B,OAAO4E,IAAmBE,GAAeA,EAAYC,SAASH,EAC/D,CAED,OAAO,CACR,mCAzJUzB,GAAAA,EAAAA,EAsDuBN,EAAaA,IAAAA,EAAAA,EAAAH,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAIrCsC,EAAAA,GAAQA,EAAAA,EACIxE,EAAAA,GAAqBA,GAAAA,EAAAA,EACjCD,EAAAA,uBA5DC4C,oFAuCGJ,EAAwBA,woBApD3B,CAGT,CAACrB,QAASmB,EAAeF,cAAUC,GACnC,CAAClB,QAASoB,EAAqBnB,YAAawB,KAJnC,4QCtFb,QACA,iBAGK,0CAAuB,4BAAvB,SAIH,gBACE,SACA,qCAEF,uBATG,8DAEA,mCAKY,oDCIjB8B,EAAAA,otDFuEc,CAACvJ,EAAAA,EAAAA,oCAmLT,MAAOwJ,oCAAAA,sBAAAA","sources":["webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../../../../src/cdk/collections/unique-selection-dispatcher.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-animations.ts","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion-module.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-module.ts","webpack://ng-universal-demo/../../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-header.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-header.html","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion.ts","webpack://ng-universal-demo/../../../../src/cdk/accordion/accordion-item.ts","webpack://ng-universal-demo/../../../../src/material/expansion/accordion-base.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-base.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel-content.ts","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel.ts","webpack://ng-universal-demo/../../src/material/expansion/expansion-panel.html","webpack://ng-universal-demo/../../../../src/material/expansion/expansion-panel.html"],"sourcesContent":[null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n","<span class=\"mat-content\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"mat-expansion-indicator\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean {\n    return this._multi;\n  }\n  set multi(multi: BooleanInput) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: BooleanInput) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled: BooleanInput) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n",null,"<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n"],"names":["NEVER","Observable","noop","UniqueSelectionDispatcher","constructor","_listeners","notify","id","name","listener","this","listen","push","filter","registered","ngOnDestroy","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","CdkAccordionModule","MatExpansionModule","CommonModule","MatCommonModule","PortalModule","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","panel","_element","_focusMonitor","_changeDetectorRef","defaultOptions","_animationMode","tabIndex","super","_parentChangeSubscription","Subscription","accordionHideToggleChange","accordion","_stateChanges","pipe","changes","EMPTY","parseInt","merge","opened","closed","_inputChanges","subscribe","markForCheck","_containsFocus","focusVia","expandedHeight","collapsedHeight","disabled","_toggle","toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_getHeaderHeight","isExpanded","_keydown","event","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","nativeElement","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","i1","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","ANIMATION_MODULE_TYPE","i3","MatExpansionPanelDescription","MatExpansionPanelTitle","nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","Subject","_openCloseAllActions","_multi","multi","coerceBooleanProperty","openAll","next","closeAll","ngOnChanges","complete","provide","useExisting","CdkAccordionItem","_expansionDispatcher","_openCloseAllSubscription","EventEmitter","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","accordionId","_subscribeToOpenCloseAllActions","emit","close","open","i0","useValue","undefined","MAT_ACCORDION","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_hideToggle","afterExpand","afterCollapse","_headerId","_bodyAnimationDone","distinctUntilChanged","x","y","fromState","toState","value","_togglePosition","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","_portal","take","TemplatePortal","_body","focusedElement","activeElement","bodyElement","contains","DOCUMENT","i2","MatExpansionPanelActionRow"],"sourceRoot":""}