{"version":3,"file":"4195.chunk.0e0fea3c495bcfa2d6d6.js","mappings":"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","sources":["webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/../layout-relations/src/pipes/propertySelected/propertySelected.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.html","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.ts","webpack://ng-universal-demo/../layout-relations/src/directives/showCustomComponentOptions/showCustomComponentOptions.directive.ts","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.html","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.metadata.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.html","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.metadata.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/../relations-debugger/src/services/relationsDebugger/relationsDebugger.service.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/debuggerNode.metadata.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/debuggerNode.relations.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/type.ts","webpack://ng-universal-demo/../relations-debugger/src/services/relationsDebuggerDynamicModuleItemsProvider/relationsDebuggerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../relations-debugger/src/misc/providers.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.providers.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/../relations-debugger/src/misc/utils.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/descendantsGetter/descendantsGetter.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorRenderer/layoutEditorRenderer.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/liveEvents/liveEvents.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleItemsProvider/customComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleTypesProvider/customComponentsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleRelationsProvider/customComponentsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customRelationsDynamicModuleRelationsProvider/customRelationsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customRelationsDynamicModuleItemsProvider/customRelationsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/getModel/getModel.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/propertiesMetadata/propertiesMetadata.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsRegister/customComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customDynamicItemsRegister/customDynamicItemsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customRelationsRegister/customRelationsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/misc/enums.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../layout/src/services/layoutRenderer/layoutRenderer.options.ts","webpack://ng-universal-demo/../layout/src/services/layoutRenderer/layoutRenderer.base.ts","webpack://ng-universal-demo/../layout/src/services/layoutRenderer/layoutRenderer.service.ts","webpack://ng-universal-demo/../relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/decorators/debugData/debugData.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../relations/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/services/codeExecutor/codeExecutor.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.options.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsComponentManager/relationsComponentManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsDebugger/relationsDebugger.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsManager/relationsManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsDataTransferInstruction.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsProcessor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts"],"sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t79587,\n\t\t9587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t5930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService, LogLevel} from '@anglr/common';\nimport {ValueNamePair} from '@jscrpt/common';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                debugDataEnabled: DebugDataEnabledService,)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n\n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogLevel[loggingSettings.consoleLogLevel as keyof typeof LogLevel],\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n\n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogLevel).forEach(val =>\n        {\n            const numVal = +val;\n\n            if(!isNaN(numVal))\n            {\n                this.logLevels.push(\n                {\n                    name: LogLevel[numVal],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    @if(activeSection == UserSettingsSections.General)\r\n    {\r\n        <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\">\r\n            <!-- THEME -->\r\n            <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n    \r\n            <div>\r\n                <ng-select formControlName=\"theme\" absolute>\r\n                    @for(theme of themes; track theme)\r\n                    {\r\n                        <ng-option [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n                    }\r\n                </ng-select>\r\n            </div>\r\n    \r\n            <!-- LANGUAGE -->\r\n            <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n    \r\n            <div>\r\n                <ng-select formControlName=\"language\" absolute>\r\n                    @for(lang of languages; track lang)\r\n                    {\r\n                        <ng-option [text]=\"lang.name\" [value]=\"lang?.lang\"></ng-option>\r\n                    }\r\n                </ng-select>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    @if(activeSection == UserSettingsSections.Logging)\r\n    {\r\n        <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\">\r\n            <!-- CONSOLE LOG LEVEL -->\r\n            <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n    \r\n            <div>\r\n                <ng-select formControlName=\"consoleLogLevel\" absolute>\r\n                    @for(level of logLevels; track level)\r\n                    {\r\n                        <ng-option [text]=\"level.name\" [value]=\"level?.value\"></ng-option>\r\n                    }\r\n                </ng-select>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    @if(activeSection == UserSettingsSections.Debugging)\r\n    {\r\n        <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\">\r\n            <!-- CONSOLE -->\r\n            <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n    \r\n            <div>\r\n                <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n            </div>\r\n    \r\n            <!-- DEBUG DATA -->\r\n            <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n    \r\n            <div>\r\n                <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>","import {Pipe, PipeTransform} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets indication whether is property selected\n */\n@Pipe({name: 'propertySelected', standalone: true})\nexport class PropertySelectedSAPipe implements PipeTransform\n{\n    /**\n     * Gets indication whether is property selected\n     * @param value - Stores selected properties in their models and components\n     * @param component - Name of component\n     * @param model - Name of model\n     * @param property - Name of property\n     */\n    public transform(value: Dictionary<Dictionary<string[]>>, component: string, model: string, property: string): boolean\n    {\n        if(!value[component]?.[model])\n        {\n            return false;\n        }\n\n        return value[component][model].indexOf(property) >= 0;\n    }\n}","<div class=\"dynamic-margin-bottom-small dynamic-flex-row\">\n    <div class=\"dynamic-flex-1 dynamic-margin-right-small\">\n        <label class=\"dynamic-control-label\">{{'available content components'|firstUppercaseLocalize}}</label>\n\n        <select class=\"dynamic-form-control\" [formControl]=\"component\">\n            <option *ngFor=\"let component of contentComponents\" [value]=\"component\">{{data.customComponentContentMetadata[component]?.metadata?.displayName}}</option>\n        </select>\n    </div>\n\n    <a class=\"dynamic-btn-icon dynamic-margin-left-small dynamic-large-text\" (click)=\"addComponent()\">\n        <span class=\"fas fa-plus\"></span>\n    </a>\n</div>\n\n<div>\n    <div *ngFor=\"let component of usedProperties | keyvalue\" class=\"dynamic-margin-bottom-small\">\n        <div class=\"dynamic-bold dynamic-flex-row \">\n            <span class=\"dynamic-margin-right-small\">{{data.customComponentContentMetadata[component.key]?.metadata?.displayName}}</span>\n            \n            <a class=\"dynamic-btn-icon\" (click)=\"removeComponent(component.key)\">\n                <span class=\"fas fa-times\"></span>\n            </a>\n        </div>\n        \n        <ng-container *ngFor=\"let modelProps of availableProperties[component.key] | keyvalue\">\n            <div *ngFor=\"let prop of modelProps.value\">\n                <label>\n                    <input type=\"checkbox\" (change)=\"toggleSelected(component.key, modelProps.key, prop)\" [checked]=\"usedProperties | propertySelected: component.key: modelProps.key: prop\">\n                    <span>{{(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.name ?? prop}}</span>\n                    <span class=\"fas fa-info-circle dynamic-margin-left-extra-small\" *ngIf=\"(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.description as description\" [tooltip]=\"description\" ></span>\n                </label>\n            </div>\n        </ng-container>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"undefined\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"{configurableProperties: usedProperties, displayName: '', description: ''}\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {DialogRef} from '@angular/cdk/dialog';\nimport {CommonModule} from '@angular/common';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {CustomComponentOptionsData} from './customComponentOptions.interface';\nimport {GetModelSAPipe, PropertySelectedSAPipe, PropertiesMetadataSAPipe} from '../../pipes';\nimport {CustomComponentConfiguration} from '../../services';\n\n/**\n * Component used for displaying and editation of custom component options\n */\n@Component(\n{\n    selector: 'custom-component-options',\n    templateUrl: 'customComponentOptions.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        PropertySelectedSAPipe,\n        GetModelSAPipe,\n        PropertiesMetadataSAPipe,\n        TooltipModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    providers: [FormModelBuilder],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentOptionsSAComponent<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is used for selection of component\n     */\n    protected component: FormControl<string> = new FormControl();\n\n    /**\n     * Form for name and description of custom component\n     */\n    protected nameDescriptionForm: FormGroup<FormModelGroup<CustomComponentConfiguration>>;\n\n    /**\n     * Array of used properties for components and their models\n     */\n    protected usedProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of available properties for components and their models\n     */\n    protected availableProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of content components that are available\n     */\n    protected contentComponents: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CustomComponentOptionsData,\n                protected dialog: DialogRef<CustomComponentOptionsSAComponent<TConfig>, TConfig>,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.contentComponents = Object.keys(data.customComponentContentMetadata);\n        this.nameDescriptionForm = formModelBuilder.build<CustomComponentConfiguration>({displayName: '', description: '',});\n\n        for(const id in this.data.configuration.configurableProperties)\n        {\n            const models = this.data.configuration.configurableProperties[id];\n\n            this.usedProperties[id] ??= {};\n\n            for(const modelName in models)\n            {\n                const properties = models[modelName];\n\n                this.usedProperties[id][modelName] = [...properties];\n            }\n        }\n\n        const usedComponents = Object.keys(this.usedProperties);\n        this.contentComponents = this.contentComponents.filter(itm => usedComponents.indexOf(itm) < 0);\n\n        for(const id in data.customComponentContentMetadata)\n        {\n            const meta = data.customComponentContentMetadata[id];\n\n            if(!meta?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata)\n            {\n                continue;\n            }\n\n            for(const propMeta of meta.editorMetadata.metaInfo.optionsMetadata.propertiesMetadata)\n            {\n                const model = new propMeta.modelType(undefined);\n\n                if(!Object.keys(model).length)\n                {\n                    continue;\n                }\n\n                const modelName = propMeta.modelType.name;\n\n                this.availableProperties[id] ??= {};\n                this.availableProperties[id][modelName] ??= [];\n\n                for(const prop in model)\n                {\n                    this.availableProperties[id][modelName].push(prop);\n                }\n            }\n        }\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds component from custom component layout\n     */\n    protected addComponent(): void\n    {\n        if(!this.component.value)\n        {\n            return;\n        }\n\n        this.usedProperties[this.component.value] = {};\n        const index = this.contentComponents.indexOf(this.component.value);\n\n        if(index >= 0)\n        {\n            this.contentComponents.splice(index, 1);\n            this.component.setValue(this.contentComponents[0] ?? null);\n        }\n    }\n\n    /**\n     * Removes component options\n     * @param id - Id of component that should be removed\n     */\n    protected removeComponent(id: string): void\n    {\n        delete this.usedProperties[id];\n        this.contentComponents.push(id);\n\n        if(this.contentComponents.length == 1)\n        {\n            this.component.setValue(this.contentComponents[0]);\n        }\n    }\n\n    /**\n     * Toggle selected property in component in model\n     * @param id - Id of component to be edited\n     * @param modelName - Name of model to be edited\n     * @param propertyName - Name of property to be toggled\n     */\n    protected toggleSelected(id: string, modelName: string, propertyName: string): void\n    {\n        this.usedProperties[id] ??= {};\n        this.usedProperties[id][modelName] ??= [];\n\n        const index = this.usedProperties[id][modelName].indexOf(propertyName);\n\n        //remove\n        if(index >= 0)\n        {\n            this.usedProperties[id][modelName].splice(index, 1);\n            this.usedProperties[id][modelName] = [...this.usedProperties[id][modelName]];\n        }\n        //add\n        else\n        {\n            this.usedProperties[id][modelName] =\n            [\n                ...this.usedProperties[id][modelName],\n                propertyName,\n            ];\n        }\n    }\n}","import {Directive, ElementRef, HostListener, Injector, Input, OnChanges, OnInit} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorPropertyMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {ContentComponentData, CustomComponentOptionsData, CustomComponentOptionsSAComponent} from '../../components';\nimport {getCustomComponentMeta} from '../../misc/utils';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '../../services';\n\n/**\n * Directive that is used for displaying custom component options\n */\n@Directive(\n{\n    selector: '[showCustomComponentOptions]',\n    standalone: true,\n})\nexport class ShowCustomComponentOptionsSADirective<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> implements OnInit, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Metadata for each component in custom component\n     */\n    protected customComponentContentMetadata: Dictionary<ContentComponentData|undefined|null> = {};\n\n    /**\n     * Custom component layout metadata\n     */\n    protected customComponentMetadata: LayoutComponentMetadata|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of custom component which will be edited\n     */\n    @Input('showCustomComponentOptions')\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                protected dialogSvc: TitledDialogService,\n                protected customComponentsRegister: CustomComponentsRegister<TConfig>,\n                protected propsMetadataExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected element: ElementRef<HTMLButtonElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        if(!this.name)\n        {\n            return;\n        }\n\n        const result = (await getCustomComponentMeta(this.name, this.injector));\n\n        if(!result)\n        {\n            return;\n        }\n\n        this.customComponentContentMetadata = result.contentMetadata;\n        this.customComponentMetadata = result.metadata;\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(!this.name && !this.element.nativeElement.disabled)\n        {\n            throw new Error('Please provide name of custom component for its options');\n        }\n    }\n    \n    //######################### protected methods - host #########################\n\n    /**\n     * Shows content options selection dialog\n     * @param event - Event that occured\n     */\n    @HostListener('click', ['$event'])\n    protected async show(event: MouseEvent): Promise<void>\n    {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const result = await lastValueFrom(this.dialogSvc.open<CustomComponentOptionsSAComponent, CustomComponentOptionsData, TConfig|undefined|null>(CustomComponentOptionsSAComponent,\n        {\n            title: 'custom component options',\n            width: '75vw',\n            data:\n            {\n                customComponentContentMetadata: this.customComponentContentMetadata,\n                configuration: await this.customComponentsRegister.getConfigurationForComponent(this.name ?? '') ?? {},\n                propsMetadataExtractor: this.propsMetadataExtractor,\n            }\n        }).afterClosed());\n\n        if(result)\n        {\n            await this.customComponentsRegister.setConfigurationForComponent(this.name ?? '', result);\n        }\n    }\n}","<ng-select [formControl]=\"_available\" style=\"width: 180px\">\n    <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\n    <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\n</ng-select>\n\n<button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\n    <span>remove</span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\n    <span>load</span>\n</button>\n\n<input type=\"text\" [formControl]=\"_name\">\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\n    <span>save <ng-container *ngIf=\"!(history?.saved ?? true)\">*</ng-container></span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\n    <span>new</span>\n</button>\n\n<ng-container *ngIf=\"layoutControls\">\n    <mat-slide-toggle [checked]=\"liveEvents.enabled\" (change)=\"liveEvents.setEnabled(!liveEvents.enabled)\">live events</mat-slide-toggle>\n\n    <button type=\"button\" class=\"btn btn-primary\" [showCustomComponentOptions]=\"_available.value\" [disabled]=\"!_component.value\">CC options</button>\n</ng-container>\n\n<label class=\"margin-horizontal-extra-small\" *ngIf=\"componentMarking\"><input type=\"checkbox\" [formControl]=\"_component\"> component</label>","import {Component, ChangeDetectionStrategy, Input, OnInit, EventEmitter, Output, OnDestroy, Inject, Optional, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {EditorHotkeys, MetadataHistoryManager, EditorMetadataManager, EDITOR_METADATA_MANAGER} from '@anglr/dynamic';\nimport {CustomDynamicItemsRegister, ShowCustomComponentOptionsSADirective} from '@anglr/dynamic/layout-relations';\nimport {LiveEventService} from '@anglr/dynamic/layout-editor';\nimport {extend, Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {StoreDataService} from '../../services/storeData';\nimport {DemoCustomComponentsRegister} from '../../services/demoCustomComponentsRegister';\nimport {DemoCustomRelationsRegister} from '../../services/demoCustomRelationsRegister';\n\n/**\n * Component used for loading saving and creating new layout/relations template\n */\n@Component(\n{\n    selector: 'load-save-new',\n    templateUrl: 'loadSaveNew.component.html',\n    styleUrls: ['loadSaveNew.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NgSelectModule,\n        CommonModule,\n        ShowCustomComponentOptionsSADirective,\n        MatSlideToggleModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadSaveNewSAComponent<TStoreMetadata = any, TMetadata = any> implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: TStoreMetadata|null = null;\n    \n    protected _available: FormControl<string> = new FormControl('');\n\n    protected _component: FormControl<boolean> = new FormControl(false);\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    @Input()\n    public store: StoreDataService<TStoreMetadata>;\n\n    @Input()\n    public history: MetadataHistoryManager|null = null;\n\n    @Input()\n    public routePath: string;\n\n    @Input()\n    public getMetadataCallback: Func<TStoreMetadata, [TMetadata]>;\n\n    @Input()\n    public componentMarking: boolean = false;\n\n    @Input()\n    public layoutControls: boolean = true;\n\n    //######################### public properties - outputs #########################\n\n    @Output()\n    public metadataChange: EventEmitter<TStoreMetadata|null> = new EventEmitter<TStoreMetadata|null>();\n\n    //######################### constructor #########################\n    constructor(private _router: Router,\n                private _route: ActivatedRoute,\n                @Inject(EDITOR_METADATA_MANAGER) private _metaManager: EditorMetadataManager<TMetadata>,\n                private _changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,\n\n                @Inject(CustomDynamicItemsRegister) @Optional() private _customComponentsRegister?: DemoCustomRelationsRegister|DemoCustomComponentsRegister,\n                @Optional() private _hotkeys?: EditorHotkeys,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(this.componentMarking)\n        {\n            this._available.valueChanges.subscribe(async value =>\n            {\n                if(!value)\n                {\n                    return;\n                }\n    \n                const components = await this._customComponentsRegister?.getRegisteredComponents();\n    \n                this._component.setValue(components.indexOf(value) >= 0, {emitEvent: false});\n            });\n    \n            this._component.valueChanges.subscribe(() => this._customComponentsRegister?.toggleRegisteredComponent(this._available.value));\n        }\n\n        if(this._hotkeys)\n        {\n            this.initSubscriptions.add(this._hotkeys.save.subscribe(() => this._save()));\n        }\n\n        if(this.history)\n        {\n            this.initSubscriptions.add(this.history.historyChange.subscribe(() => this._changeDetector.detectChanges()));\n            this.initSubscriptions.add(this.history.pop.subscribe(() => this._changeDetector.detectChanges()));\n        }\n\n        this._availableNames = this.store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata = null;\n                this.metadataChange.next(this._metadata);\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this.store.getData(this._available.value);\n                this.metadataChange.next(this._metadata);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this.store.getData(this._available.value);\n        this.metadataChange.next(this._metadata);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate([this.routePath, this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this._saveData(this._metaManager.getMetadata());\n    }\n\n    protected _delete(): void\n    {\n        this.store.removeData(this._available.value);\n\n        this._availableNames = this.store.getStored();\n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata = null;\n        this.metadataChange.next(this._metadata);\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _saveData(metadata: TMetadata): void\n    {\n        const data = this.store.getData(this._name.value) ?? {};\n        this.history?.save();\n\n        this.store.setData(this._name.value, extend(data, this.getMetadataCallback(metadata)));\n\n        this._availableNames = this.store.getStored();\n        this._changeDetector.detectChanges();\n        this._router.navigate([this.routePath, this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations result relations metadata loader\n */\nexport const RelationsResultRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsResult.relationsMetadata')).RelationsResultRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Input, ChangeDetectorRef, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsResultRelationsMetadataLoader} from './relationsResult.metadata';\n\n/**\n * Component used for displaying result binding of relations\n */\n@Component(\n{\n    selector: 'relations-result',\n    templateUrl: 'relationsResult.component.html',\n    // styleUrls: ['relationsResult.component.scss'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsResultRelationsMetadataLoader)\nexport class RelationsResultSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-result';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsResultSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsResultSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsResultSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil v result', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations sample click relations metadata loader\n */\nexport const RelationsSampleClickRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsSampleClick.relationsMetadata')).RelationsSampleClickRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, ChangeDetectorRef, Input, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {DynamicOutput, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsSampleClickRelationsMetadataLoader} from './relationsSampleClick.metadata';\n\n/**\n * Sample relations click component\n */\n@Component(\n{\n    selector: 'relations-sample-click',\n    templateUrl: 'relationsSampleClick.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsSampleClickRelationsMetadataLoader)\nexport class RelationsSampleClickSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-sample-click';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Defines form control for vystup value\n     */\n    protected _vystupForm: FormControl<string> = new FormControl<string>('');\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Test output\n     */\n    @DynamicOutput()\n    public vystup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n        this._vystupForm.valueChanges.subscribe(value => this.vystup = value);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsSampleClickSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsSampleClickSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsSampleClickSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>\n<div>\n    <input type=\"text\" [formControl]=\"_vystupForm\">\n</div>","import {isFunction, isBlank} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {config} from './config';\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = function<T>(this: Observable<T>, next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n} as any;","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        // group(\n        // [\n        //     query('.loading-card', \n        //     [\n        //         animate('300ms', style(\n        //         {\n        //             transform: 'scale(4)'\n        //         }))\n        //     ]),\n        //     animate('200ms 100ms', style(\n        //     {\n        //         opacity: 0\n        //     }))\n            \n        // ])\n    ])\n]);","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div class=\"flex-row\">\r\n    <a routerLink=\"/layout/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Preview</a>\r\n    <a routerLink=\"/layout/editor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Editor</a>\r\n    <a routerLink=\"/relationsEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations editor</a>\r\n    <a routerLink=\"/relationsStatic\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations</a>\r\n    <a routerLink=\"/relationsWithEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with editor</a>\r\n    <a routerLink=\"/relationsWithLayoutEditor/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with layout editor</a>\r\n    <a routerLink=\"/relationsComplex/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations complex</a>\r\n    <a routerLink=\"/relationsLayoutForm/form-preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations form</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<!-- <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\"> -->\r\n<div class=\"content relative\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {CommonModule, DOCUMENT} from '@angular/common';\nimport {RouterModule, RouterOutlet} from '@angular/router';\nimport {ConsoleSAComponent, LOGGER, Logger, ProgressIndicatorModule, consoleAnimationTrigger} from '@anglr/common';\nimport {AppHotkeysService, HotkeysCheatsheetSAComponent} from '@anglr/common/hotkeys';\nimport {InternalServerErrorSAComponent} from '@anglr/error-handling';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Subscription} from 'rxjs';\nimport {Hotkey} from 'angular2-hotkeys';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\nimport {MenuModule} from '../modules';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RouterModule,\n        InternalServerErrorSAComponent,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule,\n        MenuModule,\n        ConsoleSAComponent,\n        HotkeysCheatsheetSAComponent,\n    ],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppSAComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription|undefined|null;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet?.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet?.activatedRouteData['animation'] || (<any>this.routerOutlet?.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, undefined, 'Show console'));\n        }\n    }\n}","import {inject, Injectable, Injector} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {getDebugData, RelationsComponentEndpoints, RelationsComponentManager, RelationsComponentStateDebugInfo, RelationsDataTransferDebugInfo, RelationsDataTransferIdDebugInfo, RelationsDataTransferInstructionImpl, RelationsDebugger, RelationsOutputDebugInfo, RelationsProcessorComponent, RelationsProcessorComponentData, RelationsProcessorInputOutputData, RelationsStepDebugInfo} from '@anglr/dynamic/relations';\nimport {Dictionary, extend, generateId, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst COMPONENT_DEBUGGER_PROPERTY = 'COMPONENT_DEBUGGER_PROPERTY';\n\n//TODO: maybe reset steps on change of init\n\n/**\n * Service used for debugging relations\n */\n@Injectable()\nexport class RelationsDebuggerImpl extends RelationsDebugger\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of Angular injector\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger|undefined|null = inject(LOGGER, {optional: true});\n\n    /**\n     * Instance of relations component manager\n     */\n    protected ɵrelationsComponentManager: RelationsComponentManager|undefined|null;\n\n    /**\n     * Used for emitting changes in current step index\n     */\n    protected stepChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Current step index for previewing of data\n     */\n    protected currentStepIndex: number = 0;\n\n    /**\n     * Registered components by id and their internal ids for each step\n     */\n    protected components: Dictionary<string[]>[] = [];\n\n    /**\n     * Array of steps recorded by debugger\n     */\n    protected steps: RelationsStepDebugInfo[] = [];\n\n    /**\n     * Definition of component endpoints\n     */\n    protected componentDefs: Dictionary<RelationsComponentEndpoints> = {};\n\n    /**\n     * Gets instance of relations component manager\n     */\n    protected get relationsComponentManager(): RelationsComponentManager\n    {\n        return (this.ɵrelationsComponentManager ??= this.injector.get(RelationsComponentManager));\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when current step index changes\n     */\n    public get stepChange(): Observable<void>\n    {\n        return this.stepChangeSubject.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(relations: Dictionary<RelationsProcessorComponentData>, backwardRelations: Dictionary<RelationsProcessorInputOutputData[]>): void\n    {\n        const addInputOutput = (inputOutput: RelationsProcessorInputOutputData) =>\n        {\n            this.addOutputDef(inputOutput.outputComponentId, inputOutput.outputName);\n            this.addInputDef(inputOutput.inputComponentId, inputOutput.inputName);\n        };\n\n        for(const id in relations)\n        {\n            const def = relations[id];\n\n            for(const inputOutput of def.inputOutputs ?? [])\n            {\n                addInputOutput(inputOutput);\n            }\n        }\n\n        for(const id in backwardRelations)\n        {\n            const def = backwardRelations[id];\n\n            for(const inputOutput of def)\n            {\n                addInputOutput(inputOutput);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        this.tryToGetEndpoints(id, component);\n\n        let components = this.getLastComponents();\n\n        if(components[id] && components[id].indexOf(component.ɵɵRelationsComponentId ?? '') >= 0)\n        {\n            this.logger?.warn('RelationsDebugger: component \"{{@id}}\" has already been registered', {id: `${id}--${component.ɵɵRelationsComponentId}`});\n\n            return;\n        }\n\n        this.components.push(extend(true, {}, components));\n        components = this.getLastComponents();\n\n        components[id] ??= [];\n        components[id].push(component.ɵɵRelationsComponentId ?? '');\n\n        //update component for debugging info\n        if(!Reflect.getOwnPropertyDescriptor(component, COMPONENT_DEBUGGER_PROPERTY))\n        {\n            Reflect.defineProperty(component,\n                                   COMPONENT_DEBUGGER_PROPERTY,\n                                   {\n                                       configurable: true,\n                                       enumerable: false,\n                                       writable: false,\n                                       value: true,\n                                   });\n\n            let obj: object|undefined|null = component;\n            let property: PropertyDescriptor|undefined|null;\n\n            do\n            {\n                if((property = Reflect.getOwnPropertyDescriptor(obj, nameof<RelationsProcessorComponent>('relationsOptions'))))\n                {\n                    break;\n                }\n            }\n            while((obj = Reflect.getPrototypeOf(obj)));\n\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const $this = this;\n\n            //property exists\n            if(property)\n            {\n                const getter = property.get;\n                const setter = property.set;\n\n                if(!getter || !setter)\n                {\n                    throw new Error('RelationsDebugger: relations options property must have getter and setter!');\n                }\n\n                Reflect.defineProperty(component,\n                                       nameof<RelationsProcessorComponent>('relationsOptions'),\n                                       {\n                                           configurable: true,\n                                           enumerable: false,\n                                           get: function()\n                                           {\n                                               return getter.call(this);\n                                           },\n                                           set: function(value)\n                                           {\n                                               setter.call(this, value);\n\n                                               $this.tryToGetEndpoints(id, component);\n                                               $this.readComponentState(id);\n                                               $this.setComponentRelationsOptions(id, value);\n                                           }\n                                       });\n            }\n            else\n            {\n                Reflect.defineProperty(component,\n                                       nameof<RelationsProcessorComponent>('relationsOptions'),\n                                       {\n                                           configurable: true,\n                                           enumerable: false,\n                                           get: function()\n                                           {\n                                               return this['ɵrelationsOptions'];\n                                           },\n                                           set: function(value)\n                                           {\n                                               this['ɵrelationsOptions'] = value;\n\n                                               $this.tryToGetEndpoints(id, component);\n                                               $this.readComponentState(id);\n                                               $this.setComponentRelationsOptions(id, value);\n                                           }\n                                       });\n            }\n        }\n\n        this.steps.push(\n        {\n            timestamp: Date.now(),\n            componentRegistration:\n            {\n                componentId: id,\n                componentInternalId: component.ɵɵRelationsComponentId ?? '',\n            },\n            componentState: null,\n            componentUnregistration: null,\n            dataTransfer: null,\n            componentRelationsOptions: null,\n            previousStep: this.getLastStepData(),\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public unregisterComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        let index: number;\n        let components = this.getLastComponents();\n\n        if(!components[id] || (index = components[id].indexOf(component.ɵɵRelationsComponentId ?? '')) < 0)\n        {\n            this.logger?.warn('RelationsDebugger: component \"{{@id}}\" does not exists!', {id: `${id}--${component.ɵɵRelationsComponentId}`});\n\n            return;\n        }\n\n        this.components.push(extend(true, {}, components));\n        components = this.getLastComponents();\n\n        components[id].splice(index, 1);\n\n        if(!components[id].length)\n        {\n            delete components[id];\n        }\n\n        //update component for debugging info\n        if(Reflect.getOwnPropertyDescriptor(component, COMPONENT_DEBUGGER_PROPERTY))\n        {\n            Reflect.deleteProperty(component, COMPONENT_DEBUGGER_PROPERTY);\n            Reflect.deleteProperty(component, nameof<RelationsProcessorComponent>('relationsOptions'));\n        }\n\n        this.steps.push(\n        {\n            timestamp: Date.now(),\n            componentRegistration: null,\n            componentState: null,\n            componentUnregistration:\n            {\n                componentId: id,\n                componentInternalId: component.ɵɵRelationsComponentId ?? '',\n            },\n            dataTransfer: null,\n            componentRelationsOptions: null,\n            previousStep: this.getLastStepData(),\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public transferData(transfer: RelationsDataTransferInstructionImpl&Partial<RelationsDataTransferIdDebugInfo>, options: RelationsDataTransferDebugInfo): void\n    {\n        transfer.ɵuniqueId ??= generateId(16);\n\n        const applyChangesOriginal = transfer.applyChanges;\n\n        transfer.applyChanges = (() =>\n        {\n            applyChangesOriginal.call(transfer);\n\n            const components = this.getLastComponents();\n            this.components.push(extend(true, {}, components));\n\n            this.steps.push(\n            {\n                timestamp: Date.now(),\n                componentRegistration: null,\n                componentState: null,\n                componentUnregistration: null,\n                dataTransfer:\n                {\n                    change: transfer.changes[options.inputName],\n                    inputComponentId: options.inputComponentId,\n                    inputName: options.inputName,\n                    outputComponentId: options.outputComponentId,\n                    outputName: options.outputName,\n                    scope: options.scope,\n                    ɵuniqueId: transfer.ɵuniqueId ?? '',\n                },\n                componentRelationsOptions: null,\n                previousStep: this.getLastStepData(),\n            });\n\n            this.readComponentState(options.inputComponentId);\n            this.readComponentState(options.outputComponentId);\n\n            const step = this.getLastStepData();\n\n            if(!step)\n            {\n                throw Error('RelationsDebugger: no step available!');\n            }\n\n            if(step.componentState)\n            {\n                for(const comp of step.componentState[options.inputComponentId])\n                {\n                    comp.inputs[options.inputName] = step.dataTransfer?.change.currentValue;\n                }\n            }\n        }).bind(transfer);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getCurrentComponents(): Dictionary<string[]>\n    {\n        if(!this.components.length)\n        {\n            return {};\n        }\n\n        return this.components[this.currentStepIndex];\n    }\n\n    /**\n     * Gets component definition\n     * @param id - Id of component which definition will be obtained\n     */\n    public getComponentDef(id: string): RelationsComponentEndpoints|null\n    {\n        return this.componentDefs[id] ?? null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getComponentState(id: string): RelationsComponentStateDebugInfo[]\n    {\n        let step: RelationsStepDebugInfo|undefined|null = this.getCurrentStep();\n\n        if(!step)\n        {\n            return [];\n        }\n\n        do\n        {\n            if(step.componentState?.[id])\n            {\n                return step.componentState[id];\n            }\n        }\n        while((step = step.previousStep));\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getComponentRelationsOptions(id: string): unknown\n    {\n        let step: RelationsStepDebugInfo|undefined|null = this.getCurrentStep();\n\n        if(!step)\n        {\n            return undefined;\n        }\n\n        do\n        {\n            if(step.componentRelationsOptions?.[id])\n            {\n                return step.componentRelationsOptions[id];\n            }\n        }\n        while((step = step.previousStep));\n\n        return undefined;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getLastStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || (this.steps.length - 1) == this.currentStepIndex)\n        {\n            return null;\n        }\n\n        this.currentStepIndex = this.steps.length - 1;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getFirstStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || this.currentStepIndex == 0)\n        {\n            return null;\n        }\n\n        this.currentStepIndex = 0;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getNextStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || (this.steps.length - 1) == this.currentStepIndex)\n        {\n            return null;\n        }\n\n        this.currentStepIndex++;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getPreviousStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || this.currentStepIndex == 0)\n        {\n            return null;\n        }\n\n        this.currentStepIndex--;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getCurrentStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length)\n        {\n            return null;\n        }\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clearSteps(): void\n    {\n        this.currentStepIndex = 0;\n        this.stepChangeSubject.next();\n\n        this.steps = [];\n        this.components = [];\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Reads component state\n     * @param id - Id of component which state is read\n     */\n    protected readComponentState(id: string): void\n    {\n        let components = this.relationsComponentManager.get(id);\n\n        if(!components)\n        {\n            this.logger?.warn('RelationsDebugger: unable to find component with id {{@id}}', {id});\n\n            return;\n        }\n\n        if(!Array.isArray(components))\n        {\n            components = [components];\n        }\n\n        const state: RelationsComponentStateDebugInfo[] = components.map(itm =>\n        {\n            const def = this.componentDefs[id];\n            const itmDict = itm as unknown as Dictionary;\n\n            const inputs: Dictionary = {};\n            const outputs: Dictionary<RelationsOutputDebugInfo> = {};\n\n            if(def)\n            {\n                for(const input of def.inputs)\n                {\n                    try\n                    {\n                        inputs[input] = itmDict[input];\n                    }\n                    catch(e)\n                    {\n                        this.logger?.warn(`RelationsDebugger: failed reading input '${input}', {{@error}}`, {error: e});\n\n                        inputs[input] = undefined;\n                    }\n                }\n\n                for(const output of def.outputs)\n                {\n                    try\n                    {\n                        outputs[output] ??=\n                        {\n                            assigned: undefined,\n                            skipInit: undefined,\n                            value: undefined,\n                        };\n\n                        outputs[output].value = itmDict[output];\n                        outputs[output].assigned = itmDict[`${output}Assigned`] as boolean|undefined;\n                        outputs[output].skipInit = itmDict[`${output}SkipInit`] as boolean|undefined;\n                    }\n                    catch(e)\n                    {\n                        this.logger?.warn(`RelationsDebugger: failed reading output '${output}', {{@error}}`, {error: e});\n\n                        outputs[output] =\n                        {\n                            assigned: undefined,\n                            skipInit: undefined,\n                            value: undefined,\n                        };\n                    }\n                }\n            }\n\n            return {\n                componentId: id,\n                componentInternalId: itm.ɵɵRelationsComponentId ?? '',\n                inputs,\n                outputs,\n            };\n        });\n\n        const step = this.getLastStepData();\n\n        if(!step)\n        {\n            throw Error('RelationsDebugger: no step available!');\n        }\n\n        step.componentState ??= {};\n        step.componentState[id] = state;\n    }\n\n    /**\n     * Sets component relations options\n     * @param id - Id of component which state is read\n     * @param relationsOptions - Instance of relations options to be set\n     */\n    protected setComponentRelationsOptions(id: string, relationsOptions: unknown): void\n    {\n        const step = this.getLastStepData();\n\n        if(!step)\n        {\n            throw Error('RelationsDebugger: no step available!');\n        }\n\n        step.componentRelationsOptions ??= {};\n        step.componentRelationsOptions[id] = relationsOptions;\n    }\n\n    /**\n     * Gets last step\n     */\n    protected getLastStepData(): RelationsStepDebugInfo|undefined|null\n    {\n        return this.steps.length > 0 ? this.steps[this.steps.length - 1] : null;\n    }\n\n    /**\n     * Gets last components\n     */\n    protected getLastComponents(): Dictionary<string[]>\n    {\n        if(!this.components.length)\n        {\n            return {};\n        }\n\n        return this.components[this.components.length - 1];\n    }\n\n    /**\n     * Tries to get endpoints for component\n     * @param id - Id of component whose endpoints are going to be obtained\n     * @param component - Component which endpoints are going to be obtained\n     */\n    protected tryToGetEndpoints(id: string, component: RelationsProcessorComponent): void\n    {\n        const debugData = getDebugData((Reflect.getPrototypeOf(component) as Object).constructor);\n\n        if(!debugData)\n        {\n            return;\n        }\n\n        if(debugData.inputs)\n        {\n            for(const input of debugData.inputs)\n            {\n                this.addInputDef(id, input);\n            }\n        }\n\n        if(debugData.outputs)\n        {\n            for(const output of debugData.outputs)\n            {\n                this.addOutputDef(id, output);\n            }\n        }\n\n        if(debugData.dynamicEndpointsGetter)\n        {\n            const inputsOutputsDef = debugData.dynamicEndpointsGetter(component, component.ɵɵinjector ?? this.injector);\n\n            for(const input of inputsOutputsDef.inputs)\n            {\n                this.addInputDef(id, input);\n            }\n\n            for(const output of inputsOutputsDef.outputs)\n            {\n                this.addOutputDef(id, output);\n            }\n        }\n    }\n\n    /**\n     * Adds input for component def\n     * @param id - Id of component whose input definition will be added\n     * @param input - Input name to be added\n     */\n    protected addInputDef(id: string, input: string): void\n    {\n        this.componentDefs[id] ??= \n        {\n            inputs: [],\n            outputs: [],\n        };\n\n        if(this.componentDefs[id].inputs.indexOf(input) < 0)\n        {\n            this.componentDefs[id].inputs.push(input);\n        }\n    }\n\n    /**\n     * Adds output for component def\n     * @param id - Id of component whose output definition will be added\n     * @param output - Output name to be added\n     */\n    protected addOutputDef(id: string, output: string): void\n    {\n        this.componentDefs[id] ??= \n        {\n            inputs: [],\n            outputs: [],\n        };\n\n        if(this.componentDefs[id].outputs.indexOf(output) < 0)\n        {\n            this.componentDefs[id].outputs.push(output);\n        }\n    }\n}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Debugger node relations metadata loader\n */\nexport const DebuggerNodeRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/debuggerNode.relationsMetadata')).DebuggerNodeRelationsEditorMetadata();\n","import {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {PureRelationsComponent} from '@anglr/dynamic/relations';\n\nimport {DebuggerNodeRelationsMetadataLoader} from './debuggerNode.metadata';\n\n/**\n * Debugger node relations component, not real relations\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(DebuggerNodeRelationsMetadataLoader)\nexport class DebuggerNodeRelations\n{\n}","import {DebuggerNodeRelations} from './debuggerNode.relations';\n\nexport default DebuggerNodeRelations;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport * as debuggerNode from '../../dynamicItems/debuggerNode/type';\n\n/**\n * Dynamic module items provider for relations debugger module items\n */\n@Injectable()\nexport class RelationsDebuggerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'relations-debugger':\n            {\n                return debuggerNode;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {RelationsDebuggerDynamicModuleItemsProvider} from '../services';\n\n/**\n * Provider for relations debugger package relations nodes provider\n */\nexport const RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: RelationsDebuggerDynamicModuleItemsProvider,\n    multi: true\n};\n","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Routes} from '@angular/router';\nimport {extractRoutes} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const routes: Routes =\n[\n    {\n        path: '',\n        redirectTo: '/layout/preview',\n        pathMatch: 'full'\n    },\n    {\n        path: 'layout',\n        loadChildren: () => import('../pages/+layout/layout.module').then(({LayoutModule}) => LayoutModule)\n    },\n    {\n        path: 'layout',\n        loadChildren: () => import('../pages/+layoutEditor/layoutEditor.module').then(({LayoutEditorModule}) => LayoutEditorModule)\n    },\n    {\n        path: 'relationsStatic',\n        loadChildren: () => import('../pages/+relationsStatic/relationsStatic.module').then(({RelationsStaticModule}) => RelationsStaticModule)\n    },\n    {\n        path: 'relationsEditor',\n        loadChildren: () => import('../pages/+relationsEditor/relationsEditor.module').then(({RelationsEditorModule}) => RelationsEditorModule)\n    },\n    {\n        path: 'relationsWithEditor',\n        loadChildren: () => import('../pages/+relationsWithEditor/relationsWithEditor.module').then(({RelationsWithEditorModule}) => RelationsWithEditorModule)\n    },\n    {\n        path: 'relationsWithLayoutEditor',\n        loadChildren: () => import('../pages/+relationsWithLayoutEditor/relationsWithLayoutEditor.module').then(({RelationsWithLayoutEditorModule}) => RelationsWithLayoutEditorModule)\n    },\n    {\n        path: 'relationsComplex',\n        loadChildren: () => import('../pages/+relationsComplex/relationsComplex.module').then(({RelationsComplexModule}) => RelationsComplexModule)\n    },\n    {\n        path: 'relationsLayoutForm',\n        loadChildren: () => import('../pages/+relationsLayoutForm/relationsLayoutForm.module').then(({RelationsLayoutFormModule}) => RelationsLayoutFormModule)\n    },\n    ...extractRoutes(\n        [\n        ]),\n    accessDeniedRoute,\n    notFoundRoute,\n];","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'en';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return new Observable((observer: Observer<any>) =>\n        {\n            (async () => \n            {\n                const result = await import(`../../../content/l10n/${lang}.json`);\n    \n                observer.next(result.default);\n                observer.complete();\n            })();\n        });\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, Provider, ExistingProvider, EnvironmentProviders, inject, importProvidersFrom, provideZoneChangeDetection} from '@angular/core';\nimport {provideClientHydration} from '@angular/platform-browser';\nimport {provideHttpClient, withInterceptorsFromDi} from '@angular/common/http';\nimport {provideRouter, withComponentInputBinding, withHashLocation} from '@angular/router';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LocalPermanentStorage} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS, providePosition, provideLoggerConfig, DeveloperConsoleSink, LogLevelEnricher, TimestampEnricher, LogLevel, ConsoleComponentSink, providePermanentStorage} from '@anglr/common';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, provideAnglrExceptionExtenders, errorWithUrlExtender, provideInternalServerErrorRenderer, provideHttpClientErrorResponseMapper, provideHttpClientValidationErrorResponseMapper, provideHttpClientErrorMessages, provideHttpClientErrorHandlers, handleHttp404Error} from '@anglr/error-handling';\nimport {DialogInternalServerErrorRenderer} from '@anglr/error-handling/material';\nimport {BasicPagingOptions, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent, provideGridInitializerType, provideMetadataSelectorType, provideNoDataRendererOptions, providePagingOptions, provideMetadataSelectorOptions, provideGridInitializerOptions, provideContentRendererOptions} from '@anglr/grid';\nimport {DialogMetadataSelectorOptions, DialogMetadataSelectorSAComponent} from '@anglr/grid/material';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {MovableTitledDialogComponent, TitledDialogServiceOptions, TitledDialogService, provideConfirmationDialogOptions} from '@anglr/common/material';\nimport {FloatingUiDomPosition} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {CatchHttpClientErrorMiddleware, HttpClientErrorProcessingMiddleware, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {provideGlobalNotifications} from '@anglr/notifications';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {LoggerMiddleware, MockLoggerMiddleware, ReportProgressMiddleware, ResponseTypeMiddleware, provideRestMethodMiddlewares} from '@anglr/rest';\nimport {provideRestDateTime} from '@anglr/rest/datetime';\nimport {provideRelationsDebuggerImplementation} from '@anglr/dynamic/relations-debugger';\nimport {isString} from '@jscrpt/common';\nimport {MissingTranslationHandler, TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {DndModule} from '@ng-dnd/core';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\nimport {sk} from 'date-fns/locale';\n\nimport {routes} from './app.component.routes';\nimport {config} from '../config';\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n/**\n * Array of providers that are used in app module\n */\nexport const appProviders: (Provider|EnvironmentProviders)[] =\n[\n    //######################### ROUTER #########################\n    provideRouter(routes,\n                  withComponentInputBinding(),\n                  withHashLocation()),\n\n    //######################### CLIENT HYDRATION #########################\n    provideClientHydration(),\n\n    //######################### HTTP CLIENT #########################\n    provideHttpClient(withInterceptorsFromDi(),),\n\n    //######################### ZONE #########################\n    provideZoneChangeDetection({eventCoalescing: true, runCoalescing: true}),\n\n    //######################### TRANSLATIONS #########################\n    importProvidersFrom(TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n        {\n            provide: TranslateLoader, \n            useClass: WebpackTranslateLoaderService\n        },\n            ...config.configuration.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                {\n                    provide: MissingTranslationHandler,\n                    useClass: ReportMissingTranslationService\n                }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration.debugTranslations\n        })),\n\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new NoConnectionInterceptorOptions('Server je mimo prevádzky.'),\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.'),\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### ERROR HANDLING #########################\n    provideAnglrExceptionExtenders(\n    [\n        errorWithUrlExtender,\n    ]),\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    provideInternalServerErrorRenderer(DialogInternalServerErrorRenderer),\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    provideGridInitializerType(QueryGridInitializerComponent),\n    provideMetadataSelectorType(DialogMetadataSelectorSAComponent),\n    provideNoDataRendererOptions(\n    {\n        texts:\n        {\n            loading: 'Nahrávam dáta ...',\n            noData: 'Neboli nájdené dáta odpovedajúce zadaným parametrom',\n            notLoaded: 'Neboli načítané žiadne dáta zatiaľ'\n        }\n    }),\n    providePagingOptions<BasicPagingOptions>(\n    {\n        itemsPerPageValues: [15, 30, 60],\n        initialItemsPerPage: 15\n    }),\n    provideMetadataSelectorOptions<DialogMetadataSelectorOptions>(\n    {\n        showButtonVisible: false\n    }),\n    provideGridInitializerOptions<QueryPermanentStorageGridInitializerOptions>(\n    {\n        storageIppName: 'all-grid-ipp'\n    }),\n    provideContentRendererOptions<TableContentRendererOptions>(\n    {\n        cssClasses:\n        {\n            containerDiv: 'table-container thin-scrollbar'\n        }\n    }),\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    //TODO\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    providePermanentStorage(LocalPermanentStorage),\n\n    //######################### LOGGER #########################\n    provideLoggerConfig(config => config\n        .writeTo(cfg => cfg.writeTo(ConsoleComponentSink)\n            .minimumLevel(() =>\n            {\n                const settings = inject(SettingsService);\n\n                return () => LogLevel[settings.settingsLogging.consoleLogLevel as keyof typeof LogLevel];\n            }))\n        //Relations logger\n        .writeTo(cfg => cfg.writeTo(DeveloperConsoleSink)\n            .minimumLevel(LogLevel.Off)\n            .filter((_, log) => !!log.message.match(/^(?:)RelationsProcessor|RelationsChangeDetector/)))\n        //Layout logger\n        .writeTo(cfg => cfg.writeTo(DeveloperConsoleSink)\n            .minimumLevel(LogLevel.Off)\n            .filter((_, log) => !!log.message.match(/^(?:)LayoutComponentRendererSADirective|LayoutRenderer|LayoutEditorRenderer|LayoutDesignerSAComponent/)))\n        //Dynamic logger\n        .writeTo(cfg => cfg.writeTo(DeveloperConsoleSink)\n            .minimumLevel(LogLevel.Off)\n            .filter((_, log) => !!log.message.match(/^(?:)BasicDynamicModuleItemsProvider|defaultExportExtractor|extensionsExportsExtractor|DynamicItemLoader/)))\n        .writeTo(DeveloperConsoleSink)\n        .enrichWith(LogLevelEnricher)\n        .enrichWith(TimestampEnricher)\n        .minimumLevel(LogLevel.Off)\n        .messageTemplate('{{timestamp}} [{{logLevel}}] {{messageLog}}')),\n\n    //######################### SETTINGS STORAGE #########################\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: () =>\n        {\n            const settingsSvc: SettingsService = inject(SettingsService);\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    provideGlobalNotifications(),\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n    importProvidersFrom(MatDialogModule),\n    TitledDialogService,\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    provideConfirmationDialogOptions(\n    {\n        cssClasses:\n        {\n            closeButton: 'btn btn-danger margin-right-small',\n        },\n        confirmationText: 'Prajete si pokračovať?',\n        dialogCancelText: 'Nie',\n        dialogConfirmText: 'Áno',\n    }),\n\n    //######################### POSITION #########################\n    providePosition(FloatingUiDomPosition),\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    provideRestDateTime(),\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    provideRestMethodMiddlewares(\n    [\n        LoggerMiddleware,\n        ResponseTypeMiddleware,\n        ReportProgressMiddleware,\n        HttpClientErrorProcessingMiddleware,\n        CatchHttpClientErrorMiddleware,\n        ...jsDevMode ? [...config.configuration.disableMockLogger ? [] : [MockLoggerMiddleware]] : [],\n    ]),\n    provideHttpClientErrorResponseMapper(err =>\n    {\n        if(err?.error?.errors)\n        {\n            return err?.error?.errors;\n        }\n\n        if(isString(err?.error))\n        {\n            return [err?.error];\n        }\n\n        return [];\n    }),\n    provideHttpClientValidationErrorResponseMapper(err =>\n    {\n        if(err?.error?.validationErrors)\n        {\n            return err?.error?.validationErrors;\n        }\n\n        return null;\n    }),\n    provideHttpClientErrorMessages(\n    {\n        400: 'Chyba spracovania dát!',\n        404: 'Záznam pre požadované ID sa nenašiel!',\n    }),\n    provideHttpClientErrorHandlers(\n    {\n        404: handleHttp404Error,\n    }),\n    provideRelationsDebuggerImplementation(),\n    importProvidersFrom(DndModule.forRoot(\n    {\n        backend: HTML5Backend\n    })),\n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Provider} from '@angular/core';\nimport {RELATIONS_DEBUGGER_TYPE} from '@anglr/dynamic/relations';\nimport {DEFAULT_RELATIONS_NODES_EXTRACTOR, RELATIONS_NODES_LOADER_PROVIDER} from '@anglr/dynamic/relations-editor';\n\nimport {RelationsDebuggerImpl} from '../services';\nimport {RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Provides relations debugger implementation\n */\nexport function provideRelationsDebuggerImplementation(): Provider[]\n{\n    return [\n        RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        {\n            provide: RELATIONS_DEBUGGER_TYPE,\n            useValue: RelationsDebuggerImpl,\n        },\n    ];\n}","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {EnvironmentProviders, FactoryProvider, Provider, enableProdMode, importProvidersFrom} from '@angular/core';\nimport {provideAnimations} from '@angular/platform-browser/animations';\nimport {bootstrapApplication} from '@angular/platform-browser';\nimport {runWhenAppStable} from '@anglr/common';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {simpleNotification} from '@jscrpt/common';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppSAComponent} from './boot/app.component';\nimport {config} from './config';\nimport {appProviders} from './boot/app.providers';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst providers: (Provider|EnvironmentProviders)[] =\n[\n    ...appProviders,\n    provideAnimations(),\n    <FactoryProvider>\n    {\n        provide: AnglrExceptionHandlerOptions,\n        useFactory: () => new AnglrExceptionHandlerOptions(config.configuration.debug, false)\n    },\n    importProvidersFrom(HotkeyModule.forRoot(\n    {\n        cheatSheetCloseEsc: true\n    })),\n];\n\nrunWhenAppStable(bootstrapApplication(AppSAComponent, {providers}), _ =>\n{\n    jsDevMode && simpleNotification(jsDevMode && !!import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule} from '@anglr/common';\nimport {NumeralSAPipe} from '@anglr/common/numeral';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    imports:\n    [\n        NumeralSAPipe\n    ],\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralSAPipe,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {extend} from '@jscrpt/common';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,)\n    {\n    }\n\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = this._storage.get<SettingsGeneral>(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        this._storage.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = this._storage.get<SettingsDebug>(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        this._storage.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = this._storage.get<SettingsLogging>(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        this._storage.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}","import {Type} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Func1} from '@jscrpt/common';\n\n/**\n * Symbol used for storing descendants getter\n */\nconst descendantsGetterSymbol = Symbol('descendantsGetter');\n\n/**\n * Defines function for dynamic component which is used for obtaining its descendants\n * @param descendantsGetterFn - Function used for obtaining descendants of dynamic component\n */\nexport function DescendantsGetter<TOptions = unknown>(descendantsGetterFn: Func1<LayoutComponentMetadata[], TOptions|undefined|null>): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        Object.defineProperty(target,\n                              descendantsGetterSymbol,\n                              {\n                                  writable: false,\n                                  configurable: false,\n                                  enumerable: false,\n                                  value: descendantsGetterFn,\n                              });\n\n        return target;\n    };\n}\n\n/**\n * Gets descendants getter if is set\n * @param type - Type which could contains descendants getter\n */\nexport function getDescendantsGetter<TOptions = unknown>(type: Type<unknown>): Func1<LayoutComponentMetadata[], TOptions|undefined|null>|undefined|null\n{\n    if(descendantsGetterSymbol in type)\n    {\n        return (type as any)[descendantsGetterSymbol];\n    }\n\n    return null;\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying textarea\n */\n@Component(\n{\n    selector: 'textarea-input',\n    templateUrl: 'textarea.component.html',\n    styles: [HostDisplayBlockStyle],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TextareaComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<textarea class=\"properties-form-control\" [formControl]=\"_control | asRequired\"></textarea>","import {InjectionToken, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\nimport {TextareaComponent} from '../modules/propertyTypeControls/components/textarea/textarea.component';\nimport {InputNumberComponent} from '../modules/propertyTypeControls/components/inputNumber/inputNumber.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                                 'textarea': TextareaComponent,\n                                                                                                                                                                                 'inputNumber': InputNumberComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n\n/**\n * Injection token for observables that allows refreshing of components palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for layout defaults override\n */\nexport const LAYOUT_DEFAULTS_OVERRIDE: InjectionToken<DefaultsOverride> = new InjectionToken<DefaultsOverride>('LAYOUT_DEFAULTS_OVERRIDE');\n","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {{@item}} was not found, reason:' + e, {item: {name: source.name, package: source.package}});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {{@item}} was not found', {item: {name: source.name, package: source.package}});\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemEditorData, DynamicItemExtensions, DynamicModule, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithEditorData extends DynamicModule\n{\n    /**\n     * Display name of custom component\n     */\n    displayName?: string;\n\n    /**\n     * Description for custom component\n     */\n    description?: string;\n\n    /**\n     * Group of custom component\n     */\n    group?: string;\n}\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions&DynamicItemEditorData> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n    const localModuleEditorData = module as ɵDynamicModuleWithEditorData;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            displayName: localModuleEditorData?.displayName,\n            description: localModuleEditorData?.description,\n            group: localModuleEditorData?.group,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, EDITOR_METADATA_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LayoutRenderer} from '@anglr/dynamic/layout';\nimport {LOGGER} from '@anglr/common';\n\nimport {LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager, LayoutEditorRenderer} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n//TODO: move into feature all providers and make them non exported\n\n/**\n * Layout renderer for layout editor\n */\nexport const EDITOR_LAYOUT_RENDERER: ExistingProvider =\n{\n    provide: LayoutRenderer,\n    useExisting: LayoutEditorRenderer,\n};\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER),\n                                            true)\n};\n\n/**\n * Provider for layout metadata manager state\n */\nexport const LAYOUT_EDITOR_METADATA_MANAGER: ExistingProvider =\n{\n    provide: EDITOR_METADATA_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoaderValidatorFn, LayoutFeature} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_EDITOR_METADATA_MANAGER, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER, EDITOR_LAYOUT_RENDERER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor, LayoutEditorRenderer, LiveEventService} from '../services';\nimport {LAYOUT_DEFAULTS_OVERRIDE} from './tokens';\nimport {LayoutEditorFeature} from './features/layoutEditor.feature';\n\n//TODO: remove when finished refactoring\n\n/**\n * Enables use of layout editor feature\n */\nexport function withEditor(): LayoutFeature\n{\n    return new LayoutEditorFeature();\n}\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LiveEventService,\n        LayoutComponentsIteratorService,\n        LayoutEditorRenderer,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_EDITOR_METADATA_MANAGER,\n        EDITOR_LAYOUT_RENDERER,\n    ];\n}\n\n/**\n * Provider for layout defaults override\n * @param defaultsOverride - Service to pride as layout defaults override\n */\nexport function provideLayoutDefaultsOverride(defaultsOverride: Type<DefaultsOverride>): Provider\n{\n    return <ClassProvider>{\n        provide: LAYOUT_DEFAULTS_OVERRIDE,\n        useClass: defaultsOverride\n    };\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"properties-form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this.initPromise ??= this.getInitPromise());\n\n        for(const item of this.items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async getComponents(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        \n        this.items.push(iteratorItem);\n\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsIterator: failed to get dynamic component type for iterator! {{@data}}', {data: {package: metadata.package, name: metadata.name}});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this.getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getComponents();\n        }\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get dynamic component type for children iterator! {{@data}}', {data: {package: metadata.package, name: metadata.name}});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.loader, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.loader, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, OnDestroy, Signal, WritableSignal, signal} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {EditorHotkeys, EditorMetadataManager} from '@anglr/dynamic';\nimport {Dictionary, extend, generateId, isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements EditorMetadataManager<LayoutComponentMetadata>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Clipboard for layout metadata copy/paste/cut operations\n     */\n    protected metadataClipboard: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected ɵselectedComponent: WritableSignal<string|null> = signal(null);\n\n    /**\n     * Id of highlighted component\n     */\n    protected ɵhighlightedComponent: WritableSignal<string|null> = signal(null);\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected layoutChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected displayNameChangesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Id of dragged over component\n     */\n    protected ɵdraggedOverComponent: WritableSignal<string|null> = signal(null);\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): Signal<string|null>\n    {\n        return this.ɵselectedComponent.asReadonly();\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): Signal<string|null>\n    {\n        return this.ɵhighlightedComponent.asReadonly();\n    }\n\n    /**\n     * Gets id of dragged over component\n     */\n    public get draggedOverComponent(): Signal<string|null>\n    {\n        return this.ɵdraggedOverComponent.asReadonly();\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this.layoutChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this.displayNameChangesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected editorHotkeys: EditorHotkeys,\n                @Inject(LOGGER) protected logger: Logger,)\n    {\n        this.initSubscriptions.add(this.editorHotkeys.delete.subscribe(() =>\n        {\n            const selectedComponent = this.selectedComponent();\n\n            if(!selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            component.parent.component.removeDescendant(selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this.editorHotkeys.copy.subscribe(() =>\n        {\n            const selectedComponent = this.selectedComponent();\n\n            if(!selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[selectedComponent];\n            this.metadataClipboard = component.component.options?.typeMetadata;\n        }));\n\n        this.initSubscriptions.add(this.editorHotkeys.cut.subscribe(() =>\n        {\n            const selectedComponent = this.selectedComponent();\n\n            if(!selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            this.metadataClipboard = component.component.options?.typeMetadata;\n            component.parent.component.removeDescendant(selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this.editorHotkeys.paste.subscribe(() =>\n        {\n            const selectedComponent = this.selectedComponent();\n\n            if(!selectedComponent || !this.metadataClipboard)\n            {\n                return;\n            }\n\n            const component = this.components[selectedComponent];\n            const newId = `${this.metadataClipboard.name}-${generateId(12)}`;\n\n            if(component.component.canDrop)\n            {\n                component.component.addDescendant(\n                {\n                    index: 0,\n                    metadata: extend({}, this.metadataClipboard,\n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n            else if(component.parent?.component.canDrop)\n            {\n                component.parent.component.addDescendant(\n                {\n                    index: component.component.index + 1,\n                    metadata: extend({}, this.metadataClipboard,\n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        const selected = this.ɵselectedComponent();\n        this.ɵselectedComponent.set(id ?? null);\n\n        //clear selection\n        if(isPresent(selected))\n        {\n            this.components[selected]?.component.invalidateVisuals();\n        }\n\n        //select new one\n        if(isPresent(id))\n        {\n            this.components[id]?.component.invalidateVisuals();\n        }\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        const selected = this.ɵselectedComponent();\n        this.ɵselectedComponent.set(null);\n\n        //clear selection\n        if(isPresent(selected))\n        {\n            this.components[selected]?.component.invalidateVisuals();\n        }\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        const highlighted = this.ɵhighlightedComponent();\n        this.ɵhighlightedComponent.set(id ?? null);\n\n        //clear highlighted\n        if(isPresent(highlighted))\n        {\n            this.components[highlighted]?.component.invalidateVisuals();\n        }\n\n        //highlight new one\n        if(isPresent(id))\n        {\n            this.components[id]?.component.invalidateVisuals();\n        }\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        const highlighted = this.ɵhighlightedComponent();\n        this.ɵhighlightedComponent.set(null);\n\n        //clear highlight\n        if(isPresent(highlighted))\n        {\n            this.components[highlighted]?.component.invalidateVisuals();\n        }\n    }\n\n\n    /**\n     * Mark component as being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public dragOverComponent(id?: string): void\n    {\n        if (id === this.ɵdraggedOverComponent())\n        {\n            return;\n        }\n\n        this.ɵdraggedOverComponent.set(id ?? null);\n    }\n\n    //TODO: removal candidate\n    /**\n     * Removes indication of component being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public cancelDragOverComponent(): void\n    {\n        this.ɵdraggedOverComponent.set(null);\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this.rootComponentId = id;\n        }\n\n        //already exists\n        if(this.components[id])\n        {\n            this.logger.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this.components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent =\n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this.components[id] = componentItem;\n\n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this.layoutChangeSubject.next();\n\n        this.logger.debug('LayoutEditorMetadataManager: Registering component {{@id}}', {id: id});\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets children of component\n     * @param id - Id of component whose children are going to be get\n     */\n    public getChildren(id: string): LayoutDesignerSAComponent[]\n    {\n        return this.components[id]?.children?.map(itm => itm.component) ?? [];\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition\n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this.components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this.components[id];\n        delete this.components[id];\n\n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this.rootComponentId)\n        {\n            this.rootComponentId = null;\n        }\n\n        this.layoutChangeSubject.next();\n\n        this.logger.debug('LayoutEditorMetadataManager: Unregistering component {{@id}}', {id: id});\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this.displayNameChangesSubject.next();\n    }\n\n    /**\n     * Triggers event that layout has changed\n     */\n    public updateLayout(): void\n    {\n        this.layoutChangeSubject.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this.rootComponentId) || !this.components[this.rootComponentId])\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId].component.options?.typeMetadata ?? null;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {Injectable, Injector, SimpleChanges, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {DynamicItemExtensionType, SCOPE_ID, addSimpleChange} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS, LayoutComponent, LayoutComponentMetadata, LayoutRendererBase, MissingTypeBehavior, NotFoundLayoutTypeSAComponent} from '@anglr/dynamic/layout';\nimport {Action1, NoopAction} from '@jscrpt/common';\n\nimport {LayoutEditorRendererItem} from './layoutEditorRenderer.interface';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../../misc/constants';\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\n\n/**\n * Service used for handling rendering of layout\n */\n@Injectable()\nexport class LayoutEditorRenderer extends LayoutRendererBase<LayoutEditorRendererItem>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of promise that is used for sync async/await calls\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * Number of register calls waiting\n     */\n    protected registeredCalls: number = 0;\n\n    //######################### public methods #########################\n\n    /**\n     * Gets renderer information for component\n     * @param id - Id of component that should be obtained\n     */\n    public get(id: string): LayoutEditorRendererItem|undefined|null\n    {\n        return this.components[id];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override async registerRenderer(id: string,\n                                           parentId: string|undefined|null,\n                                           viewContainer: ViewContainerRef,\n                                           metadata: LayoutComponentMetadata,\n                                           parentMetadata: LayoutComponentMetadata|undefined|null,\n                                           scopeId: string|undefined|null,\n                                           childExtensions: DynamicItemExtensionType[]|undefined|null,\n                                           renderedCallback: Action1<LayoutEditorRendererItem>|undefined|null,\n                                           customInjector: Injector|undefined|null,): Promise<void>\n    {\n        this.registeredCalls++;\n\n        //synchronization code\n        const syncPromise = this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n        await syncPromise;\n\n        this.logger.debug('LayoutEditorRenderer: registering renderer {{@(4)renderer}}', {renderer: {id, parentId, metadata, parentMetadata, scopeId}});\n\n        let isDesigner: boolean = false;\n        let rendererItem: LayoutEditorRendererItem;\n        const componentItem = this.components[metadata.id];\n        const layoutDesignerId = `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`;\n\n        //component does not exists nor its designer, so create designer\n        if(!componentItem)\n        {\n            isDesigner = true;\n\n            rendererItem =\n            {\n                id,\n                parentId,\n                viewContainer,\n                metadata,\n                parentMetadata,\n                scopeId,\n                childExtensions,\n                component: null,\n                layoutDesigner: null,\n                componentViewContainer: null,\n                componentRendererId: null,\n            };\n\n            this.components[metadata.id] = rendererItem;\n            this.renderers[id] = rendererItem;\n        }\n        //component is rendered inside its layout designer\n        else if(componentItem && componentItem.id == parentId && !componentItem.component && !componentItem.componentViewContainer)\n        {\n            rendererItem = componentItem;\n            rendererItem.componentViewContainer = viewContainer;\n            rendererItem.componentRendererId = id;\n\n            this.renderers[id] = rendererItem;\n        }\n        else\n        {\n            throw new Error(`LayoutEditorRenderer: component with ID ${metadata.id} already exists!`);\n        }\n\n        this.logger.verbose('LayoutEditorRenderer: getting type \"{{@id}}\" isDesigner: {{isDesigner}} for {{@dynamicItem}}', {id: metadata?.id, isDesigner, dynamicItem: {package: metadata.package, name: metadata.name}});\n\n        const injector = customInjector ?? viewContainer.injector;\n        const componentScopeId = metadata.scope;\n        const layoutComponentType = await this.loader.loadItem(\n            isDesigner\n                ? {\n                    id: layoutDesignerId,\n                    package: '@anglr/dynamic/layout-editor',\n                    name: 'layout-designer',\n                    options: <LayoutDesignerComponentOptions>\n                    {\n                        typeMetadata: metadata\n                    }\n                }\n                : metadata,);\n\n        this.logger.verbose('LayoutEditorRenderer: rendering component {{@id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        if(!layoutComponentType)\n        {\n            this.logger.warn('LayoutEditorRenderer: Unable to find layout component type {{@type}} isDesigner: {{isDesigner}}', {type: {name: metadata.name, package: metadata.package}, isDesigner});\n\n            switch(this.options.missingTypeBehavior)\n            {\n                default:\n                //case MissingTypeBehavior.ShowNotFound:\n                {\n                    viewContainer.createComponent(NotFoundLayoutTypeSAComponent);\n\n                    break;\n                }\n                case MissingTypeBehavior.Ignore:\n                {\n                    //do nothing\n\n                    break;\n                }\n                case MissingTypeBehavior.ThrowError:\n                {\n                    throw new Error(`LayoutEditorRenderer: Unable to find layout component type Name: ${metadata.name} Package: ${metadata.package}`);\n                }\n            }\n\n            return;\n        }\n\n        this.logger.verbose('LayoutEditorRenderer: rendering component {{@id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        const usedInjector = Injector.create(\n        {\n            parent: injector,\n            providers:\n            [\n                <ValueProvider>\n                {\n                    provide: SCOPE_ID,\n                    useValue: componentScopeId ?? scopeId ?? null,\n                },\n                <ValueProvider>\n                {\n                    provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                    useValue: layoutComponentType.childExtensions,\n                }\n            ]\n        });\n\n        const component = viewContainer.createComponent(layoutComponentType.data,\n                                                        {\n                                                            injector: usedInjector,\n                                                        });\n\n        if(isDesigner)\n        {\n            rendererItem.layoutDesigner = component;\n        }\n        else\n        {\n            rendererItem.component = component;\n        }\n\n        component.changeDetectorRef.detach();\n\n        this.logger.verbose('LayoutEditorRenderer: component rendered {{@id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        const instance = component.instance;\n\n        //registers extensions and child extensions\n        instance.registerExtensions(\n        [\n            ...childExtensions?.map(itm => new itm(metadata)) ?? [],\n            ...layoutComponentType?.extensions?.map(itm => new itm(metadata)) ?? [],\n        ]);\n\n        const options = isDesigner\n            ? <LayoutDesignerComponentOptions>\n            {\n                typeMetadata: metadata\n            }\n            : metadata.options;\n\n        const changes: SimpleChanges = {};\n        addSimpleChange<LayoutComponent>(changes, 'options', options, instance.options, true);\n\n        this.logger.verbose('LayoutEditorRenderer: setting options for component {{id}}, isDesigner: {{isDesigner}}, options: {{@(4)options}}', {id: metadata?.id, options: options, isDesigner});\n        instance.options = options;\n        this.logger.verbose('LayoutEditorRenderer: set options for component {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        this.logger.verbose('LayoutEditorRenderer: setting changes for component {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n        await instance.dynamicOnChanges?.(changes);\n        this.logger.verbose('LayoutEditorRenderer: set changes for component {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        this.logger.verbose('LayoutEditorRenderer: initializing component {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n        await instance.dynamicOnInit?.();\n        this.logger.verbose('LayoutEditorRenderer: initialized component {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        this.logger.verbose('LayoutEditorRenderer: invalidating component visuals {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n        instance.invalidateVisuals();\n        this.logger.verbose('LayoutEditorRenderer: invalidated component visuals {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        this.logger.verbose('LayoutEditorRenderer: after view initializing {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n        await instance.dynamicAfterViewInit?.();\n        this.logger.verbose('LayoutEditorRenderer: after view initialized {{id}} isDesigner: {{isDesigner}}', {id: metadata?.id, isDesigner});\n\n        if(!isDesigner)\n        {\n            renderedCallback?.(rendererItem);\n        }\n\n        //TODO: maybe make it configurable\n        component.changeDetectorRef.reattach();\n\n        //sync call finished\n        syncResolve?.();\n        this.registeredCalls--;\n\n        if(this.registeredCalls === 0)\n        {\n            this.renderingFinishedSubject.next();\n        }\n    }\n\n    /**\n     * Destroyes renderer, removes it from register, destroyed renderer also destroys component, this is called when renderer is destroyed\n     * @param id - Id of renderer\n     */\n    public override destroyRenderer(id: string): void\n    {\n        this.logger.debug('LayoutEditorRenderer: destroying renderer \"{{id}}\", current renderers register: {{@(4)renderers}}', {id, renderers: Object.keys(this.renderers)});\n        \n        const renderer = this.renderers[id];\n\n        //if renderer exists remove it from register\n        if(renderer)\n        {\n            this.logger.verbose('LayoutEditorRenderer: removing renderer from registry \"{{id}}\"', {id});\n\n            delete this.components[renderer.metadata.id];\n            delete this.renderers[id];\n        }\n    }\n\n    /**\n     * Unregisters renderer, removes it from register, destroys component, this is called when renderer is emptied\n     * @param id - Id of renderer that will be removed\n     */\n    public override unregisterRenderer(id: string): void\n    {\n        this.logger.debug('LayoutEditorRenderer: ungregistering renderer \"{{id}}\", current renderers register: {{@(4)renderers}}', {id, renderers: Object.keys(this.renderers)});\n\n        const renderer = this.renderers[id];\n\n        //if renderer exists remove it from register and destroy component\n        if(renderer)\n        {\n            this.logger.verbose('LayoutEditorRenderer: destroying component \"{{id}}\"', {id});\n            //destroys component\n            renderer.viewContainer.clear();\n            this.logger.verbose('LayoutEditorRenderer: component destroyed \"{{id}}\"', {id});\n\n            delete this.components[renderer.metadata.id];\n            delete this.renderers[id];\n        }\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst LIVE_EVENTS_STATUS = 'LIVE_EVENTS_STATUS';\n\n/**\n * Service used for handling state of layout live events\n */\n@Injectable()\nexport class LiveEventService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current enabled value\n     */\n    protected ɵenabled: boolean = false;\n    \n    /**\n     * Used for emitting enabled changes\n     */\n    protected ɵenabledChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current enabled value\n     */\n    public get enabled(): boolean\n    {\n        return this.ɵenabled;\n    }\n    \n    /**\n     * Occurs when enabled changes\n     */\n    public get enabledChange(): Observable<void>\n    {\n        return this.ɵenabledChange.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) protected storage: PermanentStorage,)\n    {\n        this.ɵenabled = this.storage.get<boolean|undefined>(LIVE_EVENTS_STATUS) ?? false;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets enabled new value\n     * @param enabled - Value of enabled that changed\n     */\n    public setEnabled(enabled: boolean): void\n    {\n        if(this.ɵenabled == enabled)\n        {\n            return;\n        }\n    \n        this.storage.set(LIVE_EVENTS_STATUS, enabled);\n\n        this.ɵenabled = enabled;\n        this.ɵenabledChange.next();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        //TODO: add type for return\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n        const scope = await this._componentsRegister.getScope(source.name);\n        const name = await this._componentsRegister.getComponentName(source.name);\n        const packageName = await this._componentsRegister.getComponentPackage(source.name);\n\n        return {\n            default: type,\n            displayName,\n            scope,\n            name,\n            package: packageName,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module items provider for custom components module items\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Optional() private _customComponentRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleItemsProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        switch(source.name)\n        {\n            case 'placeholder':\n            {\n                return await import('../../dynamicItems/placeholder/type');\n            }\n            case 'placeholderContainer':\n            {\n                return await import('../../dynamicItems/placeholderContainer/type');\n            }\n            case 'componentInputs':\n            {\n                return await import('../../dynamicItems/componentInputs/type');\n            }\n            case 'componentOutputs':\n            {\n                return await import('../../dynamicItems/componentOutputs/type');\n            }\n            default:\n            {\n                const customComponent = await import('../../dynamicItems/customComponent/type');\n                const customComponentConfiguration = await this._customComponentRegister?.getConfigurationForComponent(source.name);\n                \n                const resultType = \n                {   \n                    ...customComponent,\n                    displayName: customComponentConfiguration?.displayName,\n                    description: customComponentConfiguration?.description,\n                    group: customComponentConfiguration?.group,\n                };\n\n                Object.freeze(resultType);\n\n                return resultType;\n            }\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = await this._componentsRegister.getRegisteredComponents();\n\n        if(!types.length)\n        {\n            return {\n                default: \n                [\n                    'placeholder',\n                ]\n            };\n        }\n\n        return {\n            default: \n            [\n                ...types,\n                'placeholder',\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleRelationsProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        return {\n            default: [\n                'componentInputs',\n                'componentOutputs',\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomRelationsRegister} from '../customRelationsRegister/customRelationsRegister.service';\n\n/**\n * Dynamic module relations types provider, for custom relations types\n */\n@Injectable()\nexport class CustomRelationsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) protected logger: Logger,\n                @Optional() protected customRelationsRegister?: CustomRelationsRegister,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom relations\n        if(source.package != 'custom-relations')\n        {\n            return null;\n        }\n\n        this.logger.debug('CustomRelationsDynamicModuleRelationsProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = await this.customRelationsRegister?.getRegisteredComponents();\n\n        return {\n            default: [\n                ...types ?? [],\n                'relationsInputs',\n                'relationsOutputs',\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {CustomRelationsRegister} from '../customRelationsRegister/customRelationsRegister.service';\n\n/**\n * Dynamic module items provider for custom relations module items\n */\n@Injectable()\nexport class CustomRelationsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) protected logger: Logger,\n                @Optional() protected customRelationsRegister?: CustomRelationsRegister,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicModuleProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom relations\n        if(source.package != 'custom-relations')\n        {\n            return null;\n        }\n\n        this.logger.debug('CustomRelationsDynamicModuleItemsProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        switch(source.name)\n        {\n            case 'relationsInputs':\n            {\n                const relationsInputs = await import('../../dynamicItems/componentInputs/type');\n\n                if(!relationsInputs)\n                {\n                    return null;\n                }\n\n                const resultType = \n                {   \n                    ...relationsInputs,\n                    displayName: 'Relations inputs',\n                    description: 'Definition of relations inputs',\n                    group: 'Relations',\n                };\n\n                Object.freeze(resultType);\n\n                return resultType;\n            }\n            case 'relationsOutputs':\n            {\n                const relationsOutputs = await import('../../dynamicItems/componentOutputs/type');\n\n                if(!relationsOutputs)\n                {\n                    return null;\n                }\n\n                const resultType = \n                {   \n                    ...relationsOutputs,\n                    displayName: 'Relations outputs',\n                    description: 'Definition of relations outputs',\n                    group: 'Relations',\n                };\n\n                Object.freeze(resultType);\n\n                return resultType;\n            }\n            default:\n            {\n                const customRelations = await import('../../dynamicItems/customRelation/type');\n                const customRelationsConfiguration = await this.customRelationsRegister?.getConfigurationForComponent(source.name);\n                \n                const resultType = \n                {   \n                    ...customRelations,\n                    displayName: customRelationsConfiguration?.displayName,\n                    description: customRelationsConfiguration?.description,\n                    group: customRelationsConfiguration?.group,\n                };\n\n                Object.freeze(resultType);\n\n                return resultType;\n            }\n        }\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, CustomComponentsDynamicModuleItemsProvider, CustomComponentsDynamicModuleRelationsProvider, CustomComponentsDynamicModuleTypesProvider, CustomRelationsDynamicModuleItemsProvider, CustomRelationsDynamicModuleRelationsProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package layout components provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic layout module types provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic relations types provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations nodes provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations components provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom relations dynamic relations types provider\n */\nexport const CUSTOM_RELATIONS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomRelationsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom relations package relations nodes provider\n */\nexport const CUSTOM_RELATIONS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomRelationsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom relations package relations components provider\n */\nexport const CUSTOM_RELATIONS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomRelationsDynamicModuleItemsProvider,\n    multi: true\n};","import {Injectable, OnDestroy} from '@angular/core';\nimport {ScopeRegister as RelationsScopeRegister} from '@anglr/dynamic/relations-editor';\nimport {DebounceCall, WithSync} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Service that is used for obtaining existing scopes from layout\n */\n@Injectable()\nexport class ScopeRegister extends RelationsScopeRegister implements OnDestroy\n{\n    //######################### protoected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                protected componentRegister: LayoutComponentsRegister,)\n    {\n        super();\n\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.getScopes()));\n        this.getScopes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets available scopes\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async getScopes(): Promise<void>\n    {\n        this.ɵScopes = [];\n        const types = await this.componentRegister.types;\n\n        for(const type of types)\n        {\n            let scope: string|undefined|null = null;\n\n            if((scope = await this.componentRegister.getScope(type)))\n            {\n                if(this.ɵScopes.indexOf(scope) < 0)\n                {\n                    this.ɵScopes.push(scope);\n                }\n            }\n        }\n\n        this.scopesChangeSubject.next();\n    }\n}","import {ClassProvider, FactoryProvider, Injector, Provider, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE, provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, ScopeRegister as RelationsScopeRegister, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {MetadataStorage, provideStaticPackageSource} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER, CUSTOM_RELATIONS_RELATIONS_COMPONENTS_PROVIDER, CUSTOM_RELATIONS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_RELATIONS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager, CustomComponentsRegister, ScopeRegister, CustomRelationsRegister} from '../services';\nimport {ContentComponentData} from '../components';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsCustomComponents(): Provider[]\n{\n    return [\n        ...provideLayoutRelations(),\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        //TODO: move it outside\n        CUSTOM_RELATIONS_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    const relationsProviders = provideRelationsEditor();\n    relationsProviders.splice(relationsProviders.indexOf(RelationsScopeRegister), 1);\n\n    return [\n        ...provideLayoutEditor(false),\n        ...relationsProviders,\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <ClassProvider>\n        {\n            provide: RelationsScopeRegister,\n            useClass: ScopeRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers that enables use of custom relations in relations editor\n * @param customRelationsRegister - Type that represents implementation of custom relations register\n */\nexport function provideEditorRelationsCustomRelations(customRelationsRegister: Type<CustomRelationsRegister> = CustomRelationsRegister,): Provider[]\n{\n    return [\n        CUSTOM_RELATIONS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_RELATIONS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_RELATIONS_RELATIONS_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-relations'),\n        <ClassProvider>\n        {\n            provide: CustomRelationsRegister,\n            useClass: customRelationsRegister,\n        },\n    ];\n}\n\n/**\n * Providers that enables use of custom relations components in relations editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorRelationsCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                       customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    return [\n        CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers that enables use of custom layout components in layout editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorLayoutCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                    customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    //TODO: maybe remove first parameter\n\n    return [\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Gets custom component metadata info\n * @param name - Name of component which metadata are obtained\n * @param injector - Instance of injector used for obtaining required services\n */\nexport async function getCustomComponentMeta(name: string, injector: Injector): Promise<{contentMetadata: Dictionary<ContentComponentData>, metadata: LayoutComponentMetadata|undefined|null}|null>\n{\n    const layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = injector.get(LAYOUT_METADATA_STORAGE);\n    const customComponentMetadata = await layoutMetadataStorage.getMetadata(name);\n    const logger = injector.get(LOGGER);\n\n    if(!customComponentMetadata)\n    {\n        logger.warn('ContentOptionsPropertiesControlSAComponent: missing layout metadata for custom component!');\n\n        return null;\n    }\n\n    const layoutMetadataIterator = injector.get(LayoutComponentsIteratorService);\n    const iterator = layoutMetadataIterator.getIteratorFor(customComponentMetadata);\n    const metadataExtractor = injector.get(LayoutEditorMetadataExtractor);\n    const customComponentContentMetadata: Dictionary<ContentComponentData> = {};\n\n    for await(const component of iterator)\n    {\n        const metadata = await metadataExtractor.extractMetadata(component.metadata);\n\n        if(!metadata)\n        {\n            logger.warn('ContentOptionsPropertiesControlSAComponent: missing metadata for component!');\n\n            continue;\n        }\n\n        customComponentContentMetadata[component.metadata.id] =\n        {\n            metadata: component.metadata,\n            editorMetadata: metadata,\n        };\n    }\n\n    return {\n        contentMetadata: customComponentContentMetadata,\n        metadata: customComponentMetadata,\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\n\nimport {ContentComponentData} from '../../components';\n\n/**\n * Gets properties model using its name\n */\n@Pipe({name: 'getModel', standalone: true})\nexport class GetModelSAPipe implements PipeTransform\n{\n    /**\n     * Gets properties model using its name\n     * @param value - Name of model class\n     * @param metadata - Metadata containing model\n     */\n    public transform(value: string, metadata: ContentComponentData|undefined|null,): LayoutPropertiesModelType|null\n    {\n        return metadata?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata?.find(itm => itm.modelType.name == value)?.modelType ?? null;\n    }\n}","import {Optional, Pipe, PipeTransform} from '@angular/core';\nimport {LayoutEditorPropertyMetadata, LayoutEditorPropertyMetadataExtractor, LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets properties metadata for for model type\n */\n@Pipe({name: 'propertiesMetadata', standalone: true,})\nexport class PropertiesMetadataSAPipe implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(@Optional() protected propertyExtractor?: LayoutEditorPropertyMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Gets properties metadata for for model type\n     * @param value - Type of properties model\n     * @param propertyExtractor - Extractor used for obtaining metadata for model\n     */\n    public transform(value: LayoutPropertiesModelType|null, propertyExtractor?: LayoutEditorPropertyMetadataExtractor): Dictionary<LayoutEditorPropertyMetadata>|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        this.propertyExtractor ??= propertyExtractor;\n\n        if(!this.propertyExtractor)\n        {\n            throw new Error('Please provide LayoutEditorPropertyMetadataExtractor for propertiesMetadata pipe!');\n        }\n\n        return this.propertyExtractor.extract(value);\n    }\n}","import {Injectable} from '@angular/core';\n\nimport {CustomComponentConfiguration} from './customComponentsRegister.interface';\nimport {CustomDynamicItemsRegister} from '../customDynamicItemsRegister/customDynamicItemsRegister.service';\n\n/**\n * Register that contains registered custom components\n */\n@Injectable()\nexport class CustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> extends CustomDynamicItemsRegister<TConfig>\n{\n}\n","import {Injectable} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {CustomDynamicItemConfiguration} from './customDynamicItemsRegister.interface';\n\n/**\n * Register that contains registered custom dynamic items\n */\n@Injectable()\nexport abstract class CustomDynamicItemsRegister<TConfig extends CustomDynamicItemConfiguration = CustomDynamicItemConfiguration>\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets array of registered custom dynamic items names\n     */\n    public getRegisteredComponents(): PromiseOr<string[]>\n    {\n        return [];\n    }\n\n    /**\n     * Gets configuration for custom dynamic item by its name\n     * @param name - Name of template of custom dynamic item for which configuration will be returned\n     */\n    public getConfigurationForComponent(_name: string): PromiseOr<TConfig|undefined|null>\n    {\n        return null;\n    }\n\n    /**\n     * Sets configuration for custom dynamic item by its name\n     * @param name - Name of template of custom dynamic item for which configuration will be set\n     * @param config - Value of configuration to be set\n     */\n    public setConfigurationForComponent(_name: string, _config: TConfig): PromiseOr<void>\n    {\n    }\n}","import {Injectable} from '@angular/core';\n\nimport {CustomRelationsConfiguration} from './customRelationsRegister.interface';\nimport {CustomDynamicItemsRegister} from '../customDynamicItemsRegister/customDynamicItemsRegister.service';\n\n/**\n * Register that contains registered custom relations\n */\n@Injectable()\nexport class CustomRelationsRegister<TConfig extends CustomRelationsConfiguration = CustomRelationsConfiguration> extends CustomDynamicItemsRegister<TConfig>\n{\n}\n","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n\n    /**\n     * Package of layout component\n     */\n    package: string;\n\n    /**\n     * Name of layout component\n     */\n    name: string;\n\n    /**\n     * Scope of layout component\n     */\n    scope: string|undefined;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this.initPromise ??= this.initializeTypes();\n\n        return this.initPromise.then(() =>\n        {\n            return Object.keys(this.definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.displayName ?? undefined;\n    }\n\n    /**\n     * Gets scope of type by its name\n     * @param name - Name of type that scope should be obtained\n     */\n    public async getScope(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.scope;\n    }\n\n    /**\n     * Gets component name of type byt its name\n     * @param name - Name of type that component name should be obtained\n     */\n    public async getComponentName(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.name ?? null;\n    }\n\n    /**\n     * Gets component package of type byt its name\n     * @param name - Name of type that component package should be obtained\n     */\n    public async getComponentPackage(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.package ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async initializeTypes(): Promise<void>\n    {\n        this.definedTypes = {};\n\n        if(!this.layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this.iteratorSvc.getIteratorFor(this.layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this.loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this.definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n                name: component.metadata.name,\n                //TODO: fix types\n                scope: component.metadata.scope ?? undefined,\n                package: component.metadata.package,\n            };\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\nimport isEqual from 'lodash-es/isEqual';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(isEqual(this._layout, layout))\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError,\n}","import {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n","import {FactoryProvider, Provider, inject} from '@angular/core';\nimport {LOGGER} from '@anglr/common';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor, LayoutFeature} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\nimport {LayoutRenderer} from '../services';\n\n/**\n * Provider for default layout components extractor\n */\nconst DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nconst LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER));\n    }\n};\n\n/**\n * Provides layout runtime providers\n */\nexport function provideLayout(...features: LayoutFeature[]): Provider[]\n{\n    const prependFeaturesProviders: Provider[] = [];\n    const featuresProviders: Provider[] = [];\n\n    for(const feature of features)\n    {\n        prependFeaturesProviders.push(feature.prependProviders);\n        featuresProviders.push(feature.providers);\n    }\n\n    return [\n        ...prependFeaturesProviders,\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n        LayoutRenderer,\n        featuresProviders,\n    ];\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from '../../misc/enums';\n\n/**\n * Options for LayoutRendererOptions\n */\nexport class LayoutRendererOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        }\n    }\n}","import {Injectable, Injector, ViewContainerRef, inject} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {Action1} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LayoutRendererItem} from './layoutRenderer.interface';\nimport {LAYOUT_COMPONENTS_LOADER} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\nimport {LayoutRendererOptions} from './layoutRenderer.options';\n\n/**\n * Base class for service used for handling rendering of layout\n */\n@Injectable()\nexport abstract class LayoutRendererBase<TRendererItem extends LayoutRendererItem>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Instance of loader used for loading components metadata\n     */\n    protected loader: DynamicItemLoader<LayoutComponentDef> = inject(LAYOUT_COMPONENTS_LOADER);\n\n    /**\n     * Options for layout renderer\n     */\n    protected options: LayoutRendererOptions;\n\n    /**\n     * Subject used for emitting when rendering has finished\n     */\n    protected renderingFinishedSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Map of renderers and their data\n     */\n    protected renderers: Record<string, TRendererItem|undefined|null> = {};\n\n    /**\n     * Map of renderers and their data using rendered compmonent id\n     */\n    protected components: Record<string, TRendererItem|undefined|null> = {};\n\n    /**\n     * Gets root renderer\n     */\n    protected get rootRenderer(): TRendererItem|undefined|null\n    {\n        const renderers = Object.keys(this.renderers);\n\n        for(const rendererId of renderers)\n        {\n            const renderer = this.renderers[rendererId];\n\n            if(renderer?.parentId)\n            {\n                return this.renderers[renderer.parentId];\n            }\n        }\n        \n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when rendering has finished\n     */\n    public get renderingFinished(): Observable<void>\n    {\n        return this.renderingFinishedSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        const globalOptions = inject(LayoutRendererOptions, {optional: true});\n\n        if(!globalOptions || !(globalOptions instanceof LayoutRendererOptions))\n        {\n            this.options = new LayoutRendererOptions();\n        }\n        else\n        {\n            this.options = globalOptions;\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tests whether is component with id registered and rendered\n     * @param id - Id of component to be tested\n     */\n    public hasComponent(id: string): boolean\n    {\n        return !!this.components[id];\n    }\n\n    /**\n     * Tests whether is renderer with id registered\n     * @param id - Id of renderer\n     */\n    public hasRenderer(id: string): boolean\n    {\n        return !!this.renderers[id];\n    }\n\n    /**\n     * Registers renderer and renders its component\n     * @param id - Unique id of renderer\n     * @param parentId - Unique id of parents renderer or undefined|null if root renderer\n     * @param viewContainer - View container attached to renderer used for rendering component\n     * @param metadata - Metadata of rendered component\n     * @param parentMetadata - Metadata of parent of rendere component\n     * @param scopeId - Id of scope in which is this component rendered\n     * @param childExtensions - Array of child extensions applied to component\n     * @param renderedCallback - Callback called when registered component is fully rendered\n     * @param customInjector - Instance of custom injector if provided\n     */\n    public abstract registerRenderer(id: string,\n                                     parentId: string|undefined|null,\n                                     viewContainer: ViewContainerRef,\n                                     metadata: LayoutComponentMetadata,\n                                     parentMetadata: LayoutComponentMetadata|undefined|null,\n                                     scopeId: string|undefined|null,\n                                     childExtensions: DynamicItemExtensionType[]|undefined|null,\n                                     renderedCallback: Action1<LayoutRendererItem>|undefined|null,\n                                     customInjector: Injector|undefined|null,): Promise<void>;\n\n    /**\n     * Destroyes renderer, removes it from register, destroyed renderer also destroys component, this is called when renderer is destroyed\n     * @param id - Id of renderer\n     */\n    public destroyRenderer(id: string): void\n    {\n        this.logger.debug('LayoutRenderer: destroying renderer \"{{id}}\"', {id});\n\n        const renderer = this.renderers[id];\n        \n        //if renderer exists remove it from register\n        if(renderer)\n        {\n            this.logger.verbose('LayoutRenderer: removing renderer from registry \"{{id}}\"', {id});\n\n            delete this.components[renderer.metadata.id];\n            delete this.renderers[id];\n        }\n    }\n    \n    /**\n     * Unregisters renderer, removes it from register, destroys component, this is called when renderer is emptied\n     * @param id - Id of renderer that will be removed\n     */\n    public unregisterRenderer(id: string): void\n    {\n        this.logger.debug('LayoutRenderer: ungregistering renderer \"{{id}}\"', {id});\n\n        const renderer = this.renderers[id];\n\n        //if renderer exists remove it from register and destroy component\n        if(renderer)\n        {\n            this.logger.verbose('LayoutRenderer: destroying component \"{{id}}\"', {id});\n            //destroys component\n            renderer.viewContainer.clear();\n            this.logger.verbose('LayoutRenderer: component destroyed \"{{id}}\"', {id});\n\n            delete this.components[renderer.metadata.id];\n            delete this.renderers[id];\n        }\n    }\n}","import {Injectable, Injector, SimpleChanges, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {DynamicItemExtensionType, SCOPE_ID, addSimpleChange} from '@anglr/dynamic';\nimport {Action1, NoopAction} from '@jscrpt/common';\n\nimport {LayoutComponent, LayoutComponentMetadata} from '../../interfaces';\nimport {LayoutRendererItem} from './layoutRenderer.interface';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {MissingTypeBehavior} from '../../misc/enums';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutRendererBase} from './layoutRenderer.base';\n\n/**\n * Service used for handling rendering of layout\n */\n@Injectable()\nexport class LayoutRenderer extends LayoutRendererBase<LayoutRendererItem>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of promise that is used for sync async/await calls\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * Number of register calls waiting\n     */\n    protected registeredCalls: number = 0;\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async registerRenderer(id: string,\n                                  parentId: string|undefined|null,\n                                  viewContainer: ViewContainerRef,\n                                  metadata: LayoutComponentMetadata,\n                                  parentMetadata: LayoutComponentMetadata|undefined|null,\n                                  scopeId: string|undefined|null,\n                                  childExtensions: DynamicItemExtensionType[]|undefined|null,\n                                  renderedCallback: Action1<LayoutRendererItem>|undefined|null,\n                                  customInjector: Injector|undefined|null,): Promise<void>\n    {\n        this.registeredCalls++;\n\n        //synchronization code\n        const syncPromise = this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n        await syncPromise;\n\n        this.logger.debug('LayoutRenderer: registering renderer {{@(4)renderer}}', {renderer: {id, parentId, metadata, parentMetadata, scopeId}});\n\n        //tests whether component already exists\n        if(this.components[metadata.id])\n        {\n            throw new Error(`LayoutRenderer: component with ID ${metadata.id} already exists!`);\n        }\n\n        const rendererItem: LayoutRendererItem =\n        {\n            id,\n            parentId,\n            viewContainer,\n            metadata,\n            parentMetadata,\n            scopeId,\n            childExtensions,\n            component: null,\n        };\n\n        this.components[metadata.id] = rendererItem;\n        this.renderers[id] = rendererItem;\n\n        const injector = customInjector ?? viewContainer.injector;\n        const componentScopeId = metadata.scope;\n        const layoutComponentType = await this.loader.loadItem(metadata);\n\n        if(!layoutComponentType)\n        {\n            this.logger.warn('LayoutRenderer: Unable to find layout component type {{@type}}', {type: {name: metadata.name, package: metadata.package}});\n\n            switch(this.options?.missingTypeBehavior)\n            {\n                default:\n                //case MissingTypeBehavior.ShowNotFound:\n                {\n                    viewContainer.createComponent(NotFoundLayoutTypeSAComponent);\n\n                    break;\n                }\n                case MissingTypeBehavior.Ignore:\n                {\n                    //do nothing\n\n                    break;\n                }\n                case MissingTypeBehavior.ThrowError:\n                {\n                    throw new Error(`LayoutRenderer: Unable to find layout component type Name: ${metadata.name} Package: ${metadata.package}`);\n                }\n            }\n\n            return;\n        }\n\n        const usedInjector = Injector.create(\n        {\n            parent: injector,\n            providers:\n            [\n                <ValueProvider>\n                {\n                    provide: SCOPE_ID,\n                    useValue: componentScopeId ?? scopeId ?? null,\n                },\n                <ValueProvider>\n                {\n                    provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                    useValue: layoutComponentType.childExtensions,\n                }\n            ]\n        });\n\n        const component = viewContainer.createComponent(layoutComponentType.data,\n                                                        {\n                                                            injector: usedInjector,\n                                                        });\n        rendererItem.component = component;\n        component.changeDetectorRef.detach();\n\n        this.logger.verbose('LayoutRenderer: component rendered {{@id}}', {id: metadata?.id});\n\n        const instance = component.instance;\n\n        //registers extensions and child extensions\n        instance.registerExtensions(\n        [\n            ...childExtensions?.map(itm => new itm(metadata)) ?? [],\n            ...layoutComponentType?.extensions?.map(itm => new itm(metadata)) ?? [],\n        ]);\n\n        const changes: SimpleChanges = {};\n        addSimpleChange<LayoutComponent>(changes, 'options', metadata.options, instance.options, true);\n\n        this.logger.verbose('LayoutRenderer: setting options for component {{id}}, options: {{@(4)options}}', {id: metadata?.id, options: metadata.options});\n        instance.options = metadata.options;\n        this.logger.verbose('LayoutRenderer: set options for component {{id}}', {id: metadata?.id});\n\n        this.logger.verbose('LayoutRenderer: setting changes for component {{id}}', {id: metadata?.id});\n        await instance.dynamicOnChanges?.(changes);\n        this.logger.verbose('LayoutRenderer: set changes for component {{id}}', {id: metadata?.id});\n\n        this.logger.verbose('LayoutRenderer: initializing component {{id}}', {id: metadata?.id});\n        await instance.dynamicOnInit?.();\n        this.logger.verbose('LayoutRenderer: initialized component {{id}}', {id: metadata?.id});\n\n        this.logger.verbose('LayoutRenderer: invalidating component visuals {{id}}', {id: metadata?.id});\n        instance.invalidateVisuals();\n        this.logger.verbose('LayoutRenderer: invalidated component visuals {{id}}', {id: metadata?.id});\n\n        this.logger.verbose('LayoutRenderer: after view initializing {{id}}', {id: metadata?.id});\n        await instance.dynamicAfterViewInit?.();\n        this.logger.verbose('LayoutRenderer: after view initialized {{id}}', {id: metadata?.id});\n\n        renderedCallback?.(rendererItem);\n\n        component.changeDetectorRef.reattach();\n\n        //sync call finished\n        syncResolve?.();\n        this.registeredCalls--;\n\n        if(this.registeredCalls === 0)\n        {\n            this.renderingFinishedSubject.next();\n        }\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataType} from './relationsEditorMetadata.interface';\n\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\nexport function RelationsEditorMetadata(metadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<RelationsEditorMetadataDescriptor, RelationsEditorMetadataType>(metadataLoader, 'relationsEditorMetadata');\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await relationsExportExtractor(module, logger);\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n\n    /**\n     * Display name of layout component\n     */\n    displayName?: string;\n\n    /**\n     * Current scope of node that is being used\n     */\n    scope?: string;\n\n    /**\n     * Component name\n     */\n    name?: string;\n\n    /**\n     * Component package\n     */\n    package?: string;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n        displayName: localModule.displayName,\n        scope: localModule.scope,\n        name: localModule.name,\n        package: localModule.package,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, ExistingProvider, FactoryProvider, inject} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, EDITOR_METADATA_MANAGER} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\n\nimport {RELATIONS_HISTORY_MANAGER, RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, RelationsNodeManager} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER),\n                                            true)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER))\n};\n\n/**\n * Provider for relations history manager state\n */\nexport const RELATIONS_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: EDITOR_METADATA_MANAGER,\n    useExisting: RelationsNodeManager,\n};\n\n/**\n * Provider for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};\n","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {DefaultsOverride} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeMetadata} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>> = new InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>>('RELATIONS_HISTORY_MANAGER');\n\n/**\n * Injection token for relations defaults override\n */\nexport const RELATIONS_DEFAULTS_OVERRIDE: InjectionToken<DefaultsOverride> = new InjectionToken<DefaultsOverride>('RELATIONS_DEFAULTS_OVERRIDE');","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isString, isType} from '@jscrpt/common';\n\nimport {DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_HISTORY_MANAGER_STATE, RELATIONS_HISTORY_MANAGER_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, ScopeRegister, StaticComponentsRegister} from '../services';\nimport {RELATIONS_DEFAULTS_OVERRIDE} from './tokens';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //display name should be string if used\n    if(isPresent(data.displayName) && !isString(data.displayName))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n        ScopeRegister,\n        RELATIONS_HISTORY_MANAGER_STATE,\n        RELATIONS_HISTORY_MANAGER_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Provider for relations defaults override\n * @param defaultsOverride - Service to pride as relations defaults override\n */\nexport function provideRelationsDefaultOverride(defaultsOverride: Type<DefaultsOverride>): Provider\n{\n    return <ClassProvider>{\n        provide: RELATIONS_DEFAULTS_OVERRIDE,\n        useClass: defaultsOverride\n    };\n}\n\n/**\n * Transforms any string to colour code\n * @param str - String to be changed to colour code\n */\nexport function stringToColour(str: string): string\n{\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) \n    {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    let colour = '#';\n\n    for (let i = 0; i < 3; i++)\n    {\n        const value = (hash >> (i * 8)) & 0xFF;\n        colour += ('00' + value.toString(16)).substr(-2);\n    }\n\n    return colour;\n}","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {EditorMetadataManager} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager implements EditorMetadataManager<RelationsNodeMetadata[]>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Active relations node\n     */\n    protected _activeNode: string|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n    \n    /**\n     * Used for emitting node registration\n     */\n    protected _nodesChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting active node change\n     */\n    protected _activeNodeChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting node registration change\n     */\n    protected _nodeRegisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n\n    /**\n     * Used for emitting node unregistration change\n     */\n    protected _nodeUnregisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n    \n    //######################### public properties #########################\n\n    /**\n     * Registered relation nodes\n     */\n    public get nodes(): Dictionary<RelationsNode>\n    {\n        return this._nodes;\n    }\n\n    /**\n     * Occurs when new node is registered\n     */\n    public get nodesChange(): Observable<void>\n    {\n        return this._nodesChange.asObservable();\n    }\n\n    /**\n     * Active relations node\n     */\n    public get activeNode(): string|null|undefined\n    {\n        return this._activeNode;\n    }\n\n    /**\n     * Occurs when active relations node is changed\n     */\n    public get activeNodeChange(): Observable<void>\n    {\n        return this._activeNodeChange.asObservable();\n    }\n\n    /**\n     * Occurs when registered node is changed\n     */\n    public get nodeRegisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeRegisterChange.asObservable();\n    }\n\n    /**\n     * Occurs when unregistered node is changed\n     */\n    public get nodeUnregisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeUnregisterChange.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n        this._nodesChange.next();\n        this._nodeRegisterChange.next(node);\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n        this._nodesChange.next();\n        this._nodeUnregisterChange.next(node);\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                scope: node.metadata.scope,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n\n    /**\n     * Sets active relations node\n     * @param id node identifier\n     */\n    public setActiveNode(id?: string|null): void\n    {\n        this._activeNode = id;\n        this._activeNodeChange.next();\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that is used for obtaining existing scopes\n */\n@Injectable()\nexport class ScopeRegister\n{\n    //######################### protected properties #########################\n\n    /**\n     * Array of all scopes\n     */\n    protected ɵScopes: string[] = [];\n\n    /**\n     * Subject used for emitting changes of scopes\n     */\n    protected scopesChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets array of all scopes\n     */\n    public get scopes(): string[]\n    {\n        return this.ɵScopes;\n    }\n\n    /**\n     * Occurs when array of scopes changes\n     */\n    public get scopesChange(): Observable<void>\n    {\n        return this.scopesChangeSubject.asObservable();\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Injector} from '@angular/core';\nimport {Func2} from '@jscrpt/common';\n\nimport {RelationsComponentEndpoints} from '../../services/relationsDebugger/relationsDebugger.interface';\n\n/**\n * Debug data symbol\n */\nconst DEBUG_DATA_SYMBOL = Symbol('DebugData');\n\n/**\n * Definition of debug data for obtaining endpoints\n */\nexport interface RelationsDebugData<TRelations = unknown> extends Partial<RelationsComponentEndpoints>\n{\n    /**\n     * Function used for obtaining dynamic \n     */\n    dynamicEndpointsGetter?: Func2<RelationsComponentEndpoints, TRelations, Injector>;\n}\n\n/**\n * Gets debug data if defined\n * @param obj - Object to be inspected\n */\nexport function getDebugData(obj: unknown): RelationsDebugData|undefined|null\n{\n    return Reflect.get(obj as object, DEBUG_DATA_SYMBOL);\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function DebugData<TRelations = unknown>(data: RelationsDebugData<TRelations>): ClassDecorator\n{\n    if(ngRelationsDebugger)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            Reflect.defineProperty(target,\n                                   DEBUG_DATA_SYMBOL,\n                                   {\n                                       value: data,\n                                   });\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {RelationsComponentDef} from './types';\nimport type {RelationsDebugger} from '../services';\n\n/**\n * Injection token for relations components module data extractors\n */\nexport const RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations components module providers\n */\nexport const RELATIONS_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<RelationsComponentDef>> = new InjectionToken<DynamicItemLoader<RelationsComponentDef>>('RELATIONS_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for relations\n */\nexport const RELATIONS_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('RELATIONS_METADATA_STORAGE');\n\n/**\n * Injection token for indication whether skip relations process initialization\n */\nexport const RELATIONS_PROCESSOR_SKIP_INIT: InjectionToken<boolean> = new InjectionToken<boolean>('RELATIONS_PROCESSOR_SKIP_INIT');\n\n/**\n * Injection token for type that represents relations debugger implementation\n */\nexport const RELATIONS_DEBUGGER_TYPE: InjectionToken<Type<RelationsDebugger>> = new InjectionToken<Type<RelationsDebugger>>('RELATIONS_DEBUGGER_TYPE');\n","import {FactoryProvider, inject} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: () =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              inject(LOGGER));\n    },\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER))\n};","import {inject, Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {Dictionary, isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {CodeExecutor, RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '../services';\nimport {RELATIONS_DEBUGGER_TYPE} from './tokens';\n\n//TODO: skip init as constant\n//TODO: assigned as constant\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Provides relations debugger\n */\nexport function provideRelationsDebugger(): Provider[]\n{\n    return ngRelationsDebugger ?\n        [\n            {\n                provide: RelationsDebugger,\n                useFactory: () =>\n                {\n                    const relationsDebuggerType = inject(RELATIONS_DEBUGGER_TYPE, {optional: true});\n\n                    if(!relationsDebuggerType)\n                    {\n                        throw new Error('Please provide RelationsDebugger implementation type! Use \"provideRelationsDebuggerImplementation() from @anglr/dynamic/relations-debugger\"');\n                    }\n\n                    return new relationsDebuggerType();\n                },\n            }\n        ] :\n        [];\n}\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        ...provideRelationsDebugger(),\n        CodeExecutor,\n    ];\n}\n\n/**\n * Defines skip initial data transfer for relations for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is skip init defined\n */\nexport function defineSkipInitProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}SkipInit`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is skip init defined for property\n * @param object - Object containg skip init property to be tested\n * @param name - Name of property for which should be skip init defined\n * @returns \n */\nexport function isSkipInit<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}SkipInit`];\n}\n\n/**\n * Defines indication that property was at least once assigned for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is assigned defined\n */\nexport function defineAssignedProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}Assigned`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is assigned defined for property\n * @param object - Object containg assigned property to be tested\n * @param name - Name of property for which should be assigned defined\n * @returns \n */\nexport function isAssigned<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}Assigned`];\n}","import {Injectable, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {generateId, Dictionary} from '@jscrpt/common';\n\n/**\n * Class used for executing javascript code and obtaining types from executed javascript code\n */\n@Injectable()\nexport class CodeExecutor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Loaded data cache for relations id\n     */\n    protected loadedDataCache: Dictionary<any> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads data from dynamicaly executed code\n     * @param relationsId - Id of relations for which is data loaded from code\n     * @param code - Code used for obtaining data\n     */\n    public async loadData<TResult>(relationsId: string, code: string): Promise<TResult|null>\n    {\n        if(this.loadedDataCache[relationsId])\n        {\n            return this.loadedDataCache[relationsId];\n        }\n\n        const scriptElement = this.document.createElement('script');\n        const loadHelper = `loadType${generateId(12)}`;\n        let result: TResult|null = null;\n\n        scriptElement.innerText = `\n        (function(exports, loadType, require)\n        {\n            ${code}\n\n            loadType(exports);\n        })({}, ${loadHelper}.loadType, ${loadHelper}.require);`;\n\n        (window as any)[loadHelper] =\n        {\n            loadType: (exp: {default: any}) => result = exp.default ?? null,\n            require: (requireName: string) =>\n            {\n                console.log(requireName);\n\n                return null;\n            }\n        };\n\n        this.document.getElementsByTagName('head')[0].appendChild(scriptElement);\n        delete (window as any)[loadHelper];\n        scriptElement.remove();\n\n        this.loadedDataCache[relationsId] = result;\n\n        return result;\n    }\n}","import {isPresent} from '@jscrpt/common';\n\n/**\n * Options for RelationsChangeDetector\n */\nexport class RelationsChangeDetectorOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Indication whether run detection in single run, new changes added to same run, or new changes added to next run\n     */\n    public detectionInSingleRun: boolean = true;\n\n    //######################### constructor #########################\n    constructor(detectionInSingleRun?: boolean)\n    {\n        if(isPresent(detectionInSingleRun))\n        {\n            this.detectionInSingleRun = detectionInSingleRun;\n        } \n    }\n}","import {inject, Inject, Injectable, Injector, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {BindThis, Dictionary, isEmptyObject, isString} from '@jscrpt/common';\n\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsProcessorComponentData, RelationsProcessorInputOutputData} from '../relationsProcessor/relationsProcessor.interface';\nimport {RelationsProcessor} from '../relationsProcessor/relationsProcessor.service';\nimport {MarkForCheckId, RelationsChange} from './relationsChangeDetector.interface';\nimport {RelationsChangeDetectorOptions} from './relationsChangeDetector.options';\n\n/**\n * Change detector for relations, which allows async change detection\n */\n@Injectable()\nexport class RelationsChangeDetector\n{\n    //######################### protected properties #########################\n\n    /**\n     * Array of mark for check ids that were called before initialization\n     */\n    protected markedBeforeInit: MarkForCheckId[] = [];\n\n    /**\n     * Instance of relations processor for handling relations\n     */\n    protected ɵrelationsProcessor: RelationsProcessor|undefined|null;\n\n    /**\n     * Gets instance of relations processor for handling relations\n     */\n    protected get relationsProcessor(): RelationsProcessor\n    {\n        return (this.ɵrelationsProcessor ??= this.injector.get(RelationsProcessor));\n    }\n\n    /**\n     * Instance of relations component manager storing registered components\n     */\n    protected ɵrelationsComponentManager: RelationsComponentManager|undefined|null;\n\n    /**\n     * Gets instance of relations component manager storing registered components\n     */\n    protected get relationsComponentManager(): RelationsComponentManager\n    {\n        return (this.ɵrelationsComponentManager ??= this.injector.get(RelationsComponentManager));\n    }\n\n    /**\n     * Objects storing components and theirs outputs and related output input relations\n     */\n    protected ɵoutputsComponents: Dictionary<Dictionary<RelationsProcessorInputOutputData[]>> = {};\n\n    /**\n     * Instance of parent relations change detector\n     */\n    protected parent: RelationsChangeDetector|undefined|null = inject(RelationsChangeDetector, {optional: true, skipSelf: true,});\n\n    /**\n     * Objects storing components and theirs outputs and related output input relations\n     */\n    protected get outputsComponents(): Dictionary<Dictionary<RelationsProcessorInputOutputData[]>>\n    {\n        if(isEmptyObject(this.ɵoutputsComponents) && this.parent)\n        {\n            return this.parent.outputsComponents;\n        }\n\n        return this.ɵoutputsComponents;\n    }\n\n    /**\n     * Options for relations change detector\n     */\n    protected options: RelationsChangeDetectorOptions;\n\n    /**\n     * Identifier of running timeout\n     */\n    protected timeout: number|undefined|null;\n\n    /**\n     * Array of changes that should be checked and transfered in first run\n     */\n    protected firstRunChanges: RelationsChange[] = [];\n\n    /**\n     * Array of changes that should be checked and transfered in second run\n     */\n    protected secondRunChanges: RelationsChange[] = [];\n\n    /**\n     * Indication whether is check running\n     */\n    protected checkRunning: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                @Inject(LOGGER) protected logger: Logger,\n                @Optional() options?: RelationsChangeDetectorOptions,)\n    {\n        if(!options || !(options instanceof RelationsChangeDetectorOptions))\n        {\n            options = new RelationsChangeDetectorOptions();\n        }\n\n        this.options = options;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks input component connected to this for checking\n     * @param id - Identification of what should be checked\n     */\n    public markForCheck(id: MarkForCheckId): void\n    {\n        const componentId = isString(id.componentId) ? id.componentId : this.relationsComponentManager.getId(id.componentId);\n\n        if(!componentId)\n        {\n            this.logger.warn('RelationsChangeDetector: Unable to find component!');\n\n            return;\n        }\n\n        this.logger.debug('RelationsChangeDetector: marking for check {{@id}}', {id: {componentId, outputName: id.outputName}});\n\n        const relationDefs = this.outputsComponents[componentId]?.[id.outputName] ?? [];\n        const changes = this.checkRunning && !this.options.detectionInSingleRun ? this.secondRunChanges : this.firstRunChanges;\n\n        //TODO: think of better solution, cache mark when not initialized\n        if(!relationDefs.length)\n        {\n            this.markedBeforeInit.push(id);\n\n            return;\n        }\n\n        for(const relationDef of relationDefs)\n        {\n            const relation = changes.find(itm => itm.id == relationDef.inputComponentId);\n\n            //not exists yet\n            if(!relation)\n            {\n                changes.push(\n                {\n                    id: relationDef.inputComponentId,\n                    inputs: [relationDef.inputName],\n                });\n\n                continue;\n            }\n\n            //already exists\n            if(relation.inputs.indexOf(relationDef.inputName) >= 0)\n            {\n                continue;\n            }\n\n            relation.inputs.push(relationDef.inputName);\n        }\n\n        //schedule check\n        if(!this.timeout)\n        {\n            this.timeout = setTimeout(this.runCheck, 0) as unknown as number;\n        }\n    }\n\n    /**\n     *\n     * @param relations - Object storing current relations\n     */\n    public initialize(relations: Dictionary<RelationsProcessorComponentData>): void\n    {\n        this.logger.debug('RelationsChangeDetector: initializing {{@relations}}', {relations: relations});\n\n        this.ɵoutputsComponents = {};\n\n        for(const componentId in relations)\n        {\n            const relationsDef = relations[componentId];\n\n            this.ɵoutputsComponents[componentId] ??= {};\n\n            if(!relationsDef.inputOutputs)\n            {\n                continue;\n            }\n\n            for(const inputOutput of relationsDef.inputOutputs)\n            {\n                this.ɵoutputsComponents[componentId][inputOutput.outputName] ??= [];\n                this.ɵoutputsComponents[componentId][inputOutput.outputName].push(inputOutput);\n            }\n        }\n\n        const ids = [...this.markedBeforeInit];\n        this.markedBeforeInit = [];\n\n        for(const markForCheckId of ids)\n        {\n            this.markForCheck(markForCheckId);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Runs check for marked components\n     */\n    @BindThis\n    protected runCheck(): void\n    {\n        this.logger.debug('RelationsChangeDetector: running check');\n\n        this.checkRunning = true;\n\n        for(const change of this.firstRunChanges)\n        {\n            const transfer = this.relationsProcessor.transferInputsData(change.id, true, change.inputs);\n\n            transfer.applyChanges();\n        }\n\n        if(this.options.detectionInSingleRun)\n        {\n            this.firstRunChanges = [];\n        }\n        else\n        {\n            this.firstRunChanges = this.secondRunChanges;\n            this.secondRunChanges = [];\n        }\n\n        this.checkRunning = false;\n        this.timeout = null;\n    }\n}\n","import {inject, Inject, Injectable, Injector, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDebugger} from '../relationsDebugger/relationsDebugger.service';\n\n/**\n * Manager used for managing all components used in relations\n */\n@Injectable()\nexport class RelationsComponentManager implements OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of current scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Registered components\n     */\n    protected components: Dictionary<RelationsComponent> = {};\n\n    /**\n     * Object storing all scopes and their managers\n     */\n    protected scopes: Dictionary<RelationsComponentManager[]> = {};\n\n    /**\n     * Instance of parent relations component manager\n     */\n    protected parent: RelationsComponentManager|null = null;\n\n    /**\n     * Cache containing children scoped components\n     */\n    protected childrenCache: Dictionary<RelationsComponent[]> = {};\n\n    /**\n     * Injector for angular DI\n     */\n    protected injector: Injector = inject(Injector);\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected logger?: Logger,\n                @Optional() protected relationsDebugger?: RelationsDebugger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //removes nested scopes first\n        if(this.scopes)\n        {\n            for(const scopeId in this.scopes)\n            {\n                const scope = this.scopes[scopeId];\n\n                if(scope)\n                {\n                    for(const manager of scope)\n                    {\n                        manager.ngOnDestroy();\n                    }\n                }\n\n                delete this.scopes[scopeId];\n            }\n            \n        }\n\n        for(const componentId in this.components)\n        {\n            this.removeCacheFromHierarchy(componentId);\n        }\n\n        //removes self from parent scopes\n        if(this.parent && this.scopeId)\n        {\n            const scope = this.parent.scopes[this.scopeId];\n\n            if(scope)\n            {\n                const index = scope.indexOf(this);\n\n                if(index >= 0)\n                {\n                    scope.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Registers newly created component\n     * @param id - Id of component to be registered\n     * @param component - Instance of registered component\n     */\n    public registerComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        if(this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' is already registered, provide unique id.`);\n\n            return;\n        }\n\n        component.ɵɵRelationsComponentId ??= generateId(12);\n        this.removeCacheFromHierarchy(id);\n        this.components[id] = component;\n        component.ɵɵinjector = this.injector;\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.registerComponent(id, component);\n        }\n    }\n\n    /**\n     * Unregisters component\n     * @param id - Id of component to be unregistered\n     */\n    public unregisterComponent(id: string): void\n    {\n        if(!this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' has already been unregistered.`);\n\n            return;\n        }\n\n        this.removeCacheFromHierarchy(id);\n        const component = this.components[id];\n        delete this.components[id];\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.unregisterComponent(id, component);\n        }\n    }\n\n    /**\n     * Gets instance of component or array of component instances or null\n     * @param id - Unique identification of component, or components\n     */\n    public get(id: string): RelationsProcessorComponent[]|RelationsProcessorComponent|null\n    {\n        const component = this.components[id];\n\n        if(component)\n        {\n            return component;\n        }\n\n        if(this.childrenCache[id])\n        {\n            return this.childrenCache[id];\n        }\n\n        const components = this.getChildrenComponents(id);\n\n        if(components)\n        {\n            return components;\n        }\n\n        return this.getParentComponents(id);\n    }\n\n    /**\n     * Gets id of relations component, for this manager\n     * @param component - Component which id should be found\n     */\n    public getId(component: RelationsComponent): string|null\n    {\n        for(const id in this.components)\n        {\n            const comp = this.components[id];\n\n            if(comp === component)\n            {\n                return id;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Opens new scope for relations component manager\n     * @param id - Id of newly created scope\n     */\n    public openScope(id: string): RelationsComponentManager\n    {\n        this.scopes[id] ??= [];\n        const scope = new RelationsComponentManager(this.logger);\n        scope.scopeId = id;\n        scope.parent = this;\n        this.scopes[id].push(scope);\n\n        return scope;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes cached components from hierarchy\n     * @param id - Id of component which will be removed from cache\n     */\n    protected removeCacheFromHierarchy(id: string): void\n    {\n        //no parent or parent cache does not contains id\n        if(!this.parent || !this.parent.childrenCache[id])\n        {\n            return;\n        }\n\n        delete this.parent.childrenCache[id];\n        this.parent.removeCacheFromHierarchy(id);\n    }\n\n    /**\n     * Gets children components when scopes are used\n     * @param id - Id of components to be get\n     */\n    protected getChildrenComponents(id: string): RelationsComponent[]|null\n    {\n        const getFromScope = (scopeId: string) =>\n        {\n            const scope = this.scopes[scopeId];\n            const result: RelationsComponent[] = [];\n\n            for(const mngr of scope)\n            {\n                const component = mngr.components[id];\n\n                if(component)\n                {\n                    result.push(component);\n\n                    continue;\n                }\n\n                const components = mngr.getChildrenComponents(id);\n\n                if(Array.isArray(components))\n                {\n                    for(const cmp of components)\n                    {\n                        result.push(cmp);\n                    }\n\n                    continue;\n                }\n\n                return null;\n            }\n\n            if(result.length)\n            {\n                return result;\n            }\n\n            return null;\n        };\n\n\n        for(const scopeId in this.scopes)\n        {\n            const result = getFromScope(scopeId);\n\n            if(result)\n            {\n                this.childrenCache[id] = result;\n\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets parent components when scopes are used\n     * @param id - Id of component to be get\n     */\n    protected getParentComponents(id: string): RelationsComponent|null\n    {\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        const component = this.parent.components[id] ?? null;\n\n        if(component)\n        {\n            return component;\n        }\n\n        return this.parent.getParentComponents(id);\n    }\n}","import {Injectable} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsComponentEndpoints, RelationsComponentStateDebugInfo, RelationsDataTransferDebugInfo, RelationsDataTransferIdDebugInfo, RelationsStepDebugInfo} from './relationsDebugger.interface';\nimport {RelationsDataTransferInstructionImpl} from '../relationsProcessor/relationsDataTransferInstruction';\nimport {RelationsProcessorComponentData, RelationsProcessorInputOutputData} from '../relationsProcessor/relationsProcessor.interface';\n\n/**\n * Service used for debugging relations, use actual implementation instead of this\n */\n@Injectable()\nexport abstract class RelationsDebugger\n{\n    //######################### public properties #########################\n\n    /**\n     * Occurs when current step index changes\n     */\n    public abstract get stepChange(): Observable<void>;\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize debugger with processed relations metadata\n     * @param relations - Relations used for initialization\n     * @param backwardRelations - Backward relations used for initialization\n     */\n    public abstract initialize(relations: Dictionary<RelationsProcessorComponentData>, backwardRelations: Dictionary<RelationsProcessorInputOutputData[]>): void;\n\n    /**\n     * Debugs register component into relations\n     * @param id - Id of component that has been registered\n     * @param component - Instance of registered component\n     */\n    public abstract registerComponent(id: string, component: RelationsProcessorComponent): void;\n\n    /**\n     * Debugs unregister component from relations\n     * @param id - Id of component that has been unregistered\n     * @param component - Instance of unregistered component\n     */\n    public abstract unregisterComponent(id: string, component: RelationsProcessorComponent): void;\n\n    /**\n     * Debug transfer data\n     * @param transfer - Transfer that will handle transfering data\n     * @param options - Options for storing debug information for data transfer\n     */\n    public abstract transferData(transfer: RelationsDataTransferInstructionImpl&Partial<RelationsDataTransferIdDebugInfo>, options: RelationsDataTransferDebugInfo): void;\n\n    /**\n     * Gets currently registered components\n     */\n    public abstract getCurrentComponents(): Dictionary<string[]>;\n\n    /**\n     * Gets component definition\n     * @param id - Id of component which definition will be obtained\n     */\n    public abstract getComponentDef(id: string): RelationsComponentEndpoints|null;\n\n    /**\n     * Gets component state\n     * @param id - Id of component whose state is going to be read\n     */\n    public abstract getComponentState(id: string): RelationsComponentStateDebugInfo[];\n\n    /**\n     * Gets component relations options\n     * @param id - Id of component whose relations options are going to be read\n     */\n    public abstract getComponentRelationsOptions(id: string): unknown;\n\n    /**\n     * Gets last step or null if is already on last step\n     */\n    public abstract getLastStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets first step or null if is already on first step\n     */\n    public abstract getFirstStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets next step or null if is already on last step\n     */\n    public abstract getNextStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets previous step or null if is already on first step\n     */\n    public abstract getPreviousStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets current step or null if there are no steps\n     */\n    public abstract getCurrentStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Clears all recorded steps\n     */\n    public abstract clearSteps(): void;\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsComponentMetadata} from '../../interfaces';\n\n/**\n * Manager of relations metadata\n */\n@Injectable()\nexport class RelationsManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current relations value\n     */\n    protected _relations: RelationsComponentMetadata[] = [];\n    \n    /**\n     * Used for emitting relations changes\n     */\n    protected _relationsChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current relations value\n     */\n    public get relations(): RelationsComponentMetadata[]\n    {\n        return this._relations;\n    }\n    \n    /**\n     * Occurs when relations changes\n     */\n    public get relationsChange(): Observable<void>\n    {\n        return this._relationsChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets relations new value\n     * @param relations - Value of relations that changed\n     */\n    public setRelations(relations: RelationsComponentMetadata[]): void\n    {\n        if(this._relations == relations)\n        {\n            return;\n        }\n    \n        this._relations = relations;\n        this._relationsChange.next();\n    }\n}","import {SimpleChanges} from '@angular/core';\nimport {isEmptyObject} from '@jscrpt/common';\n\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstruction} from './relationsProcessor.interface';\n\n/**\n * Instruction containing data/changes that are needed for data transfer\n */\nexport class RelationsDataTransferInstructionImpl implements RelationsDataTransferInstruction\n{\n    //######################### private fields #########################\n\n    /**\n     * Changes that are coming into component\n     */\n    private _changes: SimpleChanges = {};\n\n    //######################### public properties - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get changes(): SimpleChanges\n    {\n        return this._changes;\n    }\n\n    //######################### constructor #########################\n    constructor(protected components: RelationsProcessorComponent[],)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public applyChanges(): void\n    {\n        for(const component of this.components)\n        {\n            if(!component || isEmptyObject(this._changes))\n            {\n                continue;\n            }\n\n            for(const key in this._changes)\n            {\n                const change = this._changes[key];\n\n                (component as any)[key] = change.currentValue;\n            }\n            \n            component.dynamicOnChanges?.(this._changes);\n            component.invalidateVisuals();\n        }\n    }\n}","import {inject, Inject, Injectable, Injector, OnDestroy, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {Dictionary, isBlank, noop, NoopAction, isStrictEquals} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {RelationsComponent, RelationsComponentMetadata, RelationsComponentType} from '../../interfaces';\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsManager} from '../relationsManager/relationsManager.service';\nimport {RelationsDataTransferInstruction, RelationsProcessorComponentData, RelationsProcessorInputOutputData} from './relationsProcessor.interface';\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_PROCESSOR_SKIP_INIT} from '../../misc/tokens';\nimport {RelationsComponentDef, RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstructionImpl} from './relationsDataTransferInstruction';\nimport {isAssigned, isSkipInit} from '../../misc/utils';\nimport {RelationsChangeDetector} from '../relationsChangeDetector/relationsChangeDetector.service';\nimport {RelationsDebugger} from '../relationsDebugger/relationsDebugger.service';\n\n/**\n * Processor that applies relations to registered components\n */\n@Injectable()\nexport class RelationsProcessor implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Promise used for indication that processor was initialized\n     */\n    protected ɵInitialized: Promise<void> = Promise.resolve();\n\n    /**\n     * Relations metadata\n     */\n    protected ɵRelations: Dictionary<RelationsProcessorComponentData> = {};\n\n    /**\n     * Array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected ɵBackwardRelations: Dictionary<RelationsProcessorInputOutputData[]> = {};\n\n    /**\n     * Resolves initialized\n     */\n    protected resolveInitialized: NoopAction = noop;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Gets or sets relations metadata\n     */\n    protected get relations(): Dictionary<RelationsProcessorComponentData>\n    {\n        if(this.parent)\n        {\n            return this.parent.relations;\n        }\n\n        return this.ɵRelations;\n    }\n    protected set relations(value: Dictionary<RelationsProcessorComponentData>)\n    {\n        this.ɵRelations = value;\n    }\n\n    /**\n     * Gets or sets array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected get backwardRelations(): Dictionary<RelationsProcessorInputOutputData[]>\n    {\n        if(this.parent)\n        {\n            return this.parent.backwardRelations;\n        }\n\n        return this.ɵBackwardRelations;\n    }\n    protected set backwardRelations(value: Dictionary<RelationsProcessorInputOutputData[]>)\n    {\n        this.ɵBackwardRelations = value;\n    }\n\n    /**\n     * Instance of parent relations processor\n     */\n    protected parent: RelationsProcessor|null = null;\n\n    /**\n     * Id of scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Injected relations change detector\n     */\n    protected relationsChangeDetector: RelationsChangeDetector = inject(RelationsChangeDetector);\n\n    /**\n     * Instance of relations debugger\n     */\n    protected relationsDebugger: RelationsDebugger|undefined|null = inject(RelationsDebugger, {optional: true});\n\n    //######################### public properties #########################\n\n    /**\n     * Gets promise that completes when processor was initialized\n     */\n    public get initialized(): Promise<void>\n    {\n        return this.ɵInitialized;\n    }\n\n    //######################### constructor #########################\n    constructor(protected relationsManager: RelationsManager,\n                protected componentManager: RelationsComponentManager,\n                protected injector: Injector,\n                @Inject(RELATIONS_COMPONENTS_LOADER) protected loader: DynamicItemLoader<RelationsComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,\n                @Inject(RELATIONS_PROCESSOR_SKIP_INIT) @Optional() skipInit?: boolean,)\n    {\n        if(!skipInit)\n        {\n            this.initSubscriptions.add(this.relationsManager.relationsChange.subscribe(() => this.initializeRelations()));\n\n            this.initializeRelations();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.destroyRelations();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Updates relations\n     * @param id - Id of component to be registered\n     */\n    public updateRelations(id: string): void\n    {\n        this.logger?.debug('RelationsProcessor: Updating relations for {{@id}}', {id});\n\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n        let components = this.componentManager.get(id);\n\n        //this component has no relations\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {{@id}}', {id});\n\n            return;\n        }\n\n        this.initOptions(components, relations);\n\n        //initialize default value from connection to this\n        if(backwardRelations?.length)\n        {\n            backwardRelations.forEach(inputOutput =>\n            {\n                this.initBackwardRelation(inputOutput);\n            });\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            for(const outputComponent of components)\n            {\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions = [];\n\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    //TODO revise log output\n                    this.logger?.verbose('RelationsProcessor: processing input outputs {{@data}} ', {data: {id, inputOutput}});\n\n                    const outputObservable = (outputComponent as any)[`${inputOutput.outputName}Change`] as Observable<any>;\n\n                    //check whether is observable output\n                    if(!(outputObservable instanceof Observable))\n                    {\n                        this.logger?.warn('RelationsProcessor: Output on component {{@data}} is not observable', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    //set listening for output changes\n                    outputComponent.ɵɵRelationsOutputsChangeSubscriptions.push(outputObservable.subscribe(() =>\n                    {\n                        let inputs = this.componentManager.get(inputOutput.inputComponentId);\n\n                        if(!inputs)\n                        {\n                            this.logger?.warn('RelationsProcessor: Missing input components {{@data}} on output change', {data: inputOutput});\n\n                            return;\n                        }\n\n                        if(!Array.isArray(inputs))\n                        {\n                            inputs = [inputs];\n                        }\n\n                        for(const input of inputs)\n                        {\n                            this.transferData(outputComponent, input, inputOutput, false);\n                        }\n                    }));\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {{@data}}', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    for(const inputComponent of inputComponents)\n                    {\n                        const id = `${inputComponent.ɵɵRelationsComponentId}-${outputComponent.ɵɵRelationsComponentId}`;\n\n                        //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                        if(!isSkipInit(outputComponent, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputComponent, inputOutput.outputName))\n                        {\n                            inputOutput.initialized[id] = this.transferData(outputComponent, inputComponent, inputOutput, true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method used for destroying component\n     */\n    public destroyComponent(id: string): void\n    {\n        const metadata: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n\n        //uninitialize backward relations\n        if(backwardRelations)\n        {\n            for(const relation of backwardRelations)\n            {\n                relation.initialized = {};\n            }\n        }\n\n        //destroy relations\n        if(metadata)\n        {\n            let components = this.componentManager.get(id);\n\n            if(components)\n            {\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                for(const cmp of components)\n                {\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions = [];\n                    cmp.ɵɵRelationsOptionsInitialized = false;\n                }\n            }\n\n            if(metadata.inputOutputs && Array.isArray(metadata.inputOutputs))\n            {\n                for(const inputOutput of metadata.inputOutputs)\n                {\n                    inputOutput.initialized = {};\n                }\n            }\n\n            //destroy auto created components and unregister them\n            if(metadata.autoCreated)\n            {\n                let components = this.componentManager.get(id);\n\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                this.componentManager.unregisterComponent(id);\n\n                for(const cmp of components)\n                {\n                    cmp.relationsOnDestroy?.();\n                }\n            }\n        }\n    }\n\n    /**\n     * Opens new scope of relations processor\n     * @param id - Id of newly created scope\n     * @param componentManager - Scoped instance of component manager\n     * @param injector - Injector for current scope\n     */\n    public openScope(id: string,\n                     componentManager: RelationsComponentManager,\n                     injector: Injector,): RelationsProcessor\n    {\n        const processor = new RelationsProcessor(this.relationsManager, componentManager, injector, this.loader, this.logger, true);\n        processor.scopeId = id;\n        processor.parent = this;\n\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === id && relationsDef.componentType)\n            {\n                const instance = new relationsDef.componentType(injector);\n                componentManager.registerComponent(componentId, instance);\n                processor.updateRelations(componentId);\n            }\n        }\n\n        return processor;\n    }\n\n    /**\n     * Destroyes opened scope itself\n     */\n    public destroyScope(): void\n    {\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === this.scopeId)\n            {\n                this.destroyComponent(componentId);\n            }\n        }\n    }\n\n\n    //TODO: update typings with new parameter\n    /**\n     * Transfers data for specified component using its output relations, all data are transfered in single change set per component\n     * @param id - Id of component whose outputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns dictionary with data transfer instructions per components\n     */\n    public transferOutputsData(id: string, delayed: true, forceTransfer?: boolean): Dictionary<RelationsDataTransferInstruction>\n    public transferOutputsData(id: string, delayed: false, forceTransfer?: boolean): null\n    public transferOutputsData(id: string, delayed: boolean = false, forceTransfer: boolean = false): null|Dictionary<RelationsDataTransferInstruction>\n    {\n        const transfers: Dictionary<RelationsDataTransferInstructionImpl> = {};\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        let components = this.componentManager.get(id);\n\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {{@id}}', {id});\n\n            return delayed ? transfers : null;\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            //for each component containing outputs\n            for(const outputComponent of components)\n            {\n                //for each relation\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {{@data}}', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    transfers[inputOutput.inputComponentId] ??= new RelationsDataTransferInstructionImpl(inputComponents);\n\n                    //for each input component\n                    for(const inputComponent of inputComponents)\n                    {\n                        if(!outputComponent || !inputComponent)\n                        {\n                            continue;\n                        }\n\n                        const previousValue = (inputComponent as any)[inputOutput.inputName];\n                        const currentValue = (outputComponent as any)[inputOutput.outputName];\n\n                        //ignore changes when previousValue equals to currentValue.\n                        if (!forceTransfer && isStrictEquals(previousValue, currentValue)) \n                        {\n                            continue;\n                        }\n\n                        const change = transfers[inputOutput.inputComponentId].changes[inputOutput.inputName] =\n                        {\n                            previousValue,\n                            currentValue,\n                            firstChange: false,\n                            isFirstChange: () => false,\n                        };\n\n                        if(ngRelationsDebugger)\n                        {\n                            this.relationsDebugger?.transferData(transfers[inputOutput.inputComponentId],\n                            {\n                                change,\n                                inputComponentId: inputOutput.inputComponentId,\n                                outputComponentId: inputOutput.outputComponentId,\n                                outputName: inputOutput.outputName,\n                                inputName: inputOutput.inputName,\n                                scope: this.scopeId,\n                            });\n                        }\n                    }\n                }\n            }\n\n            if(!delayed)\n            {\n                //transfers data\n                for(const key in transfers)\n                {\n                    const transfer = transfers[key];\n\n                    transfer.applyChanges();\n                }\n            }\n        }\n\n        return delayed ? transfers : null;\n    }\n\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     */\n    public transferInputsData(id: string, delayed: true): RelationsDataTransferInstruction\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     */\n    public transferInputsData(id: string, delayed: false): null\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: true, inputs: string[]): RelationsDataTransferInstruction\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: false, inputs: string[]): null\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: boolean = false, inputs?: string[]): null|RelationsDataTransferInstruction\n    {\n        const backwardRelations = this.backwardRelations[id];\n        const inputComponent = this.componentManager.get(id);\n\n        if(!backwardRelations)\n        {\n            this.logger?.warn('RelationsProcessor: No backward relations for {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(!inputComponent)\n        {\n            this.logger?.warn('RelationsProcessor: Missing input components for {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(Array.isArray(inputComponent))\n        {\n            this.logger?.error('RelationsProcessor: Only one component must be available for id {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        const transfer: RelationsDataTransferInstructionImpl = new RelationsDataTransferInstructionImpl([inputComponent]);\n\n        //for each backward relation\n        for(const backwardRelation of backwardRelations)\n        {\n            //skip if input does not exists and inputs are specified\n            if(inputs && inputs.indexOf(backwardRelation.inputName) < 0)\n            {\n                continue;\n            }\n\n            const outputComponent = this.componentManager.get(backwardRelation.outputComponentId);\n\n            if((Array.isArray(outputComponent)))\n            {\n                this.logger?.error('RelationsProcessor: Only one output component must be available for id {{@id}}', {id});\n\n                continue;\n            }\n\n            if(!outputComponent || !inputComponent)\n            {\n                continue;\n            }\n\n            const previousValue = (inputComponent as any)[backwardRelation.inputName];\n            const currentValue = (outputComponent as any)[backwardRelation.outputName];\n\n            //ignore changes when previousValue equals to currentValue.\n            if (isStrictEquals(previousValue, currentValue)) \n            {\n                continue;\n            }\n\n            const change = transfer.changes[backwardRelation.inputName] =\n            {\n                previousValue,\n                currentValue,\n                firstChange: false,\n                isFirstChange: () => false,\n            };\n\n            if(ngRelationsDebugger)\n            {\n                this.relationsDebugger?.transferData(transfer,\n                {\n                    change,\n                    inputComponentId: backwardRelation.inputComponentId,\n                    outputComponentId: backwardRelation.outputComponentId,\n                    outputName: backwardRelation.outputName,\n                    inputName: backwardRelation.inputName,\n                    scope: this.scopeId,\n                });\n            }\n        }\n\n        if(!delayed)\n        {\n            transfer.applyChanges();\n        }\n\n        return delayed ? transfer : null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize relations from metadata\n     */\n    protected async initializeRelations(): Promise<void>\n    {\n        await this.destroyRelations();\n        this.setInitializePromise();\n\n        this.logger?.debug('RelationsProcessor: initializing relations');\n\n        //empty relations\n        if(!this.relationsManager.relations.length)\n        {\n            this.resolveInitialized();\n\n            return;\n        }\n\n        for(const meta of this.relationsManager.relations)\n        {\n            const outputs: RelationsProcessorInputOutputData[] = [];\n\n            //no outputs metadata\n            if(!meta.outputs)\n            {\n                continue;\n            }\n\n            for(const output of meta.outputs)\n            {\n                //no inputs metadata\n                if(!output.inputs)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const inputOutput: RelationsProcessorInputOutputData =\n                    {\n                        inputComponentId: input.id,\n                        outputComponentId: meta.id,\n                        inputName: input.inputName,\n                        outputName: output.outputName,\n                        initialized: {},\n                    };\n\n                    outputs.push(inputOutput);\n\n                    if(!this.backwardRelations[input.id])\n                    {\n                        this.backwardRelations[input.id] = [];\n                    }\n\n                    this.backwardRelations[input.id].push(inputOutput);\n                }\n            }\n\n            //sets options for relations component\n            await this.initComponent(meta, outputs);\n        }\n\n        this.relationsChangeDetector.initialize(this.relations);\n        \n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.initialize(this.relations, this.backwardRelations);\n        }\n\n        this.resolveInitialized();\n    }\n\n    /**\n     * Initialize backward relations\n     * @param inputOutput - Data for input and output\n     */\n    protected initBackwardRelation(inputOutput: RelationsProcessorInputOutputData): void\n    {\n        let outputComponents = this.componentManager.get(inputOutput.outputComponentId);\n        let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n        if((isBlank(outputComponents) || Array.isArray(outputComponents) && !outputComponents.length) ||\n           (isBlank(inputComponents) || Array.isArray(inputComponents) && !inputComponents.length))\n        {\n            this.logger?.warn('RelationsProcessor: missing metadata for backward relations {{@data}}', {data: inputOutput});\n\n            return;\n        }\n\n        if(!Array.isArray(inputComponents))\n        {\n            inputComponents = [inputComponents];\n        }\n\n        if(!Array.isArray(outputComponents))\n        {\n            outputComponents = [outputComponents];\n        }\n\n        for(const inputCmp of inputComponents)\n        {\n            for(const outputCmp of outputComponents)\n            {\n                const id = `${inputCmp.ɵɵRelationsComponentId}-${outputCmp.ɵɵRelationsComponentId}`;\n\n                //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                if(!isSkipInit(outputCmp, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputCmp, inputOutput.outputName))\n                {\n                    inputOutput.initialized[id] = this.transferData(outputCmp, inputCmp, inputOutput, true);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transfers data from source property to target property\n     * @param source - Instance of source object containing source property with data\n     * @param target - Instance of target object containing target property for data\n     * @param sourceTarget - Definition of source target names and ids\n     * @param initial - Indication whether is transfer of data initial, or on event\n     */\n    protected transferData(source: RelationsComponent, target: RelationsComponent, sourceTarget: RelationsProcessorInputOutputData, initial: boolean): boolean\n    {\n        if(!source || !target)\n        {\n            return false;\n        }\n\n        const previousValue = (target as any)[sourceTarget.inputName];\n        const currentValue = (source as any)[sourceTarget.outputName];\n        const transfer = new RelationsDataTransferInstructionImpl([target]);\n\n        //ignore changes when previousValue equals to currentValue.\n        if (isStrictEquals(previousValue, currentValue)) \n        {\n            return false;\n        }\n\n        const change = transfer.changes[sourceTarget.inputName] =\n        {\n            previousValue,\n            currentValue,\n            firstChange: initial,\n            isFirstChange: () => initial\n        };\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.transferData(transfer,\n            {\n                change,\n                inputComponentId: sourceTarget.inputComponentId,\n                inputName: sourceTarget.inputName,\n                outputComponentId: sourceTarget.outputComponentId,\n                outputName: sourceTarget.outputName,\n                scope: this.scopeId,\n            });\n        }\n\n        transfer.applyChanges();\n\n        return true;\n    }\n\n    /**\n     * Initialize relation component\n     * @param meta - Metadata for relations component\n     * @param outputs - Array of outputs data for relations component\n     */\n    protected async initComponent(meta: RelationsComponentMetadata, outputs: RelationsProcessorInputOutputData[]): Promise<void>\n    {\n        const component = this.componentManager.get(meta.id);\n\n        if(component)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n            this.updateRelations(meta.id);\n\n            return;\n        }\n\n        const componentMeta = await this.loader.loadItem(meta);\n\n        if(!componentMeta)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n\n            this.logger?.warn('RelationsProcessor: Unable to load relations component! {{@meta}}', {meta: {package: meta.package, name: meta.name}});\n\n            return;\n        }\n\n        if(!meta.scope)\n        {\n            const instance = new componentMeta.data(this.injector);\n            this.componentManager.registerComponent(meta.id, instance);\n        }\n\n        this.initRelation(true, meta, outputs, meta.scope ?? null, meta.scope ? componentMeta.data : null);\n        this.updateRelations(meta.id);\n    }\n\n    /**\n     * Initialize relation for metadata and component\n     * @param autoCreated - Indication whether was component auto created or not\n     * @param meta - Metadata for relations component\n     * @param inputOutputs - Array of outputs data for relations\n     * @param scope - Current scope used for this relations component\n     * @param componentType - Type used for creation of relations component (only for scoped ones)\n     */\n    protected initRelation(autoCreated: boolean, meta: RelationsComponentMetadata, inputOutputs: RelationsProcessorInputOutputData[], scope: string|null, componentType: RelationsComponentType|null): void\n    {\n        this.relations[meta.id] =\n        {\n            autoCreated,\n            inputOutputs,\n            metadataOptions: meta.relationsOptions,\n            componentType,\n            scope,\n        };\n    }\n\n    /**\n     * Initialize relations component options\n     * @param components - Components which options should be initialized\n     * @param meta - Metadata containing options for initialization\n     */\n    protected initOptions(components: RelationsProcessorComponent|RelationsProcessorComponent[], meta: RelationsProcessorComponentData): void\n    {\n        if(Array.isArray(components))\n        {\n            for(const comp of components)\n            {\n                if(!comp.ɵɵRelationsOptionsInitialized)\n                {\n                    comp.relationsOptions = meta.metadataOptions;\n                    comp.ɵɵRelationsOptionsInitialized = true;\n                }\n            }\n        }\n        else\n        {\n            if(!components.ɵɵRelationsOptionsInitialized)\n            {\n                components.relationsOptions = meta.metadataOptions;\n                components.ɵɵRelationsOptionsInitialized = true;\n            }\n        }\n    }\n\n    /**\n     * Sets initialized promise\n     */\n    protected setInitializePromise(): void\n    {\n        this.ɵInitialized = new Promise(resolve => this.resolveInitialized = resolve);\n    }\n\n    /**\n     * Destroys initialized relations\n     */\n    protected async destroyRelations(): Promise<void>\n    {\n        await this.ɵInitialized;\n\n        Object.keys(this.relations).forEach(id => this.destroyComponent(id));\n\n        this.relations = {};\n        this.backwardRelations = {};\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\n\nimport {DynamicMetadataLoader} from './dynamicMetadata.interface';\n\ndeclare const ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//TODO: rework also with symbol\n//TODO: sideeffect\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata<TMetadata, TDecoratedClass>(metadataLoader: DynamicMetadataLoader<TMetadata>, propertyName: keyof TDecoratedClass): ClassDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            (target as any)[propertyName] = metadataLoader();\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {InjectionToken} from '@angular/core';\n\nimport {EditorMetadataManager, PackageSource} from '../interfaces';\n\n/**\n * Injection token used for injecting class that allows working with state of metadata\n */\nexport const EDITOR_METADATA_MANAGER: InjectionToken<EditorMetadataManager> = new InjectionToken<EditorMetadataManager>('METADATA_STATE_MANAGER');\n\n/**\n * Injection token used for injecting package sources\n */\nexport const PACKAGE_SOURCES: InjectionToken<PackageSource[]> = new InjectionToken<PackageSource[]>('PACKAGE_SOURCES');\n\n/**\n * Injection token used for injecting current scope id\n */\nexport const SCOPE_ID: InjectionToken<string> = new InjectionToken<string>('SCOPE_ID');","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {Destroyable, PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}\n\n/**\n * Tests whether is object destroyable\n * @param value - Value to be tested\n */\nexport function isDestroyable(value: unknown): value is Destroyable\n{\n    return typeof (value as Destroyable)?.destroy === 'function';\n}","import {Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger.verbose('DynamicItemLoader: Loading from cache {{@source}}', {source: {name: source.name, package: source.package}});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await asyncDynamicModule;\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger.debug('DynamicItemLoader: Failed to get dynamic module {{@source}}', {source: {name: source.name, package: source.package}});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger.warn('DynamicItemLoader: Found dynamic item {{@source}} is not of requested type', {source: {name: source.name, package: source.package}});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger.debug('DynamicItemLoader: Failed to extract dynamic item {{@source}}', {source: {name: source.name, package: source.package}});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {extend, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param extractorFunctions - Array of extractor functions used to create result\n     * @param logger - Instance of logger used for logging, optional\n     */\n    constructor(protected extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected logger: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this.extractorFunctions))\n        {\n            this.logger.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this.extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this.extractorFunctions)\n        {\n            extend(true, result, await fn(module, this.logger));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","import {Injectable} from '@angular/core';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Class that handles hotkeys for editors\n */\n@Injectable()\nexport class EditorHotkeys\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subject used for emitting undo\n     */\n    protected undoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting redo\n     */\n    protected redoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting save\n     */\n    protected saveSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting copy\n     */\n    protected copySubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting paste\n     */\n    protected pasteSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting cut\n     */\n    protected cutSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting delete\n     */\n    protected deleteSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs on undo shortcut\n     */\n    public get undo(): Observable<void>\n    {\n        return this.undoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on redo shortcut\n     */\n    public get redo(): Observable<void>\n    {\n        return this.redoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on save shortcut\n     */\n    public get save(): Observable<void>\n    {\n        return this.saveSubject.asObservable();\n    }\n    \n    /**\n     * Occurs on copy shortcut\n     */\n    public get copy(): Observable<void>\n    {\n        return this.copySubject.asObservable();\n    }\n\n    /**\n     * Occurs on cut shortcut\n     */\n    public get cut(): Observable<void>\n    {\n        return this.cutSubject.asObservable();\n    }\n\n    /**\n     * Occurs on paste shortcut\n     */\n    public get paste(): Observable<void>\n    {\n        return this.pasteSubject.asObservable();\n    }\n\n    /**\n     * Occurs on delete shortcut\n     */\n    public get delete(): Observable<void>\n    {\n        return this.deleteSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.saveSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits save event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.undoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits undo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.redoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits redo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('del', () =>\n        {\n            this.deleteSubject.next();\n\n            return false;\n        }, [], 'Emits delete event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+c', () =>\n        {\n            this.copySubject.next();\n\n            return false;\n        }, [], 'Emits copy event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+v', () =>\n        {\n            this.pasteSubject.next();\n\n            return false;\n        }, [], 'Emits paste event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+x', () =>\n        {\n            this.cutSubject.next();\n\n            return false;\n        }, [], 'Emits cut event'));\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {EditorMetadataManager} from '../../interfaces';\nimport {EDITOR_METADATA_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(EDITOR_METADATA_MANAGER) protected metadataState: EditorMetadataManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","UserSettingsSections","i0","theme_r5","lang_r10","name","lang","UserSettingsSAComponent_Conditional_17_For_7_Template","UserSettingsSAComponent_Conditional_17_For_14_Template","ctx_r0","generalSettingsForm","themes","languages","level_r16","value","UserSettingsSAComponent_Conditional_18_For_7_Template","ctx_r1","loggingSettingsForm","logLevels","ctx_r2","debuggingSettingsForm","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","debugDataEnabled","config","configuration","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","group","language","theme","consoleEnabled","debugData","consoleLogLevel","LogLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","setLoggingSettings","forEach","val","numVal","isNaN","push","i1","i2","i3","selectors","standalone","features","decls","vars","consts","template","rf","ctx","Logging","Debugging","UserSettingsSAComponent_Conditional_17_Template","UserSettingsSAComponent_Conditional_18_Template","UserSettingsSAComponent_Conditional_19_Template","DisplayingFeatureModule","i4","FormsFeatureModule","i5","i6","styles","changeDetection","PropertySelectedSAPipe","transform","component","model","property","indexOf","pure","component_r2","data","customComponentContentMetadata","metadata","displayName","description_r9","prop_r7","_r12","$implicit","modelProps_r5","component_r3","ctx_r10","toggleSelected","key","CustomComponentOptionsSAComponent_div_10_ng_container_6_div_1_span_8_Template","ctx_r6","usedProperties","tmp_1_0","propsMetadataExtractor","undefined","tmp_2_0","description","CustomComponentOptionsSAComponent_div_10_ng_container_6_div_1_Template","_r17","ctx_r16","removeComponent","CustomComponentOptionsSAComponent_div_10_ng_container_6_Template","availableProperties","CustomComponentOptionsSAComponent","dialog","formModelBuilder","FormControl","contentComponents","nameDescriptionForm","build","configurableProperties","models","_a","modelName","properties","usedComponents","filter","itm","meta","editorMetadata","metaInfo","optionsMetadata","propertiesMetadata","propMeta","modelType","length","_b","_c","prop","addComponent","index","splice","setValue","propertyName","TITLED_DIALOG_DATA","FormModelBuilder","CustomComponentOptionsSAComponent_option_6_Template","CustomComponentOptionsSAComponent_div_10_Template","_c0","CommonModule","MatDialogModule","ReactiveFormsModule","GetModelSAPipe","PropertiesMetadataSAPipe","TooltipModule","FirstUppercaseLocalizeSAPipe","encapsulation","ShowCustomComponentOptionsSADirective","injector","dialogSvc","customComponentsRegister","element","ngOnChanges","_this","_asyncToGenerator","result","getCustomComponentMeta","contentMetadata","customComponentMetadata","ngOnInit","_this2","nativeElement","disabled","show","event","_this3","preventDefault","stopPropagation","lastValueFrom","open","title","width","getConfigurationForComponent","afterClosed","setConfigurationForComponent","hostBindings","$event","val_r4","_r6","ctx_r5","liveEvents","enabled","_available","_component","ctx_r3","LoadSaveNewSAComponent","_router","_route","_metaManager","_changeDetector","_customComponentsRegister","_hotkeys","_metadata","_name","_availableNames","initSubscriptions","Subscription","history","componentMarking","layoutControls","metadataChange","EventEmitter","_ref","components","getRegisteredComponents","emitEvent","_x","apply","arguments","toggleRegisteredComponent","add","save","_save","historyChange","detectChanges","pop","store","getStored","params","getData","next","ngOnDestroy","unsubscribe","_load","navigate","routePath","skipLocationChange","replaceUrl","_saveData","getMetadata","_delete","removeData","_new","setData","extend","getMetadataCallback","EDITOR_METADATA_MANAGER","CustomDynamicItemsRegister","inputs","outputs","LoadSaveNewSAComponent_ng_option_2_Template","LoadSaveNewSAComponent_ng_container_13_Template","LoadSaveNewSAComponent_ng_container_17_Template","LoadSaveNewSAComponent_label_18_Template","tmp_7_0","saved","NgSelectModule","MatSlideToggleModule","i7","RelationsResultRelationsMetadataLoader","RelationsResultRelationsEditorMetadata","RelationsResultSAComponent","RelationsResultSAComponent_1","relationsId","_relationsProcessor","_componentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent","changes","nameof","vstup","console","log","invalidateVisuals","__decorate","RelationsEditorMetadata","ChangeDetectorRef","RelationsProcessor","RelationsComponentManager","RelationsSampleClickRelationsMetadataLoader","RelationsSampleClickRelationsEditorMetadata","RelationsSampleClickSAComponent","RelationsSampleClickSAComponent_1","_vystupForm","vystup","DynamicOutput","observableSubscribe","Observable","prototype","error","complete","isBlank","isFunction","err","debug","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","height","opacity","animate","loaderTrigger","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","MenuModule","TitledDialogModule","MainMenuComponent","_dialog","openSettings","maxHeight","AppSAComponent","translateSvc","_appHotkeys","logger","document","consoleVisible","routeComponentState","guiVersion","version","verbose","body","classList","_theme","_settingsChangeSubscription","settingsChange","remove","use","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","destroy","oldHelpHotkey","hotkeys","get","Hotkey","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","AppSAComponent_console_11_Template","AppSAComponent_div_12_Template","RouterModule","InternalServerErrorSAComponent","ProgressIndicatorModule","NotificationsGlobalModule","i8","ConsoleSAComponent","HotkeysCheatsheetSAComponent","animation","fadeInOutTrigger","consoleAnimationTrigger","COMPONENT_DEBUGGER_PROPERTY","RelationsDebuggerImpl","RelationsDebugger","inject","Injector","stepChangeSubject","Subject","currentStepIndex","steps","componentDefs","relationsComponentManager","ɵrelationsComponentManager","stepChange","asObservable","initialize","relations","backwardRelations","addInputOutput","inputOutput","addOutputDef","outputComponentId","outputName","addInputDef","inputComponentId","inputName","def","inputOutputs","tryToGetEndpoints","getLastComponents","ɵɵRelationsComponentId","warn","Reflect","getOwnPropertyDescriptor","defineProperty","configurable","enumerable","writable","obj","getPrototypeOf","$this","getter","setter","set","readComponentState","setComponentRelationsOptions","timestamp","Date","now","componentRegistration","componentId","componentInternalId","componentState","componentUnregistration","dataTransfer","componentRelationsOptions","previousStep","getLastStepData","deleteProperty","transferData","transfer","options","ɵuniqueId","generateId","applyChangesOriginal","applyChanges","change","scope","step","comp","currentValue","bind","getCurrentComponents","getComponentDef","getComponentState","getCurrentStep","getComponentRelationsOptions","getLastStep","getFirstStep","getNextStep","getPreviousStep","clearSteps","Array","isArray","state","itmDict","input","output","assigned","skipInit","relationsOptions","getDebugData","dynamicEndpointsGetter","inputsOutputsDef","ɵɵinjector","factory","ɵfac","DebuggerNodeRelationsMetadataLoader","DebuggerNodeRelationsEditorMetadata","DebuggerNodeRelations","PureRelationsComponent","RelationsDebuggerDynamicModuleItemsProvider","_logger","tryToGet","source","package","debuggerNode","RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","accessDeniedRoute","path","loadComponent","AccessDeniedComponent","notFoundRoute","NotFoundComponent","routes","redirectTo","pathMatch","loadChildren","LayoutModule","LayoutEditorModule","RelationsStaticModule","RelationsEditorModule","RelationsWithEditorModule","RelationsWithLayoutEditorModule","RelationsComplexModule","RelationsLayoutFormModule","extractRoutes","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","WebpackTranslateLoaderService","getTranslation","observer","default","ReportMissingTranslationService","handle","appProviders","provideRouter","withComponentInputBinding","withHashLocation","provideClientHydration","provideHttpClient","withInterceptorsFromDi","provideZoneChangeDetection","eventCoalescing","runCoalescing","importProvidersFrom","TranslateModule","forRoot","loader","TranslateLoader","debugTranslations","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","HttpGatewayTimeoutInterceptorOptions","GlobalizationServiceImpl","provideAnglrExceptionExtenders","errorWithUrlExtender","ANGLR_EXCEPTION_HANDLER_PROVIDER","provideInternalServerErrorRenderer","DialogInternalServerErrorRenderer","provideGridInitializerType","QueryGridInitializerComponent","provideMetadataSelectorType","DialogMetadataSelectorSAComponent","provideNoDataRendererOptions","texts","loading","noData","notLoaded","providePagingOptions","itemsPerPageValues","initialItemsPerPage","provideMetadataSelectorOptions","showButtonVisible","provideGridInitializerOptions","storageIppName","provideContentRendererOptions","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","useValue","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","providePermanentStorage","LocalPermanentStorage","provideLoggerConfig","writeTo","cfg","ConsoleComponentSink","minimumLevel","SettingsService","DeveloperConsoleSink","Off","_","message","match","enrichWith","LogLevelEnricher","TimestampEnricher","messageTemplate","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","provideGlobalNotifications","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogService","TitledDialogServiceOptions","MovableTitledDialogComponent","provideConfirmationDialogOptions","closeButton","confirmationText","dialogCancelText","dialogConfirmText","providePosition","FloatingUiDomPosition","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","provideRestDateTime","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","provideRestMethodMiddlewares","LoggerMiddleware","ResponseTypeMiddleware","ReportProgressMiddleware","HttpClientErrorProcessingMiddleware","CatchHttpClientErrorMiddleware","provideHttpClientErrorResponseMapper","errors","isString","provideHttpClientValidationErrorResponseMapper","validationErrors","provideHttpClientErrorMessages","provideHttpClientErrorHandlers","handleHttp404Error","DEFAULT_RELATIONS_NODES_EXTRACTOR","RELATIONS_NODES_LOADER_PROVIDER","RELATIONS_DEBUGGER_TYPE","DndModule","backend","HTML5Backend","enableProdMode","providers","provideAnimations","AnglrExceptionHandlerOptions","HotkeyModule","cheatSheetCloseEsc","runWhenAppStable","bootstrapApplication","InjectionToken","CommonUtilsModule","CommonLocalizeModule","DatePipesModule","NumberInputModule","NgSelectEditModule","HasErrorModule","FormPipesModule","_settings","_settingsDebugging","_settingsLogging","_settingsChangeSubject","_settingsDebuggingChangeSubject","keyValueDiffers","_storage","getDebugging","getLogging","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","forEachChangedItem","setDebugging","setLogging","providedIn","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","general","logging","PERMANENT_STORAGE","descendantsGetterSymbol","Symbol","DescendantsGetter","descendantsGetterFn","target","getDescendantsGetter","type","InputBooleanComponent","PropertyTypeControlBase","_control","TextareaComponent","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","InputStringComponent","SelectValueComponent","InputNumberComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","REFRESH_PALETTE_OBSERVABLES","LAYOUT_DEFAULTS_OVERRIDE","LayoutPropertyMetadata","LayoutDesignerDynamicModuleItemsProvider","item","layoutDesignerTypeExtractor","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","localModuleEditorData","layoutEditorDesignerType","childExtensions","extensions","_x2","EDITOR_LAYOUT_RENDERER","LayoutRenderer","LayoutEditorRenderer","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","DynamicModuleDataExtractor","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","DynamicItemLoader","isLayoutModuleTypes","LAYOUT_EDITOR_METADATA_MANAGER","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","provideLayoutEditor","designerLayout","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LiveEventService","LayoutComponentsIteratorService","provideLayoutDefaultsOverride","defaultsOverride","control","_controlSet","_initialized","values","_initialize","val_r1","SelectValueComponent_option_2_Template","_dragging","_draggingChange","dragging","draggingChange","setDragging","LayoutComponentsIterator","asyncIterator","x","initPromise","getInitPromise","items","done","layoutMetadata","callback","parent","levelIndex","level","getComponents","getComponent","iteratorItem","loadItem","getDescendants","childrenMeta","_this4","__param","Inject","LAYOUT_COMPONENTS_LOADER","LayoutComponentsChildrenIterator","getChildren","getIteratorFor","getChildrenIteratorFor","_loader","_cache","extractMetadata","cacheId","metadataType","layoutEditorMetadata","metadataData","freeze","selectedComponent","ɵselectedComponent","asReadonly","highlightedComponent","ɵhighlightedComponent","draggedOverComponent","ɵdraggedOverComponent","root","rootComponentId","layoutChange","layoutChangeSubject","displayNameChange","displayNameChangesSubject","editorHotkeys","signal","delete","removeDescendant","copy","metadataClipboard","typeMetadata","cut","paste","newId","canDrop","addDescendant","parentId","selectComponent","selected","isPresent","unselectComponent","highlightComponent","highlighted","cancelHighlightedComponent","dragOverComponent","cancelDragOverComponent","registerLayoutDesignerComponent","componentItem","children","getParent","unregisterLayoutDesignerComponent","displayNameUpdated","updateLayout","_layoutPropertiesSymbols","extract","propSymbol","LayoutRendererBase","syncPromise","registeredCalls","registerRenderer","viewContainer","parentMetadata","scopeId","renderedCallback","customInjector","syncResolve","renderer","rendererItem","isDesigner","layoutDesignerId","componentViewContainer","componentRendererId","renderers","layoutDesigner","dynamicItem","componentScopeId","layoutComponentType","missingTypeBehavior","createComponent","NotFoundLayoutTypeSAComponent","MissingTypeBehavior","Ignore","ThrowError","usedInjector","SCOPE_ID","LAYOUT_COMPONENT_CHILD_EXTENSIONS","changeDetectorRef","detach","instance","registerExtensions","addSimpleChange","dynamicOnChanges","dynamicOnInit","dynamicAfterViewInit","reattach","renderingFinishedSubject","destroyRenderer","unregisterRenderer","clear","LIVE_EVENTS_STATUS","ɵenabled","enabledChange","ɵenabledChange","storage","LayoutComponentsRelationsNodesProvider","_componentsRegister","getType","getDisplayName","getScope","getComponentName","getComponentPackage","LayoutComponentsRelationsTypesProvider","types","resultTypes","node","RELATIONS_NODES_LOADER","CustomComponentsDynamicModuleItemsProvider","_customComponentRegister","customComponent","customComponentConfiguration","resultType","CustomComponentsDynamicModuleTypesProvider","CustomComponentsDynamicModuleRelationsProvider","CustomRelationsDynamicModuleRelationsProvider","customRelationsRegister","CustomRelationsDynamicModuleItemsProvider","relationsInputs","relationsOutputs","customRelations","customRelationsConfiguration","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER","CUSTOM_RELATIONS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","CUSTOM_RELATIONS_RELATIONS_NODES_PROVIDER","CUSTOM_RELATIONS_RELATIONS_COMPONENTS_PROVIDER","ScopeRegister","RelationsScopeRegister","layoutManager","componentRegister","super","getScopes","ɵScopes","scopesChangeSubject","provideLayoutRelations","provideRelations","provideLayoutRelationsCustomComponents","provideLayoutRelationsEditor","relationsProviders","provideRelationsEditor","LayoutManager","LayoutComponentsRegister","deps","provideStaticPackageSource","provideEditorRelationsCustomRelations","CustomRelationsRegister","provideEditorRelationsCustomComponents","layoutRelationsEditorProviders","customComponentRegister","CustomComponentsRegister","provideEditorLayoutCustomComponents","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","_getCustomComponentMeta","layoutMetadataStorage","LAYOUT_METADATA_STORAGE","iterator","metadataExtractor","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","return","DebounceCall","WithSync","propertyExtractor","_config","initializeTypes","definedTypes","iteratorSvc","_this5","_this6","layout","layoutComponents","_layout","_layoutChange","setLayout","isEqual","LocalizeSAPipe","isLayoutComponentDef","isType","some","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","prependFeaturesProviders","featuresProviders","feature","prependProviders","LayoutRendererOptions","ShowNotFound","rootRenderer","rendererId","renderingFinished","globalOptions","hasComponent","hasRenderer","metadataLoader","DynamicClassMetadata","relationsNodeExtractor","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","componentRelationsNodeExtractor","singleton","StaticComponentsRelationsNodesProvider","StaticComponentsRelationsTypesProvider","RELATIONS_NODES_DATA_EXTRACTORS","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","RELATIONS_MODULE_TYPES_LOADER","isRelationsModuleTypes","isRelationsNodeDef","RELATIONS_HISTORY_MANAGER_STATE","RelationsNodeManager","RELATIONS_HISTORY_MANAGER_PROVIDER","RELATIONS_HISTORY_MANAGER","RELATIONS_DEFAULTS_OVERRIDE","clamp","num","min","max","Math","isBoolean","isJsObject","provideRelationsEditorWithStatic","provideRelationsDefaultOverride","stringToColour","str","hash","i","charCodeAt","colour","toString","substr","_nodes","_waitingInputRelations","_nodesChange","_activeNodeChange","_nodeRegisterChange","_nodeUnregisterChange","nodes","nodesChange","activeNode","_activeNode","activeNodeChange","nodeRegisterChange","nodeUnregisterChange","setActiveInput","_activeInput","getActiveInput","registerNode","outputNode","relationsNode","relation","startRelation","inputNode","endRelation","waitingInputRelations","waiting","unregisterNode","nodeIds","nodeMetadata","allOutputs","outputMeta","setActiveNode","scopes","scopesChange","_definedTypes","getDefinedTypes","DEBUG_DATA_SYMBOL","DebugData","propertyKey","defineAssignedProp","sync","componentManager","changeDetector","RelationsChangeDetector","getId","markForCheck","defineSkipInitProp","isRelationsComponentType","__ɵɵRelationsComponent","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","RELATIONS_COMPONENTS_LOADER","RELATIONS_METADATA_STORAGE","RELATIONS_PROCESSOR_SKIP_INIT","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_LOADER_PROVIDER","isRelationsComponentDef","provideRelationsDebugger","RelationsManager","CodeExecutor","object","propName","has","isSkipInit","isAssigned","loadedDataCache","loadData","scriptElement","createElement","loadHelper","innerText","window","loadType","exp","require","requireName","getElementsByTagName","appendChild","RelationsChangeDetectorOptions","detectionInSingleRun","relationsProcessor","ɵrelationsProcessor","outputsComponents","isEmptyObject","ɵoutputsComponents","markedBeforeInit","skipSelf","firstRunChanges","secondRunChanges","checkRunning","relationDefs","relationDef","timeout","setTimeout","runCheck","relationsDef","markForCheckId","transferInputsData","BindThis","relationsDebugger","childrenCache","manager","removeCacheFromHierarchy","getChildrenComponents","getParentComponents","openScope","getFromScope","mngr","cmp","_relations","_relationsChange","relationsChange","setRelations","RelationsDataTransferInstructionImpl","_changes","ɵRelations","ɵBackwardRelations","ɵInitialized","relationsManager","resolveInitialized","noop","relationsChangeDetector","initializeRelations","destroyRelations","initOptions","initBackwardRelation","outputComponent","ɵɵRelationsOutputsChangeSubscriptions","subscription","inputComponents","outputObservable","inputComponent","ɵɵRelationsOptionsInitialized","autoCreated","relationsOnDestroy","processor","componentType","destroyScope","transferOutputsData","delayed","forceTransfer","transfers","previousValue","isStrictEquals","firstChange","isFirstChange","backwardRelation","setInitializePromise","initComponent","outputComponents","inputCmp","outputCmp","sourceTarget","initial","initRelation","componentMeta","metadataOptions","globalDefine","global","ngDesignerMetadata","extensionsObject","PACKAGE_SOURCES","packageName","packages","packagesChange","NEVER","refresh","getJson","jsonString","JSON","parse","isDestroyable","extractors","validatorFn","noCache","cachedDynamicItems","dynamicModule","provider","asyncDynamicModule","extractor","tryToExtract","extractorFunctions","fn","EditorHotkeys","undo","undoSubject","redo","redoSubject","saveSubject","copySubject","cutSubject","pasteSubject","deleteSubject","init","canUndo","activeIndex","canRedo","states","saveIndex","popSubject","historyChangeSubject","metadataState","getNewState","shift","stringify","setInitialState","clean","enable","disable"],"sourceRoot":""}