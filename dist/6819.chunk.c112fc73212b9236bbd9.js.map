{"version":3,"file":"6819.chunk.c112fc73212b9236bbd9.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/metadata/button.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/metadata/button.layoutMetadata.ts","webpack://ng-universal-demo/../basic-components/src/misc/tokens.ts","webpack://ng-universal-demo/../basic-components/src/misc/buttonPresetsPropertiesControl/buttonPresetsPropertiesControl.component.html","webpack://ng-universal-demo/../basic-components/src/misc/buttonPresetsPropertiesControl/buttonPresetsPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {ButtonComponentOptions} from '../button.options';\n\n/**\n * Button model for properties editor\n */\nexport class ButtonModel implements ButtonComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Text')\n    @LayoutPropertyDescription('Text to be displayed in button')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public text: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Disabled')\n    @LayoutPropertyDescription('Indication whether is button disabled')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public disabled: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Button css class')\n    @LayoutPropertyDescription('Css class applied to button element itself')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public buttonCssClass: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: ButtonComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {ButtonComponentOptions} from '../button.options';\nimport {ButtonModel} from './button.model';\nimport {ButtonPresetsPropertiesControlSAComponent} from '../../../misc/buttonPresetsPropertiesControl/buttonPresetsPropertiesControl.component';\n\n/**\n * Button layout metadata\n */\nexport class ButtonLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<ButtonComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<ButtonComponentOptions> =\n    {\n        name: 'Button',\n        description: 'Simple button',\n        group: 'Buttons',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: ButtonModel,\n                    propertiesControls: \n                    [\n                        ButtonPresetsPropertiesControlSAComponent,\n                        genericPropertiesControlFor<ButtonModel>(['buttonCssClass', 'text', 'disabled']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            text: 'Click me',\n            disabled: false,\n            buttonCssClass: 'btn btn-primary',\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {InjectionToken} from '@angular/core';\n\nimport {ButtonPreset} from '../interfaces';\n\n/**\n * Injection token for buttons presets\n */\nexport const BUTTONS_PRESETS: InjectionToken<ButtonPreset[]> = new InjectionToken<ButtonPreset[]>('BUTTONS_PRESETS');","<div class=\"properties-form-group\" *ngIf=\"buttonsPresets?.length\">\n    <label class=\"properties-control-label\"></label>\n    <div class=\"button-presets-wrapper\">\n        <button \n            type=\"button\" \n            *ngFor=\"let preset of buttonsPresets\" \n            [ngClass]=\"preset.cssClass\"\n            (click)=\"_setPreset(preset.cssClass)\">{{preset.text}}</button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\n\nimport {BUTTONS_PRESETS} from '../tokens';\nimport {ButtonPreset} from '../../interfaces';\n\nconst defaultPresets: ButtonPreset[] = [\n    {\n        text: 'primary',\n        cssClass: 'btn btn-primary'\n    },\n    {\n        text: 'info',\n        cssClass: 'btn btn-info'\n    },\n    {\n        text: 'default',\n        cssClass: 'btn btn-default'\n    },\n    {\n        text: 'success',\n        cssClass: 'btn btn-success'\n    },\n    {\n        text: 'warning',\n        cssClass: 'btn btn-warning'\n    },\n    {\n        text: 'danger',\n        cssClass: 'btn btn-danger'\n    },\n    {\n        text: 'error',\n        cssClass: 'btn btn-error'\n    }\n];\n\n/**\n * Component used for displaying button presets\n */\n@Component(\n{\n    selector: 'button-presets',\n    templateUrl: 'buttonPresetsPropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonPresetsPropertiesControlSAComponent extends PropertiesControlBase implements PropertiesControl\n{\n    //######################### private properties #########################\n\n    /**\n     * Injected buttons presets\n     */\n    protected buttonsPresets?: ButtonPreset[] = inject(BUTTONS_PRESETS, {optional: true}) ?? defaultPresets;\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets button preset\n     * @param cssClass \n     */\n    protected _setPreset(cssClass: string)\n    {\n        this.form?.get('buttonCssClass')?.setValue(cssClass);\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["ButtonModel","constructor","value","text","disabled","buttonCssClass","mapValuesToThis","bind","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","ButtonLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","ButtonPresetsPropertiesControlSAComponent","genericPropertiesControlFor","defaultOptions","Object","freeze","BUTTONS_PRESETS","InjectionToken","i0","preset_r2","_r4","$implicit","ctx_r3","_setPreset","cssClass","ButtonPresetsPropertiesControlSAComponent_div_0_button_3_Template","ctx_r0","buttonsPresets","defaultPresets","PropertiesControlBase","inject","optional","form","get","setValue","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ButtonPresetsPropertiesControlSAComponent_div_0_Template","length","CommonModule","i1","ReactiveFormsModule","encapsulation","changeDetection","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","_this","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","destroy","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","inputs","property_r1","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","undefined","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","properties","GenericPropertiesControl","GenericPropertiesControl_ng_container_0_Template","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","FirstUppercaseLocalizeSAPipe","DefaultGenericPropertiesControlComponent_ng_container_0_Template","CastPipesModule","NumberInputModule","AsFormControlPipe","transform","_valueHash","isBlank","FormControl","warn","pure"],"sourceRoot":""}