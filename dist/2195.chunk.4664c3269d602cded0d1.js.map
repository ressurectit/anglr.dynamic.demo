{"version":3,"file":"2195.chunk.4664c3269d602cded0d1.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.model.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.layoutMetadata.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html"],"sourcesContent":["import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {RichTextBlockEditorDialogSAComponent} from '../richTextBlockEditorDialog/richTextBlockEditorDialog.component';\nimport {RichTextBlockComponentOptions} from '../../../richTextBlock.options';\n\n/**\n * Component used for displaying rich text block properties control\n */\n@Component(\n{\n    selector: 'rich-text-block-properties-control',\n    templateUrl: 'richTextBlockPropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockPropertiesControlSAComponent extends PropertiesControlBase<RichTextBlockComponentOptions> implements PropertiesControl<RichTextBlockComponentOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text block editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.form?.controls.content.value\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.controls.content;\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n","<button type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit rich text block</span>\n</button>","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\n\n/**\n * Rich text block model for properties editor\n */\nexport class RichTextBlockModel implements RichTextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: RichTextBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockPropertiesControlSAComponent} from '../misc/components';\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\nimport {RichTextBlockModel} from './richTextBlock.model';\n\n/**\n * Rich text block layout metadata\n */\nexport class RichTextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RichTextBlockComponentOptions> =\n    {\n        name: 'Rich text block',\n        description: 'WYSIWYG editor allowing formatting of multiline text',\n        group: 'Texts',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: RichTextBlockModel,\n                    propertiesControls: \n                    [\n                        RichTextBlockPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>"],"names":["PropertiesControlBase","constructor","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","_this","_asyncToGenerator","_initialize","initialize","_this2","invalidateVisuals","this","detectChanges","i0","i1","inputs","form","RichTextBlockPropertiesControlSAComponent","changeDetector","metadataExtractor","dialog","super","showCodeEditor","result","lastValueFrom","open","RichTextBlockEditorDialogSAComponent","title","width","height","data","controls","content","value","afterClosed","isPresent","control","FormControl","setValue","i2","selectors","standalone","features","decls","vars","consts","template","rf","ctx","RichTextBlockModel","mapValuesToThis","bind","RichTextBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","modelType","propertiesControls","Object","freeze","TITLED_DIALOG_DATA","_r1","_r0","editor","getContent","close","tmp_0_0","undefined","MatDialogModule","EditorModule","encapsulation","changeDetection"],"sourceRoot":""}