{"version":3,"file":"2069.chunk.bad7003e80df30c02850.js","mappings":"gNAOM,MAAOA,EAUTC,YAAYC,GAHL,KAAAC,SAAkC,GAKrCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BF,EAC9B,ECXC,MAAOI,EA4BTL,cArBO,KAAAM,SACP,CACIC,KAAM,aACNC,YAAa,kDACbC,MAAO,OACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWb,EACXc,mBACA,EACIC,EAAAA,EAAAA,GAAyC,WAAYC,EAAAA,QAUrEC,OAAOC,OAAOb,KACjB,E,+YC1BC,MAAgBc,EAwBlBlB,YAAsBmB,EACAC,GADA,KAAAD,gBAAAA,EACA,KAAAC,WAAAA,EAlBZ,KAAAC,cAAwB,EAc3B,KAAAV,mBAA2F,IAMjG,CAOYW,WAAQ,iCAEd,EAAKD,eAKR,EAAKA,cAAe,QAEd,EAAKE,cATM,KAUpB,CAOYC,aAAU,uCAEb,EAAKF,UAFQ,KAGtB,CAKMG,oBAEHrB,KAAKe,gBAAgBO,eACxB,CAOSH,cAET,E,iCAvEiBL,GAAqBS,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAA,E,kBAArBT,EAAqBU,OAAAA,CAAAC,KAAAA,OAAAlB,mBAAAA,uB,mCCTpC,MAAMI,EAA0B,I,SAAIe,GAAc,aAAc,OAAOC,GAEnEA,EAAOC,YAAYC,YAAc,I","sources":["webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/metadata/dataBlock.model.ts","webpack://ng-universal-demo/../handlebars-components/src/dynamicItems/dataBlock/metadata/dataBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/handlebarsLanguageModel.ts"],"sourcesContent":["import {mapValuesToThis} from '@jscrpt/common';\n\nimport {DataBlockComponentOptions} from '../dataBlock.options';\n\n/**\n * Data block model for properties editor\n */\nexport class DataBlockModel implements DataBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public template: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: DataBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {codePropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {HandlebarsLanguageModel} from '@anglr/dynamic';\n\nimport {DataBlockComponentOptions} from '../dataBlock.options';\nimport {DataBlockModel} from './dataBlock.model';\n\n/**\n * Data block layout metadata\n */\nexport class DataBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<DataBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<DataBlockComponentOptions> =\n    {\n        name: 'Data block',\n        description: 'Data block - allows displaying data in template',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: DataBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<DataBlockModel>('template', HandlebarsLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {LanguageModel} from './languageModel';\n\n/**\n * Handlebars language model for code editor\n */\nexport const HandlebarsLanguageModel = new LanguageModel('handlebars', 'hbs', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});"],"names":["DataBlockModel","constructor","value","template","mapValuesToThis","this","DataBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","codePropertiesControlFor","HandlebarsLanguageModel","Object","freeze","PropertiesControlBase","_changeDetector","_extractor","_initialized","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","i0","inputs","form","LanguageModel","editor","getModel","getValue"],"sourceRoot":""}