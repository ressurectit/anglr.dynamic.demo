{"version":3,"file":"4999.chunk.72c7c20cf444cfbf2d42.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/button.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/button/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ButtonComponentOptions} from './button.options';\n\n/**\n * Button layout metadata loader\n */\nexport const ButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ButtonComponentOptions>> = async () => new (await import('./metadata/button.layoutMetadata')).ButtonLayoutEditorMetadata();\n\n/**\n * Button relations metadata loader\n */\nexport const ButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/button.relationsMetadata')).ButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {ButtonComponentOptions} from './button.options';\nimport {ButtonLayoutMetadataLoader, ButtonRelationsMetadataLoader} from './button.metadata';\n\n/**\n * Component used for displaying button\n */\n@Component(\n{\n    selector: 'button-component',\n    templateUrl: 'button.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs:\n    [\n        nameof<ButtonSAComponent>('disabled'),\n    ],\n    outputs:\n    [\n        nameof<ButtonSAComponent>('click'),\n    ],\n})\n@RelationsEditorMetadata(ButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ButtonLayoutMetadataLoader)\nexport class ButtonSAComponent extends LayoutComponentBase<ButtonComponentOptions> implements LayoutComponent<ButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting new void object value when clicked\n     */\n    @DynamicOutput({skipInit: true, sync: true})\n    public click: VoidObject = {};\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n    }\n}","<button type=\"button\" [disabled]=\"disabled\" [ngClass]=\"options?.buttonCssClass ?? ''\" (click)=\"click = {}\">\n    <span>{{options?.text}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ButtonSAComponent} from './button.component';\n\nexport default ButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ButtonLayoutMetadataLoader","_ref","_asyncToGenerator","ButtonLayoutEditorMetadata","apply","arguments","ButtonRelationsMetadataLoader","_ref2","ButtonRelationsEditorMetadata","ButtonSAComponent","LayoutComponentBase","constructor","disabled","click","onOptionsSet","this","options","t","selectors","inputs","standalone","features","i0","decls","vars","consts","template","rf","ctx","tmp_1_0","buttonCssClass","undefined","text","CommonModule","i1","styles","changeDetection","__decorate","DynamicOutput","skipInit","sync","DebugData","nameof","outputs","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}