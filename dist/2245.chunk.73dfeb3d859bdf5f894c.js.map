{"version":3,"file":"2245.chunk.73dfeb3d859bdf5f894c.js","mappings":"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","sources":["webpack://ng-universal-demo/../node_modules/tslib/tslib.js","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../packages/common/src/directives/ng_switch.ts","webpack://ng-universal-demo/../../../../src/material/core/common-behaviors/error-state.ts","webpack://ng-universal-demo/../../../../src/material/core/error/error-options.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field-control.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field-module.ts","webpack://ng-universal-demo/../../../../src/material/form-field/error.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field-animations.ts","webpack://ng-universal-demo/../../../../src/material/form-field/placeholder.ts","webpack://ng-universal-demo/../../../../src/material/form-field/prefix.ts","webpack://ng-universal-demo/../../src/material/form-field/form-field.html","webpack://ng-universal-demo/../../../../src/material/form-field/form-field.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field.html","webpack://ng-universal-demo/../../../../src/material/form-field/hint.ts","webpack://ng-universal-demo/../../../../src/material/form-field/label.ts","webpack://ng-universal-demo/../../../../src/material/form-field/suffix.ts","webpack://ng-universal-demo/../node_modules/tslib/modules/index.js"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n});\r\n","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, Optional, TemplateRef, ViewContainerRef, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Structural Directives](guide/structural-directives)\n *\n */\n@Directive({selector: '[ngSwitch]'})\nexport class NgSwitch {\n  // TODO(issue/24571): remove '!'.\n  private _defaultViews!: SwitchView[];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number {\n    return this._caseCount++;\n  }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let i = 0; i < this._defaultViews.length; i++) {\n        const defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\n@Directive({selector: '[ngSwitchCase]'})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   */\n  @Input() ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() private ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchCase', 'NgSwitchCase');\n    }\n\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   * @nodoc\n   */\n  ngDoCheck() {\n    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\n@Directive({selector: '[ngSwitchDefault]'})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Optional() @Host() ngSwitch: NgSwitch) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ngSwitch) {\n      throwNgSwitchProviderNotFoundError('ngSwitchDefault', 'NgSwitchDefault');\n    }\n\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n\nfunction throwNgSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.PARENT_NG_SWITCH_NOT_FOUND,\n      `An element with the \"${attrName}\" attribute ` +\n          `(matching the \"${\n              directiveName}\" directive) must be located inside an element with the \"ngSwitch\" attribute ` +\n          `(matching \"NgSwitch\" directive)`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControlDirective, NgControl} from '@angular/forms';\nimport {Directive} from '@angular/core';\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n@Directive()\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the AbstractControlDirective for this control. */\n  readonly ngControl: NgControl | AbstractControlDirective | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /**\n   * Value of `aria-describedby` that should be merged with the described-by ids\n   * which are set by the form-field.\n   */\n  readonly userAriaDescribedBy?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n@NgModule({\n  declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n  imports: [CommonModule, MatCommonModule, ObserversModule],\n  exports: [\n    MatCommonModule,\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, ElementRef, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_ERROR = new InjectionToken<MatError>('MatError');\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    '[attr.id]': 'id',\n    'aria-atomic': 'true',\n  },\n  providers: [{provide: MAT_ERROR, useExisting: MatError}],\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n\n  constructor(@Attribute('aria-live') ariaLive: string, elementRef: ElementRef) {\n    // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n    // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n    if (!ariaLive) {\n      elementRef.nativeElement.setAttribute('aria-live', 'polite');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n    transition('void => enter', [\n      style({opacity: 0, transform: 'translateY(-5px)'}),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder',\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_PREFIX = new InjectionToken<MatPrefix>('MatPrefix');\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n  providers: [{provide: MAT_PREFIX, useExisting: MatPrefix}],\n})\nexport class MatPrefix {}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MAT_ERROR, MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {_MAT_HINT, MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MAT_PREFIX, MatPrefix} from './prefix';\nimport {MAT_SUFFIX, MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {AbstractControlDirective} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nconst _MatFormFieldBase = mixinColor(\n  class {\n    constructor(public _elementRef: ElementRef) {}\n  },\n  'primary',\n);\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/** Possible values for the \"floatLabel\" form field input. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  /** Default form field appearance style. */\n  appearance?: MatFormFieldAppearance;\n  /** Default color of the form field. */\n  color?: ThemePalette;\n  /** Whether the required marker should be hidden by default. */\n  hideRequiredMarker?: boolean;\n  /**\n   * Whether the label for form fields should by default float `always`,\n   * `never`, or `auto` (only when necessary).\n   */\n  floatLabel?: FloatLabelType;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken<MatFormFieldDefaultOptions>(\n  'MAT_FORM_FIELD_DEFAULT_OPTIONS',\n);\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nexport const MAT_FORM_FIELD = new InjectionToken<MatFormField>('MatFormField');\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_FORM_FIELD, useExisting: MatFormField}],\n})\nexport class MatFormField\n  extends _MatFormFieldBase\n  implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor\n{\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  /** The form field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance;\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || this._defaults?.appearance || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean {\n    return this._hideRequiredMarker;\n  }\n  set hideRequiredMarker(value: BooleanInput) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker = false;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  _canLabelFloat(): boolean {\n    return this.floatLabel !== 'never';\n  }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string {\n    return this._hintLabel;\n  }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  readonly _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the label element.\n  readonly _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef<HTMLElement>;\n\n  @ContentChild(MatFormFieldControl) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n\n  @ContentChildren(MAT_ERROR, {descendants: true}) _errorChildren: QueryList<MatError>;\n  @ContentChildren(_MAT_HINT, {descendants: true}) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MAT_PREFIX, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MAT_SUFFIX, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir: Directionality,\n    @Optional()\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n    private _defaults: MatFormFieldDefaultOptions,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string,\n  ) {\n    super(elementRef);\n\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = _defaults?.appearance || 'legacy';\n    if (_defaults) {\n      this._hideRequiredMarker = Boolean(_defaults.hideRequiredMarker);\n      if (_defaults.color) {\n        this.color = this.defaultColor = _defaults.color;\n      }\n    }\n  }\n\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n  getLabelId(): string | null {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Determines whether a class from the AbstractControlDirective\n   * should be forwarded to the host element.\n   */\n  _shouldForward(prop: keyof AbstractControlDirective): boolean {\n    const control = this._control ? this._control.ngControl : null;\n    return control && control[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!((this._control && this._control.placeholder) || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n\n  _shouldLabelFloat() {\n    return (\n      this._canLabelFloat() &&\n      ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat())\n    );\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return (\n      (this.appearance === 'legacy' && !this._hasLabel()) ||\n      (this._hasLabel() && !this._shouldLabelFloat())\n    );\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || (this.appearance === 'legacy' && this._hasPlaceholder());\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n      ? 'error'\n      : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend')\n          .pipe(take(1))\n          .subscribe(() => {\n            this._showAlwaysAnimate = false;\n          });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (\n      this._control.placeholder &&\n      this._placeholderChild &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /** Gets the default float label state. */\n  private _getDefaultFloatLabelState(): FloatLabelType {\n    return (this._defaults && this._defaults.floatLabel) || 'auto';\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n      if (\n        this._control.userAriaDescribedBy &&\n        typeof this._control.userAriaDescribedBy === 'string'\n      ) {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'start')\n          : null;\n        const endHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'end')\n          : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n    const container = this._connectionContainerRef.nativeElement;\n    const outlineStartSelector = '.mat-form-field-outline-start';\n    const outlineGapSelector = '.mat-form-field-outline-gap';\n\n    // getBoundingClientRect isn't available on the server.\n    if (this.appearance !== 'outline' || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If there is no content, set the gap elements to zero.\n    if (!labelEl || !labelEl.children.length || !labelEl.textContent!.trim()) {\n      const gapElements = container.querySelectorAll(\n        `${outlineStartSelector}, ${outlineGapSelector}`,\n      );\n      for (let i = 0; i < gapElements.length; i++) {\n        gapElements[i].style.width = '0';\n      }\n      return;\n    }\n\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const startEls = container.querySelectorAll(outlineStartSelector);\n    const gapEls = container.querySelectorAll(outlineGapSelector);\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelChildren = labelEl.children;\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += (labelChildren[i] as HTMLElement).offsetWidth;\n      }\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately =\n      false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDOM(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n}\n","<div class=\"mat-form-field-wrapper\">\n  <div class=\"mat-form-field-flex\" #connectionContainer\n       (click)=\"_control.onContainerClick && _control.onContainerClick($event)\">\n\n    <!-- Outline used for outline appearance. -->\n    <ng-container *ngIf=\"appearance == 'outline'\">\n      <div class=\"mat-form-field-outline\">\n        <div class=\"mat-form-field-outline-start\"></div>\n        <div class=\"mat-form-field-outline-gap\"></div>\n        <div class=\"mat-form-field-outline-end\"></div>\n      </div>\n      <div class=\"mat-form-field-outline mat-form-field-outline-thick\">\n        <div class=\"mat-form-field-outline-start\"></div>\n        <div class=\"mat-form-field-outline-gap\"></div>\n        <div class=\"mat-form-field-outline-end\"></div>\n      </div>\n    </ng-container>\n\n    <div\n      class=\"mat-form-field-prefix\"\n      *ngIf=\"_prefixChildren.length\"\n      (cdkObserveContent)=\"updateOutlineGap()\"\n      [cdkObserveContentDisabled]=\"appearance != 'outline'\">\n      <ng-content select=\"[matPrefix]\"></ng-content>\n    </div>\n\n    <div class=\"mat-form-field-infix\" #inputContainer>\n      <ng-content></ng-content>\n\n      <span class=\"mat-form-field-label-wrapper\">\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\n             read if it comes before the control in the DOM. -->\n        <label class=\"mat-form-field-label\"\n               (cdkObserveContent)=\"updateOutlineGap()\"\n               [cdkObserveContentDisabled]=\"appearance != 'outline'\"\n               [id]=\"_labelId\"\n               [attr.for]=\"_control.id\"\n               [attr.aria-owns]=\"_control.id\"\n               [class.mat-empty]=\"_control.empty && !_shouldAlwaysFloat()\"\n               [class.mat-form-field-empty]=\"_control.empty && !_shouldAlwaysFloat()\"\n               [class.mat-accent]=\"color == 'accent'\"\n               [class.mat-warn]=\"color == 'warn'\"\n               #label\n               *ngIf=\"_hasFloatingLabel()\"\n               [ngSwitch]=\"_hasLabel()\">\n\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\n          <ng-container *ngSwitchCase=\"false\">\n            <ng-content select=\"mat-placeholder\"></ng-content>\n            <span>{{_control.placeholder}}</span>\n          </ng-container>\n\n          <ng-content select=\"mat-label\" *ngSwitchCase=\"true\"></ng-content>\n\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\n          <span\n            class=\"mat-placeholder-required mat-form-field-required-marker\"\n            aria-hidden=\"true\"\n            *ngIf=\"!hideRequiredMarker && _control.required && !_control.disabled\">&#32;*</span>\n        </label>\n      </span>\n    </div>\n\n    <div class=\"mat-form-field-suffix\" *ngIf=\"_suffixChildren.length\">\n      <ng-content select=\"[matSuffix]\"></ng-content>\n    </div>\n  </div>\n\n  <!-- Underline used for legacy, standard, and box appearances. -->\n  <div class=\"mat-form-field-underline\"\n       *ngIf=\"appearance != 'outline'\">\n    <span class=\"mat-form-field-ripple\"\n          [class.mat-accent]=\"color == 'accent'\"\n          [class.mat-warn]=\"color == 'warn'\"></span>\n  </div>\n\n  <div class=\"mat-form-field-subscript-wrapper\"\n       [ngSwitch]=\"_getDisplayedMessages()\">\n    <div *ngSwitchCase=\"'error'\" [@transitionMessages]=\"_subscriptAnimationState\">\n      <ng-content select=\"mat-error\"></ng-content>\n    </div>\n\n    <div class=\"mat-form-field-hint-wrapper\" *ngSwitchCase=\"'hint'\"\n      [@transitionMessages]=\"_subscriptAnimationState\">\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\n      <div *ngIf=\"hintLabel\" [id]=\"_hintLabelId\" class=\"mat-hint\">{{hintLabel}}</div>\n      <ng-content select=\"mat-hint:not([align='end'])\"></ng-content>\n      <div class=\"mat-form-field-hint-spacer\"></div>\n      <ng-content select=\"mat-hint[align='end']\"></ng-content>\n    </div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nexport const _MAT_HINT = new InjectionToken<MatHint>('MatHint');\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-form-field-hint-end]': 'align === \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  },\n  providers: [{provide: _MAT_HINT, useExisting: MatHint}],\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label',\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SUFFIX = new InjectionToken<MatSuffix>('MatSuffix');\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n  providers: [{provide: MAT_SUFFIX, useExisting: MatSuffix}],\n})\nexport class MatSuffix {}\n","import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n};\r\n"],"names":["__extends","__assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__spreadArrays","__spreadArray","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","__classPrivateFieldGet","__classPrivateFieldSet","__classPrivateFieldIn","__createBinding","factory","root","global","self","this","createExporter","exports","previous","Object","create","defineProperty","value","__esModule","id","v","exporter","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","assign","t","s","i","n","arguments","length","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","op","pop","push","m","o","k","k2","undefined","writable","configurable","enumerable","get","ar","error","concat","il","a","j","jl","to","from","pack","l","slice","asyncIterator","q","resume","fulfill","settle","shift","cooked","raw","__setModuleDefault","mod","receiver","state","kind","has","set","AsFormControlPipe","_logger","transform","_valueHash","isBlank","FormControl","warn","LOGGER","SwitchView","_viewContainerRef","_templateRef","_created","createEmbeddedView","destroy","clear","enforceState","created","NgSwitch","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","ngSwitch","newValue","_ngSwitch","_updateDefaultCases","_addCase","_addDefault","view","_defaultViews","_matchCase","matched","useDefault","NgSwitchCase","viewContainer","templateRef","_view","ngDoCheck","ngSwitchCase","i0","NgSwitchDefault","mixinErrorState","base","args","super","errorState","updateErrorState","oldState","parent","_parentFormGroup","_parentForm","matcher","errorStateMatcher","_defaultErrorStateMatcher","control","ngControl","newState","isErrorState","stateChanges","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","ErrorStateMatcher","touched","MatFormFieldControl","MatFormFieldModule","CommonModule","MatCommonModule","ObserversModule","nextUniqueId","MAT_ERROR","InjectionToken","MatError","ariaLive","elementRef","nativeElement","setAttribute","provide","useExisting","matFormFieldAnimations","transitionMessages","trigger","style","opacity","transition","animate","MatPlaceholder","MAT_PREFIX","MatPrefix","_MatFormFieldBase","mixinColor","_elementRef","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_changeDetectorRef","_dir","_defaults","_platform","_ngZone","_animationMode","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","Subject","_hideRequiredMarker","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","Boolean","hideRequiredMarker","color","defaultColor","_appearance","oldValue","coerceBooleanProperty","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","markForCheck","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","controlType","classList","add","pipe","startWith","subscribe","_validatePlaceholders","_syncDescribedByIds","valueChanges","takeUntil","runOutsideAngular","onStable","updateOutlineGap","merge","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","_animateAndLockLabel","_label","fromEvent","take","_validateHints","ids","userAriaDescribedBy","split","startHint","find","hint","align","endHint","map","setDescribedByIds","labelEl","container","outlineStartSelector","outlineGapSelector","isBrowser","children","textContent","trim","gapElements","querySelectorAll","width","_isAttachedToDOM","startWidth","gapWidth","startEls","gapEls","containerRect","getBoundingClientRect","height","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","offsetWidth","Math","abs","outlineGapPadding","rect","right","left","element","getRootNode","rootNode","document","documentElement","contains","i2","ANIMATION_MODULE_TYPE","MatLabel","_MAT_HINT","MAT_SUFFIX","i3","MatHint","MatSuffix","tslib"],"sourceRoot":""}