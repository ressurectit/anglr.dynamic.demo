{"version":3,"file":"7701.chunk.6c221ec36d6b78a20471.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox-module.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox-config.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.ts","webpack://ng-universal-demo/../../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.html"],"sourcesContent":[null,"import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /** Default theme color palette to be used for checkboxes. */\n  color?: ThemePalette;\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Directive,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n} from './checkbox-config';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxMixinBase = mixinTabIndex(\n  mixinColor(\n    mixinDisableRipple(\n      mixinDisabled(\n        class {\n          constructor(public _elementRef: ElementRef) {}\n        },\n      ),\n    ),\n  ),\n);\n\n@Directive()\nexport abstract class _MatCheckboxBase<E>\n  extends _MatCheckboxMixinBase\n  implements\n    AfterViewInit,\n    ControlValueAccessor,\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    CanDisableRipple,\n    FocusableOption\n{\n  /** Focuses the checkbox. */\n  abstract focus(origin?: FocusOrigin): void;\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected abstract _createChangeEvent(isChecked: boolean): E;\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected abstract _getAnimationTargetElement(): HTMLElement | null;\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected abstract _animationClasses: {\n    uncheckedToChecked: string;\n    uncheckedToIndeterminate: string;\n    checkedToUnchecked: string;\n    checkedToIndeterminate: string;\n    indeterminateToChecked: string;\n    indeterminateToUnchecked: string;\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<E> = new EventEmitter<E>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(\n    idPrefix: string,\n    elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    protected _ngZone: NgZone,\n    tabIndex: string,\n    public _animationMode?: string,\n    protected _options?: MatCheckboxDefaultOptions,\n  ) {\n    super(elementRef);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: BooleanInput) {\n    const checked = coerceBooleanProperty(value);\n\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this._disabled;\n  }\n  override set disabled(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: BooleanInput) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox\n  extends _MatCheckboxBase<MatCheckboxChange>\n  implements AfterViewInit, OnDestroy\n{\n  protected _animationClasses = {\n    uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n    checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n    indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked',\n  };\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n    options?: MatCheckboxDefaultOptions,\n  ) {\n    super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n  }\n\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  protected _getAnimationTargetElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        this._onBlur();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    super._handleInputClick();\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n}\n",null,"<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label>\n  <span class=\"mat-checkbox-inner-container\"\n       [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n    <input #input\n           class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           [attr.value]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabIndex]=\"tabIndex\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"_getAriaChecked()\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"_onInteractionEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n    <span matRipple class=\"mat-checkbox-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleRadius]=\"20\"\n         [matRippleCentered]=\"true\"\n         [matRippleAnimation]=\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\">\n      <span class=\"mat-ripple-element mat-checkbox-persistent-ripple\"></span>\n    </span>\n    <span class=\"mat-checkbox-frame\"></span>\n    <span class=\"mat-checkbox-background\">\n      <svg version=\"1.1\"\n           focusable=\"false\"\n           class=\"mat-checkbox-checkmark\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mat-checkbox-checkmark-path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M4.1,12.7 9,17.6 20.3,6.3\"/>\n      </svg>\n      <!-- Element for rendering the indeterminate state checkbox. -->\n      <span class=\"mat-checkbox-mixedmark\"></span>\n    </span>\n  </span>\n  <span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n"],"names":["NEVER","Observable","noop","AsFormControlPipe","constructor","_logger","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","AsRequiredTypePipe","defaultValue","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatRippleModule","MatCommonModule","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","_elementRef","_MatCheckboxBase","idPrefix","elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","_options","super","ariaLabel","ariaLabelledby","labelPosition","name","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","id","_uniqueId","inputId","required","_required","coerceBooleanProperty","ngAfterViewInit","_syncIndeterminate","checked","markForCheck","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","_getAnimationTargetElement","classList","remove","_getAnimationClassForCheckStateTransition","length","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","_createChangeEvent","_inputElement","nativeElement","toggle","_handleInputClick","Promise","resolve","then","_onInteractionEvent","event","stopPropagation","_onBlur","_animationClasses","uncheckedToChecked","checkedToIndeterminate","uncheckedToIndeterminate","checkedToUnchecked","indeterminateToChecked","indeterminateToUnchecked","nativeCheckbox","MatRipple","changeDetectorRef","_focusMonitor","ngZone","animationMode","options","isChecked","source","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_onInputClick","focus","origin","focusVia","i0","ANIMATION_MODULE_TYPE","i2"],"sourceRoot":""}