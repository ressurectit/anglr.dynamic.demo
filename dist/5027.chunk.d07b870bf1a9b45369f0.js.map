{"version":3,"file":"5027.chunk.d07b870bf1a9b45369f0.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-config.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label-wrapper.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-animations.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-body.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-body.html","webpack://ng-universal-demo/../../../../src/material/tabs/ink-bar.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/paginated-tab-header.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-content.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label.ts","webpack://ng-universal-demo/../../src/material/tabs/tab.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab.ts"],"sourcesContent":["import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperBase = mixinDisabled(class {});\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state(\n      'left',\n      style({\n        transform: 'translate3d(-100%, 0, 0)',\n        minHeight: '1px',\n\n        // Normally this is redundant since we detach the content from the DOM, but if the user\n        // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.\n        visibility: 'hidden',\n      }),\n    ),\n    state(\n      'right',\n      style({\n        transform: 'translate3d(100%, 0, 0)',\n        minHeight: '1px',\n        visibility: 'hidden',\n      }),\n    ),\n\n    transition(\n      '* => left, * => right, left => center, right => center',\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * pseudo-prior state.\n */\nexport type MatTabBodyPositionState =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'left-origin-center'\n  | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]',\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  readonly _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: CdkPortalOutlet;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number | null;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n          this._onCentered.emit();\n        }\n\n        if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n          this._afterLeavingCenter.emit();\n        }\n      });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState | string): boolean {\n    return (\n      position == 'center' || position == 'left-origin-center' || position == 'right-origin-center'\n    );\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(origin: number): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(CdkPortalOutlet) _portalHost: CdkPortalOutlet;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {take} from 'rxjs/operators';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    // `onStable` might not run for a while if the zone has already stabilized.\n    // Wrap the call in `NgZone.run` to ensure that it runs relatively soon.\n    this._ngZone.run(() => {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        const positions = this._inkBarPositioner(element);\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n      });\n    });\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n  Directive,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  merge,\n  of as observableOf,\n  Subject,\n  EMPTY,\n  Observer,\n  Observable,\n  timer,\n  fromEvent,\n} from 'rxjs';\nimport {take, switchMap, startWith, skip, takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() private _dir: Directionality,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap();\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n    // can hold up tests that are in a background tab.\n    this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<void> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<void>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(() => {\n                observer.next();\n              });\n              tabItems.forEach(item => {\n                resizeObserver.observe(item.elementRef.nativeElement);\n              });\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n          this._itemSelected(event);\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) {\n      return true;\n    }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled =\n        this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n  Directive,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabHeaderBase\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n",null,"<button class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\"\n     #previousPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     tabindex=\"-1\"\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     [disabled]=\"_disableScrollBefore || null\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n\n<div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\">\n  <div\n    #tabList\n    class=\"mat-tab-list\"\n    [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n    role=\"tablist\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n    <mat-ink-bar></mat-ink-bar>\n  </div>\n</div>\n\n<button class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\"\n     #nextPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     [disabled]=\"_disableScrollAfter || null\"\n     tabindex=\"-1\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n  'primary',\n);\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabGroupBase\n  extends _MatTabGroupMixinBase\n  implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple\n{\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  abstract _allTabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean {\n    return this._dynamicHeight;\n  }\n  set dynamicHeight(value: BooleanInput) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n  set animationDuration(value: NumberInput) {\n    this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : (value as string);\n  }\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input()\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n  set contentTabIndex(value: NumberInput) {\n    this._contentTabIndex = coerceNumberProperty(value, null);\n  }\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input()\n  get preserveContent(): boolean {\n    return this._preserveContent;\n  }\n  set preserveContent(value: BooleanInput) {\n    this._preserveContent = coerceBooleanProperty(value);\n  }\n  private _preserveContent: boolean = false;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(\n    elementRef: ElementRef,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    this.contentTabIndex = defaultConfig?.contentTabIndex ?? null;\n    this.preserveContent = !!defaultConfig?.preserveContent;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, index: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  inputs: ['color', 'disableRipple'],\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","<mat-tab-header #tabHeader\n               [selectedIndex]=\"selectedIndex || 0\"\n               [disableRipple]=\"disableRipple\"\n               [disablePagination]=\"disablePagination\"\n               (indexFocused)=\"_focusChanged($event)\"\n               (selectFocusedIndex)=\"selectedIndex = $event\">\n  <div class=\"mat-tab-label mat-focus-indicator\" role=\"tab\" matTabLabelWrapper mat-ripple\n       cdkMonitorElementFocus\n       *ngFor=\"let tab of _tabs; let i = index\"\n       [id]=\"_getTabLabelId(i)\"\n       [attr.tabIndex]=\"_getTabIndex(tab, i)\"\n       [attr.aria-posinset]=\"i + 1\"\n       [attr.aria-setsize]=\"_tabs.length\"\n       [attr.aria-controls]=\"_getTabContentId(i)\"\n       [attr.aria-selected]=\"selectedIndex === i\"\n       [attr.aria-label]=\"tab.ariaLabel || null\"\n       [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n       [class.mat-tab-label-active]=\"selectedIndex === i\"\n       [ngClass]=\"tab.labelClass\"\n       [disabled]=\"tab.disabled\"\n       [matRippleDisabled]=\"tab.disabled || disableRipple\"\n       (click)=\"_handleClick(tab, tabHeader, i)\"\n       (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n\n\n    <div class=\"mat-tab-label-content\">\n      <!-- If there is a label template, use it. -->\n      <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n        <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n      </ng-template>\n\n      <!-- If there is not a label template, fall back to the text label. -->\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\n    </div>\n  </div>\n</mat-tab-header>\n\n<div\n  class=\"mat-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  <mat-tab-body role=\"tabpanel\"\n               *ngFor=\"let tab of _tabs; let i = index\"\n               [id]=\"_getTabContentId(i)\"\n               [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\"\n               [attr.aria-labelledby]=\"_getTabLabelId(i)\"\n               [class.mat-tab-body-active]=\"selectedIndex === i\"\n               [ngClass]=\"tab.bodyClass\"\n               [content]=\"tab.content!\"\n               [position]=\"tab.position!\"\n               [origin]=\"tab.origin\"\n               [animationDuration]=\"animationDuration\"\n               [preserveContent]=\"preserveContent\"\n               (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n               (_onCentering)=\"_setTabBodyWrapperHeight($event)\">\n  </mat-tab-body>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  constructor(/** Content for the tab. */ public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB) @Optional() public _closestTab: any,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MAT_TAB_CONTENT} from './tab-content';\nimport {MAT_TAB_LABEL, MatTabLabel, MAT_TAB} from './tab-label';\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabBase = mixinDisabled(class {});\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n@Component({\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n})\nexport class MatTab extends _MatTabBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MAT_TAB_LABEL)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n  protected _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MAT_TAB_CONTENT, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /**\n   * Classes to be passed to the tab label inside the mat-tab-header container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() labelClass: string | string[];\n\n  /**\n   * Classes to be passed to the tab mat-tab-body container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB_GROUP) @Optional() public _closestTabGroup: any,\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n"],"names":["ComponentRoute","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push","ListKeyManager","constructor","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","QueryList","changes","subscribe","newItems","this","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","unsubscribe","pipe","tap","letter","debounceTime","filter","length","map","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","hasModifierKey","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","MAT_TABS_CONFIG","InjectionToken","_MatTabLabelWrapperBase","mixinDisabled","MatTabLabelWrapper","elementRef","super","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","i0","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","visibility","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","preserveContent","detach","ngOnDestroy","forwardRef","MatTabBody","DOCUMENT","_MatTabBodyBase","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","clientHeight","_getLayoutDirection","_MAT_INK_BAR_POSITIONER","providedIn","factory","element","left","width","MatInkBar","_ngZone","_inkBarPositioner","_animationMode","alignToElement","show","run","onStable","take","positions","inkBar","hide","ANIMATION_MODULE_TYPE","FocusKeyManager","_origin","setFocusOrigin","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","disablePagination","coerceBooleanProperty","selectedIndex","coerceNumberProperty","_keyManager","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","observableOf","resize","realign","updatePagination","_alignInkBarToSelectedTab","merge","_itemsResized","Promise","resolve","then","Math","max","min","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ResizeObserver","EMPTY","switchMap","tabItems","Observable","observer","resizeObserver","forEach","observe","disconnect","skip","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","ENTER","SPACE","focusIndex","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tab","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","ngZone","platform","animationMode","_disableRipple","disableRipple","MatTabHeader","i4","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","_MatTabGroupBase","defaultConfig","_tabs","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","_preserveContent","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","contentTabIndex","_animationDuration","test","_contentTabIndex","backgroundColor","_backgroundColor","classList","remove","add","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","_closestTabGroup","notifyOnChanges","destroy","realignInkBar","_tabHeader","focusTab","header","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","_tabFocusChanged","focusOrigin","MatTabGroup","MatTab","provide","MAT_TAB_GROUP","useExisting","i1","MAT_TAB_CONTENT","MatTabContent","template","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","templateRef","_closestTab","_MatTabBase","_viewContainerRef","textLabel","_contentPortal","templateLabel","_templateLabel","_setTemplateLabelInput","content","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","TemplateRef"],"sourceRoot":""}