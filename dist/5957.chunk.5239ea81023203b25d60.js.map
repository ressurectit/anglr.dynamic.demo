{"version":3,"file":"5957.chunk.5239ea81023203b25d60.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/defaultDynamicModuleRelationsProvider/defaultDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts"],"sourcesContent":["import {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', '3px');\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const half = (this.end.y - this.start.y) / 2;\n            \n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + width, this.start.y + half],\n                [this.end.x - width, this.start.y + half],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChange, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n\n                component.zoomLevel = this.zoomLevel;\n                \n                const change: SimpleChange =\n                {\n                    currentValue: zoomChanges.currentValue,\n                    firstChange: false,\n                    previousValue: zoomChanges.previousValue,\n                    isFirstChange: () => false,\n                };\n\n                const chngs: SimpleChanges = {};\n                chngs[nameof<RelationsNode>('zoomLevel')] = change;\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this._logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const layoutComponentType = await this._loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                //TODO: similar handling\n\n                // switch(this._options?.missingTypeBehavior)\n                // {\n                //     default:\n                //     //case MissingTypeBehavior.ShowNotFound:\n                //     {\n                //         this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.Ignore:\n                //     {\n                //         //do nothing\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.ThrowError:\n                //     {\n                //         throw new Error(`RelationsNodeRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                //     }\n                // }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: this._viewContainerRef.injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this._logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                \n                chngs[nameof<RelationsNode>('metadata')] =\n                {\n                    currentValue: this.componentMetadata,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                chngs[nameof<RelationsNode>('zoomLevel')] =\n                {\n                    currentValue: this.zoomLevel,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                node.ngOnChanges(chngs);\n\n                this._logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this._componentRef.changeDetectorRef.markForCheck();\n\n                this._relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                this.destroy.next(this.component);\n                this._relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + _canvasPosition.x + 'px, ' + _canvasPosition.y + 'px) scale(' + _zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"_zoomLevel\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {select} from 'd3';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * TODO\n * - Zoom to point\n */\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    styleUrls: ['relationsCanvas.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Background pattern size\n     */\n    protected _backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    /**\n     * Last mouse up position\n     */\n    protected _lastMouseUpPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get _backgroundSizeStyle(): string\n    {\n        return `${this._backgroundSize}px ${this._backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this._canvasPosition.x % this._backgroundSize}px ${this._canvasPosition.y % this._backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected _canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected _zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected _isDragging: boolean = false;\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected _relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _relationManager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this._relationsGroup?.nativeElement), this._relationManager, null, null);\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this._lastMouseDownPosition = \n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n            \n            this._isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._canvasPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected _onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this._zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);            \n            \n            this._canvasPosition = \n            {\n                x: (this._canvasPosition.x/this._zoomLevel) * newZoomLevel,\n                y: (this._canvasPosition.y/this._zoomLevel) * newZoomLevel,\n            };\n\n            this._zoomLevel = newZoomLevel;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._canvasPosition.x,\n                y: this._canvasPosition.y\n            };\n\n            this._backgroundSize = DEFAULT_BACKGROUND_SIZE * this._zoomLevel;\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\nimport {resolvePromiseOr} from '@jscrpt/common';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await resolvePromiseOr(relationsExportExtractor(module, logger));\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module relations types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/relations');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {BasicComponentsDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, DefaultDynamicModuleRelationsProvider} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for basic components package relations nodes provider\n */\nexport const BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: BasicComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for default dynamic relations types provider for all built-in types in dynamic\n */\nexport const DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isType} from '@jscrpt/common';\n\nimport {BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER, DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, StaticComponentsRegister} from '../services';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        }\n    ];\n}\n","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};"],"names":["NodeRelationPath","constructor","_parentGroup","_relationManager","start","end","_destroyingSubject","Subject","output","input","this","_path","append","attr","_lineGenerator","line","curve","curveBundle","destroying","asObservable","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","x","width","half","y","third","RelationsNodeRendererSADirective","_viewContainerRef","_relationsNodeManager","_loader","_logger","_componentRef","componentMetadata","zoomLevel","create","EventEmitter","component","instance","ngOnChanges","changes","nameof","isPresent","zoomChanges","change","currentValue","firstChange","previousValue","isFirstChange","chngs","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","createComponent","data","injector","node","metadata","changeDetectorRef","markForCheck","registerNode","unregisterNode","i0","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","ctx_r1","RelationsCanvasSAComponent","_backgroundSize","_lastMouseDownPosition","_lastMouseUpPosition","_canvasPosition","_zoomLevel","_isDragging","nodeDefinitions","_backgroundSizeStyle","_backgroundPositionStyle","createRelation","select","_relationsGroup","nativeElement","_onMouseDown","event","buttons","MouseButton","clientX","clientY","_onMouseMove","_onMouseUp","_onWheel","deltaY","newZoomLevel","clamp","preventDefault","stopImmediatePropagation","viewQuery","ElementRef","ctx","CommonModule","i2","styles","changeDetection","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","InjectionToken","RELATIONS_MODULE_TYPES_PROVIDERS","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_DATA_EXTRACTORS","RELATIONS_NODES_PROVIDERS","relationsNodeExtractor","module","logger","relations","resolvePromiseOr","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","metaInfo","componentRelationsNodeExtractor","localModule","default","singleton","StaticComponentsRelationsNodesProvider","_componentsRegister","tryToGet","source","type","getType","factory","DefaultDynamicModuleRelationsProvider","moduleName","e","StaticComponentsRelationsTypesProvider","types","BASIC_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","useClass","BasicComponentsDynamicModuleItemsProvider","multi","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","DEFAULT_RELATIONS_NODES_EXTRACTOR","useFactory","DynamicModuleDataExtractor","deps","Optional","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","defaultExportExtractor","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","DynamicItemLoader","inject","isRelationsModuleTypes","optional","undefined","RELATIONS_NODES_LOADER_PROVIDER","isRelationsNodeDef","num","min","max","Math","isBlank","Array","isArray","isType","isBoolean","isJsObject","provideRelationsEditor","RelationsNodeManager","provideRelationsEditorWithStatic","staticRegister","StaticComponentsRegister","_nodes","_waitingInputRelations","_activeInput","outputNode","outputName","relationsNode","relation","startRelation","_b","_a","push","inputName","inputNode","endRelation","waitingInputRelations","waiting","getMetadata","result","nodeIds","Object","keys","displayName","relationsOptions","nodeMetadata","allOutputs","outputMeta","parentId","_definedTypes","getDefinedTypes","isRelationsComponentType"],"sourceRoot":""}