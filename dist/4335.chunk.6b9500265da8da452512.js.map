{"version":3,"file":"4335.chunk.6b9500265da8da452512.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/extensions/stackPanelFlex.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/stackPanel.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/stackPanel/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts"],"sourcesContent":["import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Child extension that applies flex styling to child\n */\nexport class StackPanelFlexExtension extends DynamicItemExtensionBase<StackPanelFlexExtensionOptions> implements DynamicItemExtension<StackPanelFlexExtensionOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies flex styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n\n        if(isPresent(options?.flex))\n        {\n            const style = this._element?.nativeElement.style;\n\n            if(style && this._options)\n            {\n                style.flex = this._options.flex ?? '';\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\n\n/**\n * Stack panel layout metadata loader\n */\nexport const StackPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StackPanelComponentOptions>> = async () => new (await import('./metadata/stackPanel.layoutMetadata')).StackPanelLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {StackPanelComponentOptions} from './stackPanel.options';\nimport {StackPanelLayoutMetadataLoader} from './stackPanel.metadata';\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'stack-panel',\n    templateUrl: 'stackPanel.component.html',\n    styleUrls: ['stackPanel.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StackPanelLayoutMetadataLoader)\nexport class StackPanelSAComponent extends LayoutComponentBase<StackPanelComponentOptions> implements LayoutComponent<StackPanelComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        this._setStyles();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets styles for stack panel\n     */\n    protected _setStyles(): void\n    {\n        const style = this._element.nativeElement.style;\n\n        style.flexDirection = this.options?.horizontal ? 'row' : 'column';\n        style.flexWrap = this.options?.wrap ? 'wrap' : 'nowrap';\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {StackPanelFlexExtension} from './extensions';\nimport {StackPanelSAComponent} from './stackPanel.component';\n\nexport default StackPanelSAComponent;\n\nexport const childExtensions = [StackPanelFlexExtension];\nexport const extensions = [ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}"],"names":["StackPanelFlexExtension","DynamicItemExtensionBase","_onInit","this","_applyStyling","_onOptionsChange","options","_options","isPresent","flex","style","_element","nativeElement","StackPanelLayoutMetadataLoader","StackPanelLayoutEditorMetadata","i0","StackPanelSAComponent","LayoutComponentBase","_onOptionsSet","_setStyles","flexDirection","horizontal","flexWrap","wrap","t","selectors","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","childExtensions","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_injector","_logger","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","registerExtensions","invalidateVisuals","detectChanges","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","debug","id","clear","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","_metadata","_instance","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","PACKAGE_SOURCES","packages","packagesChange","NEVER","refresh","multi","Observable","noop"],"sourceRoot":""}