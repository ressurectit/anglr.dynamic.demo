{"version":3,"file":"1258.chunk.2463e2a144f5f64cf5c9.js","mappings":"wWAMO,MAAMA,EAAoC,e,EAAA,G,EAA6D,mBAAY,WAAW,6EAAsDC,qCAAsC,E,+KAAA,kBAAhL,mC,yHCQ1C,IAAMC,EAAN,MAmBQC,uBAEP,OAAOC,KAAKC,iBAChB,CACWF,qBAAiBG,GAExBF,KAAKC,kBAAoBC,CAC7B,CAmBAC,YAAsBC,GAAA,KAAAA,SAAAA,EAjCZ,KAAAC,aAA6BL,KAAKI,SAASE,IAAIC,EAAAA,EAmCzD,CAOaC,YAAYC,GAAsB,I,EAAA,c,EAAA,YAE3C,IAAGC,EAAAA,EAAAA,GAA+B,UAAWD,EAC7C,CACI,IAAI,EAAKV,iBAEL,OAGJ,MAAMY,QAAoB,EAAKN,aAAaO,SAAwB,EAAKb,iBAAiBc,GAAI,EAAKd,iBAAiBe,MAEpH,IAAIH,EAEA,OAGJ,IAEI,EAAKI,gBAAkBJ,EAAY,EAAKK,K,CAE5C,MAAMC,GAEFC,QAAQC,MAAMF,E,EAErB,E,gLACL,CAOOG,oBAEP,IAvDAC,EAAAA,EAAAA,IAAAA,EAACC,EAAAA,EAAAA,OAAO,2DAQRD,EAAAA,EAAAA,IAAAA,EAACE,EAAAA,EAAAA,MAAe,qEAzCPzB,GAAsB,UAFlC0B,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwB7B,IAAqC,6BA8C1B8B,EAAAA,KA7CvB5B,GCZb,S","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Transform data relations metadata loader\n */\nexport const TransformDataRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/transformData.relationsMetadata')).TransformDataRelationsEditorMetadata();\n","import {Injector, Input, SimpleChanges} from '@angular/core';\nimport {CodeExecutor, DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {TransformDataRelationsMetadataLoader} from './transformData.metadata';\nimport {TransformDataRelationsOptions} from './transformData.options';\nimport {TransformData} from './transformData.interface';\n\n/**\n * Transform data relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(TransformDataRelationsMetadataLoader)\nexport class TransformDataRelations<TData = any, TTransformedData = any> implements RelationsComponent<TransformDataRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: TransformDataRelationsOptions|undefined|null;\n\n    /**\n     * Code executor used for execution o\n     */\n    protected codeExecutor: CodeExecutor = this.injector.get(CodeExecutor);\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): TransformDataRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: TransformDataRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be transformed\n     */\n    @Input()\n    public data: TData|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Transformed data\n     */\n    @DynamicOutput()\n    public transformedData: TTransformedData|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<TransformDataRelations>('data') in changes)\n        {\n            if(!this.relationsOptions)\n            {\n                return;\n            }\n\n            const transformer = await this.codeExecutor.loadData<TransformData>(this.relationsOptions.id, this.relationsOptions.code);\n\n            if(!transformer)\n            {\n                return;\n            }\n\n            try\n            {\n                this.transformedData = transformer(this.data);\n            }\n            catch(e)\n            {\n                console.error(e);\n            }\n        }\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {TransformDataRelations} from './transformData.relations';\n\nexport default TransformDataRelations;"],"names":["TransformDataRelationsMetadataLoader","TransformDataRelationsEditorMetadata","TransformDataRelations","relationsOptions","this","ɵRelationsOptions","value","constructor","injector","codeExecutor","get","CodeExecutor","ngOnChanges","changes","nameof","transformer","loadData","id","code","transformedData","data","e","console","error","invalidateVisuals","__decorate","Input","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector"],"sourceRoot":""}