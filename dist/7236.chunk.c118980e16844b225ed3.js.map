{"version":3,"file":"7236.chunk.c118980e16844b225ed3.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/metadata/expansionPanel.model.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/metadata/expansionPanel.layoutMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {{@type}}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {{@type}}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {{@type}}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"properties-form-group\" *ngIf=\"form?.get(property)\">\n        <label class=\"properties-control-label\">{{(propertiesMetadata?.[property]?.name ?? property)|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description|firstUppercaseLocalize\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor<TModel>(properties: (Extract<keyof TModel, string>)[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent, TextareaComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        TextareaComponent,\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutPropertyName, LayoutPropertyDescription, LayoutPropertyType, DefaultKnownPropertyTypes} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {MaterialExpansionPanelComponentOptions} from '../expansionPanel.options';\n\n/**\n * Material expansion panel model for properties editor\n */\nexport class MaterialExpansionPanelModel implements MaterialExpansionPanelComponentOptions\n{\n    //######################### public properties #########################\n \n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Expanded')\n    @LayoutPropertyDescription('State of panel - visible or invisible')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public expanded: boolean|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Title')\n    @LayoutPropertyDescription('Text to be displayed as panel title')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public title: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Description')\n    @LayoutPropertyDescription('Text to be displayed as description title')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public description: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public children: LayoutComponentMetadata[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(value: MaterialExpansionPanelComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {MaterialExpansionPanelComponentOptions} from '../expansionPanel.options';\nimport {MaterialExpansionPanelModel} from './expansionPanel.model';\n\n/**\n * Material expansion panel layout metadata\n */\nexport class MaterialExpansionPanelLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<MaterialExpansionPanelComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo =\n    {\n        name: 'Expansion panel',\n        description: 'Material expansion panel',\n        group: 'Material',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: MaterialExpansionPanelModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<MaterialExpansionPanelModel>(['title', 'description', 'expanded'])\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            expanded: true,\n            title: 'Panel title'   \n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, MaterialExpansionPanelComponentOptions, number]> = (metadata, options, index) =>\n    {\n        options.children ??= [];\n        options.children.splice(index, 0, metadata);\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [MaterialExpansionPanelComponentOptions|undefined|null]> = () => true;\n\n    /**\n     * @inheritdoc\n     */\n    public getChildrenContainer?: Func<Element|null, [Element]> = element => element.querySelector('.mat-expansion-panel-body');\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, MaterialExpansionPanelComponentOptions]> = (id, options) =>\n    {\n        options.children ??= [];\n        const index = options.children.findIndex(itm => itm.id === id);\n        options.children.splice(index, 1);\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["PropertyTypeControlRendererDirective","constructor","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","_this","typeName","debug","type","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","control","initialize","invalidateVisuals","this","destroy","i0","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","LOGGER","selectors","inputs","features","ctx_r3","propertiesMetadata","property_r1","description","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_span_4_Template","tmp_0_0","ctx_r2","name","undefined","form","get","tmp_4_0","_c0","DefaultGenericPropertiesControlComponent_ng_container_0_div_1_Template","ctx_r0","GenericPropertiesControl_ng_container_0_div_1_span_4_Template","GenericPropertiesControl_ng_container_0_div_1_Template","DefaultGenericPropertiesControlComponent","PropertiesControlBase","properties","genericPropertiesControlFor","GenericPropertiesControl","t","standalone","decls","vars","consts","template","rf","ctx","GenericPropertiesControl_ng_container_0_Template","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","DefaultGenericPropertiesControlComponent_ng_container_0_Template","ReactiveFormsModule","CastPipesModule","NumberInputModule","MaterialExpansionPanelModel","value","expanded","title","mapValuesToThis","bind","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","MaterialExpansionPanelLayoutEditorMetadata","metaInfo","group","optionsMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","defaultOptions","addDescendant","metadata","options","index","children","splice","canDropMetadata","getChildrenContainer","element","querySelector","removeDescendant","id","findIndex","itm","Object","freeze","AsFormControlPipe","transform","_valueHash","isBlank","FormControl","warn","pure"],"sourceRoot":""}