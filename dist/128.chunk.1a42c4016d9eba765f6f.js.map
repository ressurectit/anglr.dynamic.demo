{"version":3,"file":"128.chunk.1a42c4016d9eba765f6f.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager.flatTree.map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {AsyncProperties} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo, LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n\n/**\n * Generic implementation of layout editor metadata descriptor, async version\n */\nexport abstract class GenericLayoutAsyncMetadata<TOptions> implements AsyncProperties<LayoutEditorMetadataDescriptor<TOptions>>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of obtained layout editor metadata descriptor\n     */\n    protected _instance?: LayoutEditorMetadataDescriptor<TOptions>;\n\n    //######################### public properties - implementation of async LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * Meta information about layout component\n     */\n    public get metaInfo(): Promise<LayoutEditorMetadataInfo|undefined>\n    {\n        return this._getValue<LayoutEditorMetadataInfo|undefined>('metaInfo');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get addDescendant(): Promise<Action<[LayoutComponentMetadata, TOptions, number]>|undefined>\n    {\n        return this._getValue<Action<[LayoutComponentMetadata, TOptions, number]>|undefined>('addDescendant');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get applyDesignerStyles(): Promise<Action<[TOptions|null|undefined, CSSStyleDeclaration]>|undefined>\n    {\n        return this._getValue<Action<[TOptions|null|undefined, CSSStyleDeclaration]>|undefined>('applyDesignerStyles');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canDropMetadata(): Promise<Func<boolean, [TOptions|undefined|null]>|undefined>\n    {\n        return this._getValue<Func<boolean, [TOptions|undefined|null]>|undefined>('canDropMetadata');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get isHorizontalDrop(): Promise<Func<boolean, [TOptions|undefined|null]>|undefined>\n    {\n        return this._getValue<Func<boolean, [TOptions|undefined|null]>|undefined>('isHorizontalDrop');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get removeDescendant(): Promise<Action<[string, TOptions]>|undefined>\n    {\n        return this._getValue<Action<[string, TOptions]>|undefined>('removeDescendant');\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets value from layout editor metadata descriptor property\n     * @param property - Property which value should be obtained\n     */\n    protected async _getValue<TValue>(property: keyof LayoutEditorMetadataDescriptor): Promise<TValue>\n    {\n        const instance = this._instance ??= await this._getInstance();\n\n        return instance[property] as any;\n    }\n\n    /**\n     * Gets instance of layout editor metadata descriptor\n     */\n    protected abstract _getInstance(): Promise<LayoutEditorMetadataDescriptor<TOptions>>;\n}\n\n/**\n * Implementation of layout editor metadata descriptor\n */\nexport class LayoutEditorMetadataData<TOptions = any> implements LayoutEditorMetadataDescriptor<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether component was initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo;\n    \n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, TOptions, number]>;\n\n    /**\n     * @inheritdoc\n     */\n    public applyDesignerStyles?: Action<[TOptions|null|undefined, CSSStyleDeclaration]>;\n    \n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [TOptions|undefined|null]>;\n\n    /**\n     * @inheritdoc\n     */\n    public isHorizontalDrop?: Func<boolean, [TOptions|undefined|null]>;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, TOptions]>;\n\n    //######################### constructor #########################\n    constructor(protected _asyncMetadata: AsyncProperties<LayoutEditorMetadataDescriptor<TOptions>>)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize object loads async data and freezes object\n     */\n    public async initialize(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this.metaInfo = await this._asyncMetadata.metaInfo;\n        this.addDescendant = await this._asyncMetadata.addDescendant;\n        this.applyDesignerStyles = await this._asyncMetadata.applyDesignerStyles;\n        this.canDropMetadata = await this._asyncMetadata.canDropMetadata;\n        this.isHorizontalDrop = await this._asyncMetadata.isHorizontalDrop;\n        this.removeDescendant = await this._asyncMetadata.removeDescendant;\n\n        this._initialized = true;\n\n        Object.freeze(this);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\nimport {LayoutEditorMetadataData} from '../../misc/types';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(protected _loader: DynamicItemLoader,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.type as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = new LayoutEditorMetadataData(metadataType.layoutEditorMetadata);\n        await metadataData.initialize();\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}"],"names":["LayoutEditorDragPlaceholderSAComponent","selectors","standalone","features","decls","vars","template","styles","changeDetection","LayoutEditorDragPreviewSAComponent","inputs","editorMetadata","layoutMetadata","consts","i0","ConnectDropListsSADirective","constructor","_cdkDropList","_manager","_initSubscriptions","Subscription","_connectDropListsPrefix","connectDropListsPrefix","prefix","this","_setConnectedTo","ngOnInit","add","layoutChange","pipe","debounceTime","subscribe","ngOnDestroy","unsubscribe","connectedTo","flatTree","map","itm","component","id","reverse","filter","exportAs","LayoutPropertyMetadata","Symbol","GenericLayoutAsyncMetadata","metaInfo","_getValue","addDescendant","applyDesignerStyles","canDropMetadata","isHorizontalDrop","removeDescendant","property","_instance","_getInstance","LayoutEditorMetadataData","_asyncMetadata","_initialized","initialize","Object","freeze","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","LOGGER","factory","providedIn","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","selectedComponent","highlightedComponent","root","isBlank","asObservable","selectedChange","highlightedChange","displayNameChange","_buildFlatTree","selectComponent","next","unselectComponent","highlightComponent","cancelHighlightedComponent","registerLayoutDesignerComponent","parentId","error","parent","componentItem","children","splice","length","getComponent","unregisterLayoutDesignerComponent","index","indexOf","displayNameUpdated","getMetadata","options","typeMetadata","_buildFlatTreeForComponent","result","child","concat","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_viewContainerRef","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","instance","componentRef","ngOnChanges","changes","clear","nameof","injector","customInjector","layoutComponentType","createComponent","Ignore","ThrowError","Error","resolvePromiseOr","invalidateVisuals","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","outputs","DynamicItemLoader","_providers","_extractors","_cachedDynamicItems","Array","isArray","source","dynamicModule","verbose","provider","asyncDynamicModule","tryToGet","extractor","dynamicItemType","tryToExtract","isType","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS"],"sourceRoot":""}