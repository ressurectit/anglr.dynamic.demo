{"version":3,"file":"6931.chunk.d7bd055e78f2b6603d6a.js","mappings":"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","sources":["webpack://ng-universal-demo/../material-components/src/dynamicItems/textarea/textarea.metadata.ts","webpack://ng-universal-demo/../../../../src/cdk/text-field/autosize.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/textarea/textarea.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/textarea/textarea.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/textarea/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialTextareaComponentOptions} from './textarea.options';\n\n/**\n * Material textarea layout metadata loader\n */\nexport const MaterialTextareaLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTextareaComponentOptions>> = async () => new (await import('./metadata/textarea.layoutMetadata')).MaterialTextareaLayoutEditorMetadata();\n\n/**\n * Material textarea relations metadata loader\n */\nexport const MaterialTextareaRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/textarea.relationsMetadata')).MaterialTextareaRelationsEditorMetadata();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NumberInput, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  Optional,\n  Inject,\n  booleanAttribute,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number {\n    return this._minRows;\n  }\n  set minRows(value: NumberInput) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number {\n    return this._maxRows;\n  }\n  set maxRows(value: NumberInput) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input({alias: 'cdkTextareaAutosize', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  @Input()\n  get placeholder(): string {\n    return this._textareaElement.placeholder;\n  }\n  set placeholder(value: string) {\n    this._cachedPlaceholderHeight = undefined;\n\n    if (value) {\n      this._textareaElement.setAttribute('placeholder', value);\n    } else {\n      this._textareaElement.removeAttribute('placeholder');\n    }\n\n    this._cacheTextareaPlaceholderHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n  /** Cached height of a textarea with only the placeholder. */\n  private _cachedPlaceholderHeight?: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  private _hasFocus: boolean;\n\n  private _isViewInited = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document?: any,\n  ) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight =\n      this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight =\n      this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n\n        this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n      });\n\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n\n  ngOnDestroy() {\n    this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n    this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textareaClone.remove();\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  private _measureScrollHeight(): number {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox\n      ? 'cdk-textarea-autosize-measuring-firefox'\n      : 'cdk-textarea-autosize-measuring';\n\n    // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    element.classList.add(measuringClass);\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n\n    return scrollHeight;\n  }\n\n  private _cacheTextareaPlaceholderHeight(): void {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n\n    const value = this._textareaElement.value;\n\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n\n  /** Handles `focus` and `blur` events. */\n  private _handleFocusEvent = (event: FocusEvent) => {\n    this._hasFocus = event.type === 'focus';\n  };\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n    this._cacheTextareaPlaceholderHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const scrollHeight = this._measureScrollHeight();\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialTextareaLayoutMetadataLoader, MaterialTextareaRelationsMetadataLoader} from './textarea.metadata';\nimport {MaterialTextareaComponentOptions} from './textarea.options';\n\n/**\n * Component used for displaying material text field\n */\n@Component(\n{\n    selector: 'material-textarea',\n    templateUrl: 'textarea.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        TextFieldModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialTextareaRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialTextareaLayoutMetadataLoader)\nexport class MaterialTextareaSAComponent extends FormComponentBase<MaterialTextareaComponentOptions> implements FormComponent<MaterialTextareaComponentOptions>\n{}","<mat-form-field [appearance]=\"options?.appearance|asRequired\">\n    <mat-label>{{options?.label}}</mat-label>\n    <textarea \n        matInput \n        cdkTextareaAutosize\n        [attr.placeholder]=\"options?.placeholder\"\n        [formControl]=\"control|asFormControl|asRequired\"></textarea>\n    <mat-hint>{{options?.hint}}</mat-hint>\n</mat-form-field>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialTextareaSAComponent} from './textarea.component';\n\n\nexport default MaterialTextareaSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];"],"names":["MaterialTextareaLayoutMetadataLoader","_ref","_asyncToGenerator","MaterialTextareaLayoutEditorMetadata","apply","arguments","MaterialTextareaRelationsMetadataLoader","_ref2","MaterialTextareaRelationsEditorMetadata","CdkTextareaAutosize","minRows","this","_minRows","value","coerceNumberProperty","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_textareaElement","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","constructor","_elementRef","_platform","_ngZone","document","_destroyed","Subject","_previousMinRows","_isViewInited","_handleFocusEvent","event","_hasFocus","type","_document","nativeElement","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","isBrowser","_initialHeight","height","runOutsideAngular","window","_getWindow","fromEvent","pipe","auditTime","takeUntil","subscribe","addEventListener","ngOnDestroy","removeEventListener","next","complete","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","remove","_measureScrollHeight","element","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","classList","add","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","i0","i1","DOCUMENT","selectors","hostAttrs","hostBindings","rf","ctx","inputs","booleanAttribute","exportAs","features","MaterialTextareaSAComponent","FormComponentBase","t","standalone","decls","vars","consts","template","options","appearance","label","control","hint","FormPipesModule","CastPipesModule","i2","ReactiveFormsModule","i3","MatFormFieldModule","i4","MatInputModule","i5","i6","TextFieldModule","styles","changeDetection","__decorate","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension"],"sourceRoot":""}