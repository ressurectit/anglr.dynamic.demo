{"version":3,"file":"409.chunk.b7a44ae5022ba3348e9d.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/node/transformDataNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.interface.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/node/transformDataNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/metadata/transformData.relationsMetadata.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/typescriptLanguageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, TypescriptLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {languages} from 'monaco-editor';\nimport typings from '!!raw-loader?esModule!@anglr/dynamic/typings/transformData';\n\nimport {TransformDataRelationsEditorOptions, TransformDataRelationsOptions} from '../transformData.options';\n\nlanguages.typescript.typescriptDefaults.addExtraLib(typings, 'file:///node_modules/@types/transformData/index.d.ts');\n\n/**\n * Relations node component for transform data\n */\n@Component(\n{\n    selector: 'transform-data-node',\n    templateUrl: 'transformDataNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n        FirstUppercaseLocalizeSAPipe\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TransformDataNodeSAComponent extends RelationsNodeBase<TransformDataRelationsOptions, TransformDataRelationsEditorOptions> implements RelationsNode<TransformDataRelationsOptions, TransformDataRelationsEditorOptions>\n{\n//######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.nodeMetadata?.options?.content ?? '',\n                languageModel: TypescriptLanguageModel(\n`import {TransformData} from 'transformData';\n\n/**\n * Transformer function that performs transformation\n */\nconst transformer: TransformData<any, any> = data =>\n{\n    return data;\n};\n \nexport default transformer;\n`),\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions || !result || !this.metadata.nodeMetadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.code = result.code;\n        this.metadata.nodeMetadata.options ??= {content: ''};\n        this.metadata.nodeMetadata.options.content = result.content;\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.id ??= generateId(12);\n        }\n    }\n}","export default \"/**\\n * Transforms data to another form of data\\n * @param data - Data to be transformed\\n */\\nexport type TransformData<TData = any, TResult = any> = (data: TData) => TResult;\";","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" [name]=\"'transform data'|firstUppercaseLocalize\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n                <div>{{'data'|firstUppercaseLocalize}}</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>{{'transformed data'|firstUppercaseLocalize}}</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"transformedData\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" (click)=\"showCodeEditor()\">\n        <span>{{'code'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {TransformDataNodeSAComponent} from '../node/transformDataNode.component';\n\n/**\n * Transform data relations metadata\n */\nexport class TransformDataRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Transform data',\n        description: 'Code that allows data tranformation',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = TransformDataNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n//TODO: sideeffect\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}","import {languages} from 'monaco-editor';\n\nimport {LanguageModel} from './languageModel';\n\n/**\n * Typescript language model for code editor\n * @param initialValue - Initial value to be used as initial code\n */\nexport const TypescriptLanguageModel = (initialValue: string): LanguageModel => new LanguageModel('typescript',\n                                                                                                  'ts',\n                                                                                                  async editor =>\n                                                                                                  {\n                                                                                                      const uri = editor.getModel()?.uri;\n                                                                                                  \n                                                                                                      if(!uri)\n                                                                                                      {\n                                                                                                          return '';\n                                                                                                      }\n                                                                                                  \n                                                                                                      const worker = await languages.typescript.getTypeScriptWorker();\n                                                                                                      const client = await worker(uri);\n                                                                                                      const result = await client.getEmitOutput(uri.toString());\n                                                                                                  \n                                                                                                      return result.outputFiles[0].text;\n                                                                                                  },\n                                                                                                  initialValue);\n"],"names":["languages","typescript","typescriptDefaults","addExtraLib","TransformDataNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","_this","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","metadata","nodeMetadata","options","languageModel","TypescriptLanguageModel","afterClosed","relationsOptions","code","_a","history","getNewState","metadataSet","this","id","generateId","i0","i1","selectors","standalone","features","decls","vars","consts","template","rf","ctx","destroySubject","nodePosition","zoomLevel","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","TransformDataRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","target","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","isPresent","updateContent","ngAfterViewInit","createEditor","saveContent","_asyncToGenerator","emit","getValue","compiledCode","ngOnDestroy","dispose","_this2","editor","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","inputs","outputs","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","$event","_r1","_r0","LanguageModel","initialValue","_ref","uri","getModel","worker","getTypeScriptWorker","client","getEmitOutput","toString","outputFiles","text","_x","apply","arguments"],"sourceRoot":""}