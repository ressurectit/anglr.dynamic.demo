{"version":3,"file":"3484.chunk.d61fe2390182920abd8b.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts","webpack://ng-universal-demo/../../../tinymce-angular-component/src/main/ts/TinyMCE.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/Events.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/utils/Utils.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/utils/ScriptLoader.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/editor.component.ts","webpack://ng-universal-demo/../../../../tinymce-angular-component/src/main/ts/editor/editor.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getTinymce = () => {\n  const w = typeof window !== 'undefined' ? (window as any) : undefined;\n  return w && w.tinymce ? w.tinymce : null;\n};\n\nexport { getTinymce };\n","import { Output, EventEmitter, Directive } from '@angular/core';\nimport { Editor as TinyMCEEditor } from 'tinymce';\n\nexport interface EventObj<T> {\n  event: T;\n  editor: TinyMCEEditor;\n}\n\n@Directive()\nexport class Events {\n  @Output() public onBeforePaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onBlur: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onClick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onContextMenu: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onCopy: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onCut: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onDblclick: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onDrag: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragEnd: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragGesture: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDragOver: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onDrop: EventEmitter<EventObj<DragEvent>> = new EventEmitter();\n  @Output() public onFocus: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusIn: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onFocusOut: EventEmitter<EventObj<FocusEvent>> = new EventEmitter();\n  @Output() public onKeyDown: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyPress: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onKeyUp: EventEmitter<EventObj<KeyboardEvent>> = new EventEmitter();\n  @Output() public onMouseDown: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseEnter: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseLeave: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseMove: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOut: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseOver: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onMouseUp: EventEmitter<EventObj<MouseEvent>> = new EventEmitter();\n  @Output() public onPaste: EventEmitter<EventObj<ClipboardEvent>> = new EventEmitter();\n  @Output() public onSelectionChange: EventEmitter<EventObj<Event>> = new EventEmitter();\n  @Output() public onActivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeAddUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeRenderUI: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onBeforeSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onClearUndos: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDeactivate: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onDirty: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onExecCommand: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onGetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onHide: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onInitNgModel: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onLoadContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onNodeChange: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPostRender: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreInit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onPreProcess: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onProgressState: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRedo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onRemove: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onReset: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onResizeEditor: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSaveContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetAttrib: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResizeStart: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectResized: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onObjectSelected: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSetContent: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onShow: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onSubmit: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onUndo: EventEmitter<EventObj<any>> = new EventEmitter();\n  @Output() public onVisualAid: EventEmitter<EventObj<any>> = new EventEmitter();\n}\n\nexport const validEvents: (keyof Events)[] = [\n  'onActivate',\n  'onAddUndo',\n  'onBeforeAddUndo',\n  'onBeforeExecCommand',\n  'onBeforeGetContent',\n  'onBeforeRenderUI',\n  'onBeforeSetContent',\n  'onBeforePaste',\n  'onBlur',\n  'onChange',\n  'onClearUndos',\n  'onClick',\n  'onContextMenu',\n  'onCopy',\n  'onCut',\n  'onDblclick',\n  'onDeactivate',\n  'onDirty',\n  'onDrag',\n  'onDragDrop',\n  'onDragEnd',\n  'onDragGesture',\n  'onDragOver',\n  'onDrop',\n  'onExecCommand',\n  'onFocus',\n  'onFocusIn',\n  'onFocusOut',\n  'onGetContent',\n  'onHide',\n  'onInit',\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n  'onLoadContent',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n  'onNodeChange',\n  'onObjectResizeStart',\n  'onObjectResized',\n  'onObjectSelected',\n  'onPaste',\n  'onPostProcess',\n  'onPostRender',\n  'onPreProcess',\n  'onProgressState',\n  'onRedo',\n  'onRemove',\n  'onReset',\n  'onResizeEditor',\n  'onSaveContent',\n  'onSelectionChange',\n  'onSetAttrib',\n  'onSetContent',\n  'onShow',\n  'onSubmit',\n  'onUndo',\n  'onVisualAid'\n];\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { EventEmitter } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { EditorComponent } from '../editor/editor.component';\nimport { validEvents, Events } from '../editor/Events';\n\n// Caretaker note: `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n// will be invoked upon subscription and teardown.\nconst listenTinyMCEEvent = (\n  editor: any,\n  eventName: string,\n  destroy$: Subject<void>\n) => fromEvent(editor as HasEventTargetAddRemove<unknown> | ArrayLike<HasEventTargetAddRemove<unknown>>, eventName).pipe(takeUntil(destroy$));\n\nconst bindHandlers = (ctx: EditorComponent, editor: any, destroy$: Subject<void>): void => {\n  const allowedEvents = getValidEvents(ctx);\n  allowedEvents.forEach((eventName) => {\n    const eventEmitter: EventEmitter<any> = ctx[eventName];\n\n    listenTinyMCEEvent(editor, eventName.substring(2), destroy$).subscribe((event) => {\n      // Caretaker note: `ngZone.run()` runs change detection since it notifies the forked Angular zone that it's\n      // being re-entered. We don't want to run `ApplicationRef.tick()` if anyone listens to the specific event\n      // within the template. E.g. if the `onSelectionChange` is not listened within the template like:\n      // `<editor (onSelectionChange)=\"...\"></editor>`\n      // then its `observers` array will be empty, and we won't run \"dead\" change detection.\n      if (eventEmitter.observers.length > 0) {\n        ctx.ngZone.run(() => eventEmitter.emit({ event, editor }));\n      }\n    });\n  });\n};\n\nconst getValidEvents = (ctx: EditorComponent): (keyof Events)[] => {\n  const ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);\n  const allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(\n    (event) => validEvents.includes(event as (keyof Events)) && !ignoredEvents.includes(event)) as (keyof Events)[];\n  return allowedEvents;\n};\n\nconst parseStringProperty = (property: string | string[] | undefined, defaultValue: (keyof Events)[]): string[] => {\n  if ( typeof property === 'string') {\n    return property.split(',').map((value) => value.trim());\n  }\n  if ( Array.isArray(property)) {\n    return property;\n  }\n  return defaultValue;\n};\n\nlet unique = 0;\n\nconst uuid = (prefix: string): string => {\n  const date = new Date();\n  const time = date.getTime();\n  const random = Math.floor(Math.random() * 1000000000);\n\n  unique++;\n\n  return prefix + '_' + random + unique + String(time);\n};\n\nconst isTextarea = (element?: Element): element is HTMLTextAreaElement => typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n\nconst normalizePluginArray = (plugins?: string | string[]): string[] => {\n  if (typeof plugins === 'undefined' || plugins === '') {\n    return [];\n  }\n\n  return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\n\nconst mergePlugins = (initPlugins: string | string[], inputPlugins?: string | string[]) =>\n  normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop: (...args: any[]) => void = () => { };\n\nconst isNullOrUndefined = (value: any): value is null | undefined => value === null || value === undefined;\n\nexport {\n  listenTinyMCEEvent,\n  bindHandlers,\n  uuid,\n  isTextarea,\n  normalizePluginArray,\n  mergePlugins,\n  noop,\n  isNullOrUndefined\n};\n","/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { defer, fromEvent, Observable, OperatorFunction } from 'rxjs';\nimport { mapTo, shareReplay, take } from 'rxjs/operators';\n\nexport interface IStateObj {\n  script$: Observable<void> | null;\n}\n\nconst createState = (): IStateObj => ({\n  script$: null,\n});\n\ninterface ScriptLoader {\n  load: (doc: Document, url: string) => Observable<void>;\n  reinitialize: () => void;\n}\n\nconst CreateScriptLoader = (): ScriptLoader => {\n  let state = createState();\n\n  const load = (doc: Document, url: string) => (\n    state.script$ ||\n    // Caretaker note: the `script$` is a multicast observable since it's piped with `shareReplay`,\n    // so if there're multiple editor components simultaneously on the page, they'll subscribe to the internal\n    // `ReplaySubject`. The script will be loaded only once, and `ReplaySubject` will cache the result.\n    (state.script$ = defer(() => {\n      const scriptTag = doc.createElement('script');\n      scriptTag.referrerPolicy = 'origin';\n      scriptTag.type = 'application/javascript';\n      scriptTag.src = url;\n      doc.head.appendChild(scriptTag);\n      return fromEvent(scriptTag, 'load').pipe(take(1), mapTo(undefined) as OperatorFunction<Event, undefined>);\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true })))\n  );\n\n  // Only to be used by tests.\n  const reinitialize = () => {\n    state = createState();\n  };\n\n  return {\n    load,\n    reinitialize,\n  };\n};\n\nconst ScriptLoader = CreateScriptLoader();\n\nexport { ScriptLoader };\n","/* eslint-disable @typescript-eslint/no-parameter-properties */\nimport { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, forwardRef, Inject, Input, NgZone, OnDestroy, PLATFORM_ID, InjectionToken, Optional } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { getTinymce } from '../TinyMCE';\nimport { listenTinyMCEEvent, bindHandlers, isTextarea, mergePlugins, uuid, noop, isNullOrUndefined } from '../utils/Utils';\nimport { EventObj, Events } from './Events';\nimport { ScriptLoader } from '../utils/ScriptLoader';\nimport { Editor as TinyMCEEditor, TinyMCE } from 'tinymce';\n\ntype EditorOptions = Parameters<TinyMCE['init']>[0];\n\nexport const TINYMCE_SCRIPT_SRC = new InjectionToken<string>('TINYMCE_SCRIPT_SRC');\n\nconst EDITOR_COMPONENT_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => EditorComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'editor',\n  template: '<ng-template></ng-template>',\n  styles: [ ':host { display: block; }' ],\n  providers: [ EDITOR_COMPONENT_VALUE_ACCESSOR ]\n})\nexport class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {\n\n  @Input() public cloudChannel = '6';\n  @Input() public apiKey = 'no-api-key';\n  @Input() public init: EditorOptions | undefined;\n  @Input() public id = '';\n  @Input() public initialValue: string | undefined;\n  @Input() public outputFormat: 'html' | 'text' | undefined;\n  @Input() public inline: boolean | undefined;\n  @Input() public tagName: string | undefined;\n  @Input() public plugins: string | undefined;\n  @Input() public toolbar: string | string[] | undefined;\n  @Input() public modelEvents = 'change input undo redo';\n  @Input() public allowedEvents: string | string[] | undefined;\n  @Input() public ignoreEvents: string | string[] | undefined;\n  @Input()\n  public set disabled(val) {\n    this._disabled = val;\n    if (this._editor && this._editor.initialized) {\n      if (typeof this._editor.mode?.set === 'function') {\n        this._editor.mode.set(val ? 'readonly' : 'design');\n      } else {\n        this._editor.setMode(val ? 'readonly' : 'design');\n      }\n    }\n  }\n\n  public get disabled() {\n    return this._disabled;\n  }\n\n  public get editor() {\n    return this._editor;\n  }\n\n  public ngZone: NgZone;\n\n  private _elementRef: ElementRef;\n  private _element: HTMLElement | undefined;\n  private _disabled: boolean | undefined;\n  private _editor: TinyMCEEditor | undefined;\n\n  private onTouchedCallback = noop;\n  private onChangeCallback: any;\n\n  private destroy$ = new Subject<void>();\n\n  public constructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(TINYMCE_SCRIPT_SRC) private tinymceScriptSrc?: string\n  ) {\n    super();\n    this._elementRef = elementRef;\n    this.ngZone = ngZone;\n  }\n\n  public writeValue(value: string | null): void {\n    if (this._editor && this._editor.initialized) {\n      this._editor.setContent(isNullOrUndefined(value) ? '' : value);\n    } else {\n      this.initialValue = value === null ? undefined : value;\n    }\n  }\n\n  public registerOnChange(fn: (_: any) => void): void {\n    this.onChangeCallback = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  public setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  public ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.id = this.id || uuid('tiny-angular');\n      this.inline = this.inline !== undefined ? this.inline !== false : !!(this.init?.inline);\n      this.createElement();\n      if (getTinymce() !== null) {\n        this.initialise();\n      } else if (this._element && this._element.ownerDocument) {\n        // Caretaker note: the component might be destroyed before the script is loaded and its code is executed.\n        // This will lead to runtime exceptions if `initialise` will be called when the component has been destroyed.\n        ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc())\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(this.initialise);\n      }\n    }\n  }\n\n  public ngOnDestroy() {\n    this.destroy$.next();\n\n    if (getTinymce() !== null) {\n      getTinymce().remove(this._editor);\n    }\n  }\n\n  public createElement() {\n    const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n    this._element = document.createElement(this.inline ? tagName : 'textarea');\n    if (this._element) {\n      if (document.getElementById(this.id)) {\n        /* eslint no-console: [\"error\", { allow: [\"warn\"] }] */\n        console.warn(`TinyMCE-Angular: an element with id [${this.id}] already exists. Editors with duplicate Id will not be able to mount`);\n      }\n      this._element.id = this.id;\n      if (isTextarea(this._element)) {\n        this._element.style.visibility = 'hidden';\n      }\n      this._elementRef.nativeElement.appendChild(this._element);\n    }\n  }\n\n  public initialise = (): void => {\n    const finalInit: EditorOptions = {\n      ...this.init,\n      selector: undefined,\n      target: this._element,\n      inline: this.inline,\n      readonly: this.disabled,\n      plugins: mergePlugins((this.init && this.init.plugins) as string, this.plugins),\n      toolbar: this.toolbar || (this.init && this.init.toolbar),\n      setup: (editor: TinyMCEEditor) => {\n        this._editor = editor;\n\n        listenTinyMCEEvent(editor, 'init', this.destroy$).subscribe(() => {\n          this.initEditor(editor);\n        });\n\n        bindHandlers(this, editor, this.destroy$);\n\n        if (this.init && typeof this.init.setup === 'function') {\n          this.init.setup(editor);\n        }\n      }\n    };\n\n    if (isTextarea(this._element)) {\n      this._element.style.visibility = '';\n    }\n\n    this.ngZone.runOutsideAngular(() => {\n      getTinymce().init(finalInit);\n    });\n  };\n\n  private getScriptSrc() {\n    return isNullOrUndefined(this.tinymceScriptSrc) ?\n      `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` :\n      this.tinymceScriptSrc;\n  }\n\n  private initEditor(editor: TinyMCEEditor) {\n    listenTinyMCEEvent(editor, 'blur', this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.onTouchedCallback());\n    });\n\n    listenTinyMCEEvent(editor, this.modelEvents, this.destroy$).subscribe(() => {\n      this.ngZone.run(() => this.emitOnChange(editor));\n    });\n\n    if (typeof this.initialValue === 'string') {\n      this.ngZone.run(() => {\n        editor.setContent(this.initialValue as string);\n        if (editor.getContent() !== this.initialValue) {\n          this.emitOnChange(editor);\n        }\n        if (this.onInitNgModel !== undefined) {\n          this.onInitNgModel.emit(editor as unknown as EventObj<any>);\n        }\n      });\n    }\n  }\n\n  private emitOnChange(editor: TinyMCEEditor) {\n    if (this.onChangeCallback) {\n      this.onChangeCallback(editor.getContent({ format: this.outputFormat }));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { EditorComponent } from './editor.component';\n\n@NgModule({\n  imports: [ CommonModule, FormsModule ],\n  declarations: [ EditorComponent ],\n  exports: [ EditorComponent ]\n})\nexport class EditorModule {}\n"],"names":["dialogElementUid","MatDialogClose","constructor","dialogRef","_elementRef","_dialog","type","ngOnInit","this","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","i1","MatDialogTitle","_dialogRef","id","Promise","resolve","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog","getTinymce","w","window","undefined","tinymce","Events","onBeforePaste","EventEmitter","onBlur","onClick","onContextMenu","onCopy","onCut","onDblclick","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onFocus","onFocusIn","onFocusOut","onKeyDown","onKeyPress","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPaste","onSelectionChange","onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onChange","onClearUndos","onDeactivate","onDirty","onExecCommand","onGetContent","onHide","onInit","onInitNgModel","onLoadContent","onNodeChange","onPostProcess","onPostRender","onPreInit","onPreProcess","onProgressState","onRedo","onRemove","onReset","onResizeEditor","onSaveContent","onSetAttrib","onObjectResizeStart","onObjectResized","onObjectSelected","onSetContent","onShow","onSubmit","onUndo","onVisualAid","validEvents","listenTinyMCEEvent","editor","eventName","destroy$","fromEvent","pipe","takeUntil","parseStringProperty","property","defaultValue","split","map","value","trim","Array","isArray","unique","isTextarea","tagName","toLowerCase","normalizePluginArray","plugins","noop","isNullOrUndefined","ScriptLoader","state","script$","load","doc","url","defer","scriptTag","createElement","referrerPolicy","src","head","appendChild","take","mapTo","shareReplay","bufferSize","refCount","reinitialize","CreateScriptLoader","TINYMCE_SCRIPT_SRC","InjectionToken","EDITOR_COMPONENT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","EditorComponent","multi","elementRef","ngZone","platformId","tinymceScriptSrc","super","cloudChannel","apiKey","modelEvents","onTouchedCallback","Subject","initialise","finalInit","init","selector","target","_element","inline","readonly","disabled","initPlugins","inputPlugins","concat","toolbar","setup","_editor","subscribe","initEditor","ctx","ignoredEvents","ignoreEvents","allowedEvents","filter","includes","getValidEvents","forEach","eventEmitter","substring","observers","length","run","emit","bindHandlers","style","visibility","runOutsideAngular","val","_disabled","initialized","mode","set","setMode","writeValue","setContent","initialValue","registerOnChange","fn","onChangeCallback","registerOnTouched","setDisabledState","isDisabled","ngAfterViewInit","isPlatformBrowser","prefix","time","Date","getTime","random","Math","floor","String","uuid","ownerDocument","getScriptSrc","ngOnDestroy","next","remove","document","getElementById","console","warn","emitOnChange","getContent","format","outputFormat","i0","PLATFORM_ID","EditorModule","CommonModule","FormsModule"],"sourceRoot":""}