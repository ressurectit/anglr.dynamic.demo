{"version":3,"file":"7530.chunk.f6d2e96f596c3390a387.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/formGroupProperty.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/modelPropertyMetadata.decorator.ts"],"sourcesContent":["import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {FormGroup} from '@angular/forms';\n\nimport {ModelPropertyMetadata} from './modelPropertyMetadata.decorator';\n\n/**\n * Defines property value as FormGroup\n */\nexport function FormGroupProperty(): PropertyDecorator\n{\n    return ModelPropertyMetadata(\n    {\n        type: FormGroup\n    });\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject, LayoutPropertyType} from '../../decorators';\nimport {DefaultKnownPropertyTypes, LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    @LayoutPropertyName('Css class')\n    @LayoutPropertyDescription('Css class that should be applied to component')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public cssClass: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    public padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    public textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number class=\"dynamic-flex-1\" [control]=\"_value\"></input-number> <select-value style=\"flex: 0 0 48px;\" [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<label class=\"properties-control-label\">{{'margin'|firstUppercaseLocalize}}</label>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div class=\"properties-form-group\">\n    <label class=\"properties-control-label\">{{propertiesMetadata?.cssClass?.name ?? 'cssClass'|firstUppercaseLocalize}} <span *ngIf=\"propertiesMetadata?.cssClass?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.cssClass?.description|firstUppercaseLocalize\"></span></label>\n    <input-string [control]=\"form?.controls?.cssClass | asRequired\"></input-string>\n</div>\n\n<margin-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control class=\"properties-form-group\" [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","<label class=\"properties-control-label\">{{'padding'|firstUppercaseLocalize}}</label>\n\n<div>\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-bottom-extra-small\">\n        <span class=\"fas fa-arrow-left\"></span>\n        <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-right dynamic-margin-left-big\"></span>\n        <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center\">\n        <span class=\"fas fa-arrow-up\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n        <span class=\"fas fa-arrow-down dynamic-margin-left-big\"></span>\n        <input-size class=\"dynamic-align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n    </div>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Dictionary, extend, globalDefine, isBlank, noop} from '@jscrpt/common';\n\ndeclare const ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}","import {Dictionary, nameof} from '@jscrpt/common';\n\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from '../misc/defaults';\n\n/**\n * Defines metadata for model property\n * @param metadata - Metadata for model property, used for creating form\n */\nexport function ModelPropertyMetadata<TArgs extends Dictionary<any> = any,\n                                      TModel = any>(metadata: ModelPropertyDecoratorMetadata<TArgs>): PropertyDecorator\n{\n    return function(target: Object, propertyKey: string|symbol): void\n    {\n        const trgt = target as ModelDecoratorMetadata<TModel>;\n\n        if(!trgt.ɵControlsMetadata)\n        {\n            Object.defineProperty(trgt, nameof<ModelDecoratorMetadata>('ɵControlsMetadata'),\n            {\n                value: {},\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n        }\n\n        //keep current validators\n        const originValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.validators ?? [];\n        const originAsyncValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.asyncValidators ?? [];\n\n        //merge all other values\n        trgt.ɵControlsMetadata[propertyKey as keyof TModel] = \n        {\n            ...ɵDefaultPropertyMetadata,\n            ...trgt.ɵControlsMetadata[propertyKey as keyof TModel],\n            ...metadata\n        };\n\n        //merge validators\n        const propertyMetadata = trgt.ɵControlsMetadata[propertyKey as keyof TModel];\n\n        propertyMetadata.validators =\n        [\n            ...originValidators,\n            ...propertyMetadata.validators,\n        ];\n\n        propertyMetadata.asyncValidators =\n        [\n            ...originAsyncValidators,\n            ...propertyMetadata.asyncValidators,\n        ];\n    };\n}"],"names":["LayoutPropertyDescription","description","DynamicPropertyMetadata","LayoutPropertyMetadata","LayoutPropertyName","name","LayoutPropertyType","type","FormGroupProperty","ModelPropertyMetadata","FormGroup","LayoutPropertyObject","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","object","MarginModel","constructor","value","top","right","bottom","left","mapValuesToThis","bind","this","__decorate","PaddingModel","ComponentStylingModel","cssClass","margin","padding","textStyling","InputSizeComponent","PropertyTypeControlBase","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","control","t","selectors","features","i0","decls","vars","consts","template","rf","ctx","_c0","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ctx_r0","propertiesMetadata","ComponentStylingPropertiesControlComponent","ComponentStylingPropertiesControlComponent_span_4_Template","tmp_0_0","undefined","_changeDetector","_extractor","_initialized","ngOnInit","_this","_asyncToGenerator","initialize","_this2","invalidateVisuals","detectChanges","i1","inputs","property","target","propertyKey","metadata","propertyMetadata","_a","has","defineProperty","globalDefine","global","isBlank","ngDesignerMetadata","trgt","ɵControlsMetadata","Object","nameof","writable","enumerable","configurable","originValidators","validators","originAsyncValidators","asyncValidators","ɵDefaultPropertyMetadata"],"sourceRoot":""}