{"version":3,"file":"3110.chunk.fca6dc79d6702201beae.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.metadata.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.html","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\n\n/**\n * Style block layout metadata loader\n */\nexport const StyleBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>> = async () => new (await import('./metadata/styleBlock.layoutMetadata')).StyleBlockLayoutEditorMetadata();\n","<ng-container *layoutComponentRenderer=\"options?.content\"/>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\nimport prefixer  from 'postcss-prefix-selector';\nimport postcss, {Processor, Root} from 'postcss';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\nimport {StyleBlockLayoutMetadataLoader} from './styleBlock.metadata';\n\n//TODO: optimize, debug, dual call of options set\n\n/**\n * Component used for displaying style block\n */\n@Component(\n{\n    selector: 'style-block',\n    templateUrl: 'styleBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    host:\n    {\n        '[attr.id]': 'id'\n    },\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<StyleBlockComponentOptions>(options => options?.content ? [options?.content] : [])\n@LayoutEditorMetadata(StyleBlockLayoutMetadataLoader)\nexport class StyleBlockSAComponent extends LayoutComponentBase<StyleBlockComponentOptions> implements LayoutComponent<StyleBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Unique ID for this instance of style block\n     */\n    protected id: string = generateId(10);\n\n    /**\n     * Instance of created style element by this style block\n     */\n    protected style: HTMLStyleElement|undefined|null;\n\n    /**\n     * Instance of css processor that applies changes\n     */\n    protected cssProcessor: Processor|undefined|null;\n\n    /**\n     * Instance of html document\n     */\n    protected document: Document = inject(DOCUMENT);\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.cssProcessor = postcss()\n            .use((root: Root) =>\n            {\n                prefixer(\n                {\n                    prefix: `style-block#${this.id}`,\n                })(root as any);\n                //TODO check postcss and remove any\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(this.options?.style && this.cssProcessor)\n        {\n            const css = this.cssProcessor.process(this.options.style).css;\n\n            this.style = this.document.createElement('style');\n            this.style.innerText = css;\n\n            this.document.head.append(this.style);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        this.style?.remove();\n        this.style = null;\n    }\n}","import {StyleBlockSAComponent} from './styleBlock.component';\n\nexport default StyleBlockSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["StyleBlockLayoutMetadataLoader","_ref","StyleBlockLayoutEditorMetadata","apply","arguments","i0","StyleBlockSAComponent","LayoutComponentBase","constructor","id","generateId","document","inject","DOCUMENT","onInit","this","cssProcessor","postcss","use","root","prefixer","prefix","onOptionsSet","options","style","css","process","createElement","innerText","head","append","onDestroy","remove","t","selectors","hostVars","hostBindings","rf","ctx","StyleBlockSAComponent_ng_container_0_Template","content","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","extensions","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","dynamicOnInit","_this","_asyncToGenerator","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes"],"sourceRoot":""}