{"version":3,"file":"7329.chunk.591d88cbf84493e811d2.js","mappings":"kYAMAA,EAAAA,GAAA,QAAAA,CAAqB,WACCA,EAAAA,EAAA,4BAAsBA,EAAAA,KACxCA,EAAAA,GAAA,4BACJA,EAAAA,K,CCQO,IAAMC,EAAN,MAUHC,WAAAA,CAAoBC,GAAA,KAAAA,kBAAAA,EAHV,KAAAC,SAAmB,CAK7B,CAOOC,QAAAA,GAEHC,KAAKH,kBAAkBI,aAAaC,EAAAA,EAASC,oBACjD,G,iCAtBSR,GAAkBD,EAAAA,EAAAU,EAAAA,GAAA,E,kBAAlBT,EAAkBU,UAAA,qBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,0EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDjB/BhB,EAAAA,GAAA,QAAAA,CAAK,cAC6CA,EAAAA,EAAC,SAAD,kBAAAiB,EAAAb,SAAAa,EAAAb,OAAA,IAC1CJ,EAAAA,GAAA,UAAMA,EAAAA,EAAA,WAAKA,EAAAA,IAAAA,KAInBA,EAAAA,EAAA,EAAAkB,EAAA,aAKAlB,EAAAA,GAAA,QAAAA,CAAK,WACiBA,EAAAA,EAAA,sBAAgBA,EAAAA,KAClCA,EAAAA,GAAA,sBACJA,EAAAA,M,MARMA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,OAAAiB,EAAAb,S,iECWOH,GAAkBkB,EAAAA,EAAAA,IAAA,EAD9BC,EAAAA,EAAAA,GAAe,CAACC,KAAM,MAAI,6BAWgBC,EAAAA,KAV9BrB,GCfN,MAAMsB,EACb,CACItB,G,0BCsBG,IAAMuB,EAAN,Q,iCAAMA,EAAqB,E,kBAArBA,I,sBAXLC,EAAAA,EACAC,EAAAA,GAEAC,EAAAA,EAAuBC,mBAQlBJ,GAAqBL,EAAAA,EAAAA,IAAA,EADjCU,EAAAA,EAAAA,GAAaN,IACDC,E,uEChBP,MAAOG,EAOF,oBAAOC,GAEV,MAAO,CACHE,SAAUH,EACVI,UACA,EACIC,EAAAA,EAAAA,OAGZ,E,iCAhBSL,EAAsB,E,kBAAtBA,I,gECaP,SAAUP,EAAea,GAE3B,OAAO,SAAuCC,GAE1C,MAAMC,EAAKF,EAEXE,EAAGC,UAAiBF,EAEpB,MAAMG,EAAwDH,EAgB9D,OAdGI,EAAAA,EAAAA,IAAQD,EAAwBE,cAE/BC,OAAOC,eAAeP,EACA,cACA,CACIQ,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,MAAO,KAIrCR,EAAwBE,YAAYO,KAAKX,GAElCD,CACX,CACJ,C,6DCHA,SAASa,EAA0Bd,GAE/B,GAAGA,EAAMe,oBAAsBf,EAAMe,mBAAmBC,OACxD,CACI,MAAMC,GAAmCC,EAAAA,EAAAA,GAAclB,EAAMe,oBAAoBI,IAAIL,GAElFd,EAAMoB,UAAYpB,EAAMoB,SAASJ,OAEhChB,EAAMoB,SACN,IACOpB,EAAMoB,YACNH,GAKPjB,EAAMoB,SAAWH,C,CAIzB,OAAOjB,CACX,CAOM,SAAUJ,EAAayB,EAA+BC,EAA+B,CAACC,YAAY,EAAOC,kBAAmB,GAAIC,mBAAoB,KAEtJ,OAAO,SAAsCxB,GAEzC,MAAMJ,EAMFI,EAEJ,GAAGJ,EAAS6B,MAAQC,MAAMC,QAAQ/B,EAAS6B,KAAKG,SAChD,CACI,MAAMZ,EACN,KACQK,EAAQG,oBAAsB,IAAIN,IAAIL,OACvCI,EAAAA,EAAAA,GAAcG,GAAkBF,IAAIL,OACnCQ,EAAQE,mBAAqB,IAAIL,IAAIL,IAG7CjB,EAAS6B,KAAKG,QAAQhB,KAAKS,EAAQC,WAAaO,EAAAA,GAAaC,QAAQd,EAAQK,EAAQU,kBAAoBF,EAAAA,GAAaG,SAAShB,G,CAGnI,OAAOhB,CACX,CACJ,C","sources":["webpack://ng-universal-demo/./app/pages/+relationsStatic/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsStatic/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsStatic/relationsStatic.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsStatic/relationsStatic.module.ts","webpack://ng-universal-demo/../relations/src/modules/dynamicRelations.module.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../router/src/decorators/moduleRoutes.decorator.ts"],"sourcesContent":["<div>\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"visible = !visible\">\n        <span>click</span>\n    </button>\n</div>\n\n<div *ngIf=\"visible\">\n    <div class=\"bold\">relations sample click</div>\n    <relations-sample-click></relations-sample-click>\n</div>\n\n<div>\n    <div class=\"bold\">relations result</div>\n    <relations-result></relations-result>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsManager} from '@anglr/dynamic/relations';\n\nimport {DemoData} from '../../../services/demoData';\n\n/**\n * Page for displaying relations\n */\n@Component(\n{\n    selector: 'relations-view',\n    templateUrl: 'relations.component.html',\n    // styleUrls: ['relations.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\nexport class RelationsComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is relations sample click component visible\n     */\n    protected visible: boolean = true;\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._relationsManager.setRelations(DemoData.relationsStaticDemo);\n    }\n}","import {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    RelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsModule} from '@anglr/dynamic/relations';\n\nimport {components} from './relationsStatic.routes';\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\n\n/**\n * Module for relations with static components samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        RelationsSampleClickSAComponent,\n        RelationsResultSAComponent,\n        DynamicRelationsModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsStaticModule\n{\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {provideRelations} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic relations rendering\n */\n@NgModule(\n{\n})\nexport class DynamicRelationsModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsModule>\n    {\n        return {\n            ngModule: DynamicRelationsModule,\n            providers:\n            [\n                provideRelations(),\n            ]\n        };\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target,\n                                  'routeValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {RouterModule, Route, ExtraOptions} from '@angular/router';\n\nimport {extractRoutes} from '../misc/utils';\n\n/**\n * Extended route with possibility to extract children from components\n */\nexport interface ComponentRouteChildren extends Route\n{\n    /**\n     * Array of components which contains routes\n     */\n    childrenComponents?: Type<any>[];\n}\n\n/**\n * Describes options for ModuleRoutes decorator\n */\nexport interface ModuleRoutesOptions\n{\n    /**\n     * Indication that `forRoot` should be used during registration of routes\n     */\n    rootModule?: boolean;\n\n    /**\n     * Extra options used for `forRoot` module creation\n     */\n    rootModuleConfig?: ExtraOptions;\n\n    /**\n     * Routes that will be set before routedComponents\n     */\n    staticRoutesBefore?: ComponentRouteChildren[];\n\n    /**\n     * Routes that will be set after routedComponents\n     */\n    staticRoutesAfter?: ComponentRouteChildren[];\n}\n\n/**\n * Extracts routes from children components\n * @param route - Route which can contain array of components with routes\n */\nfunction extractChildrenComponents(route: ComponentRouteChildren): Route\n{\n    if(route.childrenComponents && route.childrenComponents.length)\n    {\n        const routes: ComponentRouteChildren[] = extractRoutes(route.childrenComponents).map(extractChildrenComponents);\n\n        if(route.children && route.children.length)\n        {\n            route.children =\n            [\n                ...route.children,\n                ...routes\n            ];\n        }\n        else\n        {\n            route.children = routes;\n        }\n    }\n\n    return route;\n}\n\n/**\n * Registers routes for module to which is attached\n * @param routedComponents - Array of components that will be used for routes extration\n * @param options - Optional options for defining routes\n */\nexport function ModuleRoutes(routedComponents: Type<any>[], options: ModuleRoutesOptions = {rootModule: false, staticRoutesAfter: [], staticRoutesBefore: []})\n{\n    return function<TFunction extends Function> (target: TFunction): TFunction\n    {\n        const ngModule: \n        {\n            ɵinj:\n            {\n                imports: any[]\n            }\n        } = target as any;\n        \n        if(ngModule.ɵinj && Array.isArray(ngModule.ɵinj.imports))\n        {\n            const routes = \n            [\n                ...(options.staticRoutesBefore || []).map(extractChildrenComponents),\n                ...extractRoutes(routedComponents).map(extractChildrenComponents),\n                ...(options.staticRoutesAfter || []).map(extractChildrenComponents)\n            ];\n\n            ngModule.ɵinj.imports.push(options.rootModule ? RouterModule.forRoot(routes, options.rootModuleConfig) : RouterModule.forChild(routes));\n        }\n\n        return target;\n    };\n}"],"names":["i0","RelationsComponent","constructor","_relationsManager","visible","ngOnInit","this","setRelations","DemoData","relationsStaticDemo","i1","selectors","decls","vars","consts","template","rf","ctx","RelationsComponent_div_4_Template","__decorate","ComponentRoute","path","RelationsManager","components","RelationsStaticModule","CommonModule","RelationsSampleClickSAComponent","DynamicRelationsModule","withProviders","ModuleRoutes","ngModule","providers","provideRelations","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push","extractChildrenComponents","childrenComponents","length","routes","extractRoutes","map","children","routedComponents","options","rootModule","staticRoutesAfter","staticRoutesBefore","ɵinj","Array","isArray","imports","RouterModule","forRoot","rootModuleConfig","forChild"],"sourceRoot":""}