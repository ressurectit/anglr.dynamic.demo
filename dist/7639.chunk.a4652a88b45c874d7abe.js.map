{"version":3,"file":"7639.chunk.a4652a88b45c874d7abe.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.utils.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/gridPanelCell.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/gridPanelCell/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts"],"sourcesContent":["import {Action} from '@jscrpt/common';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Applies CSS styles of element applying grid panel css grid coordinates\n * @param options - Options for grid panel cell component\n * @param styles - CSS styles of element that should be updated\n */\nexport const applyGridCoordinates: Action<[GridPanelCellComponentOptions|undefined|null, CSSStyleDeclaration]> = (options, style) =>\n{\n    style.gridRowStart = options?.gridRowStart?.toString() ?? '';\n    style.gridRowEnd = options?.gridRowEnd?.toString() ?? '';\n    style.gridColumnStart = options?.gridColumnStart?.toString() ?? '';\n    style.gridColumnEnd = options?.gridColumnEnd?.toString() ?? '';\n};","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Grid panel cell layout metadata loader\n */\nexport const GridPanelCellLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridPanelCellComponentOptions>> = async () => new (await import('./metadata/gridPanelCell.layoutMetadata')).GridPanelCellLayoutEditorMetadata();\n","<ng-container *layoutComponentRenderer=\"options?.component\"/>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\nimport {GridPanelCellLayoutMetadataLoader} from './gridPanelCell.metadata';\nimport {applyGridCoordinates} from './gridPanelCell.utils';\n\n/**\n * Component used for displaying grid panel cell\n */\n@Component(\n{\n    selector: 'grid-panel-cell',\n    templateUrl: 'gridPanelCell.component.html',\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridPanelCellComponentOptions>(options => options?.component ? [options.component] : [])\n@LayoutEditorMetadata(GridPanelCellLayoutMetadataLoader)\nexport class GridPanelCellSAComponent extends LayoutComponentBase<GridPanelCellComponentOptions> implements LayoutComponent<GridPanelCellComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        const style = this.componentElement.nativeElement.style;\n        \n        applyGridCoordinates(this.options, style);\n    }\n}","import {GridPanelCellSAComponent} from './gridPanelCell.component';\n\nexport default GridPanelCellSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}"],"names":["applyGridCoordinates","options","style","gridRowStart","toString","gridRowEnd","gridColumnStart","gridColumnEnd","GridPanelCellLayoutMetadataLoader","_ref","GridPanelCellLayoutEditorMetadata","apply","arguments","i0","GridPanelCellSAComponent","LayoutComponentBase","onOptionsSet","this","componentElement","nativeElement","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","GridPanelCellSAComponent_ng_container_0_Template","component","LayoutComponentRendererSADirective","encapsulation","changeDetection","__decorate","DescendantsGetter","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","constructor","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","optional","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","provide","useValue"],"sourceRoot":""}