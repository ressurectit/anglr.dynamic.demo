{"version":3,"file":"8865.chunk.e107693a97cf5b9d0b22.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/pipes/control/control.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/textField/textField.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/textField/textField.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/textField/textField.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/textField/type.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions> extends LayoutComponentBase<TOptions>\n{\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _control?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FormComponentControlType} from '../../misc/enums';\n\n/**\n * Transforms control name to FormControl|FormArray|FormGroup\n */\n@Pipe({name: 'formComponentControl', standalone: true})\nexport class FormComponentControlSAPipe implements PipeTransform\n{\n    constructor(@Inject(LOGGER) protected _logger: Logger,)\n    {}\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms control name to FormControl|FormArray|FormGroup\n     */\n    public transform(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl): AbstractControl\n    {\n        if (!parentControl ||\n            !controlName)\n        {\n            return this._getControlForType(defaultControlType);\n        }\n\n        const control = parentControl.get(controlName);\n\n        if (!control)\n        {\n            this._logger?.warn('FormComponentControlSAPipe: Unable to find control with name {@name}', {name: controlName});\n        }\n\n        return control ?? this._getControlForType(defaultControlType);\n    }\n\n    //######################### private methods ########################\n\n    /**\n     * Generate dummy abstract control of specified type\n     * @param type \n     * @returns \n     */\n    private _getControlForType(type: FormComponentControlType): FormControl|FormArray|FormGroup\n    {\n        switch (type)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray<any>([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialTextFieldComponentOptions} from './textField.options';\n\n/**\n * Material text field layout metadata loader\n */\nexport const MaterialTextFieldLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTextFieldComponentOptions>> = async () => new (await import('./metadata/textField.layoutMetadata')).MaterialTextFieldLayoutEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {FormComponentControlSAPipe, FormComponent, FormComponentBase} from '@anglr/dynamic/form';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {MaterialTextFieldLayoutMetadataLoader} from './textField.metadata';\nimport {MaterialTextFieldComponentOptions} from './textField.options';\n\n/**\n * Component used for displaying material text field\n */\n@Component(\n{\n    selector: 'material-text-field',\n    templateUrl: 'textField.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatFormFieldModule,\n        MatInputModule,\n        ReactiveFormsModule,\n        CommonModule,\n    ]\n})\n@LayoutEditorMetadata(MaterialTextFieldLayoutMetadataLoader)\nexport class MaterialTextFieldSAComponent extends FormComponentBase<MaterialTextFieldComponentOptions> implements FormComponent<MaterialTextFieldComponentOptions>\n{}","<mat-form-field [appearance]=\"options?.appearance|asRequired\">\n    <mat-label>{{options?.label}}</mat-label>\n    <input matInput [attr.placeholder]=\"options?.placeholder\" [formControl]=\"options?.controlName|formComponentControl:_control|asFormControl|asRequired\">\n    <mat-hint>{{options?.hint}}</mat-hint>\n</mat-form-field>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialTextFieldSAComponent} from './textField.component';\n\n\nexport default MaterialTextFieldSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_control","_logger","super","i0","FORM_COMPONENT_CONTROL","LOGGER","features","FormComponentControlType","InjectionToken","FormComponentControlSAPipe","transform","controlName","parentControl","defaultControlType","this","_getControlForType","control","get","warn","name","type","FormArray","FormGroup","FormControl","pure","standalone","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","_extensions","_initialized","destroyed","element","extensionsOptions","options","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialTextFieldLayoutMetadataLoader","MaterialTextFieldLayoutEditorMetadata","MaterialTextFieldSAComponent","t","selectors","decls","vars","consts","template","FormPipesModule","i1","CastPipesModule","i2","MatFormFieldModule","i3","MatInputModule","i4","ReactiveFormsModule","i5","CommonModule","styles","changeDetection","_metadata","injector","instance","_instance"],"sourceRoot":""}