{"version":3,"file":"8926.chunk.b4d4de3c507970195cdf.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor.module.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleItemsProvider/materialDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleTypesProvider/materialDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleRelationsProvider/materialDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../material-components/src/misc/providers.ts","webpack://ng-universal-demo/../material-components/src/misc/utils.ts","webpack://ng-universal-demo/../rest-components/src/services/restDynamicModuleRelationsProvider/restDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../rest-components/src/services/restDynamicModuleItemsProvider/restDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../rest-components/src/misc/providers.ts","webpack://ng-universal-demo/../rest-components/src/misc/utils.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../rest-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {MetadataHistoryManager, MetadataStateManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relationsEditor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\n@ComponentRoute({path: ':id'})\nexport class RelationsEditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected stringMetadata: string = '';\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,\n                @Inject(METADATA_STATE_MANAGER) protected _metadataState: MetadataStateManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: RelationsNodeMetadata[]): RelationsNodeMetadata[]\n    {\n        return metadata;\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.relationsDemo;\n    }\n\n    protected showMetadata(): void\n    {\n        const meta = this._metadataState.getMetadata();\n\n        this.stringMetadata = JSON.stringify(meta, null, 4);\n    }\n}\n","<div class=\"flex-row\">\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" [layoutControls]=\"false\" routePath=\"/relationsEditor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\n        <span>demo</span>\n    </button>\n</div>\n\n<div class=\"flex-1 flex-row\">\n    <relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>\n\n    <div style=\"width: 300px;\" class=\"flex-column\">\n        <div>Relations metadata</div>\n\n        <div>\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"showMetadata()\">\n                <span>show metadata</span>\n            </button>\n        </div>\n\n        <div style=\"white-space: pre; overflow: scroll;\" class=\"thin-scrollbar flex-1\">{{stringMetadata}}</div>\n    </div>\n</div>","import {RelationsEditorComponent} from './relationsEditor/relationsEditor.component';\n\nexport const components =\n[\n    RelationsEditorComponent,\n];","import {ClassProvider, FactoryProvider, NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsEditorModule, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {provideTinyMceRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideBasicRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {provideMaterialRelationsEditor} from '@anglr/dynamic/material-components';\nimport {provideRestRelationsEditor} from '@anglr/dynamic/rest-components';\n\nimport {components} from './relationsEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {DemoRelationsPackageManager} from '../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for relations editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        LoadSaveNewSAComponent,\n        DynamicRelationsEditorModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<RelationsNodeMetadata[]>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('RELATIONS_DATA'),\n        provideBasicRelationsEditor(),\n        provideMaterialRelationsEditor(),\n        provideTinyMceRelationsEditor(),\n        provideHandlebarsRelationsEditor(),\n        provideRestRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ]\n})\n@ModuleRoutes(components)\nexport class RelationsEditorModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for material module items\n */\n@Injectable()\nexport class MaterialDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'material-components':\n            {\n                try\n                {\n                    this._logger?.debug('MaterialDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('MaterialDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for material types\n */\n@Injectable()\nexport class MaterialDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MaterialDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'material-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for material types\n */\n@Injectable()\nexport class MaterialDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MaterialDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'material-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialDynamicModuleItemsProvider, MaterialDynamicModuleRelationsProvider, MaterialDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for material package layout components provider\n */\nexport const MATERIAL_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material dynamic layout module types provider\n */\nexport const MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: MaterialDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for material dynamic relations types provider\n */\nexport const MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: MaterialDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for material package relations nodes provider\n */\nexport const MATERIAL_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material package relations components provider\n */\nexport const MATERIAL_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {MATERIAL_LAYOUT_COMPONENTS_PROVIDER, MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER, MATERIAL_RELATIONS_COMPONENTS_PROVIDER, MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER, MATERIAL_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout material subpackage\n */\nexport function provideMaterialLayout(): Provider[]\n{\n    return [\n        MATERIAL_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations material subpackage\n */\nexport function provideMaterialRelations(): Provider[]\n{\n    return [\n        MATERIAL_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor material subpackage\n */\nexport function provideMaterialLayoutEditor(): Provider[]\n{\n    return [\n        MATERIAL_LAYOUT_COMPONENTS_PROVIDER,\n        MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('material-components'),\n    ];\n}\n\n/**\n * Providers for relations editor material subpackage\n */\nexport function provideMaterialRelationsEditor(): Provider[]\n{\n    return [\n        MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER,\n        MATERIAL_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('material-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor material subpackage\n */\nexport function provideMaterialLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideMaterialRelationsEditor(),\n        ...provideMaterialLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations material subpackage\n */\nexport function provideMaterialLayoutRelations(): Provider[]\n{\n    return [\n        ...provideMaterialLayout(),\n        ...provideMaterialRelations(),\n    ];\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for rest types\n */\n@Injectable()\nexport class RestDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('RestDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'rest-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('RestDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for rest module items\n */\n@Injectable()\nexport class RestDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'rest-components':\n            {\n                try\n                {\n                    this._logger?.debug('RestDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('RestDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\n\nimport {RestDynamicModuleItemsProvider, RestDynamicModuleRelationsProvider} from '../services';\n\n/**\n * Provider for rest dynamic relations types provider\n */\nexport const REST_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: RestDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for rest package relations nodes provider\n */\nexport const REST_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: RestDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for rest package relations components provider\n */\nexport const REST_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: RestDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {REST_RELATIONS_COMPONENTS_PROVIDER, REST_RELATIONS_MODULE_TYPES_PROVIDER, REST_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for relations rest subpackage\n */\nexport function provideRestRelations(): Provider[]\n{\n    return [\n        REST_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor rest subpackage\n */\nexport function provideRestRelationsEditor(): Provider[]\n{\n    return [\n        REST_RELATIONS_MODULE_TYPES_PROVIDER,\n        REST_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('rest-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor rest subpackage\n */\nexport function provideRestLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideRestRelationsEditor(),\n    ];\n}\n\n/**\n * Providers for layout relations rest subpackage\n */\nexport function provideRestLayoutRelations(): Provider[]\n{\n    return [\n        ...provideRestRelations(),\n    ];\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t67309,\n\t\t6950,\n\t\t7309\n\t],\n\t\"./datepicker/type\": [\n\t\t2229,\n\t\t5653,\n\t\t9537,\n\t\t873,\n\t\t6038,\n\t\t5175,\n\t\t2229\n\t],\n\t\"./expansionPanel/type\": [\n\t\t52868,\n\t\t3490,\n\t\t2868\n\t],\n\t\"./numberField/type\": [\n\t\t39310,\n\t\t5653,\n\t\t873,\n\t\t5175,\n\t\t9310\n\t],\n\t\"./period/type\": [\n\t\t40059,\n\t\t5653,\n\t\t873,\n\t\t5175,\n\t\t59\n\t],\n\t\"./radio/type\": [\n\t\t84978,\n\t\t5008,\n\t\t4978\n\t],\n\t\"./select/type\": [\n\t\t68235,\n\t\t5653,\n\t\t1138,\n\t\t5175,\n\t\t8235\n\t],\n\t\"./textField/type\": [\n\t\t98865,\n\t\t5653,\n\t\t873,\n\t\t5175,\n\t\t8865\n\t],\n\t\"./textarea/type\": [\n\t\t18226,\n\t\t5653,\n\t\t873,\n\t\t5175,\n\t\t8226\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 15033;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./rest/type\": [\n\t\t20309,\n\t\t309\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 2721;\nmodule.exports = webpackAsyncContext;","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}"],"names":["RelationsEditorComponent","emptyMetadata","constructor","_store","history","_metadataState","_metadata","stringMetadata","_getMetadata","metadata","_loadDemo","this","DemoData","showMetadata","meta","getMetadata","JSON","stringify","RELATIONS_HISTORY_MANAGER","METADATA_STATE_MANAGER","selectors","decls","vars","consts","template","i0","ctx","__decorate","BindThis","ComponentRoute","path","StoreDataService","MetadataHistoryManager","components","RelationsEditorModule","provide","RELATIONS_METADATA_STORAGE","useFactory","store","MetadataStorage","id","getData","deps","createStoreDataServiceFactory","provideBasicRelationsEditor","provideMaterialRelationsEditor","provideTinyMceRelationsEditor","provideHandlebarsRelationsEditor","provideRestRelationsEditor","PackageManager","useClass","DemoRelationsPackageManager","imports","LoadSaveNewSAComponent","DynamicRelationsEditorModule","ModuleRoutes","MaterialDynamicModuleItemsProvider","_logger","tryToGet","source","package","debug","name","e","LOGGER","factory","MaterialDynamicModuleTypesProvider","moduleName","MaterialDynamicModuleRelationsProvider","MATERIAL_LAYOUT_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","MATERIAL_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","MATERIAL_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideMaterialLayout","provideMaterialLayoutEditor","provideStaticPackageSource","provideMaterialLayoutRelationsEditor","provideMaterialLayoutRelations","RestDynamicModuleRelationsProvider","RestDynamicModuleItemsProvider","REST_RELATIONS_MODULE_TYPES_PROVIDER","REST_RELATIONS_NODES_PROVIDER","REST_RELATIONS_COMPONENTS_PROVIDER","provideRestLayoutRelationsEditor","provideRestLayoutRelations","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","all","slice","keys","Object","module","exports","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","defineProperty","enumerable","configurable","writable","value","push"],"sourceRoot":""}