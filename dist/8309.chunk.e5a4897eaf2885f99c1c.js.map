{"version":3,"file":"8309.chunk.e5a4897eaf2885f99c1c.js","mappings":"kQAQM,MAAOA,EAqBTC,YAAYC,GAXL,KAAAC,KAA8B,KAQ9B,KAAAC,UAAmC,EAMtCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BH,EAC9B,GAfDK,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,SACnBC,EAAAA,EAAAA,GAA0B,mCAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,2DAQAH,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,aACnBC,EAAAA,EAAAA,GAA0B,0CAC1BC,EAAAA,EAAAA,GAA8C,iBAC/C,+DClBE,MAAOC,EAwCTV,cAjCO,KAAAW,SACP,CACIC,KAAM,SACNC,YAAa,gBACbC,MAAO,UACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,IAGR,CACIH,UAAWlB,EACXoB,mBACA,EACIE,EAAAA,EAAAA,GAAyC,CAAC,OAAQ,iBAKlEC,eACA,CACIpB,KAAM,WACNC,UAAU,IAOdoB,OAAOC,OAAOnB,KACjB,E,sFC1CE,MAAMoB,EAAuE,IAAIC,EAAAA,EAAyC,8BAKpHC,EAAgF,IAAID,EAAAA,EAA2C,qCAK/HE,EAAyF,IAAIF,EAAAA,EAA6C,4CAK1IG,EAA8E,IAAIH,EAAAA,EAAwC,sCAK1HI,EAAkF,IAAIJ,EAAAA,EAAsD,2B,6FCpBnJ,MAAOK,EAGT/B,YAAgDgC,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkBhC,EAA+CiC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQlC,GAEA,KAGRA,aAAiBmC,EAAAA,GAETnC,GAGXI,KAAK2B,SAASK,KAAK,iDAEZ,KACV,E,iCA7BQN,GAAAA,EAAAA,EAGuBO,EAAAA,GAAMA,I,0CAH7BP,E,2DCHP,MAAOQ,EAQFN,UAAUhC,EAA6BuC,EAAqBN,GAE/D,OAAOjC,GAASuC,CACnB,E,iCAXQD,E,uCAAAA,E","sources":["webpack://ng-universal-demo/../basic-components/src/button/metadata/button.model.ts","webpack://ng-universal-demo/../basic-components/src/button/metadata/button.layoutMetadata.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {ButtonComponentOptions} from '../button.options';\n\n/**\n * Button model for properties editor\n */\nexport class ButtonModel implements ButtonComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Text')\n    @LayoutPropertyDescription('Text to be displayed in button')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public text: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Disabled')\n    @LayoutPropertyDescription('Indication whether is button disabled')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public disabled: boolean|undefined|null = false;\n    \n    //######################### constructor #########################\n    constructor(value: ButtonComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {ButtonComponentOptions} from '../button.options';\nimport {ButtonModel} from './button.model';\n\n/**\n * Button layout metadata\n */\nexport class ButtonLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<ButtonComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<ButtonComponentOptions> =\n    {\n        name: 'Button',\n        description: 'Simple button',\n        group: 'Buttons',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: ButtonModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<ButtonModel>(['text', 'disabled']),\n                    ],\n                },\n            ],\n        },\n        defaultOptions:\n        {\n            text: 'Click me',\n            disabled: false,\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["ButtonModel","constructor","value","text","disabled","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","ButtonLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","Object","freeze","LAYOUT_COMPONENT_TRANSFORM","InjectionToken","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_COMPONENTS_LOADER","AsFormControlPipe","_logger","transform","_valueHash","isBlank","FormControl","warn","LOGGER","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}