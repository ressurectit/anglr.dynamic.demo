{"version":3,"file":"2296.chunk.8e59dbaa043ca3a8443a.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/plugins/paging/previousNext/previousNextPaging.component.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/previousNextPaging/previousNextPaging.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/previousNextPaging/previousNextPaging.component.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/previousNextPaging/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ValueProvider, Signal, computed, signal} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Paginator, RecursivePartial} from '@jscrpt/common';\n\nimport {PagingAbstractComponent} from '../pagingAbstract.component';\nimport {PreviousNextPaging, PreviousNextPagingOptions, CssClassesPreviousNextPaging} from './previousNextPaging.interface';\nimport {DEFAULT_OPTIONS} from '../../../misc/tokens';\nimport {ItemsPerPageItem} from '../basic/basicPaging.interface';\nimport {InfinityNaNSAPipe} from '../../../pipes';\n\n/**\n * Default options for paging\n */\nconst defaultOptions: PreviousNextPagingOptions =\n{\n    initialItemsPerPage: 10,\n    initialPage: 1,\n    itemsPerPageValues: [],\n    cssClasses:\n    {\n        pagingContainer: 'grid-flex-row',\n        pagingElement: 'grid-flex-row pages',\n        firstItemElement: 'fas fa-angle-double-left',\n        previousItemElement: 'fas fa-angle-left',\n        nextItemElement: 'fas fa-angle-right',\n        pagingSeparatorElement: 'grid-flex-1',\n        itemsPerPageElement: 'grid-flex-row items-per-page',\n    }\n};\n\n/**\n * Component used for rendering paging with next and previous buttons\n */\n@Component(\n{\n    selector: 'next-previous-paging',\n    templateUrl: 'previousNextPaging.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        InfinityNaNSAPipe,\n    ],\n    providers:\n    [\n        <ValueProvider>\n        {\n            provide: DEFAULT_OPTIONS,\n            useValue: defaultOptions,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PreviousNextPagingSAComponent extends PagingAbstractComponent<CssClassesPreviousNextPaging, PreviousNextPagingOptions> implements PreviousNextPaging<PreviousNextPagingOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Paginator used for getting page numbers\n     */\n    protected paginator: Paginator = new Paginator();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Array of items per page that are rendered\n     */\n    protected itemsPerPageItems: Signal<ItemsPerPageItem[]>;\n\n    /**\n     * Indication that currently displayed page is first\n     */\n    protected isFirst: Signal<boolean> = signal(false).asReadonly();\n\n    /**\n     * Indication that currently displayed page is last\n     */\n    protected isLast: Signal<boolean> = signal(false).asReadonly();\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get firstItemIndex(): number\n    {\n        const offset = this.paginator.getOffset();\n\n        return isNaN(offset) ? 0 : offset;\n    }\n\n    //######################### public properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override get options(): PreviousNextPagingOptions\n    {\n        return super.options;\n    }\n    public override set options(options: RecursivePartial<PreviousNextPagingOptions>)\n    {\n        super.options = options;\n        \n        this.optionsValue.update(opts =>\n        {\n            return {\n                ...opts,\n                itemsPerPageValues: options.itemsPerPageValues ?? opts.itemsPerPageValues,\n            };\n        });\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        super();\n\n        this.itemsPerPageItems = computed(() =>\n        {\n            const itemsPerPageValues = this.optionsValue().itemsPerPageValues;\n            const itemsPerPage = this.itemsPerPageValue() ?? NaN;\n\n            const result: ItemsPerPageItem[] = [];\n\n            for(const val of itemsPerPageValues)\n            {\n                result.push(\n                {\n                    value: val,\n                    isActive: val == itemsPerPage || (isNaN(val) && isNaN(itemsPerPage))\n                });\n            }\n\n            return result;\n        });\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(force: boolean): Promise<void>\n    {\n        await super.initialize(force);\n\n        this.isFirst = computed(() =>\n        {\n            this.paginator.setPage(this.pageValue() ?? 1);\n            this.paginator.setItemsPerPage(this.itemsPerPageValue() ?? NaN);\n            this.paginator.setItemCount(this.totalCount());\n\n            return this.paginator.isFirst();\n        });\n\n        this.isLast = computed(() =>\n        {\n            this.paginator.setPage(this.pageValue() ?? 1);\n            this.paginator.setItemsPerPage(this.itemsPerPageValue() ?? NaN);\n            this.paginator.setItemCount(this.totalCount());\n\n            return this.paginator.isLast();\n        });\n    }\n\n    //######################### protected methods - template methods #########################\n\n    /**\n     * Sets page for current paging\n     * @param page - Page index to be set\n     */\n    protected setPageValue(page: number): void\n    {\n        if(this.isFirst() && page <= 1)\n        {\n            return;\n        }\n\n        if(this.isLast() && page > (this.pageValue() ?? 1))\n        {\n            return;\n        }\n\n        this.setPage(page);\n    }\n\n    /**\n     * Sets items per page for current paging\n     * @param itemsPerPage - Number of items per page\n     */\n    protected setItemsPerPageValue(itemsPerPage: ItemsPerPageItem): void\n    {\n        if(itemsPerPage.isActive)\n        {\n            return;\n        }\n\n        this.setItemsPerPage(itemsPerPage.value);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {PreviousNextPagingComponentOptions} from './previousNextPaging.options';\n\n/**\n * Previou next paging layout metadata loader\n */\nexport const PreviousNextPagingLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PreviousNextPagingComponentOptions>> = async () => new (await import('./metadata/previousNextPaging.layoutMetadata')).PreviousNextPagingLayoutEditorMetadata();\n\n/**\n * Previou next paging layout designer type loader\n */\nexport const PreviousNextPagingLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/previousNextPagingDesigner.component')).PreviousNextPagingDesignerSAComponent;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, PluginDescription, PreviousNextPagingSAComponent as GridPreviousNextPaging, PreviousNextPagingOptions} from '@anglr/grid';\nimport {RecursivePartial} from '@jscrpt/common';\n\nimport {PreviousNextPagingComponentOptions} from './previousNextPaging.options';\nimport {PreviousNextPagingLayoutDesignerTypeLoader, PreviousNextPagingLayoutMetadataLoader} from './previousNextPaging.metadata';\nimport {GridPluginComponent} from '../../interfaces';\n\n/**\n * Component used for displaying previous next paging\n */\n@Component(\n{\n    selector: 'previous-next-paging',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(PreviousNextPagingLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(PreviousNextPagingLayoutMetadataLoader)\nexport class PreviousNextPagingSAComponent extends LayoutComponentBase<PreviousNextPagingComponentOptions> implements GridPluginComponent<GridPreviousNextPaging, PreviousNextPagingComponentOptions, PreviousNextPagingOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of grid\n     */\n    protected grid: Grid|undefined|null;\n\n    //######################### public properties - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Description of plugin that will be used in grid\n     */\n    public pluginDescription: PluginDescription<GridPreviousNextPaging, RecursivePartial<PreviousNextPagingOptions>> =\n    {\n        instance: null,\n        instanceCallback: null,\n        options:\n        {\n            initialItemsPerPage: 15,\n            initialPage: 1,\n            itemsPerPageValues: [15, 30, 60],\n        },\n        type: GridPreviousNextPaging,\n    };\n\n    //######################### public methods - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Sets grid instance to this type\n     * @param grid - Instance of grid\n     */\n    public setGridInstance(grid: Grid): void\n    {\n        this.grid = grid;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(this.pluginDescription.options)\n        {\n            this.pluginDescription.options.initialItemsPerPage = this.optionsSafe.initialItemsPerPage ?? 15;\n        }\n    }\n}","import {PreviousNextPagingSAComponent} from './previousNextPaging.component';\n\nexport default PreviousNextPagingSAComponent;\n","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["_c0","a0","active","PreviousNextPagingSAComponent_Conditional_9_For_2_Template","rf","ctx","_r8","ctx_r7","setItemsPerPage","itemsPerPage_r2","value","$implicit","PreviousNextPagingSAComponent_Conditional_9_Template","_c1","disabled","defaultOptions","initialItemsPerPage","initialPage","itemsPerPageValues","cssClasses","pagingContainer","pagingElement","firstItemElement","previousItemElement","nextItemElement","pagingSeparatorElement","itemsPerPageElement","PreviousNextPagingSAComponent","PagingAbstractComponent","paginator","Paginator","itemsPerPageItems","isFirst","signal","asReadonly","isLast","firstItemIndex","offset","this","getOffset","isNaN","options","super","optionsValue","update","opts","constructor","computed","itemsPerPage","itemsPerPageValue","NaN","result","val","push","isActive","initialize","force","_superprop_getInitialize","_this","call","setPage","pageValue","setItemCount","totalCount","setPageValue","page","setItemsPerPageValue","selectors","standalone","features","provide","DEFAULT_OPTIONS","useValue","tmp_b_0","undefined","dependencies","CommonModule","i1","InfinityNaNSAPipe","encapsulation","changeDetection","PreviousNextPagingLayoutMetadataLoader","_ref","_asyncToGenerator","PreviousNextPagingLayoutEditorMetadata","apply","arguments","PreviousNextPagingLayoutDesignerTypeLoader","_ref2","PreviousNextPagingDesignerSAComponent","LayoutComponentBase","pluginDescription","instance","instanceCallback","type","GridPreviousNextPaging","setGridInstance","grid","onOptionsSet","optionsSafe","t","i0","decls","vars","template","styles","__decorate","LayoutEditorDesignerType","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onInit","extension","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes"],"sourceRoot":""}