{"version":3,"file":"4738.chunk.123d652f0056b47fff5a.js","mappings":"gVAMO,MAAMA,EAAsC,e,EAAAC,G,EAA6D,mBAAY,WAAW,sFAAwDC,uCAAwC,E,+KAAA,kBAApL,OAAAD,EAAAE,MAAA,KAAAC,UAAA,K,yHCO5C,IAAMC,EAAN,MA2BHC,WAAAA,CAAsBC,GAAA,KAAAA,SAAAA,EAVZ,KAAAC,GAAa,GAYnBC,KAAKC,mBAAqBD,KAAKF,SAASI,IAAIC,EAAAA,EAAoB,MAEhEH,KAAKI,iBAAmBJ,KAAKF,SAASI,IAAIG,EAAAA,EAA2B,KACzE,CAOOC,gBAAAA,CAAiBC,GAEpB,IAAI,MAAMC,KAAOC,OAAOC,KAAKH,GAC7B,CACI,MAAMI,EAAQX,KAEdW,EAAMH,GAAOD,EAAQC,GAAKI,aAC1BD,EAAM,GAAGH,YAAcK,Q,CAE/B,CAKOC,iBAAAA,GAEP,CAOOC,kBAAAA,GAEAf,KAAKD,KAEJC,KAAKC,oBAAoBe,iBAAiBhB,KAAKD,IAC/CC,KAAKI,kBAAkBa,oBAAoBjB,KAAKD,IAExD,CASamB,UAAAA,CAAWC,EACApB,GAAU,I,EAAAqB,EAAA,Y,EAAA,YAI9B,GAFAA,EAAKrB,GAAKA,EAENqB,EAAKhB,kBAAqBgB,EAAKnB,mBAAnC,CAKA,IAAI,MAAMoB,KAASF,EAAeG,kBAAkBC,QAAU,GAE1Dd,OAAOe,eAAeJ,EACAC,EAAMI,KACN,CACIvB,IAAK,WAED,OAAOF,KAAK,IAAIqB,EAAMI,OAC1B,EACAC,IAAK,SAASC,GAEV3B,KAAK,IAAIqB,EAAMI,QAAUE,GACzBC,EAAAA,EAAAA,IAAmB5B,KAAMqB,EAAMI,KACnC,IAG1BhB,OAAOe,eAAeJ,EACA,GAAGC,EAAMI,aACT,CACIE,MAAO,IAAIE,EAAAA,SAIXC,IAAvBT,EAAMU,eAEJX,EAAoBC,EAAMI,MAAQJ,EAAMU,cAG1CV,EAAMW,WAELC,EAAAA,EAAAA,IAAmBb,EAAMC,EAAMI,MAIvCL,EAAKhB,iBAAiB8B,kBAAkBd,EAAKrB,GAAIqB,SAC3CA,EAAKnB,mBAAmBkC,YAC9Bf,EAAKnB,mBAAmBmC,gBAAgBhB,EAAKrB,G,CAAI,E,gLACrD,GA7HSH,GAAwByC,EAAAA,EAAAA,IAAA,EADpCC,EAAAA,EAAAA,GAAwB/C,IAAuC,6BA4B5BgD,EAAAA,KA3BvB3C,E,gDCXb,Q,QAAuC,C","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/type.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null;\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.relationsProcessor = this.injector.get(RelationsProcessor, null);\n\n        this.componentManager = this.injector.get(RelationsComponentManager, null);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {ComponentInputsRelations} from './componentInputs.relations';\n\nexport default ComponentInputsRelations;\n"],"names":["ComponentInputsRelationsMetadataLoader","_ref","ComponentInputsRelationsEditorMetadata","apply","arguments","ComponentInputsRelations","constructor","injector","id","this","relationsProcessor","get","RelationsProcessor","componentManager","RelationsComponentManager","dynamicOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","relationsOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","_this","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","__decorate","RelationsEditorMetadata","Injector"],"sourceRoot":""}