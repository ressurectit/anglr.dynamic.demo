{"version":3,"file":"8763.chunk.b8d43d1a790f5555d77b.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/../css-components/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleItemsProvider/materialDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleTypesProvider/materialDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../material-components/src/services/materialDynamicModuleRelationsProvider/materialDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../material-components/src/misc/providers.ts","webpack://ng-universal-demo/../material-components/src/misc/utils.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t1934,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout css subpackage\n */\nexport function provideCssLayout(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor css subpackage\n */\nexport function provideCssLayoutEditor(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('css-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor css subpackage\n */\nexport function provideCssLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations css subpackage\n */\nexport function provideCssLayoutRelations(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for material module items\n */\n@Injectable()\nexport class MaterialDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'material-components':\n            {\n                try\n                {\n                    this._logger?.debug('MaterialDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n                    const dynamicItemModule = await import(`../../dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('MaterialDynamicModuleItemsProvider: item {{@item}} was not found, reason: ' + e, {item: {name: source.name, package: source.package}});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for material types\n */\n@Injectable()\nexport class MaterialDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MaterialDynamicModuleTypesProvider: trying to get types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'material-components':\n                    return await import('../../types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialDynamicModuleTypesProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for material types\n */\n@Injectable()\nexport class MaterialDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('MaterialDynamicModuleRelationsProvider: trying to get relations types for module {{@module}}', {module: {moduleName: source.package}});\n\n            switch(source.package)\n            {\n                case 'material-components':\n                    return await import('../../relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('MaterialDynamicModuleRelationsProvider: module {{@module}} was not found, reason: ' + e, {module: {moduleName: source.package}});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialDynamicModuleItemsProvider, MaterialDynamicModuleRelationsProvider, MaterialDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for material package layout components provider\n */\nexport const MATERIAL_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material dynamic layout module types provider\n */\nexport const MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: MaterialDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for material dynamic relations types provider\n */\nexport const MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: MaterialDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for material package relations nodes provider\n */\nexport const MATERIAL_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for material package relations components provider\n */\nexport const MATERIAL_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: MaterialDynamicModuleItemsProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {MATERIAL_LAYOUT_COMPONENTS_PROVIDER, MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER, MATERIAL_RELATIONS_COMPONENTS_PROVIDER, MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER, MATERIAL_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Providers for layout material subpackage\n */\nexport function provideMaterialLayout(): Provider[]\n{\n    return [\n        MATERIAL_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations material subpackage\n */\nexport function provideMaterialRelations(): Provider[]\n{\n    return [\n        MATERIAL_RELATIONS_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor material subpackage\n */\nexport function provideMaterialLayoutEditor(): Provider[]\n{\n    return [\n        MATERIAL_LAYOUT_COMPONENTS_PROVIDER,\n        MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('material-components'),\n    ];\n}\n\n/**\n * Providers for relations editor material subpackage\n */\nexport function provideMaterialRelationsEditor(): Provider[]\n{\n    return [\n        MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER,\n        MATERIAL_RELATIONS_NODES_PROVIDER,\n        provideStaticPackageSource('material-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor material subpackage\n */\nexport function provideMaterialLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideMaterialRelationsEditor(),\n        ...provideMaterialLayout(),\n    ];\n}\n\n\n/**\n * Providers for layout relations material subpackage\n */\nexport function provideMaterialLayoutRelations(): Provider[]\n{\n    return [\n        ...provideMaterialLayout(),\n        ...provideMaterialRelations(),\n    ];\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t67309,\n\t\t2176,\n\t\t7309\n\t],\n\t\"./datepicker/type\": [\n\t\t2229,\n\t\t9704,\n\t\t3101,\n\t\t8546,\n\t\t8501,\n\t\t5175,\n\t\t2229\n\t],\n\t\"./expansionPanel/type\": [\n\t\t52868,\n\t\t4423,\n\t\t2868\n\t],\n\t\"./numberField/type\": [\n\t\t39310,\n\t\t9704,\n\t\t8546,\n\t\t5175,\n\t\t9310\n\t],\n\t\"./period/type\": [\n\t\t40059,\n\t\t9704,\n\t\t8546,\n\t\t5175,\n\t\t8205\n\t],\n\t\"./radio/type\": [\n\t\t84978,\n\t\t1854,\n\t\t4978\n\t],\n\t\"./select/type\": [\n\t\t68235,\n\t\t9704,\n\t\t4130,\n\t\t5175,\n\t\t8235\n\t],\n\t\"./tab/type\": [\n\t\t56274,\n\t\t6879,\n\t\t8929,\n\t\t6274\n\t],\n\t\"./tabGroup/type\": [\n\t\t42311,\n\t\t6879,\n\t\t8929,\n\t\t2311\n\t],\n\t\"./textField/type\": [\n\t\t98865,\n\t\t9704,\n\t\t8546,\n\t\t5175,\n\t\t8865\n\t],\n\t\"./textarea/type\": [\n\t\t26931,\n\t\t9704,\n\t\t8546,\n\t\t5175,\n\t\t6931\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 15033;\nmodule.exports = webpackAsyncContext;"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","_this","package","debug","item","name","i0","LOGGER","factory","ɵfac","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideCssLayout","provideCssLayoutEditor","provideStaticPackageSource","provideCssLayoutRelationsEditor","provideCssLayoutRelations","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","this","NotFoundLayoutTypeSAComponent","selectors","standalone","features","decls","vars","consts","template","rf","ctx","LocalizeSAPipe","styles","changeDetection","LayoutComponentRendererSADirective","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","options","metadataTransformer","logger","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","ngOnChanges","changes","ngOnDestroy","clear","nameof","injector","customInjector","scope","layoutComponentType","loadItem","warn","type","createComponent","Ignore","ThrowError","usedInjector","Injector","create","parent","providers","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","registerExtensions","itm","extensions","addSimpleChange","ngOnInit","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","destroy","LAYOUT_COMPONENTS_LOADER","i1","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicLayoutModule","withProviders","ngModule","provideLayout","MaterialDynamicModuleItemsProvider","MaterialDynamicModuleTypesProvider","MaterialDynamicModuleRelationsProvider","MATERIAL_LAYOUT_COMPONENTS_PROVIDER","MATERIAL_LAYOUT_MODULE_TYPES_PROVIDER","MATERIAL_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","MATERIAL_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","MATERIAL_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","provideMaterialLayout","provideMaterialLayoutEditor","provideMaterialRelationsEditor","provideMaterialLayoutRelationsEditor","provideMaterialLayoutRelations"],"sourceRoot":""}