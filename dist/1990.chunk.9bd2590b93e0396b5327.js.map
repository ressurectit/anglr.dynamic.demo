{"version":3,"file":"1990.chunk.9bd2590b93e0396b5327.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.utils.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/extensions/customComponentData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/type.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsProcessor, RelationsWithInjector} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null = this.injector.get(RelationsProcessor, null);\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null = this.injector.get(RelationsComponentManager, null);\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: output.name,\n                                          });\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentComponentOptions} from './customComponent.options';\n\n/**\n * Custom component layout metadata loader\n */\nexport const CustomComponentLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<CustomComponentComponentOptions>> = async () => new (await import('./metadata/customComponent.layoutMetadata')).CustomComponentLayoutEditorMetadata();\n\n/**\n * Custom component relations metadata loader\n */\nexport const CustomComponentRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/customComponent.relationsMetadata')).CustomComponentRelationsEditorMetadata();\n\n/**\n * Custom component layout designer type loader\n */\nexport const CustomComponentLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/customComponentDesigner.component')).CustomComponentDesignerSAComponent;\n","import {Component, ChangeDetectionStrategy, inject, SimpleChanges, FactoryProvider} from '@angular/core';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutComponentsIteratorService, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {provideRelationsDebugger, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {extend, PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions, CustomComponentRelationsOptions} from './customComponent.options';\nimport {CustomComponentLayoutDesignerTypeLoader, CustomComponentLayoutMetadataLoader, CustomComponentRelationsMetadataLoader} from './customComponent.metadata';\nimport {ComponentInputsRelations} from '../componentInputs/componentInputs.relations';\nimport {ComponentOutputsRelations} from '../componentOutputs/componentOutputs.relations';\nimport {getInputs, getOutputs} from './customComponent.utils';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services/placeholderHandler/placeholderHandler.service';\n\n/**\n * Component used for displaying custom component\n */\n@Component(\n{\n    selector: 'custom-component',\n    templateUrl: 'customComponent.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        ...provideRelationsDebugger(),\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(CustomComponentSAComponent, inject(CustomComponentSAComponent));\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<CustomComponentComponentOptions>(options => \n{\n    if(!options?.placeholderContainers)\n    {\n        return [];\n    }\n\n    const result: LayoutComponentMetadata[] = [];\n\n    for(const key in options.placeholderContainers)\n    {\n        if(options.placeholderContainers[key])\n        {\n            result.push(options.placeholderContainers[key]);\n        }\n    }\n\n    return result;\n})\n@LayoutEditorDesignerType(CustomComponentLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(CustomComponentRelationsMetadataLoader)\n@LayoutEditorMetadata(CustomComponentLayoutMetadataLoader)\nexport class CustomComponentSAComponent extends LayoutComponentBase<CustomComponentComponentOptions> implements LayoutComponent<CustomComponentComponentOptions>, RelationsComponent<CustomComponentRelationsOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    /**\n     * Parent relations processor instance\n     */\n    protected parentRelationsProcessor: RelationsProcessor|null = inject(RelationsProcessor, {skipSelf: true, optional: true});\n\n    /**\n     * Parent relations component manager\n     */\n    protected parentComponentManager: RelationsComponentManager|null = inject(RelationsComponentManager, {skipSelf: true, optional: true});\n\n    /**\n     * Service used for obtaining iterators that goes over all components in metadata\n     */\n    protected layoutMetadataIterator: LayoutComponentsIteratorService = inject(LayoutComponentsIteratorService);\n\n    /**\n     * Instance of inputs relations if it exists\n     */\n    protected inputsRelations: ComponentInputsRelations|null = null;\n\n    /**\n     * Instance of outputs relations if it exists\n     */\n    protected outputsRelations: ComponentOutputsRelations|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: CustomComponentRelationsOptions|undefined|null;\n\n    //######################### public methods #########################\n\n    /**\n     * Method that allows processing of custom component data\n     * @param _name - Name of custom component\n     */\n    public processCustomComponentData(_name: string): PromiseOr<void>\n    {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async afterInit(): Promise<void>\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        //get layout metadata and displays layout\n        this.metadata = await this.layoutMetadataStorage.getMetadata(this.options.name);\n\n        if(this.metadata)\n        {\n            const iterator = this.layoutMetadataIterator.getIteratorFor(this.metadata);\n\n            for await(const itm of iterator)\n            {\n                const overrideOpts = this.options.contentOptions?.[itm.metadata.id];\n\n                //overide options of internal components for custom component from outside\n                if(overrideOpts)\n                {\n                    extend(itm.metadata.options, overrideOpts);\n                }\n            }\n        }\n\n        let relations: RelationsNodeMetadata[]|null = null;\n\n        //gets and initialize inner relations of custom component\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            relations = await this.relationsMetadataStorage.getMetadata(this.options.name);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n\n        //if relations available initialize custom component inputs\n        if(relations)\n        {\n            const inputsMeta = getInputs(relations);\n\n            if(inputsMeta)\n            {\n                this.inputsRelations = new ComponentInputsRelations(this.injector);\n                this.inputsRelations.initInputs(inputsMeta, inputsMeta.id);\n            }\n\n            const outputsMeta = getOutputs(relations);\n\n            if(outputsMeta)\n            {\n                this.outputsRelations = new ComponentOutputsRelations(this.injector);\n                this.outputsRelations.initOutputs(outputsMeta, outputsMeta.id, this);\n            }\n        }\n\n        //initialize and register relations from outside world to this custom component\n        if(this.parentComponentManager && this.parentRelationsProcessor)\n        {\n            this.parentComponentManager.registerComponent(this.id, this);\n            await this.parentRelationsProcessor.initialized;\n            this.parentRelationsProcessor.updateRelations(this.id);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        this.inputsRelations?.ngOnChanges(changes);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.parentRelationsProcessor || !this.parentComponentManager)\n        {\n            return;\n        }\n\n        this.parentRelationsProcessor.destroyComponent(this.id);\n        this.parentComponentManager.unregisterComponent(this.id);\n    }\n}\n","<ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>","import {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs/componentInputs.options';\nimport {ComponentOutputsRelationsOptions} from '../componentOutputs/componentOutputs.options';\n\n//TODO: check if this is duplicit in output js bundle\n\n/**\n * Gets component inputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getInputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentInputs');\n}\n\n/**\n * Gets component outputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getOutputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentOutputs');\n}\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport type {CustomComponentSAComponent} from '../customComponent.component';\nimport {CustomComponentDataExtensionOptions} from '../customComponentExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class CustomComponentDataExtension extends DynamicItemExtensionBase<CustomComponentDataExtensionOptions, CustomComponentSAComponent> implements DynamicItemExtension<CustomComponentDataExtensionOptions, CustomComponentSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            await this.instance.processCustomComponentData(this.metadata.name);\n        }\n    }\n}","// import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {IdSetterExtension} from '../../misc/extensions';\nimport {CustomComponentSAComponent} from './customComponent.component';\nimport {CustomComponentDataExtension} from './extensions';\n\nexport default CustomComponentSAComponent;\n\nexport const extensions = [ComponentStylingExtension, CustomComponentDataExtension, IdSetterExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}"],"names":["ComponentInputsRelationsMetadataLoader","_ref","ComponentInputsRelationsEditorMetadata","apply","arguments","ComponentInputsRelations","constructor","injector","relationsProcessor","this","get","RelationsProcessor","componentManager","RelationsComponentManager","id","ngOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","ngOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","_this","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","__decorate","RelationsEditorMetadata","Injector","ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","customComponent","initOutputs","outputRelations","output","outputs","ɵɵinjector","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","CustomComponentLayoutMetadataLoader","_asyncToGenerator","CustomComponentLayoutEditorMetadata","CustomComponentRelationsMetadataLoader","_ref2","CustomComponentRelationsEditorMetadata","CustomComponentLayoutDesignerTypeLoader","_ref3","CustomComponentDesignerSAComponent","CustomComponentSAComponent","LayoutComponentBase","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","parentRelationsProcessor","skipSelf","parentComponentManager","layoutMetadataIterator","LayoutComponentsIteratorService","inputsRelations","outputsRelations","metadata","processCustomComponentData","_name","setId","afterInit","options","getMetadata","iterator","getIteratorFor","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","done","itm","overrideOpts","contentOptions","extend","err","return","relations","setRelations","inputsMeta","getInputs","outputsMeta","getOutputs","onChanges","onDestroy","t","selectors","standalone","features","i0","provideRelationsDebugger","provide","PlaceholderHandler","useFactory","decls","vars","consts","template","rf","ctx","LayoutComponentRendererSADirective","styles","changeDetection","DescendantsGetter","placeholderContainers","result","push","LayoutEditorDesignerType","LayoutEditorMetadata","find","package","CustomComponentDataExtension","DynamicItemExtensionBase","onInit","instance","extensions","ComponentStylingExtension","IdSetterExtension","_applyStyling","onOptionsChange","style","element","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}