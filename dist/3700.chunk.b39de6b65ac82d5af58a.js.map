{"version":3,"file":"3700.chunk.b39de6b65ac82d5af58a.js","mappings":"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","sources":["webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/../layout-relations/src/pipes/propertySelected/propertySelected.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.html","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.ts","webpack://ng-universal-demo/../layout-relations/src/directives/showCustomComponentOptions/showCustomComponentOptions.directive.ts","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.html","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.metadata.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.html","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.metadata.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/../relations-debugger/src/services/relationsDebugger/relationsDebugger.service.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/debuggerNode.metadata.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/debuggerNode.relations.ts","webpack://ng-universal-demo/../relations-debugger/src/dynamicItems/debuggerNode/type.ts","webpack://ng-universal-demo/../relations-debugger/src/services/relationsDebuggerDynamicModuleItemsProvider/relationsDebuggerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../relations-debugger/src/misc/providers.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.providers.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/../relations-debugger/src/misc/utils.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/services/demoCustomComponentsRegister/demoCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/descendantsGetter/descendantsGetter.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/liveEvents/liveEvents.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleItemsProvider/customComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleTypesProvider/customComponentsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleRelationsProvider/customComponentsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/getModel/getModel.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/propertiesMetadata/propertiesMetadata.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsRegister/customComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/decorators/debugData/debugData.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../relations/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/services/codeExecutor/codeExecutor.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.options.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsComponentManager/relationsComponentManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsDebugger/relationsDebugger.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsManager/relationsManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsDataTransferInstruction.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsProcessor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts"],"sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t79587,\n\t\t9587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t5930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService, LogLevel} from '@anglr/common';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n\n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {Pipe, PipeTransform} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets indication whether is property selected\n */\n@Pipe({name: 'propertySelected', standalone: true})\nexport class PropertySelectedSAPipe implements PipeTransform\n{\n    /**\n     * Gets indication whether is property selected\n     * @param value - Stores selected properties in their models and components\n     * @param component - Name of component\n     * @param model - Name of model\n     * @param property - Name of property\n     */\n    public transform(value: Dictionary<Dictionary<string[]>>, component: string, model: string, property: string): boolean\n    {\n        if(!value[component]?.[model])\n        {\n            return false;\n        }\n\n        return value[component][model].indexOf(property) >= 0;\n    }\n}","<div class=\"dynamic-margin-bottom-small dynamic-flex-row\">\n    <div class=\"dynamic-flex-1 dynamic-margin-right-small\">\n        <label class=\"dynamic-control-label\">{{'available content components'|firstUppercaseLocalize}}</label>\n\n        <select class=\"dynamic-form-control\" [formControl]=\"component\">\n            <option *ngFor=\"let component of contentComponents\" [value]=\"component\">{{data.customComponentContentMetadata[component]?.metadata?.displayName}}</option>\n        </select>\n    </div>\n\n    <a class=\"dynamic-btn-icon dynamic-margin-left-small dynamic-large-text\" (click)=\"addComponent()\">\n        <span class=\"fas fa-plus\"></span>\n    </a>\n</div>\n\n<div>\n    <div *ngFor=\"let component of usedProperties | keyvalue\" class=\"dynamic-margin-bottom-small\">\n        <div class=\"dynamic-bold dynamic-flex-row \">\n            <span class=\"dynamic-margin-right-small\">{{data.customComponentContentMetadata[component.key]?.metadata?.displayName}}</span>\n            \n            <a class=\"dynamic-btn-icon\" (click)=\"removeComponent(component.key)\">\n                <span class=\"fas fa-times\"></span>\n            </a>\n        </div>\n        \n        <ng-container *ngFor=\"let modelProps of availableProperties[component.key] | keyvalue\">\n            <div *ngFor=\"let prop of modelProps.value\">\n                <label>\n                    <input type=\"checkbox\" (change)=\"toggleSelected(component.key, modelProps.key, prop)\" [checked]=\"usedProperties | propertySelected: component.key: modelProps.key: prop\">\n                    <span>{{(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.name ?? prop}}</span>\n                    <span class=\"fas fa-info-circle dynamic-margin-left-extra-small\" *ngIf=\"(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.description as description\" [tooltip]=\"description\" ></span>\n                </label>\n            </div>\n        </ng-container>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"undefined\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"{configurableProperties: usedProperties, displayName: '', description: ''}\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {DialogRef} from '@angular/cdk/dialog';\nimport {CommonModule} from '@angular/common';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {FirstUppercaseLocalizeSAPipe, TooltipModule} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {CustomComponentOptionsData} from './customComponentOptions.interface';\nimport {GetModelSAPipe, PropertySelectedSAPipe, PropertiesMetadataSAPipe} from '../../pipes';\nimport {CustomComponentConfiguration} from '../../services';\n\n/**\n * Component used for displaying and editation of custom component options\n */\n@Component(\n{\n    selector: 'custom-component-options',\n    templateUrl: 'customComponentOptions.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        PropertySelectedSAPipe,\n        GetModelSAPipe,\n        PropertiesMetadataSAPipe,\n        TooltipModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    providers: [FormModelBuilder],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentOptionsSAComponent<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is used for selection of component\n     */\n    protected component: FormControl<string> = new FormControl();\n\n    /**\n     * Form for name and description of custom component\n     */\n    protected nameDescriptionForm: FormGroup<FormModelGroup<CustomComponentConfiguration>>;\n\n    /**\n     * Array of used properties for components and their models\n     */\n    protected usedProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of available properties for components and their models\n     */\n    protected availableProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of content components that are available\n     */\n    protected contentComponents: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CustomComponentOptionsData,\n                protected dialog: DialogRef<CustomComponentOptionsSAComponent<TConfig>, TConfig>,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.contentComponents = Object.keys(data.customComponentContentMetadata);\n        this.nameDescriptionForm = formModelBuilder.build<CustomComponentConfiguration>({displayName: '', description: '',});\n\n        for(const id in this.data.configuration.configurableProperties)\n        {\n            const models = this.data.configuration.configurableProperties[id];\n\n            this.usedProperties[id] ??= {};\n\n            for(const modelName in models)\n            {\n                const properties = models[modelName];\n\n                this.usedProperties[id][modelName] = [...properties];\n            }\n        }\n\n        const usedComponents = Object.keys(this.usedProperties);\n        this.contentComponents = this.contentComponents.filter(itm => usedComponents.indexOf(itm) < 0);\n\n        for(const id in data.customComponentContentMetadata)\n        {\n            const meta = data.customComponentContentMetadata[id];\n\n            if(!meta?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata)\n            {\n                continue;\n            }\n\n            for(const propMeta of meta.editorMetadata.metaInfo.optionsMetadata.propertiesMetadata)\n            {\n                const model = new propMeta.modelType(undefined);\n\n                if(!Object.keys(model).length)\n                {\n                    continue;\n                }\n\n                const modelName = propMeta.modelType.name;\n\n                this.availableProperties[id] ??= {};\n                this.availableProperties[id][modelName] ??= [];\n\n                for(const prop in model)\n                {\n                    this.availableProperties[id][modelName].push(prop);\n                }\n            }\n        }\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds component from custom component layout\n     */\n    protected addComponent(): void\n    {\n        if(!this.component.value)\n        {\n            return;\n        }\n\n        this.usedProperties[this.component.value] = {};\n        const index = this.contentComponents.indexOf(this.component.value);\n\n        if(index >= 0)\n        {\n            this.contentComponents.splice(index, 1);\n            this.component.setValue(this.contentComponents[0] ?? null);\n        }\n    }\n\n    /**\n     * Removes component options\n     * @param id - Id of component that should be removed\n     */\n    protected removeComponent(id: string): void\n    {\n        delete this.usedProperties[id];\n        this.contentComponents.push(id);\n\n        if(this.contentComponents.length == 1)\n        {\n            this.component.setValue(this.contentComponents[0]);\n        }\n    }\n\n    /**\n     * Toggle selected property in component in model\n     * @param id - Id of component to be edited\n     * @param modelName - Name of model to be edited\n     * @param propertyName - Name of property to be toggled\n     */\n    protected toggleSelected(id: string, modelName: string, propertyName: string): void\n    {\n        this.usedProperties[id] ??= {};\n        this.usedProperties[id][modelName] ??= [];\n\n        const index = this.usedProperties[id][modelName].indexOf(propertyName);\n\n        //remove\n        if(index >= 0)\n        {\n            this.usedProperties[id][modelName].splice(index, 1);\n            this.usedProperties[id][modelName] = [...this.usedProperties[id][modelName]];\n        }\n        //add\n        else\n        {\n            this.usedProperties[id][modelName] =\n            [\n                ...this.usedProperties[id][modelName],\n                propertyName,\n            ];\n        }\n    }\n}","import {Directive, ElementRef, HostListener, Injector, Input, OnChanges, OnInit} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorPropertyMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {ContentComponentData, CustomComponentOptionsData, CustomComponentOptionsSAComponent} from '../../components';\nimport {getCustomComponentMeta} from '../../misc/utils';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '../../services';\n\n/**\n * Directive that is used for displaying custom component options\n */\n@Directive(\n{\n    selector: '[showCustomComponentOptions]',\n    standalone: true,\n})\nexport class ShowCustomComponentOptionsSADirective<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> implements OnInit, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Metadata for each component in custom component\n     */\n    protected customComponentContentMetadata: Dictionary<ContentComponentData|undefined|null> = {};\n\n    /**\n     * Custom component layout metadata\n     */\n    protected customComponentMetadata: LayoutComponentMetadata|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of custom component which will be edited\n     */\n    @Input('showCustomComponentOptions')\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                protected dialogSvc: TitledDialogService,\n                protected customComponentsRegister: CustomComponentsRegister<TConfig>,\n                protected propsMetadataExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected element: ElementRef<HTMLButtonElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        if(!this.name)\n        {\n            return;\n        }\n\n        const result = (await getCustomComponentMeta(this.name, this.injector));\n\n        if(!result)\n        {\n            return;\n        }\n\n        this.customComponentContentMetadata = result.contentMetadata;\n        this.customComponentMetadata = result.metadata;\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(!this.name && !this.element.nativeElement.disabled)\n        {\n            throw new Error('Please provide name of custom component for its options');\n        }\n    }\n    \n    //######################### protected methods - host #########################\n\n    /**\n     * Shows content options selection dialog\n     * @param event - Event that occured\n     */\n    @HostListener('click', ['$event'])\n    protected async show(event: MouseEvent): Promise<void>\n    {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const result = await lastValueFrom(this.dialogSvc.open<CustomComponentOptionsSAComponent, CustomComponentOptionsData, TConfig|undefined|null>(CustomComponentOptionsSAComponent,\n        {\n            title: 'custom component options',\n            width: '75vw',\n            data:\n            {\n                customComponentContentMetadata: this.customComponentContentMetadata,\n                configuration: this.customComponentsRegister.getConfigurationForComponent(this.name ?? '') ?? {},\n                propsMetadataExtractor: this.propsMetadataExtractor,\n            }\n        }).afterClosed());\n\n        if(result)\n        {\n            await this.customComponentsRegister.setConfigurationForComponent(this.name ?? '', result);\n        }\n    }\n}","<ng-select [formControl]=\"_available\" style=\"width: 180px\">\n    <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\n    <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\n</ng-select>\n\n<button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\n    <span>remove</span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\n    <span>load</span>\n</button>\n\n<input type=\"text\" [formControl]=\"_name\">\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\n    <span>save <ng-container *ngIf=\"!(history?.saved ?? true)\">*</ng-container></span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\n    <span>new</span>\n</button>\n\n<ng-container *ngIf=\"layoutControls\">\n    <mat-slide-toggle [checked]=\"liveEvents.enabled\" (change)=\"liveEvents.setEnabled(!liveEvents.enabled)\">live events</mat-slide-toggle>\n\n    <label class=\"margin-horizontal-extra-small\" *ngIf=\"componentMarking\"><input type=\"checkbox\" [formControl]=\"_component\"> component</label>\n\n    <button type=\"button\" class=\"btn btn-primary\" [showCustomComponentOptions]=\"_available.value\" [disabled]=\"!_component.value\">CC options</button>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input, OnInit, EventEmitter, Output, OnDestroy, Inject, Optional, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {ShowCustomComponentOptionsSADirective} from '@anglr/dynamic/layout-relations';\nimport {LiveEventService} from '@anglr/dynamic/layout-editor';\nimport {extend, Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {StoreDataService} from '../../services/storeData';\nimport {DemoCustomComponentsRegister} from '../../services/demoCustomComponentsRegister';\n\n/**\n * Component used for loading saving and creating new layout/relations template\n */\n@Component(\n{\n    selector: 'load-save-new',\n    templateUrl: 'loadSaveNew.component.html',\n    styleUrls: ['loadSaveNew.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NgSelectModule,\n        CommonModule,\n        ShowCustomComponentOptionsSADirective,\n        MatSlideToggleModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadSaveNewSAComponent<TStoreMetadata = any, TMetadata = any> implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: TStoreMetadata|null = null;\n    \n    protected _available: FormControl<string> = new FormControl('');\n\n    protected _component: FormControl<boolean> = new FormControl(false);\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    @Input()\n    public store: StoreDataService<TStoreMetadata>;\n\n    @Input()\n    public history: MetadataHistoryManager|null = null;\n\n    @Input()\n    public routePath: string;\n\n    @Input()\n    public getMetadataCallback: Func<TStoreMetadata, [TMetadata]>;\n\n    @Input()\n    public componentMarking: boolean = false;\n\n    @Input()\n    public layoutControls: boolean = true;\n\n    //######################### public properties - outputs #########################\n\n    @Output()\n    public metadataChange: EventEmitter<TStoreMetadata|null> = new EventEmitter<TStoreMetadata|null>();\n\n    //######################### constructor #########################\n    constructor(private _router: Router,\n                private _route: ActivatedRoute,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<TMetadata>,\n                private _changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,\n\n                @Optional() private _customComponentsRegister?: DemoCustomComponentsRegister,\n                @Optional() private _hotkeys?: EditorHotkeys,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(this.componentMarking)\n        {\n            this._available.valueChanges.subscribe(value =>\n            {\n                if(!value)\n                {\n                    return;\n                }\n    \n                const components = this._customComponentsRegister?.getRegisteredComponents();\n    \n                this._component.setValue(components.indexOf(value) >= 0, {emitEvent: false});\n            });\n    \n            this._component.valueChanges.subscribe(() => this._customComponentsRegister?.toggleRegisteredComponent(this._available.value));\n        }\n\n        if(this._hotkeys)\n        {\n            this.initSubscriptions.add(this._hotkeys.save.subscribe(() => this._save()));\n        }\n\n        if(this.history)\n        {\n            this.initSubscriptions.add(this.history.historyChange.subscribe(() => this._changeDetector.detectChanges()));\n            this.initSubscriptions.add(this.history.pop.subscribe(() => this._changeDetector.detectChanges()));\n        }\n\n        this._availableNames = this.store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata = null;\n                this.metadataChange.next(this._metadata);\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this.store.getData(this._available.value);\n                this.metadataChange.next(this._metadata);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this.store.getData(this._available.value);\n        this.metadataChange.next(this._metadata);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate([this.routePath, this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this._saveData(this._metaManager.getMetadata());\n    }\n\n    protected _delete(): void\n    {\n        this.store.removeData(this._available.value);\n\n        this._availableNames = this.store.getStored();\n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata = null;\n        this.metadataChange.next(this._metadata);\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _saveData(metadata: TMetadata): void\n    {\n        const data = this.store.getData(this._name.value) ?? {};\n        this.history?.save();\n\n        this.store.setData(this._name.value, extend(data, this.getMetadataCallback(metadata)));\n\n        this._availableNames = this.store.getStored();\n        this._changeDetector.detectChanges();\n        this._router.navigate([this.routePath, this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations result relations metadata loader\n */\nexport const RelationsResultRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsResult.relationsMetadata')).RelationsResultRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Input, ChangeDetectorRef, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsResultRelationsMetadataLoader} from './relationsResult.metadata';\n\n/**\n * Component used for displaying result binding of relations\n */\n@Component(\n{\n    selector: 'relations-result',\n    templateUrl: 'relationsResult.component.html',\n    // styleUrls: ['relationsResult.component.scss'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsResultRelationsMetadataLoader)\nexport class RelationsResultSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-result';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsResultSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsResultSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsResultSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil v result', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations sample click relations metadata loader\n */\nexport const RelationsSampleClickRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsSampleClick.relationsMetadata')).RelationsSampleClickRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, ChangeDetectorRef, Input, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {DynamicOutput, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsSampleClickRelationsMetadataLoader} from './relationsSampleClick.metadata';\n\n/**\n * Sample relations click component\n */\n@Component(\n{\n    selector: 'relations-sample-click',\n    templateUrl: 'relationsSampleClick.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsSampleClickRelationsMetadataLoader)\nexport class RelationsSampleClickSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-sample-click';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Defines form control for vystup value\n     */\n    protected _vystupForm: FormControl<string> = new FormControl<string>('');\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Test output\n     */\n    @DynamicOutput()\n    public vystup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n        this._vystupForm.valueChanges.subscribe(value => this.vystup = value);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsSampleClickSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsSampleClickSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsSampleClickSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>\n<div>\n    <input type=\"text\" [formControl]=\"_vystupForm\">\n</div>","import {isFunction, isBlank, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\nglobalDefine(global =>\n{\n    if(!global.Document)\n    {\n        global.Document = function(){};\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        // group(\n        // [\n        //     query('.loading-card', \n        //     [\n        //         animate('300ms', style(\n        //         {\n        //             transform: 'scale(4)'\n        //         }))\n        //     ]),\n        //     animate('200ms 100ms', style(\n        //     {\n        //         opacity: 0\n        //     }))\n            \n        // ])\n    ])\n]);","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div class=\"flex-row\">\r\n    <a routerLink=\"/layout/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Preview</a>\r\n    <a routerLink=\"/layout/editor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Editor</a>\r\n    <a routerLink=\"/relationsEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations editor</a>\r\n    <a routerLink=\"/relationsStatic\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations</a>\r\n    <a routerLink=\"/relationsWithEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with editor</a>\r\n    <a routerLink=\"/relationsWithLayoutEditor/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with layout editor</a>\r\n    <a routerLink=\"/relationsComplex/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations complex</a>\r\n    <a routerLink=\"/relationsLayoutForm/form-preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations form</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<!-- <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\"> -->\r\n<div class=\"content relative\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {CommonModule, DOCUMENT} from '@angular/common';\nimport {RouterModule, RouterOutlet} from '@angular/router';\nimport {ConsoleSAComponent, LOGGER, Logger, ProgressIndicatorModule, consoleAnimationTrigger} from '@anglr/common';\nimport {AppHotkeysService, HotkeysCheatsheetSAComponent} from '@anglr/common/hotkeys';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Subscription} from 'rxjs';\nimport {Hotkey} from 'angular2-hotkeys';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\nimport {MenuModule} from '../modules';\n\n/**\n * Application entry component\n */\n@Component(\n    {\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RouterModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule,\n        MenuModule,\n        ConsoleSAComponent,\n        HotkeysCheatsheetSAComponent,\n    ],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    })\nexport class AppSAComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, null, 'Show console'));\n        }\n    }\n}","import {inject, Injectable, Injector} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {getDebugData, RelationsComponentEndpoints, RelationsComponentManager, RelationsComponentStateDebugInfo, RelationsDataTransferDebugInfo, RelationsDataTransferIdDebugInfo, RelationsDataTransferInstructionImpl, RelationsDebugger, RelationsOutputDebugInfo, RelationsProcessorComponent, RelationsProcessorComponentData, RelationsProcessorInputOutputData, RelationsStepDebugInfo} from '@anglr/dynamic/relations';\nimport {Dictionary, extend, generateId, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst COMPONENT_DEBUGGER_PROPERTY = 'COMPONENT_DEBUGGER_PROPERTY';\n\n//TODO: maybe reset steps on change of init\n\n/**\n * Service used for debugging relations\n */\n@Injectable()\nexport class RelationsDebuggerImpl extends RelationsDebugger\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of Angular injector\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger|undefined|null = inject(LOGGER, {optional: true});\n\n    /**\n     * Instance of relations component manager\n     */\n    protected ɵrelationsComponentManager: RelationsComponentManager|undefined|null;\n\n    /**\n     * Used for emitting changes in current step index\n     */\n    protected stepChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Current step index for previewing of data\n     */\n    protected currentStepIndex: number = 0;\n\n    /**\n     * Registered components by id and their internal ids for each step\n     */\n    protected components: Dictionary<string[]>[] = [];\n\n    /**\n     * Array of steps recorded by debugger\n     */\n    protected steps: RelationsStepDebugInfo[] = [];\n\n    /**\n     * Definition of component endpoints\n     */\n    protected componentDefs: Dictionary<RelationsComponentEndpoints> = {};\n\n    /**\n     * Gets instance of relations component manager\n     */\n    protected get relationsComponentManager(): RelationsComponentManager\n    {\n        return (this.ɵrelationsComponentManager ??= this.injector.get(RelationsComponentManager));\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when current step index changes\n     */\n    public get stepChange(): Observable<void>\n    {\n        return this.stepChangeSubject.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public initialize(relations: Dictionary<RelationsProcessorComponentData>, backwardRelations: Dictionary<RelationsProcessorInputOutputData[]>): void\n    {\n        const addInputOutput = (inputOutput: RelationsProcessorInputOutputData) =>\n        {\n            this.addOutputDef(inputOutput.outputComponentId, inputOutput.outputName);\n            this.addInputDef(inputOutput.inputComponentId, inputOutput.inputName);\n        };\n\n        for(const id in relations)\n        {\n            const def = relations[id];\n\n            for(const inputOutput of def.inputOutputs ?? [])\n            {\n                addInputOutput(inputOutput);\n            }\n        }\n\n        for(const id in backwardRelations)\n        {\n            const def = backwardRelations[id];\n\n            for(const inputOutput of def)\n            {\n                addInputOutput(inputOutput);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        this.tryToGetEndpoints(id, component);\n\n        let components = this.getLastComponents();\n\n        if(components[id] && components[id].indexOf(component.ɵɵRelationsComponentId ?? '') >= 0)\n        {\n            this.logger?.warn('RelationsDebugger: component \"{{@id}}\" has already been registered', {id: `${id}--${component.ɵɵRelationsComponentId}`});\n\n            return;\n        }\n\n        this.components.push(extend(true, {}, components));\n        components = this.getLastComponents();\n\n        components[id] ??= [];\n        components[id].push(component.ɵɵRelationsComponentId ?? '');\n\n        //update component for debugging info\n        if(!Reflect.getOwnPropertyDescriptor(component, COMPONENT_DEBUGGER_PROPERTY))\n        {\n            Reflect.defineProperty(component,\n                                   COMPONENT_DEBUGGER_PROPERTY,\n                                   {\n                                       configurable: true,\n                                       enumerable: false,\n                                       writable: false,\n                                       value: true,\n                                   });\n\n            let obj: object|undefined|null = component;\n            let property: PropertyDescriptor|undefined|null;\n\n            do\n            {\n                if((property = Reflect.getOwnPropertyDescriptor(obj, nameof<RelationsProcessorComponent>('relationsOptions'))))\n                {\n                    break;\n                }\n            }\n            while((obj = Reflect.getPrototypeOf(obj)));\n\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const $this = this;\n\n            //property exists\n            if(property)\n            {\n                const getter = property.get;\n                const setter = property.set;\n\n                if(!getter || !setter)\n                {\n                    throw new Error('RelationsDebugger: relations options property must have getter and setter!');\n                }\n\n                Reflect.defineProperty(component,\n                                       nameof<RelationsProcessorComponent>('relationsOptions'),\n                                       {\n                                           configurable: true,\n                                           enumerable: false,\n                                           get: function()\n                                           {\n                                               return getter.call(this);\n                                           },\n                                           set: function(value)\n                                           {\n                                               setter.call(this, value);\n\n                                               $this.tryToGetEndpoints(id, component);\n                                               $this.readComponentState(id);\n                                               $this.setComponentRelationsOptions(id, value);\n                                           }\n                                       });\n            }\n            else\n            {\n                Reflect.defineProperty(component,\n                                       nameof<RelationsProcessorComponent>('relationsOptions'),\n                                       {\n                                           configurable: true,\n                                           enumerable: false,\n                                           get: function()\n                                           {\n                                               return this['ɵrelationsOptions'];\n                                           },\n                                           set: function(value)\n                                           {\n                                               this['ɵrelationsOptions'] = value;\n\n                                               $this.tryToGetEndpoints(id, component);\n                                               $this.readComponentState(id);\n                                               $this.setComponentRelationsOptions(id, value);\n                                           }\n                                       });\n            }\n        }\n\n        this.steps.push(\n        {\n            timestamp: Date.now(),\n            componentRegistration:\n            {\n                componentId: id,\n                componentInternalId: component.ɵɵRelationsComponentId ?? '',\n            },\n            componentState: null,\n            componentUnregistration: null,\n            dataTransfer: null,\n            componentRelationsOptions: null,\n            previousStep: this.getLastStepData(),\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public unregisterComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        let index: number;\n        let components = this.getLastComponents();\n\n        if(!components[id] || (index = components[id].indexOf(component.ɵɵRelationsComponentId ?? '')) < 0)\n        {\n            this.logger?.warn('RelationsDebugger: component \"{{@id}}\" does not exists!', {id: `${id}--${component.ɵɵRelationsComponentId}`});\n\n            return;\n        }\n\n        this.components.push(extend(true, {}, components));\n        components = this.getLastComponents();\n\n        components[id].splice(index, 1);\n\n        if(!components[id].length)\n        {\n            delete components[id];\n        }\n\n        //update component for debugging info\n        if(Reflect.getOwnPropertyDescriptor(component, COMPONENT_DEBUGGER_PROPERTY))\n        {\n            Reflect.deleteProperty(component, COMPONENT_DEBUGGER_PROPERTY);\n            Reflect.deleteProperty(component, nameof<RelationsProcessorComponent>('relationsOptions'));\n        }\n\n        this.steps.push(\n        {\n            timestamp: Date.now(),\n            componentRegistration: null,\n            componentState: null,\n            componentUnregistration:\n            {\n                componentId: id,\n                componentInternalId: component.ɵɵRelationsComponentId ?? '',\n            },\n            dataTransfer: null,\n            componentRelationsOptions: null,\n            previousStep: this.getLastStepData(),\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public transferData(transfer: RelationsDataTransferInstructionImpl&Partial<RelationsDataTransferIdDebugInfo>, options: RelationsDataTransferDebugInfo): void\n    {\n        transfer.ɵuniqueId ??= generateId(16);\n\n        const applyChangesOriginal = transfer.applyChanges;\n\n        transfer.applyChanges = (() =>\n        {\n            applyChangesOriginal.call(transfer);\n\n            const components = this.getLastComponents();\n            this.components.push(extend(true, {}, components));\n\n            this.steps.push(\n            {\n                timestamp: Date.now(),\n                componentRegistration: null,\n                componentState: null,\n                componentUnregistration: null,\n                dataTransfer:\n                {\n                    change: transfer.changes[options.inputName],\n                    inputComponentId: options.inputComponentId,\n                    inputName: options.inputName,\n                    outputComponentId: options.outputComponentId,\n                    outputName: options.outputName,\n                    scope: options.scope,\n                    ɵuniqueId: transfer.ɵuniqueId ?? '',\n                },\n                componentRelationsOptions: null,\n                previousStep: this.getLastStepData(),\n            });\n\n            this.readComponentState(options.inputComponentId);\n            this.readComponentState(options.outputComponentId);\n\n            const step = this.getLastStepData();\n\n            if(!step)\n            {\n                throw Error('RelationsDebugger: no step available!');\n            }\n\n            if(step.componentState)\n            {\n                for(const comp of step.componentState[options.inputComponentId])\n                {\n                    comp.inputs[options.inputName] = step.dataTransfer?.change.currentValue;\n                }\n            }\n        }).bind(transfer);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getCurrentComponents(): Dictionary<string[]>\n    {\n        if(!this.components.length)\n        {\n            return {};\n        }\n\n        return this.components[this.currentStepIndex];\n    }\n\n    /**\n     * Gets component definition\n     * @param id - Id of component which definition will be obtained\n     */\n    public getComponentDef(id: string): RelationsComponentEndpoints|null\n    {\n        return this.componentDefs[id] ?? null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getComponentState(id: string): RelationsComponentStateDebugInfo[]\n    {\n        let step: RelationsStepDebugInfo|undefined|null = this.getCurrentStep();\n\n        if(!step)\n        {\n            return [];\n        }\n\n        do\n        {\n            if(step.componentState?.[id])\n            {\n                return step.componentState[id];\n            }\n        }\n        while((step = step.previousStep));\n\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getComponentRelationsOptions(id: string): unknown\n    {\n        let step: RelationsStepDebugInfo|undefined|null = this.getCurrentStep();\n\n        if(!step)\n        {\n            return undefined;\n        }\n\n        do\n        {\n            if(step.componentRelationsOptions?.[id])\n            {\n                return step.componentRelationsOptions[id];\n            }\n        }\n        while((step = step.previousStep));\n\n        return undefined;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getLastStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || (this.steps.length - 1) == this.currentStepIndex)\n        {\n            return null;\n        }\n\n        this.currentStepIndex = this.steps.length - 1;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getFirstStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || this.currentStepIndex == 0)\n        {\n            return null;\n        }\n\n        this.currentStepIndex = 0;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getNextStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || (this.steps.length - 1) == this.currentStepIndex)\n        {\n            return null;\n        }\n\n        this.currentStepIndex++;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getPreviousStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length || this.currentStepIndex == 0)\n        {\n            return null;\n        }\n\n        this.currentStepIndex--;\n        this.stepChangeSubject.next();\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getCurrentStep(): RelationsStepDebugInfo|null\n    {\n        if(!this.steps.length)\n        {\n            return null;\n        }\n\n        return this.steps[this.currentStepIndex];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clearSteps(): void\n    {\n        this.currentStepIndex = 0;\n        this.stepChangeSubject.next();\n\n        this.steps = [];\n        this.components = [];\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Reads component state\n     * @param id - Id of component which state is read\n     */\n    protected readComponentState(id: string): void\n    {\n        let components = this.relationsComponentManager.get(id);\n\n        if(!components)\n        {\n            this.logger?.warn('RelationsDebugger: unable to find component with id {{@id}}', {id});\n\n            return;\n        }\n\n        if(!Array.isArray(components))\n        {\n            components = [components];\n        }\n\n        const state: RelationsComponentStateDebugInfo[] = components.map(itm =>\n        {\n            const def = this.componentDefs[id];\n            const itmDict = itm as unknown as Dictionary;\n\n            const inputs: Dictionary = {};\n            const outputs: Dictionary<RelationsOutputDebugInfo> = {};\n\n            if(def)\n            {\n                for(const input of def.inputs)\n                {\n                    try\n                    {\n                        inputs[input] = itmDict[input];\n                    }\n                    catch(e)\n                    {\n                        this.logger?.warn(`RelationsDebugger: failed reading input '${input}', {{@error}}`, {error: e});\n\n                        inputs[input] = undefined;\n                    }\n                }\n\n                for(const output of def.outputs)\n                {\n                    try\n                    {\n                        outputs[output] ??=\n                        {\n                            assigned: undefined,\n                            skipInit: undefined,\n                            value: undefined,\n                        };\n\n                        outputs[output].value = itmDict[output];\n                        outputs[output].assigned = itmDict[`${output}Assigned`] as boolean|undefined;\n                        outputs[output].skipInit = itmDict[`${output}SkipInit`] as boolean|undefined;\n                    }\n                    catch(e)\n                    {\n                        this.logger?.warn(`RelationsDebugger: failed reading output '${output}', {{@error}}`, {error: e});\n\n                        outputs[output] =\n                        {\n                            assigned: undefined,\n                            skipInit: undefined,\n                            value: undefined,\n                        };\n                    }\n                }\n            }\n\n            return {\n                componentId: id,\n                componentInternalId: itm.ɵɵRelationsComponentId ?? '',\n                inputs,\n                outputs,\n            };\n        });\n\n        const step = this.getLastStepData();\n\n        if(!step)\n        {\n            throw Error('RelationsDebugger: no step available!');\n        }\n\n        step.componentState ??= {};\n        step.componentState[id] = state;\n    }\n\n    /**\n     * Sets component relations options\n     * @param id - Id of component which state is read\n     * @param relationsOptions - Instance of relations options to be set\n     */\n    protected setComponentRelationsOptions(id: string, relationsOptions: unknown): void\n    {\n        const step = this.getLastStepData();\n\n        if(!step)\n        {\n            throw Error('RelationsDebugger: no step available!');\n        }\n\n        step.componentRelationsOptions ??= {};\n        step.componentRelationsOptions[id] = relationsOptions;\n    }\n\n    /**\n     * Gets last step\n     */\n    protected getLastStepData(): RelationsStepDebugInfo|undefined|null\n    {\n        return this.steps.length > 0 ? this.steps[this.steps.length - 1] : null;\n    }\n\n    /**\n     * Gets last components\n     */\n    protected getLastComponents(): Dictionary<string[]>\n    {\n        if(!this.components.length)\n        {\n            return {};\n        }\n\n        return this.components[this.components.length - 1];\n    }\n\n    /**\n     * Tries to get endpoints for component\n     * @param id - Id of component whose endpoints are going to be obtained\n     * @param component - Component which endpoints are going to be obtained\n     */\n    protected tryToGetEndpoints(id: string, component: RelationsProcessorComponent): void\n    {\n        const debugData = getDebugData((Reflect.getPrototypeOf(component) as Object).constructor);\n\n        if(!debugData)\n        {\n            return;\n        }\n\n        if(debugData.inputs)\n        {\n            for(const input of debugData.inputs)\n            {\n                this.addInputDef(id, input);\n            }\n        }\n\n        if(debugData.outputs)\n        {\n            for(const output of debugData.outputs)\n            {\n                this.addOutputDef(id, output);\n            }\n        }\n\n        if(debugData.dynamicEndpointsGetter)\n        {\n            const inputsOutputsDef = debugData.dynamicEndpointsGetter(component, component.ɵɵinjector ?? this.injector);\n\n            for(const input of inputsOutputsDef.inputs)\n            {\n                this.addInputDef(id, input);\n            }\n\n            for(const output of inputsOutputsDef.outputs)\n            {\n                this.addOutputDef(id, output);\n            }\n        }\n    }\n\n    /**\n     * Adds input for component def\n     * @param id - Id of component whose input definition will be added\n     * @param input - Input name to be added\n     */\n    protected addInputDef(id: string, input: string): void\n    {\n        this.componentDefs[id] ??= \n        {\n            inputs: [],\n            outputs: [],\n        };\n\n        if(this.componentDefs[id].inputs.indexOf(input) < 0)\n        {\n            this.componentDefs[id].inputs.push(input);\n        }\n    }\n\n    /**\n     * Adds output for component def\n     * @param id - Id of component whose output definition will be added\n     * @param output - Output name to be added\n     */\n    protected addOutputDef(id: string, output: string): void\n    {\n        this.componentDefs[id] ??= \n        {\n            inputs: [],\n            outputs: [],\n        };\n\n        if(this.componentDefs[id].outputs.indexOf(output) < 0)\n        {\n            this.componentDefs[id].outputs.push(output);\n        }\n    }\n}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Debugger node relations metadata loader\n */\nexport const DebuggerNodeRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/debuggerNode.relationsMetadata')).DebuggerNodeRelationsEditorMetadata();\n","import {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {PureRelationsComponent} from '@anglr/dynamic/relations';\n\nimport {DebuggerNodeRelationsMetadataLoader} from './debuggerNode.metadata';\n\n/**\n * Debugger node relations component, not real relations\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(DebuggerNodeRelationsMetadataLoader)\nexport class DebuggerNodeRelations\n{\n}","import {DebuggerNodeRelations} from './debuggerNode.relations';\n\nexport default DebuggerNodeRelations;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport * as debuggerNode from '../../dynamicItems/debuggerNode/type';\n\n/**\n * Dynamic module items provider for relations debugger module items\n */\n@Injectable()\nexport class RelationsDebuggerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'relations-debugger':\n            {\n                return debuggerNode;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {RelationsDebuggerDynamicModuleItemsProvider} from '../services';\n\n/**\n * Provider for relations debugger package relations nodes provider\n */\nexport const RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: RelationsDebuggerDynamicModuleItemsProvider,\n    multi: true\n};\n","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Routes} from '@angular/router';\nimport {extractRoutes} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const routes: Routes =\n[\n    {\n        path: '',\n        redirectTo: '/layout/preview',\n        pathMatch: 'full'\n    },\n    {\n        path: 'layout',\n        loadChildren: () => import('../pages/+layout/layout.module').then(({LayoutModule}) => LayoutModule)\n    },\n    {\n        path: 'layout',\n        loadChildren: () => import('../pages/+layoutEditor/layoutEditor.module').then(({LayoutEditorModule}) => LayoutEditorModule)\n    },\n    {\n        path: 'relationsStatic',\n        loadChildren: () => import('../pages/+relationsStatic/relationsStatic.module').then(({RelationsStaticModule}) => RelationsStaticModule)\n    },\n    {\n        path: 'relationsEditor',\n        loadChildren: () => import('../pages/+relationsEditor/relationsEditor.module').then(({RelationsEditorModule}) => RelationsEditorModule)\n    },\n    {\n        path: 'relationsWithEditor',\n        loadChildren: () => import('../pages/+relationsWithEditor/relationsWithEditor.module').then(({RelationsWithEditorModule}) => RelationsWithEditorModule)\n    },\n    {\n        path: 'relationsWithLayoutEditor',\n        loadChildren: () => import('../pages/+relationsWithLayoutEditor/relationsWithLayoutEditor.module').then(({RelationsWithLayoutEditorModule}) => RelationsWithLayoutEditorModule)\n    },\n    {\n        path: 'relationsComplex',\n        loadChildren: () => import('../pages/+relationsComplex/relationsComplex.module').then(({RelationsComplexModule}) => RelationsComplexModule)\n    },\n    {\n        path: 'relationsLayoutForm',\n        loadChildren: () => import('../pages/+relationsLayoutForm/relationsLayoutForm.module').then(({RelationsLayoutFormModule}) => RelationsLayoutFormModule)\n    },\n    ...extractRoutes(\n        [\n        ]),\n    accessDeniedRoute,\n    notFoundRoute,\n];","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'en';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return new Observable((observer: Observer<any>) =>\n        {\n            (async () => \n            {\n                const result = await import(`../../../content/l10n/${lang}.json`);\n\n                observer.next(result.default);\n                observer.complete();\n            })();\n        });\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, Provider, ExistingProvider, EnvironmentProviders, inject, importProvidersFrom, provideZoneChangeDetection} from '@angular/core';\nimport {provideClientHydration} from '@angular/platform-browser';\nimport {provideHttpClient, withInterceptorsFromDi} from '@angular/common/http';\nimport {provideRouter, withComponentInputBinding, withHashLocation} from '@angular/router';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LocalPermanentStorage} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS, providePosition, provideLoggerConfig, DeveloperConsoleSink, LogLevelEnricher, TimestampEnricher, LogLevel, ConsoleComponentSink} from '@anglr/common';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, handle404Func, HttpClientErrorResponseMapper, HttpClientValidationErrorResponseMapper, HTTP_CLIENT_ERROR_RESPONSE_MAPPER, HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER, RestNotFoundError} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, GRID_INITIALIZER_TYPE, GRID_INITIALIZER_OPTIONS, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent} from '@anglr/grid';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {ConfirmationDialogOptions, CONFIRMATION_DIALOG_OPTIONS, MovableTitledDialogComponent, TitledDialogServiceOptions, TitledDialogService} from '@anglr/common/material';\nimport {FloatingUiDomPosition} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {ClientErrorHandlingMiddleware, HttpClientErrorCustomHandlerDef, HTTP_CLIENT_ERROR_CUSTOM_HANDLER, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {provideGlobalNotifications} from '@anglr/notifications';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {ReportProgressMiddleware, ResponseTypeMiddleware, REST_METHOD_MIDDLEWARES} from '@anglr/rest';\nimport {DATETIME_REST_DATE_API} from '@anglr/rest/datetime';\nimport {provideRelationsDebuggerImplementation} from '@anglr/dynamic/relations-debugger';\nimport {isString, isJsObject} from '@jscrpt/common';\nimport {MissingTranslationHandler, TranslateLoader, TranslateModule} from '@ngx-translate/core';\nimport {DndModule} from '@ng-dnd/core';\nimport {sk} from 'date-fns/locale';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\n\nimport {routes} from './app.component.routes';\nimport {config} from '../config';\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n/**\n * Array of providers that are used in app module\n */\nexport const appProviders: (Provider|EnvironmentProviders)[] =\n[\n    //######################### ROUTER #########################\n    provideRouter(routes,\n                  withComponentInputBinding(),\n                  withHashLocation()),\n\n    //######################### CLIENT HYDRATION #########################\n    provideClientHydration(),\n\n    //######################### HTTP CLIENT #########################\n    provideHttpClient(withInterceptorsFromDi(),),\n\n    //######################### ZONE #########################\n    provideZoneChangeDetection({eventCoalescing: true, runCoalescing: true}),\n\n    //######################### TRANSLATIONS #########################\n    importProvidersFrom(TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n        {\n            provide: TranslateLoader, \n            useClass: WebpackTranslateLoaderService\n        },\n            ...config.configuration.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                {\n                    provide: MissingTranslationHandler,\n                    useClass: ReportMissingTranslationService\n                }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration.debugTranslations\n        })),\n\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new NoConnectionInterceptorOptions('Server je mimo prevádzky.'),\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.'),\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### ERROR HANDLING #########################\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions>\n        {\n            texts:\n            {\n                loading: 'Nahrávam dáta ...',\n                noData: 'Neboli nájdené dáta odpovedajúce zadaným parametrom',\n                notLoaded: 'Neboli načítané žiadne dáta zatiaľ'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_TYPE,\n        useValue: QueryGridInitializerComponent\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_OPTIONS,\n        useValue: <QueryPermanentStorageGridInitializerOptions>\n        {\n            storageIppName: 'all-grid-ipp'\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    //TODO\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    //TODO\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorage\n    },\n\n    //######################### LOGGER #########################\n    provideLoggerConfig(config => config\n        .writeTo(cfg => cfg.writeTo(ConsoleComponentSink)\n            .minimumLevel(() =>\n            {\n                const settings = inject(SettingsService);\n\n                return () => LogLevel[settings.settingsLogging.consoleLogLevel as keyof typeof LogLevel];\n            }))\n        .writeTo(DeveloperConsoleSink)\n        .enrichWith(LogLevelEnricher)\n        .enrichWith(TimestampEnricher)\n        .minimumLevel(LogLevel.Verbose)\n        .messageTemplate('{{timestamp}} [{{logLevel}}] {{messageLog}}')),\n\n    //######################### SETTINGS STORAGE #########################\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: () =>\n        {\n            const settingsSvc: SettingsService = inject(SettingsService);\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    provideGlobalNotifications(),\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n    importProvidersFrom(MatDialogModule),\n    TitledDialogService,\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    <ValueProvider>\n    {\n        provide: CONFIRMATION_DIALOG_OPTIONS,\n        useValue: <ConfirmationDialogOptions>\n        {\n            confirmationText: 'Prajete si pokračovať?',\n            dialogCancelText: 'Nie',\n            dialogConfirmText: 'Áno'\n        }\n    },\n\n    //######################### POSITION #########################\n    providePosition(FloatingUiDomPosition),\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    DATETIME_REST_DATE_API,\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    <ValueProvider>\n    {\n        provide: REST_METHOD_MIDDLEWARES,\n        useValue:\n        [\n            ResponseTypeMiddleware,\n            ReportProgressMiddleware,\n            ClientErrorHandlingMiddleware,\n        ]\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientErrorResponseMapper>(err => \n        {\n            if(err?.error?.errors)\n            {\n                return err?.error?.errors;\n            }\n\n            if(isString(err?.error))\n            {\n                return [err?.error];\n            }\n\n            if(isJsObject(err?.error))\n            {\n                return [JSON.stringify(err?.error)];\n            }\n            \n            return [err.message];\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientValidationErrorResponseMapper>(err => \n        {\n            if(err?.error?.validationErrors)\n            {\n                return err?.error?.validationErrors;\n            }\n\n            return null;\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_CUSTOM_HANDLER,\n        useValue: <Record<number, HttpClientErrorCustomHandlerDef>>\n        {\n            404: [handle404Func, error => new RestNotFoundError(error.errors)],\n        },\n    },\n    provideRelationsDebuggerImplementation(),\n    importProvidersFrom(DndModule.forRoot(\n        {\n            backend: HTML5Backend\n        })),\n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Provider} from '@angular/core';\nimport {RELATIONS_DEBUGGER_TYPE} from '@anglr/dynamic/relations';\nimport {DEFAULT_RELATIONS_NODES_EXTRACTOR, RELATIONS_NODES_LOADER_PROVIDER} from '@anglr/dynamic/relations-editor';\n\nimport {RelationsDebuggerImpl} from '../services';\nimport {RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER} from './providers';\n\n/**\n * Provides relations debugger implementation\n */\nexport function provideRelationsDebuggerImplementation(): Provider[]\n{\n    return [\n        RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        {\n            provide: RELATIONS_DEBUGGER_TYPE,\n            useValue: RelationsDebuggerImpl,\n        },\n    ];\n}","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {EnvironmentProviders, FactoryProvider, Provider, enableProdMode, importProvidersFrom} from '@angular/core';\nimport {provideAnimations} from '@angular/platform-browser/animations';\nimport {bootstrapApplication} from '@angular/platform-browser';\nimport {runWhenAppStable} from '@anglr/common';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {simpleNotification} from '@jscrpt/common';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {AppSAComponent} from './boot/app.component';\nimport {config} from './config';\nimport {appProviders} from './boot/app.providers';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst providers: (Provider|EnvironmentProviders)[] =\n[\n    ...appProviders,\n    provideAnimations(),\n    <FactoryProvider>\n    {\n        provide: AnglrExceptionHandlerOptions,\n        useFactory: () => new AnglrExceptionHandlerOptions(config.configuration.debug, false)\n    },\n    importProvidersFrom(HotkeyModule.forRoot(\n    {\n        cheatSheetCloseEsc: true\n    })),\n];\n\nrunWhenAppStable(bootstrapApplication(AppSAComponent, {providers}), appRef =>\n{\n    appRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n    jsDevMode && simpleNotification(jsDevMode && !!import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule} from '@anglr/common';\nimport {NumeralSAPipe} from '@anglr/common/numeral';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    imports:\n    [\n        NumeralSAPipe\n    ],\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralSAPipe,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'DEMO_CUSTOM_COMPONENTS';\n\n/**\n * Demo custom components register\n */\n@Injectable()\nexport class DemoCustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> extends CustomComponentsRegister<TConfig>\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(customComponents[name])\n        {\n            delete customComponents[name];\n        }\n        else\n        {\n            customComponents[name] = {} as TConfig;\n        }\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return Object.keys(this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override getConfigurationForComponent(name: string): TConfig|undefined|null\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return null;\n        }\n\n        return customComponents[name];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override setConfigurationForComponent(name: string, config: TConfig): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return;\n        }\n\n        customComponents[name] = config;\n        \n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}","import {Type} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Func1} from '@jscrpt/common';\n\n/**\n * Symbol used for storing descendants getter\n */\nconst descendantsGetterSymbol = Symbol('descendantsGetter');\n\n/**\n * Defines function for dynamic component which is used for obtaining its descendants\n * @param descendantsGetterFn - Function used for obtaining descendants of dynamic component\n */\nexport function DescendantsGetter<TOptions = unknown>(descendantsGetterFn: Func1<LayoutComponentMetadata[], TOptions|undefined|null>): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        Object.defineProperty(target,\n                              descendantsGetterSymbol,\n                              {\n                                  writable: false,\n                                  configurable: false,\n                                  enumerable: false,\n                                  value: descendantsGetterFn,\n                              });\n\n        return target;\n    };\n}\n\n/**\n * Gets descendants getter if is set\n * @param type - Type which could contains descendants getter\n */\nexport function getDescendantsGetter<TOptions = unknown>(type: Type<unknown>): Func1<LayoutComponentMetadata[], TOptions|undefined|null>|undefined|null\n{\n    if(descendantsGetterSymbol in type)\n    {\n        return (type as any)[descendantsGetterSymbol];\n    }\n\n    return null;\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {{@item}}', {item: {name: source.name, package: source.package}});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {{@item}} was not found, reason:' + e, {item: {name: source.name, package: source.package}});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {{@item}} was not found', {item: {name: source.name, package: source.package}});\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemEditorData, DynamicItemExtensions, DynamicModule, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithEditorData extends DynamicModule\n{\n    /**\n     * Display name of custom component\n     */\n    displayName?: string;\n\n    /**\n     * Description for custom component\n     */\n    description?: string;\n\n    /**\n     * Group of custom component\n     */\n    group?: string;\n}\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions&DynamicItemEditorData> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n    const localModuleEditorData = module as ɵDynamicModuleWithEditorData;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            displayName: localModuleEditorData?.displayName,\n            description: localModuleEditorData?.description,\n            group: localModuleEditorData?.group,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying textarea\n */\n@Component(\n{\n    selector: 'textarea-input',\n    templateUrl: 'textarea.component.html',\n    styles: [HostDisplayBlockStyle],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TextareaComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<textarea class=\"properties-form-control\" [formControl]=\"_control | asRequired\"></textarea>","import {InjectionToken, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\nimport {TextareaComponent} from '../modules/propertyTypeControls/components/textarea/textarea.component';\nimport {InputNumberComponent} from '../modules/propertyTypeControls/components/inputNumber/inputNumber.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                                 'textarea': TextareaComponent,\n                                                                                                                                                                                 'inputNumber': InputNumberComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n\n/**\n * Injection token for observables that allows refreshing of components palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for layout defaults override\n */\nexport const LAYOUT_DEFAULTS_OVERRIDE: InjectionToken<DefaultsOverride> = new InjectionToken<DefaultsOverride>('LAYOUT_DEFAULTS_OVERRIDE');\n","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor, LiveEventService} from '../services';\nimport {LAYOUT_DEFAULTS_OVERRIDE} from './tokens';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LiveEventService,\n        LayoutComponentsIteratorService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n    ];\n}\n\n/**\n * Provider for layout defaults override\n * @param defaultsOverride - Service to pride as layout defaults override\n */\nexport function provideLayoutDefaultsOverride(defaultsOverride: Type<DefaultsOverride>): Provider\n{\n    return <ClassProvider>{\n        provide: LAYOUT_DEFAULTS_OVERRIDE,\n        useClass: defaultsOverride\n    };\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"properties-form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this.initPromise ??= this.getInitPromise());\n\n        for(const item of this.items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async getComponents(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        \n        this.items.push(iteratorItem);\n\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsIterator: failed to get dynamic component type for iterator! {{@data}}', {data: {package: metadata.package, name: metadata.name}});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this.getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getComponents();\n        }\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get dynamic component type for children iterator! {{@data}}', {data: {package: metadata.package, name: metadata.name}});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.loader, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.loader, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {EditorHotkeys, MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, extend, generateId, isBlank} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Clipboard for layout metadata copy/paste/cut operations\n     */\n    protected metadataClipboard: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected layoutChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    /**\n     * Id of dragged over component\n     */\n    protected _draggedOverComponent: string|null = null;\n\n    /**\n     * Used for emitting dragged over component changes\n     */\n    protected _draggedOverComponentChange: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets id of dragged over component\n     */\n    public get draggedOverComponent(): string|null\n    {\n        return this._draggedOverComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this.layoutChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Occurs when dragged over component changes\n     */\n    public get draggedOverComponentChange(): Observable<void>\n    {\n        return this._draggedOverComponentChange.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(protected _editorHotkeys: EditorHotkeys,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        this.initSubscriptions.add(this._editorHotkeys.delete.subscribe(() => \n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.copy.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            this.metadataClipboard = component.component.options?.typeMetadata;\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.cut.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            this.metadataClipboard = component.component.options?.typeMetadata;\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.paste.subscribe(() =>\n        {\n            if(!this.selectedComponent || !this.metadataClipboard)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            const newId = `${this.metadataClipboard.name}-${generateId(12)}`;\n\n            if(component.component.canDrop)\n            {\n                component.component.addDescendant(\n                {\n                    index: 0,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n            else if(component.parent?.component.canDrop)\n            {\n                component.parent.component.addDescendant(\n                {\n                    index: component.component.index + 1,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    \n    /**\n     * Mark component as being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public dragOverComponent(id?: string): void\n    {\n        if (id === this._draggedOverComponent)\n        {\n            return;\n        }\n\n        this._draggedOverComponent = id ?? null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Removes indication of component being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public cancelDragOverComponent(): void\n    {\n        this._draggedOverComponent = null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this.rootComponentId = id;\n        }\n\n        //already exists\n        if(this.components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this.components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this.components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {{@id}}', {id: id});\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this.components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this.components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this.components[id];\n        delete this.components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this.rootComponentId)\n        {\n            this.rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {{@id}}', {id: id});\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this.rootComponentId) || !this.components[this.rootComponentId])\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this.components[this.rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst LIVE_EVENTS_STATUS = 'LIVE_EVENTS_STATUS';\n\n/**\n * Service used for handling state of layout live events\n */\n@Injectable()\nexport class LiveEventService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current enabled value\n     */\n    protected ɵenabled: boolean = false;\n    \n    /**\n     * Used for emitting enabled changes\n     */\n    protected ɵenabledChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current enabled value\n     */\n    public get enabled(): boolean\n    {\n        return this.ɵenabled;\n    }\n    \n    /**\n     * Occurs when enabled changes\n     */\n    public get enabledChange(): Observable<void>\n    {\n        return this.ɵenabledChange.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) protected storage: PermanentStorage,)\n    {\n        this.ɵenabled = this.storage.get<boolean|undefined>(LIVE_EVENTS_STATUS) ?? false;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets enabled new value\n     * @param enabled - Value of enabled that changed\n     */\n    public setEnabled(enabled: boolean): void\n    {\n        if(this.ɵenabled == enabled)\n        {\n            return;\n        }\n    \n        this.storage.set(LIVE_EVENTS_STATUS, enabled);\n\n        this.ɵenabled = enabled;\n        this.ɵenabledChange.next();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        //TODO: add type for return\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n        const scope = await this._componentsRegister.getScope(source.name);\n        const name = await this._componentsRegister.getComponentName(source.name);\n        const packageName = await this._componentsRegister.getComponentPackage(source.name);\n\n        return {\n            default: type,\n            displayName,\n            scope,\n            name,\n            package: packageName,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module items provider for custom components module items\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Optional() private _customComponentRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleItemsProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        switch(source.name)\n        {\n            case 'placeholder':\n            {\n                return await import('../../dynamicItems/placeholder/type');\n            }\n            case 'placeholderContainer':\n            {\n                return await import('../../dynamicItems/placeholderContainer/type');\n            }\n            case 'componentInputs':\n            {\n                return await import('../../dynamicItems/componentInputs/type');\n            }\n            case 'componentOutputs':\n            {\n                return await import('../../dynamicItems/componentOutputs/type');\n            }\n            default:\n            {\n                const customComponent = await import('../../dynamicItems/customComponent/type');\n                const customComponentConfiguration = this._customComponentRegister?.getConfigurationForComponent(source.name);\n                return {\n                    default: customComponent.default,\n                    extensions: customComponent.extensions,\n                    displayName: customComponentConfiguration?.displayName,\n                    description: customComponentConfiguration?.description,\n                    group: customComponentConfiguration?.group,\n                };\n            }\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = await this._componentsRegister.getRegisteredComponents();\n\n        if(!types.length)\n        {\n            return {\n                default: \n                [\n                    'placeholder',\n                ]\n            };\n        }\n\n        return {\n            default: \n            [\n                ...types,\n                'placeholder',\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleRelationsProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        return {\n            default: [\n                'componentInputs',\n                'componentOutputs',\n            ]\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, CustomComponentsDynamicModuleItemsProvider, CustomComponentsDynamicModuleRelationsProvider, CustomComponentsDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package layout components provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic layout module types provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic relations types provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations nodes provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations components provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};","import {Injectable, OnDestroy} from '@angular/core';\nimport {ScopeRegister as RelationsScopeRegister} from '@anglr/dynamic/relations-editor';\nimport {DebounceCall, WithSync} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Service that is used for obtaining existing scopes from layout\n */\n@Injectable()\nexport class ScopeRegister extends RelationsScopeRegister implements OnDestroy\n{\n    //######################### protoected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                protected componentRegister: LayoutComponentsRegister,)\n    {\n        super();\n\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.getScopes()));\n        this.getScopes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets available scopes\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async getScopes(): Promise<void>\n    {\n        this.ɵScopes = [];\n        const types = await this.componentRegister.types;\n\n        for(const type of types)\n        {\n            let scope: string|undefined|null = null;\n\n            if((scope = await this.componentRegister.getScope(type)))\n            {\n                if(this.ɵScopes.indexOf(scope) < 0)\n                {\n                    this.ɵScopes.push(scope);\n                }\n            }\n        }\n\n        this.scopesChangeSubject.next();\n    }\n}","import {ClassProvider, FactoryProvider, Injector, Provider, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE, provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, ScopeRegister as RelationsScopeRegister, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {MetadataStorage, provideStaticPackageSource} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager, CustomComponentsRegister, ScopeRegister} from '../services';\nimport {ContentComponentData} from '../components';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsCustomComponents(): Provider[]\n{\n    return [\n        ...provideLayoutRelations(),\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    const relationsProviders = provideRelationsEditor();\n    relationsProviders.splice(relationsProviders.indexOf(RelationsScopeRegister), 1);\n\n    return [\n        ...provideLayoutEditor(false),\n        ...relationsProviders,\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <ClassProvider>\n        {\n            provide: RelationsScopeRegister,\n            useClass: ScopeRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers that enables use of custom relations components in relations editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorRelationsCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                       customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    return [\n        CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers that enables use of custom layout components in layout editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorLayoutCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                    customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    //TODO: maybe remove first parameter\n\n    return [\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Gets custom component metadata info\n * @param name - Name of component which metadata are obtained\n * @param injector - Instance of injector used for obtaining required services\n */\nexport async function getCustomComponentMeta(name: string, injector: Injector): Promise<{contentMetadata: Dictionary<ContentComponentData>, metadata: LayoutComponentMetadata|undefined|null}|null>\n{\n    const layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = injector.get(LAYOUT_METADATA_STORAGE);\n    const customComponentMetadata = await layoutMetadataStorage.getMetadata(name);\n    const logger = injector.get(LOGGER);\n\n    if(!customComponentMetadata)\n    {\n        logger.warn('ContentOptionsPropertiesControlSAComponent: missing layout metadata for custom component!');\n\n        return null;\n    }\n\n    const layoutMetadataIterator = injector.get(LayoutComponentsIteratorService);\n    const iterator = layoutMetadataIterator.getIteratorFor(customComponentMetadata);\n    const metadataExtractor = injector.get(LayoutEditorMetadataExtractor);\n    const customComponentContentMetadata: Dictionary<ContentComponentData> = {};\n\n    for await(const component of iterator)\n    {\n        const metadata = await metadataExtractor.extractMetadata(component.metadata);\n\n        if(!metadata)\n        {\n            logger.warn('ContentOptionsPropertiesControlSAComponent: missing metadata for component!');\n\n            continue;\n        }\n\n        customComponentContentMetadata[component.metadata.id] =\n        {\n            metadata: component.metadata,\n            editorMetadata: metadata,\n        };\n    }\n\n    return {\n        contentMetadata: customComponentContentMetadata,\n        metadata: customComponentMetadata,\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\n\nimport {ContentComponentData} from '../../components';\n\n/**\n * Gets properties model using its name\n */\n@Pipe({name: 'getModel', standalone: true})\nexport class GetModelSAPipe implements PipeTransform\n{\n    /**\n     * Gets properties model using its name\n     * @param value - Name of model class\n     * @param metadata - Metadata containing model\n     */\n    public transform(value: string, metadata: ContentComponentData|undefined|null,): LayoutPropertiesModelType|null\n    {\n        return metadata?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata?.find(itm => itm.modelType.name == value)?.modelType ?? null;\n    }\n}","import {Optional, Pipe, PipeTransform} from '@angular/core';\nimport {LayoutEditorPropertyMetadata, LayoutEditorPropertyMetadataExtractor, LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets properties metadata for for model type\n */\n@Pipe({name: 'propertiesMetadata', standalone: true,})\nexport class PropertiesMetadataSAPipe implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(@Optional() protected propertyExtractor?: LayoutEditorPropertyMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Gets properties metadata for for model type\n     * @param value - Type of properties model\n     * @param propertyExtractor - Extractor used for obtaining metadata for model\n     */\n    public transform(value: LayoutPropertiesModelType|null, propertyExtractor?: LayoutEditorPropertyMetadataExtractor): Dictionary<LayoutEditorPropertyMetadata>|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        this.propertyExtractor ??= propertyExtractor;\n\n        if(!this.propertyExtractor)\n        {\n            throw new Error('Please provide LayoutEditorPropertyMetadataExtractor for propertiesMetadata pipe!');\n        }\n\n        return this.propertyExtractor.extract(value);\n    }\n}","import {Injectable} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentConfiguration} from './customComponentsRegister.interface';\n\n/**\n * Register that contains registered custom components\n */\n@Injectable()\nexport class CustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration>\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets array of registered custom components names\n     */\n    public getRegisteredComponents(): PromiseOr<string[]>\n    {\n        return [];\n    }\n\n    /**\n     * Gets configuration for custom component by its name\n     * @param _name - Name of template of custom component for which configuration will be returned\n     */\n    public getConfigurationForComponent(_name: string): TConfig|undefined|null\n    {\n        return null;\n    }\n\n    /**\n     * Sets configuration for custom component by its name\n     * @param _name - Name of template of custom component for which configuration will be set\n     * @param _config - Value of configuration to be set\n     */\n    public setConfigurationForComponent(_name: string, _config: TConfig): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n\n    /**\n     * Package of layout component\n     */\n    package: string;\n\n    /**\n     * Name of layout component\n     */\n    name: string;\n\n    /**\n     * Scope of layout component\n     */\n    scope: string|undefined;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this.initPromise ??= this.initializeTypes();\n\n        return this.initPromise.then(() =>\n        {\n            return Object.keys(this.definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.displayName ?? undefined;\n    }\n\n    /**\n     * Gets scope of type by its name\n     * @param name - Name of type that scope should be obtained\n     */\n    public async getScope(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.scope;\n    }\n\n    /**\n     * Gets component name of type byt its name\n     * @param name - Name of type that component name should be obtained\n     */\n    public async getComponentName(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.name ?? null;\n    }\n\n    /**\n     * Gets component package of type byt its name\n     * @param name - Name of type that component package should be obtained\n     */\n    public async getComponentPackage(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.package ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async initializeTypes(): Promise<void>\n    {\n        this.definedTypes = {};\n\n        if(!this.layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this.iteratorSvc.getIteratorFor(this.layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this.loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this.definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n                name: component.metadata.name,\n                scope: component.metadata.scope,\n                package: component.metadata.package,\n            };\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\nimport isEqual from 'lodash-es/isEqual';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(isEqual(this._layout, layout))\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataType} from './relationsEditorMetadata.interface';\n\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\nexport function RelationsEditorMetadata(metadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<RelationsEditorMetadataDescriptor, RelationsEditorMetadataType>(metadataLoader, 'relationsEditorMetadata');\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await relationsExportExtractor(module, logger);\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n\n    /**\n     * Display name of layout component\n     */\n    displayName?: string;\n\n    /**\n     * Current scope of node that is being used\n     */\n    scope?: string;\n\n    /**\n     * Component name\n     */\n    name?: string;\n\n    /**\n     * Component package\n     */\n    package?: string;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n        displayName: localModule.displayName,\n        scope: localModule.scope,\n        name: localModule.name,\n        package: localModule.package,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {{@item}}', {item: {name: source.name, package: source.package}});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_HISTORY_MANAGER, RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, RelationsNodeManager} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for relations history manager state\n */\nexport const RELATIONS_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: RelationsNodeManager,\n};\n\n/**\n * Provider for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};\n","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {DefaultsOverride} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeMetadata} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>> = new InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>>('RELATIONS_HISTORY_MANAGER');\n\n/**\n * Injection token for relations defaults override\n */\nexport const RELATIONS_DEFAULTS_OVERRIDE: InjectionToken<DefaultsOverride> = new InjectionToken<DefaultsOverride>('RELATIONS_DEFAULTS_OVERRIDE');","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DefaultsOverride, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isString, isType} from '@jscrpt/common';\n\nimport {DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_HISTORY_MANAGER_STATE, RELATIONS_HISTORY_MANAGER_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, ScopeRegister, StaticComponentsRegister} from '../services';\nimport {RELATIONS_DEFAULTS_OVERRIDE} from './tokens';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //display name should be string if used\n    if(isPresent(data.displayName) && !isString(data.displayName))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n        ScopeRegister,\n        RELATIONS_HISTORY_MANAGER_STATE,\n        RELATIONS_HISTORY_MANAGER_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Provider for relations defaults override\n * @param defaultsOverride - Service to pride as relations defaults override\n */\nexport function provideRelationsDefaultOverride(defaultsOverride: Type<DefaultsOverride>): Provider\n{\n    return <ClassProvider>{\n        provide: RELATIONS_DEFAULTS_OVERRIDE,\n        useClass: defaultsOverride\n    };\n}\n\n/**\n * Transforms any string to colour code\n * @param str - String to be changed to colour code\n */\nexport function stringToColour(str: string): string\n{\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) \n    {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    let colour = '#';\n\n    for (let i = 0; i < 3; i++)\n    {\n        const value = (hash >> (i * 8)) & 0xFF;\n        colour += ('00' + value.toString(16)).substr(-2);\n    }\n\n    return colour;\n}","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager implements MetadataStateManager<RelationsNodeMetadata[]>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Active relations node\n     */\n    protected _activeNode: string|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n    \n    /**\n     * Used for emitting node registration\n     */\n    protected _nodesChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting active node change\n     */\n    protected _activeNodeChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting node registration change\n     */\n    protected _nodeRegisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n\n    /**\n     * Used for emitting node unregistration change\n     */\n    protected _nodeUnregisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n    \n    //######################### public properties #########################\n\n    /**\n     * Registered relation nodes\n     */\n    public get nodes(): Dictionary<RelationsNode>\n    {\n        return this._nodes;\n    }\n\n    /**\n     * Occurs when new node is registered\n     */\n    public get nodesChange(): Observable<void>\n    {\n        return this._nodesChange.asObservable();\n    }\n\n    /**\n     * Active relations node\n     */\n    public get activeNode(): string|null|undefined\n    {\n        return this._activeNode;\n    }\n\n    /**\n     * Occurs when active relations node is changed\n     */\n    public get activeNodeChange(): Observable<void>\n    {\n        return this._activeNodeChange.asObservable();\n    }\n\n    /**\n     * Occurs when registered node is changed\n     */\n    public get nodeRegisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeRegisterChange.asObservable();\n    }\n\n    /**\n     * Occurs when unregistered node is changed\n     */\n    public get nodeUnregisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeUnregisterChange.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n        this._nodesChange.next();\n        this._nodeRegisterChange.next(node);\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n        this._nodesChange.next();\n        this._nodeUnregisterChange.next(node);\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                scope: node.metadata.scope,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n\n    /**\n     * Sets active relations node\n     * @param id node identifier\n     */\n    public setActiveNode(id?: string|null): void\n    {\n        this._activeNode = id;\n        this._activeNodeChange.next();\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that is used for obtaining existing scopes\n */\n@Injectable()\nexport class ScopeRegister\n{\n    //######################### protected properties #########################\n\n    /**\n     * Array of all scopes\n     */\n    protected ɵScopes: string[] = [];\n\n    /**\n     * Subject used for emitting changes of scopes\n     */\n    protected scopesChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets array of all scopes\n     */\n    public get scopes(): string[]\n    {\n        return this.ɵScopes;\n    }\n\n    /**\n     * Occurs when array of scopes changes\n     */\n    public get scopesChange(): Observable<void>\n    {\n        return this.scopesChangeSubject.asObservable();\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Injector} from '@angular/core';\nimport {Func2} from '@jscrpt/common';\n\nimport {RelationsComponentEndpoints} from '../../services/relationsDebugger/relationsDebugger.interface';\n\n/**\n * Debug data symbol\n */\nconst DEBUG_DATA_SYMBOL = Symbol('DebugData');\n\n/**\n * Definition of debug data for obtaining endpoints\n */\nexport interface RelationsDebugData<TRelations = unknown> extends Partial<RelationsComponentEndpoints>\n{\n    /**\n     * Function used for obtaining dynamic \n     */\n    dynamicEndpointsGetter?: Func2<RelationsComponentEndpoints, TRelations, Injector>;\n}\n\n/**\n * Gets debug data if defined\n * @param obj - Object to be inspected\n */\nexport function getDebugData(obj: unknown): RelationsDebugData|undefined|null\n{\n    return Reflect.get(obj as object, DEBUG_DATA_SYMBOL);\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function DebugData<TRelations = unknown>(data: RelationsDebugData<TRelations>): ClassDecorator\n{\n    if(ngRelationsDebugger)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            Reflect.defineProperty(target,\n                                   DEBUG_DATA_SYMBOL,\n                                   {\n                                       value: data,\n                                   });\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {RelationsComponentDef} from './types';\nimport type {RelationsDebugger} from '../services';\n\n/**\n * Injection token for relations components module data extractors\n */\nexport const RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations components module providers\n */\nexport const RELATIONS_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<RelationsComponentDef>> = new InjectionToken<DynamicItemLoader<RelationsComponentDef>>('RELATIONS_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for relations\n */\nexport const RELATIONS_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('RELATIONS_METADATA_STORAGE');\n\n/**\n * Injection token for indication whether skip relations process initialization\n */\nexport const RELATIONS_PROCESSOR_SKIP_INIT: InjectionToken<boolean> = new InjectionToken<boolean>('RELATIONS_PROCESSOR_SKIP_INIT');\n\n/**\n * Injection token for type that represents relations debugger implementation\n */\nexport const RELATIONS_DEBUGGER_TYPE: InjectionToken<Type<RelationsDebugger>> = new InjectionToken<Type<RelationsDebugger>>('RELATIONS_DEBUGGER_TYPE');\n","import {FactoryProvider, inject, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {inject, Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {Dictionary, isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {CodeExecutor, RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '../services';\nimport {RELATIONS_DEBUGGER_TYPE} from './tokens';\n\n//TODO: skip init as constant\n//TODO: assigned as constant\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Provides relations debugger\n */\nexport function provideRelationsDebugger(): Provider[]\n{\n    return ngRelationsDebugger ?\n        [\n            {\n                provide: RelationsDebugger,\n                useFactory: () =>\n                {\n                    const relationsDebuggerType = inject(RELATIONS_DEBUGGER_TYPE, {optional: true});\n\n                    if(!relationsDebuggerType)\n                    {\n                        throw new Error('Please provide RelationsDebugger implementation type! Use \"provideRelationsDebuggerImplementation() from @anglr/dynamic/relations-debugger\"');\n                    }\n\n                    return new relationsDebuggerType();\n                },\n            }\n        ] :\n        [];\n}\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        ...provideRelationsDebugger(),\n        CodeExecutor,\n    ];\n}\n\n/**\n * Defines skip initial data transfer for relations for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is skip init defined\n */\nexport function defineSkipInitProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}SkipInit`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is skip init defined for property\n * @param object - Object containg skip init property to be tested\n * @param name - Name of property for which should be skip init defined\n * @returns \n */\nexport function isSkipInit<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}SkipInit`];\n}\n\n/**\n * Defines indication that property was at least once assigned for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is assigned defined\n */\nexport function defineAssignedProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}Assigned`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is assigned defined for property\n * @param object - Object containg assigned property to be tested\n * @param name - Name of property for which should be assigned defined\n * @returns \n */\nexport function isAssigned<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}Assigned`];\n}","import {Injectable, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {generateId, Dictionary} from '@jscrpt/common';\n\n/**\n * Class used for executing javascript code and obtaining types from executed javascript code\n */\n@Injectable()\nexport class CodeExecutor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Loaded data cache for relations id\n     */\n    protected loadedDataCache: Dictionary<any> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads data from dynamicaly executed code\n     * @param relationsId - Id of relations for which is data loaded from code\n     * @param code - Code used for obtaining data\n     */\n    public async loadData<TResult>(relationsId: string, code: string): Promise<TResult|null>\n    {\n        if(this.loadedDataCache[relationsId])\n        {\n            return this.loadedDataCache[relationsId];\n        }\n\n        const scriptElement = this.document.createElement('script');\n        const loadHelper = `loadType${generateId(12)}`;\n        let result: TResult|null = null;\n\n        scriptElement.innerText = `\n        (function(exports, loadType, require)\n        {\n            ${code}\n\n            loadType(exports);\n        })({}, ${loadHelper}.loadType, ${loadHelper}.require);`;\n\n        (window as any)[loadHelper] =\n        {\n            loadType: (exp: {default: any}) => result = exp.default ?? null,\n            require: (requireName: string) =>\n            {\n                console.log(requireName);\n\n                return null;\n            }\n        };\n\n        this.document.getElementsByTagName('head')[0].appendChild(scriptElement);\n        delete (window as any)[loadHelper];\n        scriptElement.remove();\n\n        this.loadedDataCache[relationsId] = result;\n\n        return result;\n    }\n}","import {isPresent} from '@jscrpt/common';\n\n/**\n * Options for RelationsChangeDetector\n */\nexport class RelationsChangeDetectorOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Indication whether run detection in single run, new changes added to same run, or new changes added to next run\n     */\n    public detectionInSingleRun: boolean = true;\n\n    //######################### constructor #########################\n    constructor(detectionInSingleRun?: boolean)\n    {\n        if(isPresent(detectionInSingleRun))\n        {\n            this.detectionInSingleRun = detectionInSingleRun;\n        } \n    }\n}","import {inject, Inject, Injectable, Injector, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {BindThis, Dictionary, isEmptyObject, isString} from '@jscrpt/common';\n\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsProcessorComponentData, RelationsProcessorInputOutputData} from '../relationsProcessor/relationsProcessor.interface';\nimport {RelationsProcessor} from '../relationsProcessor/relationsProcessor.service';\nimport {MarkForCheckId, RelationsChange} from './relationsChangeDetector.interface';\nimport {RelationsChangeDetectorOptions} from './relationsChangeDetector.options';\n\n/**\n * Change detector for relations, which allows async change detection\n */\n@Injectable()\nexport class RelationsChangeDetector\n{\n    //######################### protected properties #########################\n\n    /**\n     * Array of mark for check ids that were called before initialization\n     */\n    protected markedBeforeInit: MarkForCheckId[] = [];\n\n    /**\n     * Instance of relations processor for handling relations\n     */\n    protected ɵrelationsProcessor: RelationsProcessor|undefined|null;\n\n    /**\n     * Gets instance of relations processor for handling relations\n     */\n    protected get relationsProcessor(): RelationsProcessor\n    {\n        return (this.ɵrelationsProcessor ??= this.injector.get(RelationsProcessor));\n    }\n\n    /**\n     * Instance of relations component manager storing registered components\n     */\n    protected ɵrelationsComponentManager: RelationsComponentManager|undefined|null;\n\n    /**\n     * Gets instance of relations component manager storing registered components\n     */\n    protected get relationsComponentManager(): RelationsComponentManager\n    {\n        return (this.ɵrelationsComponentManager ??= this.injector.get(RelationsComponentManager));\n    }\n\n    /**\n     * Objects storing components and theirs outputs and related output input relations\n     */\n    protected ɵoutputsComponents: Dictionary<Dictionary<RelationsProcessorInputOutputData[]>> = {};\n\n    /**\n     * Instance of parent relations change detector\n     */\n    protected parent: RelationsChangeDetector|undefined|null = inject(RelationsChangeDetector, {optional: true, skipSelf: true,});\n\n    /**\n     * Objects storing components and theirs outputs and related output input relations\n     */\n    protected get outputsComponents(): Dictionary<Dictionary<RelationsProcessorInputOutputData[]>>\n    {\n        if(isEmptyObject(this.ɵoutputsComponents) && this.parent)\n        {\n            return this.parent.outputsComponents;\n        }\n\n        return this.ɵoutputsComponents;\n    }\n\n    /**\n     * Options for relations change detector\n     */\n    protected options: RelationsChangeDetectorOptions;\n\n    /**\n     * Identifier of running timeout\n     */\n    protected timeout: number|undefined|null;\n\n    /**\n     * Array of changes that should be checked and transfered in first run\n     */\n    protected firstRunChanges: RelationsChange[] = [];\n\n    /**\n     * Array of changes that should be checked and transfered in second run\n     */\n    protected secondRunChanges: RelationsChange[] = [];\n\n    /**\n     * Indication whether is check running\n     */\n    protected checkRunning: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                @Inject(LOGGER) protected logger: Logger,\n                @Optional() options?: RelationsChangeDetectorOptions,)\n    {\n        if(!options || !(options instanceof RelationsChangeDetectorOptions))\n        {\n            options = new RelationsChangeDetectorOptions();\n        }\n\n        this.options = options;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks input component connected to this for checking\n     * @param id - Identification of what should be checked\n     */\n    public markForCheck(id: MarkForCheckId): void\n    {\n        const componentId = isString(id.componentId) ? id.componentId : this.relationsComponentManager.getId(id.componentId);\n\n        if(!componentId)\n        {\n            this.logger.warn('RelationsChangeDetector: Unable to find component!');\n\n            return;\n        }\n\n        this.logger.debug('RelationsChangeDetector: marking for check {{@id}}', {id: {componentId, outputName: id.outputName}});\n\n        const relationDefs = this.outputsComponents[componentId]?.[id.outputName] ?? [];\n        const changes = this.checkRunning && !this.options.detectionInSingleRun ? this.secondRunChanges : this.firstRunChanges;\n\n        //TODO: think of better solution, cache mark when not initialized\n        if(!relationDefs.length)\n        {\n            this.markedBeforeInit.push(id);\n\n            return;\n        }\n\n        for(const relationDef of relationDefs)\n        {\n            const relation = changes.find(itm => itm.id == relationDef.inputComponentId);\n\n            //not exists yet\n            if(!relation)\n            {\n                changes.push(\n                {\n                    id: relationDef.inputComponentId,\n                    inputs: [relationDef.inputName],\n                });\n\n                continue;\n            }\n\n            //already exists\n            if(relation.inputs.indexOf(relationDef.inputName) >= 0)\n            {\n                continue;\n            }\n\n            relation.inputs.push(relationDef.inputName);\n        }\n\n        //schedule check\n        if(!this.timeout)\n        {\n            this.timeout = setTimeout(this.runCheck, 0) as unknown as number;\n        }\n    }\n\n    /**\n     *\n     * @param relations - Object storing current relations\n     */\n    public initialize(relations: Dictionary<RelationsProcessorComponentData>): void\n    {\n        this.logger.debug('RelationsChangeDetector: initializing {{@relations}}', {relations: relations});\n\n        this.ɵoutputsComponents = {};\n\n        for(const componentId in relations)\n        {\n            const relationsDef = relations[componentId];\n\n            this.ɵoutputsComponents[componentId] ??= {};\n\n            if(!relationsDef.inputOutputs)\n            {\n                continue;\n            }\n\n            for(const inputOutput of relationsDef.inputOutputs)\n            {\n                this.ɵoutputsComponents[componentId][inputOutput.outputName] ??= [];\n                this.ɵoutputsComponents[componentId][inputOutput.outputName].push(inputOutput);\n            }\n        }\n\n        const ids = [...this.markedBeforeInit];\n        this.markedBeforeInit = [];\n\n        for(const markForCheckId of ids)\n        {\n            this.markForCheck(markForCheckId);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Runs check for marked components\n     */\n    @BindThis\n    protected runCheck(): void\n    {\n        this.logger.debug('RelationsChangeDetector: running check');\n\n        this.checkRunning = true;\n\n        for(const change of this.firstRunChanges)\n        {\n            const transfer = this.relationsProcessor.transferInputsData(change.id, true, change.inputs);\n\n            transfer.applyChanges();\n        }\n\n        if(this.options.detectionInSingleRun)\n        {\n            this.firstRunChanges = [];\n        }\n        else\n        {\n            this.firstRunChanges = this.secondRunChanges;\n            this.secondRunChanges = [];\n        }\n\n        this.checkRunning = false;\n        this.timeout = null;\n    }\n}\n","import {inject, Inject, Injectable, Injector, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDebugger} from '../relationsDebugger/relationsDebugger.service';\n\n/**\n * Manager used for managing all components used in relations\n */\n@Injectable()\nexport class RelationsComponentManager implements OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of current scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Registered components\n     */\n    protected components: Dictionary<RelationsComponent> = {};\n\n    /**\n     * Object storing all scopes and their managers\n     */\n    protected scopes: Dictionary<RelationsComponentManager[]> = {};\n\n    /**\n     * Instance of parent relations component manager\n     */\n    protected parent: RelationsComponentManager|null = null;\n\n    /**\n     * Cache containing children scoped components\n     */\n    protected childrenCache: Dictionary<RelationsComponent[]> = {};\n\n    /**\n     * Injector for angular DI\n     */\n    protected injector: Injector = inject(Injector);\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected logger?: Logger,\n                @Optional() protected relationsDebugger?: RelationsDebugger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //removes nested scopes first\n        if(this.scopes)\n        {\n            for(const scopeId in this.scopes)\n            {\n                const scope = this.scopes[scopeId];\n\n                if(scope)\n                {\n                    for(const manager of scope)\n                    {\n                        manager.ngOnDestroy();\n                    }\n                }\n\n                delete this.scopes[scopeId];\n            }\n            \n        }\n\n        for(const componentId in this.components)\n        {\n            this.removeCacheFromHierarchy(componentId);\n        }\n\n        //removes self from parent scopes\n        if(this.parent && this.scopeId)\n        {\n            const scope = this.parent.scopes[this.scopeId];\n\n            if(scope)\n            {\n                const index = scope.indexOf(this);\n\n                if(index >= 0)\n                {\n                    scope.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Registers newly created component\n     * @param id - Id of component to be registered\n     * @param component - Instance of registered component\n     */\n    public registerComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        if(this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' is already registered, provide unique id.`);\n\n            return;\n        }\n\n        component.ɵɵRelationsComponentId ??= generateId(12);\n        this.removeCacheFromHierarchy(id);\n        this.components[id] = component;\n        component.ɵɵinjector = this.injector;\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.registerComponent(id, component);\n        }\n    }\n\n    /**\n     * Unregisters component\n     * @param id - Id of component to be unregistered\n     */\n    public unregisterComponent(id: string): void\n    {\n        if(!this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' has already been unregistered.`);\n\n            return;\n        }\n\n        this.removeCacheFromHierarchy(id);\n        const component = this.components[id];\n        delete this.components[id];\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.unregisterComponent(id, component);\n        }\n    }\n\n    /**\n     * Gets instance of component or array of component instances or null\n     * @param id - Unique identification of component, or components\n     */\n    public get(id: string): RelationsProcessorComponent[]|RelationsProcessorComponent|null\n    {\n        const component = this.components[id];\n\n        if(component)\n        {\n            return component;\n        }\n\n        if(this.childrenCache[id])\n        {\n            return this.childrenCache[id];\n        }\n\n        const components = this.getChildrenComponents(id);\n\n        if(components)\n        {\n            return components;\n        }\n\n        return this.getParentComponents(id);\n    }\n\n    /**\n     * Gets id of relations component, for this manager\n     * @param component - Component which id should be found\n     */\n    public getId(component: RelationsComponent): string|null\n    {\n        for(const id in this.components)\n        {\n            const comp = this.components[id];\n\n            if(comp === component)\n            {\n                return id;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Opens new scope for relations component manager\n     * @param id - Id of newly created scope\n     */\n    public openScope(id: string): RelationsComponentManager\n    {\n        this.scopes[id] ??= [];\n        const scope = new RelationsComponentManager(this.logger);\n        scope.scopeId = id;\n        scope.parent = this;\n        this.scopes[id].push(scope);\n\n        return scope;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes cached components from hierarchy\n     * @param id - Id of component which will be removed from cache\n     */\n    protected removeCacheFromHierarchy(id: string): void\n    {\n        //no parent or parent cache does not contains id\n        if(!this.parent || !this.parent.childrenCache[id])\n        {\n            return;\n        }\n\n        delete this.parent.childrenCache[id];\n        this.parent.removeCacheFromHierarchy(id);\n    }\n\n    /**\n     * Gets children components when scopes are used\n     * @param id - Id of components to be get\n     */\n    protected getChildrenComponents(id: string): RelationsComponent[]|null\n    {\n        const getFromScope = (scopeId: string) =>\n        {\n            const scope = this.scopes[scopeId];\n            const result: RelationsComponent[] = [];\n\n            for(const mngr of scope)\n            {\n                const component = mngr.components[id];\n\n                if(component)\n                {\n                    result.push(component);\n\n                    continue;\n                }\n\n                const components = mngr.getChildrenComponents(id);\n\n                if(Array.isArray(components))\n                {\n                    for(const cmp of components)\n                    {\n                        result.push(cmp);\n                    }\n\n                    continue;\n                }\n\n                return null;\n            }\n\n            if(result.length)\n            {\n                return result;\n            }\n\n            return null;\n        };\n\n\n        for(const scopeId in this.scopes)\n        {\n            const result = getFromScope(scopeId);\n\n            if(result)\n            {\n                this.childrenCache[id] = result;\n\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets parent components when scopes are used\n     * @param id - Id of component to be get\n     */\n    protected getParentComponents(id: string): RelationsComponent|null\n    {\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        const component = this.parent.components[id] ?? null;\n\n        if(component)\n        {\n            return component;\n        }\n\n        return this.parent.getParentComponents(id);\n    }\n}","import {Injectable} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsComponentEndpoints, RelationsComponentStateDebugInfo, RelationsDataTransferDebugInfo, RelationsDataTransferIdDebugInfo, RelationsStepDebugInfo} from './relationsDebugger.interface';\nimport {RelationsDataTransferInstructionImpl} from '../relationsProcessor/relationsDataTransferInstruction';\nimport {RelationsProcessorComponentData, RelationsProcessorInputOutputData} from '../relationsProcessor/relationsProcessor.interface';\n\n/**\n * Service used for debugging relations, use actual implementation instead of this\n */\n@Injectable()\nexport abstract class RelationsDebugger\n{\n    //######################### public properties #########################\n\n    /**\n     * Occurs when current step index changes\n     */\n    public abstract get stepChange(): Observable<void>;\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize debugger with processed relations metadata\n     * @param relations - Relations used for initialization\n     * @param backwardRelations - Backward relations used for initialization\n     */\n    public abstract initialize(relations: Dictionary<RelationsProcessorComponentData>, backwardRelations: Dictionary<RelationsProcessorInputOutputData[]>): void;\n\n    /**\n     * Debugs register component into relations\n     * @param id - Id of component that has been registered\n     * @param component - Instance of registered component\n     */\n    public abstract registerComponent(id: string, component: RelationsProcessorComponent): void;\n\n    /**\n     * Debugs unregister component from relations\n     * @param id - Id of component that has been unregistered\n     * @param component - Instance of unregistered component\n     */\n    public abstract unregisterComponent(id: string, component: RelationsProcessorComponent): void;\n\n    /**\n     * Debug transfer data\n     * @param transfer - Transfer that will handle transfering data\n     * @param options - Options for storing debug information for data transfer\n     */\n    public abstract transferData(transfer: RelationsDataTransferInstructionImpl&Partial<RelationsDataTransferIdDebugInfo>, options: RelationsDataTransferDebugInfo): void;\n\n    /**\n     * Gets currently registered components\n     */\n    public abstract getCurrentComponents(): Dictionary<string[]>;\n\n    /**\n     * Gets component definition\n     * @param id - Id of component which definition will be obtained\n     */\n    public abstract getComponentDef(id: string): RelationsComponentEndpoints|null;\n\n    /**\n     * Gets component state\n     * @param id - Id of component whose state is going to be read\n     */\n    public abstract getComponentState(id: string): RelationsComponentStateDebugInfo[];\n\n    /**\n     * Gets component relations options\n     * @param id - Id of component whose relations options are going to be read\n     */\n    public abstract getComponentRelationsOptions(id: string): unknown;\n\n    /**\n     * Gets last step or null if is already on last step\n     */\n    public abstract getLastStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets first step or null if is already on first step\n     */\n    public abstract getFirstStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets next step or null if is already on last step\n     */\n    public abstract getNextStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets previous step or null if is already on first step\n     */\n    public abstract getPreviousStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Gets current step or null if there are no steps\n     */\n    public abstract getCurrentStep(): RelationsStepDebugInfo|null;\n\n    /**\n     * Clears all recorded steps\n     */\n    public abstract clearSteps(): void;\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsComponentMetadata} from '../../interfaces';\n\n/**\n * Manager of relations metadata\n */\n@Injectable()\nexport class RelationsManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current relations value\n     */\n    protected _relations: RelationsComponentMetadata[] = [];\n    \n    /**\n     * Used for emitting relations changes\n     */\n    protected _relationsChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current relations value\n     */\n    public get relations(): RelationsComponentMetadata[]\n    {\n        return this._relations;\n    }\n    \n    /**\n     * Occurs when relations changes\n     */\n    public get relationsChange(): Observable<void>\n    {\n        return this._relationsChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets relations new value\n     * @param relations - Value of relations that changed\n     */\n    public setRelations(relations: RelationsComponentMetadata[]): void\n    {\n        if(this._relations == relations)\n        {\n            return;\n        }\n    \n        this._relations = relations;\n        this._relationsChange.next();\n    }\n}","import {SimpleChanges} from '@angular/core';\nimport {isEmptyObject} from '@jscrpt/common';\n\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstruction} from './relationsProcessor.interface';\n\n/**\n * Instruction containing data/changes that are needed for data transfer\n */\nexport class RelationsDataTransferInstructionImpl implements RelationsDataTransferInstruction\n{\n    //######################### private fields #########################\n\n    /**\n     * Changes that are coming into component\n     */\n    private _changes: SimpleChanges = {};\n\n    //######################### public properties - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get changes(): SimpleChanges\n    {\n        return this._changes;\n    }\n\n    //######################### constructor #########################\n    constructor(protected components: RelationsProcessorComponent[],)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public applyChanges(): void\n    {\n        for(const component of this.components)\n        {\n            if(!component || isEmptyObject(this._changes))\n            {\n                continue;\n            }\n\n            for(const key in this._changes)\n            {\n                const change = this._changes[key];\n\n                (component as any)[key] = change.currentValue;\n            }\n            \n            component.ngOnChanges?.(this._changes);\n            component.invalidateVisuals();\n        }\n    }\n}","import {inject, Inject, Injectable, Injector, OnDestroy, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {Dictionary, isBlank, noop, NoopAction, isStrictEquals} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {RelationsComponent, RelationsComponentMetadata, RelationsComponentType} from '../../interfaces';\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsManager} from '../relationsManager/relationsManager.service';\nimport {RelationsDataTransferInstruction, RelationsProcessorComponentData, RelationsProcessorInputOutputData} from './relationsProcessor.interface';\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_PROCESSOR_SKIP_INIT} from '../../misc/tokens';\nimport {RelationsComponentDef, RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstructionImpl} from './relationsDataTransferInstruction';\nimport {isAssigned, isSkipInit} from '../../misc/utils';\nimport {RelationsChangeDetector} from '../relationsChangeDetector/relationsChangeDetector.service';\nimport {RelationsDebugger} from '../relationsDebugger/relationsDebugger.service';\n\n/**\n * Processor that applies relations to registered components\n */\n@Injectable()\nexport class RelationsProcessor implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Promise used for indication that processor was initialized\n     */\n    protected ɵInitialized: Promise<void> = Promise.resolve();\n\n    /**\n     * Relations metadata\n     */\n    protected ɵRelations: Dictionary<RelationsProcessorComponentData> = {};\n\n    /**\n     * Array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected ɵBackwardRelations: Dictionary<RelationsProcessorInputOutputData[]> = {};\n\n    /**\n     * Resolves initialized\n     */\n    protected resolveInitialized: NoopAction = noop;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Gets or sets relations metadata\n     */\n    protected get relations(): Dictionary<RelationsProcessorComponentData>\n    {\n        if(this.parent)\n        {\n            return this.parent.relations;\n        }\n\n        return this.ɵRelations;\n    }\n    protected set relations(value: Dictionary<RelationsProcessorComponentData>)\n    {\n        this.ɵRelations = value;\n    }\n\n    /**\n     * Gets or sets array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected get backwardRelations(): Dictionary<RelationsProcessorInputOutputData[]>\n    {\n        if(this.parent)\n        {\n            return this.parent.backwardRelations;\n        }\n\n        return this.ɵBackwardRelations;\n    }\n    protected set backwardRelations(value: Dictionary<RelationsProcessorInputOutputData[]>)\n    {\n        this.ɵBackwardRelations = value;\n    }\n\n    /**\n     * Instance of parent relations processor\n     */\n    protected parent: RelationsProcessor|null = null;\n\n    /**\n     * Id of scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Injected relations change detector\n     */\n    protected relationsChangeDetector: RelationsChangeDetector = inject(RelationsChangeDetector);\n\n    /**\n     * Instance of relations debugger\n     */\n    protected relationsDebugger: RelationsDebugger|undefined|null = inject(RelationsDebugger, {optional: true});\n\n    //######################### public properties #########################\n\n    /**\n     * Gets promise that completes when processor was initialized\n     */\n    public get initialized(): Promise<void>\n    {\n        return this.ɵInitialized;\n    }\n\n    //######################### constructor #########################\n    constructor(protected relationsManager: RelationsManager,\n                protected componentManager: RelationsComponentManager,\n                protected injector: Injector,\n                @Inject(RELATIONS_COMPONENTS_LOADER) protected loader: DynamicItemLoader<RelationsComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,\n                @Inject(RELATIONS_PROCESSOR_SKIP_INIT) @Optional() skipInit?: boolean,)\n    {\n        if(!skipInit)\n        {\n            this.initSubscriptions.add(this.relationsManager.relationsChange.subscribe(() => this.initializeRelations()));\n\n            this.initializeRelations();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.destroyRelations();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Updates relations\n     * @param id - Id of component to be registered\n     */\n    public updateRelations(id: string): void\n    {\n        this.logger?.debug('RelationsProcessor: Updating relations for {{@id}}', {id});\n\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n        let components = this.componentManager.get(id);\n\n        //this component has no relations\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {{@id}}', {id});\n\n            return;\n        }\n\n        this.initOptions(components, relations);\n\n        //initialize default value from connection to this\n        if(backwardRelations?.length)\n        {\n            backwardRelations.forEach(inputOutput =>\n            {\n                this.initBackwardRelation(inputOutput);\n            });\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            for(const outputComponent of components)\n            {\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions = [];\n\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    //TODO revise log output\n                    this.logger?.verbose('RelationsProcessor: processing input outputs {{@data}} ', {data: {id, inputOutput}});\n\n                    const outputObservable = (outputComponent as any)[`${inputOutput.outputName}Change`] as Observable<any>;\n\n                    //check whether is observable output\n                    if(!(outputObservable instanceof Observable))\n                    {\n                        this.logger?.warn('RelationsProcessor: Output on component {{@data}} is not observable', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    //set listening for output changes\n                    outputComponent.ɵɵRelationsOutputsChangeSubscriptions.push(outputObservable.subscribe(() =>\n                    {\n                        let inputs = this.componentManager.get(inputOutput.inputComponentId);\n\n                        if(!inputs)\n                        {\n                            this.logger?.warn('RelationsProcessor: Missing input components {{@data}} on output change', {data: inputOutput});\n\n                            return;\n                        }\n\n                        if(!Array.isArray(inputs))\n                        {\n                            inputs = [inputs];\n                        }\n\n                        for(const input of inputs)\n                        {\n                            this.transferData(outputComponent, input, inputOutput, false);\n                        }\n                    }));\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {{@data}}', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    for(const inputComponent of inputComponents)\n                    {\n                        const id = `${inputComponent.ɵɵRelationsComponentId}-${outputComponent.ɵɵRelationsComponentId}`;\n\n                        //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                        if(!isSkipInit(outputComponent, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputComponent, inputOutput.outputName))\n                        {\n                            inputOutput.initialized[id] = this.transferData(outputComponent, inputComponent, inputOutput, true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method used for destroying component\n     */\n    public destroyComponent(id: string): void\n    {\n        const metadata: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n\n        //uninitialize backward relations\n        if(backwardRelations)\n        {\n            for(const relation of backwardRelations)\n            {\n                relation.initialized = {};\n            }\n        }\n\n        //destroy relations\n        if(metadata)\n        {\n            let components = this.componentManager.get(id);\n\n            if(components)\n            {\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                for(const cmp of components)\n                {\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions = [];\n                    cmp.ɵɵRelationsOptionsInitialized = false;\n                }\n            }\n\n            if(metadata.inputOutputs && Array.isArray(metadata.inputOutputs))\n            {\n                for(const inputOutput of metadata.inputOutputs)\n                {\n                    inputOutput.initialized = {};\n                }\n            }\n\n            //destroy auto created components and unregister them\n            if(metadata.autoCreated)\n            {\n                let components = this.componentManager.get(id);\n\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                this.componentManager.unregisterComponent(id);\n\n                for(const cmp of components)\n                {\n                    cmp.ngOnDestroy?.();\n                }\n            }\n        }\n    }\n\n    /**\n     * Opens new scope of relations processor\n     * @param id - Id of newly created scope\n     * @param componentManager - Scoped instance of component manager\n     * @param injector - Injector for current scope\n     */\n    public openScope(id: string,\n                     componentManager: RelationsComponentManager,\n                     injector: Injector,): RelationsProcessor\n    {\n        const processor = new RelationsProcessor(this.relationsManager, componentManager, injector, this.loader, this.logger, true);\n        processor.scopeId = id;\n        processor.parent = this;\n\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === id && relationsDef.componentType)\n            {\n                const instance = new relationsDef.componentType(injector);\n                componentManager.registerComponent(componentId, instance);\n                processor.updateRelations(componentId);\n            }\n        }\n\n        return processor;\n    }\n\n    /**\n     * Destroyes opened scope itself\n     */\n    public destroyScope(): void\n    {\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === this.scopeId)\n            {\n                this.destroyComponent(componentId);\n            }\n        }\n    }\n\n    /**\n     * Transfers data for specified component using its output relations, all data are transfered in single change set per component\n     * @param id - Id of component whose outputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns dictionary with data transfer instructions per components\n     */\n    public transferOutputsData(id: string, delayed: true, forceTransfer?: boolean): Dictionary<RelationsDataTransferInstruction>\n    public transferOutputsData(id: string, delayed: false, forceTransfer?: boolean): null\n    public transferOutputsData(id: string, delayed: boolean = false, forceTransfer: boolean = false): null|Dictionary<RelationsDataTransferInstruction>\n    {\n        const transfers: Dictionary<RelationsDataTransferInstructionImpl> = {};\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        let components = this.componentManager.get(id);\n\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {{@id}}', {id});\n\n            return delayed ? transfers : null;\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            //for each component containing outputs\n            for(const outputComponent of components)\n            {\n                //for each relation\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {{@data}}', {data: inputOutput});\n\n                        continue;\n                    }\n\n                    transfers[inputOutput.inputComponentId] ??= new RelationsDataTransferInstructionImpl(inputComponents);\n\n                    //for each input component\n                    for(const inputComponent of inputComponents)\n                    {\n                        if(!outputComponent || !inputComponent)\n                        {\n                            continue;\n                        }\n\n                        const previousValue = (inputComponent as any)[inputOutput.inputName];\n                        const currentValue = (outputComponent as any)[inputOutput.outputName];\n\n                        //ignore changes when previousValue equals to currentValue.\n                        if (!forceTransfer && isStrictEquals(previousValue, currentValue)) \n                        {\n                            continue;\n                        }\n\n                        const change = transfers[inputOutput.inputComponentId].changes[inputOutput.inputName] =\n                        {\n                            previousValue,\n                            currentValue,\n                            firstChange: false,\n                            isFirstChange: () => false,\n                        };\n\n                        if(ngRelationsDebugger)\n                        {\n                            this.relationsDebugger?.transferData(transfers[inputOutput.inputComponentId],\n                            {\n                                change,\n                                inputComponentId: inputOutput.inputComponentId,\n                                outputComponentId: inputOutput.outputComponentId,\n                                outputName: inputOutput.outputName,\n                                inputName: inputOutput.inputName,\n                                scope: this.scopeId,\n                            });\n                        }\n                    }\n                }\n            }\n\n            if(!delayed)\n            {\n                //transfers data\n                for(const key in transfers)\n                {\n                    const transfer = transfers[key];\n\n                    transfer.applyChanges();\n                }\n            }\n        }\n\n        return delayed ? transfers : null;\n    }\n\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     */\n    public transferInputsData(id: string, delayed: true): RelationsDataTransferInstruction\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     */\n    public transferInputsData(id: string, delayed: false): null\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: true, inputs: string[]): RelationsDataTransferInstruction\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: false, inputs: string[]): null\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     * @param inputs - Optional array of inputs that should be displayed\n     */\n    public transferInputsData(id: string, delayed: boolean = false, inputs?: string[]): null|RelationsDataTransferInstruction\n    {\n        const backwardRelations = this.backwardRelations[id];\n        const inputComponent = this.componentManager.get(id);\n\n        if(!backwardRelations)\n        {\n            this.logger?.warn('RelationsProcessor: No backward relations for {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(!inputComponent)\n        {\n            this.logger?.warn('RelationsProcessor: Missing input components for {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(Array.isArray(inputComponent))\n        {\n            this.logger?.error('RelationsProcessor: Only one component must be available for id {{@id}}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        const transfer: RelationsDataTransferInstructionImpl = new RelationsDataTransferInstructionImpl([inputComponent]);\n\n        //for each backward relation\n        for(const backwardRelation of backwardRelations)\n        {\n            //skip if input does not exists and inputs are specified\n            if(inputs && inputs.indexOf(backwardRelation.inputName) < 0)\n            {\n                continue;\n            }\n\n            const outputComponent = this.componentManager.get(backwardRelation.outputComponentId);\n\n            if((Array.isArray(outputComponent)))\n            {\n                this.logger?.error('RelationsProcessor: Only one output component must be available for id {{@id}}', {id});\n\n                continue;\n            }\n\n            if(!outputComponent || !inputComponent)\n            {\n                continue;\n            }\n\n            const previousValue = (inputComponent as any)[backwardRelation.inputName];\n            const currentValue = (outputComponent as any)[backwardRelation.outputName];\n\n            //ignore changes when previousValue equals to currentValue.\n            if (isStrictEquals(previousValue, currentValue)) \n            {\n                continue;\n            }\n\n            const change = transfer.changes[backwardRelation.inputName] =\n            {\n                previousValue,\n                currentValue,\n                firstChange: false,\n                isFirstChange: () => false,\n            };\n\n            if(ngRelationsDebugger)\n            {\n                this.relationsDebugger?.transferData(transfer,\n                {\n                    change,\n                    inputComponentId: backwardRelation.inputComponentId,\n                    outputComponentId: backwardRelation.outputComponentId,\n                    outputName: backwardRelation.outputName,\n                    inputName: backwardRelation.inputName,\n                    scope: this.scopeId,\n                });\n            }\n        }\n\n        if(!delayed)\n        {\n            transfer.applyChanges();\n        }\n\n        return delayed ? transfer : null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize relations from metadata\n     */\n    protected async initializeRelations(): Promise<void>\n    {\n        await this.destroyRelations();\n        this.setInitializePromise();\n\n        this.logger?.debug('RelationsProcessor: initializing relations');\n\n        //empty relations\n        if(!this.relationsManager.relations.length)\n        {\n            this.resolveInitialized();\n\n            return;\n        }\n\n        for(const meta of this.relationsManager.relations)\n        {\n            const outputs: RelationsProcessorInputOutputData[] = [];\n\n            //no outputs metadata\n            if(!meta.outputs)\n            {\n                continue;\n            }\n\n            for(const output of meta.outputs)\n            {\n                //no inputs metadata\n                if(!output.inputs)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const inputOutput: RelationsProcessorInputOutputData =\n                    {\n                        inputComponentId: input.id,\n                        outputComponentId: meta.id,\n                        inputName: input.inputName,\n                        outputName: output.outputName,\n                        initialized: {},\n                    };\n\n                    outputs.push(inputOutput);\n\n                    if(!this.backwardRelations[input.id])\n                    {\n                        this.backwardRelations[input.id] = [];\n                    }\n\n                    this.backwardRelations[input.id].push(inputOutput);\n                }\n            }\n\n            //sets options for relations component\n            await this.initComponent(meta, outputs);\n        }\n\n        this.relationsChangeDetector.initialize(this.relations);\n        \n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.initialize(this.relations, this.backwardRelations);\n        }\n\n        this.resolveInitialized();\n    }\n\n    /**\n     * Initialize backward relations\n     * @param inputOutput - Data for input and output\n     */\n    protected initBackwardRelation(inputOutput: RelationsProcessorInputOutputData): void\n    {\n        let outputComponents = this.componentManager.get(inputOutput.outputComponentId);\n        let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n        if((isBlank(outputComponents) || Array.isArray(outputComponents) && !outputComponents.length) ||\n           (isBlank(inputComponents) || Array.isArray(inputComponents) && !inputComponents.length))\n        {\n            this.logger?.warn('RelationsProcessor: missing metadata for backward relations {{@data}}', {data: inputOutput});\n\n            return;\n        }\n\n        if(!Array.isArray(inputComponents))\n        {\n            inputComponents = [inputComponents];\n        }\n\n        if(!Array.isArray(outputComponents))\n        {\n            outputComponents = [outputComponents];\n        }\n\n        for(const inputCmp of inputComponents)\n        {\n            for(const outputCmp of outputComponents)\n            {\n                const id = `${inputCmp.ɵɵRelationsComponentId}-${outputCmp.ɵɵRelationsComponentId}`;\n\n                //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                if(!isSkipInit(outputCmp, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputCmp, inputOutput.outputName))\n                {\n                    inputOutput.initialized[id] = this.transferData(outputCmp, inputCmp, inputOutput, true);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transfers data from source property to target property\n     * @param source - Instance of source object containing source property with data\n     * @param target - Instance of target object containing target property for data\n     * @param sourceTarget - Definition of source target names and ids\n     * @param initial - Indication whether is transfer of data initial, or on event\n     */\n    protected transferData(source: RelationsComponent, target: RelationsComponent, sourceTarget: RelationsProcessorInputOutputData, initial: boolean): boolean\n    {\n        if(!source || !target)\n        {\n            return false;\n        }\n\n        const previousValue = (target as any)[sourceTarget.inputName];\n        const currentValue = (source as any)[sourceTarget.outputName];\n        const transfer = new RelationsDataTransferInstructionImpl([target]);\n\n        //ignore changes when previousValue equals to currentValue.\n        if (isStrictEquals(previousValue, currentValue)) \n        {\n            return false;\n        }\n\n        const change = transfer.changes[sourceTarget.inputName] =\n        {\n            previousValue,\n            currentValue,\n            firstChange: initial,\n            isFirstChange: () => initial\n        };\n\n        if(ngRelationsDebugger)\n        {\n            this.relationsDebugger?.transferData(transfer,\n            {\n                change,\n                inputComponentId: sourceTarget.inputComponentId,\n                inputName: sourceTarget.inputName,\n                outputComponentId: sourceTarget.outputComponentId,\n                outputName: sourceTarget.outputName,\n                scope: this.scopeId,\n            });\n        }\n\n        transfer.applyChanges();\n\n        return true;\n    }\n\n    /**\n     * Initialize relation component\n     * @param meta - Metadata for relations component\n     * @param outputs - Array of outputs data for relations component\n     */\n    protected async initComponent(meta: RelationsComponentMetadata, outputs: RelationsProcessorInputOutputData[]): Promise<void>\n    {\n        const component = this.componentManager.get(meta.id);\n\n        if(component)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n            this.updateRelations(meta.id);\n\n            return;\n        }\n\n        const componentMeta = await this.loader.loadItem(meta);\n\n        if(!componentMeta)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n\n            this.logger?.warn('RelationsProcessor: Unable to load relations component! {{@meta}}', {meta: {package: meta.package, name: meta.name}});\n\n            return;\n        }\n\n        if(!meta.scope)\n        {\n            const instance = new componentMeta.data(this.injector);\n            this.componentManager.registerComponent(meta.id, instance);\n        }\n\n        this.initRelation(true, meta, outputs, meta.scope ?? null, meta.scope ? componentMeta.data : null);\n        this.updateRelations(meta.id);\n    }\n\n    /**\n     * Initialize relation for metadata and component\n     * @param autoCreated - Indication whether was component auto created or not\n     * @param meta - Metadata for relations component\n     * @param inputOutputs - Array of outputs data for relations\n     * @param scope - Current scope used for this relations component\n     * @param componentType - Type used for creation of relations component (only for scoped ones)\n     */\n    protected initRelation(autoCreated: boolean, meta: RelationsComponentMetadata, inputOutputs: RelationsProcessorInputOutputData[], scope: string|null, componentType: RelationsComponentType|null): void\n    {\n        this.relations[meta.id] =\n        {\n            autoCreated,\n            inputOutputs,\n            metadataOptions: meta.relationsOptions,\n            componentType,\n            scope,\n        };\n    }\n\n    /**\n     * Initialize relations component options\n     * @param components - Components which options should be initialized\n     * @param meta - Metadata containing options for initialization\n     */\n    protected initOptions(components: RelationsProcessorComponent|RelationsProcessorComponent[], meta: RelationsProcessorComponentData): void\n    {\n        if(Array.isArray(components))\n        {\n            for(const comp of components)\n            {\n                if(!comp.ɵɵRelationsOptionsInitialized)\n                {\n                    comp.relationsOptions = meta.metadataOptions;\n                    comp.ɵɵRelationsOptionsInitialized = true;\n                }\n            }\n        }\n        else\n        {\n            if(!components.ɵɵRelationsOptionsInitialized)\n            {\n                components.relationsOptions = meta.metadataOptions;\n                components.ɵɵRelationsOptionsInitialized = true;\n            }\n        }\n    }\n\n    /**\n     * Sets initialized promise\n     */\n    protected setInitializePromise(): void\n    {\n        this.ɵInitialized = new Promise(resolve => this.resolveInitialized = resolve);\n    }\n\n    /**\n     * Destroys initialized relations\n     */\n    protected async destroyRelations(): Promise<void>\n    {\n        await this.ɵInitialized;\n\n        Object.keys(this.relations).forEach(id => this.destroyComponent(id));\n\n        this.relations = {};\n        this.backwardRelations = {};\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\n\nimport {DynamicMetadataLoader} from './dynamicMetadata.interface';\n\ndeclare const ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata<TMetadata, TDecoratedClass>(metadataLoader: DynamicMetadataLoader<TMetadata>, propertyName: keyof TDecoratedClass): ClassDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            (target as any)[propertyName] = metadataLoader();\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {InjectionToken} from '@angular/core';\n\nimport {MetadataStateManager, PackageSource} from '../interfaces';\n\n/**\n * Injection token used for injecting class that allows working with state of metadata\n */\nexport const METADATA_STATE_MANAGER: InjectionToken<MetadataStateManager> = new InjectionToken<MetadataStateManager>('METADATA_STATE_MANAGER');\n\n/**\n * Injection token used for injecting package sources\n */\nexport const PACKAGE_SOURCES: InjectionToken<PackageSource[]> = new InjectionToken<PackageSource[]>('PACKAGE_SOURCES');\n\n/**\n * Injection token used for injecting current scope id\n */\nexport const SCOPE_ID: InjectionToken<string> = new InjectionToken<string>('SCOPE_ID');","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger?: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger?.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger?.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger?.verbose('DynamicItemLoader: Loading from cache {{@source}}', {source: {name: source.name, package: source.package}});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await asyncDynamicModule;\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger?.debug('DynamicItemLoader: Failed to get dynamic module {{@source}}', {source: {name: source.name, package: source.package}});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger?.warn('DynamicItemLoader: Found dynamic item {{@source}} is not of requested type', {source: {name: source.name, package: source.package}});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger?.debug('DynamicItemLoader: Failed to extract dynamic item {{@source}}', {source: {name: source.name, package: source.package}});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {extend, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await fn(module, this._logger));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","import {Injectable} from '@angular/core';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Class that handles hotkeys for editors\n */\n@Injectable()\nexport class EditorHotkeys\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subject used for emitting undo\n     */\n    protected undoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting redo\n     */\n    protected redoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting save\n     */\n    protected saveSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting copy\n     */\n    protected copySubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting paste\n     */\n    protected pasteSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting cut\n     */\n    protected cutSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting delete\n     */\n    protected deleteSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs on undo shortcut\n     */\n    public get undo(): Observable<void>\n    {\n        return this.undoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on redo shortcut\n     */\n    public get redo(): Observable<void>\n    {\n        return this.redoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on save shortcut\n     */\n    public get save(): Observable<void>\n    {\n        return this.saveSubject.asObservable();\n    }\n    \n    /**\n     * Occurs on copy shortcut\n     */\n    public get copy(): Observable<void>\n    {\n        return this.copySubject.asObservable();\n    }\n\n    /**\n     * Occurs on cut shortcut\n     */\n    public get cut(): Observable<void>\n    {\n        return this.cutSubject.asObservable();\n    }\n\n    /**\n     * Occurs on paste shortcut\n     */\n    public get paste(): Observable<void>\n    {\n        return this.pasteSubject.asObservable();\n    }\n\n    /**\n     * Occurs on delete shortcut\n     */\n    public get delete(): Observable<void>\n    {\n        return this.deleteSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.saveSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits save event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.undoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits undo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.redoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits redo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('del', () =>\n        {\n            this.deleteSubject.next();\n\n            return false;\n        }, [], 'Emits delete event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+c', () =>\n        {\n            this.copySubject.next();\n\n            return false;\n        }, [], 'Emits copy event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+v', () =>\n        {\n            this.pasteSubject.next();\n\n            return false;\n        }, [], 'Emits paste event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+x', () =>\n        {\n            this.cutSubject.next();\n\n            return false;\n        }, [], 'Emits cut event'));\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","UserSettingsSections","i0","theme_r5","lang_r6","name","lang","UserSettingsSAComponent_div_17_ng_option_6_Template","UserSettingsSAComponent_div_17_ng_option_12_Template","ctx_r0","generalSettingsForm","themes","languages","level_r8","value","UserSettingsSAComponent_div_18_ng_option_6_Template","ctx_r1","loggingSettingsForm","logLevels","ctx_r2","debuggingSettingsForm","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","debugDataEnabled","config","configuration","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","group","language","theme","consoleEnabled","debugData","consoleLogLevel","LogEventLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","setLoggingSettings","LogLevel","forEach","val","isNaN","push","i1","i2","i3","selectors","standalone","features","decls","vars","consts","template","rf","ctx","Logging","Debugging","UserSettingsSAComponent_div_17_Template","UserSettingsSAComponent_div_18_Template","UserSettingsSAComponent_div_19_Template","DisplayingFeatureModule","i4","i5","FormsFeatureModule","i6","i7","styles","changeDetection","PropertySelectedSAPipe","transform","component","model","property","indexOf","pure","component_r2","data","customComponentContentMetadata","metadata","displayName","description_r9","prop_r7","_r12","$implicit","modelProps_r5","component_r3","ctx_r10","toggleSelected","key","CustomComponentOptionsSAComponent_div_10_ng_container_6_div_1_span_8_Template","ctx_r6","usedProperties","tmp_1_0","propsMetadataExtractor","undefined","tmp_2_0","description","CustomComponentOptionsSAComponent_div_10_ng_container_6_div_1_Template","_r17","ctx_r16","removeComponent","CustomComponentOptionsSAComponent_div_10_ng_container_6_Template","availableProperties","CustomComponentOptionsSAComponent","dialog","formModelBuilder","FormControl","contentComponents","nameDescriptionForm","build","configurableProperties","models","_a","modelName","properties","usedComponents","filter","itm","meta","editorMetadata","metaInfo","optionsMetadata","propertiesMetadata","propMeta","modelType","length","_b","_c","prop","addComponent","index","splice","setValue","propertyName","TITLED_DIALOG_DATA","FormModelBuilder","CustomComponentOptionsSAComponent_option_6_Template","CustomComponentOptionsSAComponent_div_10_Template","_c0","CommonModule","MatDialogModule","ReactiveFormsModule","GetModelSAPipe","PropertiesMetadataSAPipe","TooltipModule","FirstUppercaseLocalizeSAPipe","encapsulation","ShowCustomComponentOptionsSADirective","injector","dialogSvc","customComponentsRegister","element","ngOnChanges","_this","_asyncToGenerator","result","getCustomComponentMeta","contentMetadata","customComponentMetadata","ngOnInit","_this2","nativeElement","disabled","show","event","_this3","preventDefault","stopPropagation","lastValueFrom","open","title","width","getConfigurationForComponent","afterClosed","setConfigurationForComponent","hostBindings","$event","val_r3","ctx_r4","_component","_r6","ctx_r5","liveEvents","enabled","LoadSaveNewSAComponent_ng_container_17_label_3_Template","componentMarking","_available","LoadSaveNewSAComponent","_router","_route","_metaManager","_changeDetector","_customComponentsRegister","_hotkeys","_metadata","_name","_availableNames","initSubscriptions","Subscription","history","layoutControls","metadataChange","EventEmitter","components","getRegisteredComponents","emitEvent","toggleRegisteredComponent","add","save","_save","historyChange","detectChanges","pop","store","getStored","params","getData","next","ngOnDestroy","unsubscribe","_load","navigate","routePath","skipLocationChange","replaceUrl","_saveData","getMetadata","_delete","removeData","_new","setData","extend","getMetadataCallback","METADATA_STATE_MANAGER","inputs","outputs","LoadSaveNewSAComponent_ng_option_2_Template","LoadSaveNewSAComponent_ng_container_13_Template","LoadSaveNewSAComponent_ng_container_17_Template","tmp_7_0","saved","NgSelectModule","MatSlideToggleModule","i8","RelationsResultRelationsMetadataLoader","_ref","RelationsResultRelationsEditorMetadata","apply","arguments","RelationsResultSAComponent","RelationsResultSAComponent_1","relationsId","_relationsProcessor","_componentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent","changes","nameof","vstup","console","log","invalidateVisuals","__decorate","RelationsEditorMetadata","ChangeDetectorRef","RelationsProcessor","RelationsComponentManager","RelationsSampleClickRelationsMetadataLoader","RelationsSampleClickRelationsEditorMetadata","RelationsSampleClickSAComponent","RelationsSampleClickSAComponent_1","_vystupForm","vystup","DynamicOutput","globalDefine","global","Document","observableSubscribe","Observable","prototype","error","complete","isBlank","isFunction","err","debug","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","height","opacity","animate","loaderTrigger","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","MenuModule","TitledDialogModule","MainMenuComponent","_dialog","openSettings","maxHeight","AppSAComponent","translateSvc","_appHotkeys","logger","document","consoleVisible","routeComponentState","guiVersion","version","verbose","body","classList","_theme","_settingsChangeSubscription","settingsChange","remove","use","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","destroy","oldHelpHotkey","hotkeys","get","Hotkey","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","AppSAComponent_console_11_Template","AppSAComponent_div_12_Template","RouterModule","InternalServerErrorModule","ProgressIndicatorModule","NotificationsGlobalModule","i9","ConsoleSAComponent","HotkeysCheatsheetSAComponent","animation","fadeInOutTrigger","consoleAnimationTrigger","COMPONENT_DEBUGGER_PROPERTY","RelationsDebuggerImpl","RelationsDebugger","inject","Injector","stepChangeSubject","Subject","currentStepIndex","steps","componentDefs","relationsComponentManager","ɵrelationsComponentManager","stepChange","asObservable","initialize","relations","backwardRelations","addInputOutput","inputOutput","addOutputDef","outputComponentId","outputName","addInputDef","inputComponentId","inputName","def","inputOutputs","tryToGetEndpoints","getLastComponents","ɵɵRelationsComponentId","warn","Reflect","getOwnPropertyDescriptor","defineProperty","configurable","enumerable","writable","obj","getPrototypeOf","$this","getter","setter","set","readComponentState","setComponentRelationsOptions","timestamp","Date","now","componentRegistration","componentId","componentInternalId","componentState","componentUnregistration","dataTransfer","componentRelationsOptions","previousStep","getLastStepData","deleteProperty","transferData","transfer","options","ɵuniqueId","generateId","applyChangesOriginal","applyChanges","change","scope","step","comp","currentValue","bind","getCurrentComponents","getComponentDef","getComponentState","getCurrentStep","getComponentRelationsOptions","getLastStep","getFirstStep","getNextStep","getPreviousStep","clearSteps","Array","isArray","state","itmDict","input","output","assigned","skipInit","relationsOptions","getDebugData","dynamicEndpointsGetter","inputsOutputsDef","ɵɵinjector","factory","ɵfac","DebuggerNodeRelationsMetadataLoader","DebuggerNodeRelationsEditorMetadata","DebuggerNodeRelations","PureRelationsComponent","RelationsDebuggerDynamicModuleItemsProvider","_logger","tryToGet","source","package","debuggerNode","RELATIONS_DEBUGGER_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","accessDeniedRoute","path","loadComponent","AccessDeniedComponent","notFoundRoute","NotFoundComponent","routes","redirectTo","pathMatch","loadChildren","LayoutModule","LayoutEditorModule","RelationsStaticModule","RelationsEditorModule","RelationsWithEditorModule","RelationsWithLayoutEditorModule","RelationsComplexModule","RelationsLayoutFormModule","extractRoutes","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","WebpackTranslateLoaderService","getTranslation","observer","default","ReportMissingTranslationService","handle","appProviders","provideRouter","withComponentInputBinding","withHashLocation","provideClientHydration","provideHttpClient","withInterceptorsFromDi","provideZoneChangeDetection","eventCoalescing","runCoalescing","importProvidersFrom","TranslateModule","forRoot","loader","TranslateLoader","debugTranslations","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","HttpGatewayTimeoutInterceptorOptions","GlobalizationServiceImpl","ERROR_WITH_URL_EXTENDER","ANGLR_EXCEPTION_HANDLER_PROVIDER","DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER","NO_DATA_RENDERER_OPTIONS","useValue","texts","loading","noData","notLoaded","GRID_INITIALIZER_TYPE","QueryGridInitializerComponent","PAGING_OPTIONS","itemsPerPageValues","initialItemsPerPage","GRID_INITIALIZER_OPTIONS","storageIppName","CONTENT_RENDERER_OPTIONS","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","PERMANENT_STORAGE","LocalPermanentStorage","provideLoggerConfig","writeTo","cfg","ConsoleComponentSink","minimumLevel","SettingsService","DeveloperConsoleSink","enrichWith","LogLevelEnricher","TimestampEnricher","Verbose","messageTemplate","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","provideGlobalNotifications","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogService","TitledDialogServiceOptions","MovableTitledDialogComponent","CONFIRMATION_DIALOG_OPTIONS","confirmationText","dialogCancelText","dialogConfirmText","providePosition","FloatingUiDomPosition","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","DATETIME_REST_DATE_API","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","REST_METHOD_MIDDLEWARES","ResponseTypeMiddleware","ReportProgressMiddleware","ClientErrorHandlingMiddleware","HTTP_CLIENT_ERROR_RESPONSE_MAPPER","errors","isString","isJsObject","JSON","stringify","message","HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER","validationErrors","HTTP_CLIENT_ERROR_CUSTOM_HANDLER","handle404Func","RestNotFoundError","DEFAULT_RELATIONS_NODES_EXTRACTOR","RELATIONS_NODES_LOADER_PROVIDER","RELATIONS_DEBUGGER_TYPE","DndModule","backend","HTML5Backend","enableProdMode","providers","provideAnimations","AnglrExceptionHandlerOptions","HotkeyModule","cheatSheetCloseEsc","runWhenAppStable","bootstrapApplication","appRef","RestTransferStateService","clearAndDeactivate","InjectionToken","CommonUtilsModule","CommonLocalizeModule","DatePipesModule","NumberInputModule","NgSelectEditModule","HasErrorModule","FormPipesModule","CUSTOM_COMPONENTS","DemoCustomComponentsRegister","CustomComponentsRegister","registeredChange","_registeredChange","_store","super","customComponents","_settings","_settingsDebugging","_settingsLogging","_settingsChangeSubject","_settingsDebuggingChangeSubject","keyValueDiffers","_storage","getDebugging","getLogging","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","forEachChangedItem","setDebugging","setLogging","providedIn","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","general","logging","descendantsGetterSymbol","Symbol","DescendantsGetter","descendantsGetterFn","target","getDescendantsGetter","type","LayoutDesignerDynamicModuleItemsProvider","item","layoutDesignerTypeExtractor","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","localModuleEditorData","layoutEditorDesignerType","childExtensions","extensions","_x","_x2","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","DynamicModuleDataExtractor","deps","Optional","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_TRANSFORM","typeMetadata","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","LAYOUT_MODULE_TYPES_PROVIDERS","isLayoutModuleTypes","LAYOUT_HISTORY_MANAGER_STATE","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","LAYOUT_HISTORY_MANAGER","MetadataHistoryManager","InputBooleanComponent","PropertyTypeControlBase","_control","TextareaComponent","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","InputStringComponent","SelectValueComponent","InputNumberComponent","REFRESH_PALETTE_OBSERVABLES","LAYOUT_DEFAULTS_OVERRIDE","provideLayoutEditor","designerLayout","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LiveEventService","LayoutComponentsIteratorService","provideLayoutDefaultsOverride","defaultsOverride","control","_controlSet","_initialized","values","_initialize","val_r1","SelectValueComponent_option_2_Template","_dragging","_draggingChange","dragging","draggingChange","setDragging","LayoutComponentsIterator","asyncIterator","x","initPromise","getInitPromise","items","done","layoutMetadata","callback","parent","levelIndex","level","getComponents","getComponent","iteratorItem","loadItem","getDescendants","childrenMeta","_this4","__param","Inject","LAYOUT_COMPONENTS_LOADER","LayoutComponentsChildrenIterator","getChildren","getIteratorFor","getChildrenIteratorFor","_loader","_cache","extractMetadata","cacheId","metadataType","layoutEditorMetadata","metadataData","freeze","selectedComponent","_selectedComponent","highlightedComponent","_highlightedComponent","draggedOverComponent","_draggedOverComponent","root","rootComponentId","layoutChange","layoutChangeSubject","selectedChange","_selectedChange","highlightedChange","_highlightedChange","displayNameChange","_displayNameChanges","draggedOverComponentChange","_draggedOverComponentChange","flatTree","_flatTree","_buildFlatTree","_editorHotkeys","delete","removeDescendant","copy","metadataClipboard","cut","paste","newId","canDrop","addDescendant","parentId","selectComponent","unselectComponent","highlightComponent","cancelHighlightedComponent","dragOverComponent","cancelDragOverComponent","registerLayoutDesignerComponent","componentItem","children","getParent","getIndex","unregisterLayoutDesignerComponent","displayNameUpdated","_buildFlatTreeForComponent","child","concat","_layoutPropertiesSymbols","extract","propSymbol","LIVE_EVENTS_STATUS","ɵenabled","enabledChange","ɵenabledChange","storage","LayoutComponentsRelationsNodesProvider","_componentsRegister","getType","getDisplayName","getScope","getComponentName","getComponentPackage","LayoutComponentsRelationsTypesProvider","types","resultTypes","node","RELATIONS_NODES_LOADER","CustomComponentsDynamicModuleItemsProvider","_customComponentRegister","customComponent","customComponentConfiguration","CustomComponentsDynamicModuleTypesProvider","CustomComponentsDynamicModuleRelationsProvider","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","ScopeRegister","RelationsScopeRegister","layoutManager","componentRegister","getScopes","ɵScopes","scopesChangeSubject","provideLayoutRelations","provideRelations","provideLayoutRelationsCustomComponents","provideLayoutRelationsEditor","relationsProviders","provideRelationsEditor","LayoutManager","LayoutComponentsRegister","provideStaticPackageSource","provideEditorRelationsCustomComponents","layoutRelationsEditorProviders","customComponentRegister","provideEditorLayoutCustomComponents","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","_getCustomComponentMeta","layoutMetadataStorage","LAYOUT_METADATA_STORAGE","iterator","metadataExtractor","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","return","DebounceCall","WithSync","propertyExtractor","_config","initializeTypes","definedTypes","iteratorSvc","_this5","_this6","layout","layoutComponents","_layout","_layoutChange","setLayout","isEqual","LAYOUT_COMPONENT_CHILD_EXTENSIONS","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","isLayoutComponentDef","isType","isPresent","some","metadataLoader","DynamicClassMetadata","relationsNodeExtractor","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","componentRelationsNodeExtractor","singleton","StaticComponentsRelationsNodesProvider","StaticComponentsRelationsTypesProvider","RELATIONS_NODES_DATA_EXTRACTORS","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","RELATIONS_MODULE_TYPES_LOADER","isRelationsModuleTypes","isRelationsNodeDef","RELATIONS_HISTORY_MANAGER_STATE","RelationsNodeManager","RELATIONS_HISTORY_MANAGER_PROVIDER","RELATIONS_HISTORY_MANAGER","RELATIONS_DEFAULTS_OVERRIDE","clamp","num","min","max","Math","isBoolean","provideRelationsEditorWithStatic","provideRelationsDefaultOverride","stringToColour","str","hash","i","charCodeAt","colour","toString","substr","_nodes","_waitingInputRelations","_nodesChange","_activeNodeChange","_nodeRegisterChange","_nodeUnregisterChange","nodes","nodesChange","activeNode","_activeNode","activeNodeChange","nodeRegisterChange","nodeUnregisterChange","setActiveInput","_activeInput","getActiveInput","registerNode","outputNode","relationsNode","relation","startRelation","inputNode","endRelation","waitingInputRelations","waiting","unregisterNode","nodeIds","nodeMetadata","allOutputs","outputMeta","setActiveNode","scopes","scopesChange","_definedTypes","getDefinedTypes","DEBUG_DATA_SYMBOL","DebugData","propertyKey","defineAssignedProp","sync","componentManager","changeDetector","RelationsChangeDetector","getId","markForCheck","defineSkipInitProp","isRelationsComponentType","__ɵɵRelationsComponent","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","RELATIONS_COMPONENTS_LOADER","RELATIONS_METADATA_STORAGE","RELATIONS_PROCESSOR_SKIP_INIT","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_LOADER_PROVIDER","isRelationsComponentDef","provideRelationsDebugger","RelationsManager","CodeExecutor","object","propName","has","isSkipInit","isAssigned","loadedDataCache","loadData","scriptElement","createElement","loadHelper","innerText","window","loadType","exp","require","requireName","getElementsByTagName","appendChild","RelationsChangeDetectorOptions","detectionInSingleRun","relationsProcessor","ɵrelationsProcessor","outputsComponents","isEmptyObject","ɵoutputsComponents","markedBeforeInit","skipSelf","firstRunChanges","secondRunChanges","checkRunning","relationDefs","relationDef","timeout","setTimeout","runCheck","relationsDef","markForCheckId","transferInputsData","BindThis","relationsDebugger","scopeId","childrenCache","manager","removeCacheFromHierarchy","getChildrenComponents","getParentComponents","openScope","getFromScope","mngr","cmp","_relations","_relationsChange","relationsChange","setRelations","RelationsDataTransferInstructionImpl","_changes","ɵRelations","ɵBackwardRelations","ɵInitialized","relationsManager","resolveInitialized","noop","relationsChangeDetector","initializeRelations","destroyRelations","initOptions","initBackwardRelation","outputComponent","ɵɵRelationsOutputsChangeSubscriptions","subscription","inputComponents","outputObservable","inputComponent","ɵɵRelationsOptionsInitialized","autoCreated","processor","componentType","instance","destroyScope","transferOutputsData","delayed","forceTransfer","transfers","previousValue","isStrictEquals","firstChange","isFirstChange","backwardRelation","setInitializePromise","initComponent","outputComponents","inputCmp","outputCmp","sourceTarget","initial","initRelation","componentMeta","metadataOptions","ngDesignerMetadata","extensionsObject","PACKAGE_SOURCES","SCOPE_ID","addSimpleChange","packageName","packages","packagesChange","NEVER","refresh","getJson","jsonString","parse","extractors","validatorFn","noCache","cachedDynamicItems","dynamicModule","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","_extractorFunctions","fn","EditorHotkeys","undo","undoSubject","redo","redoSubject","saveSubject","copySubject","cutSubject","pasteSubject","deleteSubject","init","canUndo","activeIndex","canRedo","states","saveIndex","popSubject","historyChangeSubject","metadataState","getNewState","shift","setInitialState","clean","enable","disable"],"sourceRoot":""}