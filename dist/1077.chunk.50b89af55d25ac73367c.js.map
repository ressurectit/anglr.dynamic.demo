{"version":3,"file":"1077.chunk.50b89af55d25ac73367c.js","mappings":"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","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/htmlLanguageModel.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Html language model for code editor\n */\nexport const HtmlLanguageModel = new LanguageModel('html', 'html', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\n\n//TODO: check all models for \"public\" \n\n/**\n * Html block model for properties editor\n */\nexport class HtmlBlockModel implements HtmlBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    public content: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: HtmlBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {HtmlLanguageModel} from '@anglr/dynamic';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\nimport {HtmlBlockModel} from './htmlBlock.model';\n\n/**\n * Html block layout metadata\n */\nexport class HtmlBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<HtmlBlockComponentOptions> =\n    {\n        name: 'Html block',\n        description: 'Html block - displays html or string',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: HtmlBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<HtmlBlockModel>('content', HtmlLanguageModel),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            content: '<div>This is your <strong>HTML</strong> block</div>'\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["HtmlLanguageModel","LanguageModel","editor","getModel","getValue","HtmlBlockModel","constructor","value","content","mapValuesToThis","this","HtmlBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","codePropertiesControlFor","defaultOptions","Object","freeze","LayoutPropertyMetadata","Symbol","InputStringComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","_changeDetector","_initialized","values","control","_control","_controlSet","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","inputs","val_r1","SelectValueComponent","LAYOUT_COMPONENT_TRANSFORM","InjectionToken","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_COMPONENTS_LOADER","LAYOUT_METADATA_STORAGE","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","AsFormControlPipe","_logger","transform","_valueHash","isBlank","warn","LOGGER","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}