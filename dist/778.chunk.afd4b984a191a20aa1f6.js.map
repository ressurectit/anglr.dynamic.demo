{"version":3,"file":"778.chunk.afd4b984a191a20aa1f6.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        this._items.push(iteratorItem);\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>|undefined|null;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name]?.displayName ?? undefined;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n            };\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n\n        return {\n            default: type,\n            displayName,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DefaultDynamicPackage, provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager} from '../services';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditor(packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutEditor(false, packages),\n        ...provideRelationsEditor([]),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(packages),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>,\n                                       packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","LayoutComponentsIterator","_layoutMetadata","_extractor","_logger","_items","_initialized","_initPromise","Symbol","asyncIterator","x","initPromise","this","_getInitPromise","items","next","length","value","done","forEach","callback","item","metadata","parent","levelIndex","level","_getComponents","_getComponent","iteratorItem","push","meta","extractMetadata","debug","package","name","getDescendants","childrenMeta","options","LayoutComponentsIteratorService","getIteratorFor","layoutMetadata","i0","LOGGER","LayoutComponentsRegister","_layoutManager","_loader","_iteratorSvc","_initSubscriptions","Subscription","_definedTypes","add","layoutChange","subscribe","types","_initializeTypes","then","Object","keys","ngOnDestroy","unsubscribe","getType","type","getDisplayName","displayName","undefined","layout","layoutComponents","component","loadItem","id","data","LAYOUT_COMPONENTS_LOADER","LayoutComponentsRelationsNodesProvider","_componentsRegister","tryToGet","source","default","LayoutComponentsRelationsTypesProvider","resultTypes","RELATIONS_NODES_LOADER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","provideLayoutRelations","provideLayout","provideRelations","provideLayoutRelationsEditor","packages","provideLayoutEditor","provideRelationsEditor","LayoutManager","REFRESH_PALETTE_OBSERVABLES","useFactory","layoutManager","deps","provideStaticPackageSource","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","DynamicLayoutRelationsEditorModule","ngModule","providers","DynamicLayoutEditorModule","DynamicRelationsEditorModule","_layout","_layoutChange","Subject","asObservable","setLayout","provideRelationsEditorWithStatic","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DefaultDynamicModuleItemsProvider","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","Optional","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","isBlank","isType","RelationsComponentManager","RelationsManager","RelationsProcessor","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","GoBackModule"],"sourceRoot":""}