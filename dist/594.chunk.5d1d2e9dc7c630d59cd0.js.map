{"version":3,"file":"594.chunk.5d1d2e9dc7c630d59cd0.js","mappings":"oMASM,MAAOA,EAsDTC,cA/CO,KAAAC,SACP,CACIC,KAAM,OACNC,YAAa,0CACbC,MAAO,SACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,OAUb,KAAAC,cAAuF,CAACC,EAAUC,KAErGA,EAAQC,SAAWF,CAAnB,EAMG,KAAAG,gBAA8EF,IAAYA,GAASC,SAKnG,KAAAE,eAA+FH,GAAWA,GAASC,SAAW,CAACD,GAASC,UAAY,GAKpJ,KAAAG,iBAAiE,CAACC,EAAGL,KAExEA,EAAQC,SAAW,IAAnB,EAMAK,OAAOC,OAAOC,KACjB,E,mCClDE,MAAMC,EAAyBC,OAAO,yB,2MCJvC,MAAOC,EAUTxB,YAAwDyB,EACNC,GADM,KAAAD,QAAAA,EACN,KAAAC,QAAAA,EAJxC,KAAAC,OAAqD,CAAC,CAM/D,CAQYC,gBAAgBhB,GAA2B,I,EAAA,c,EAAA,YAEpD,MAAMiB,EAAU,GAAGjB,EAASkB,WAAWlB,EAASV,OAEhD,GAAG,EAAKyB,OAAOE,GAEX,OAAO,EAAKF,OAAOE,GAGvB,MAAME,QAAa,EAAKN,QAAQO,SAASpB,GAEzC,IAAImB,EAEA,OAAO,KAGX,MAAME,EAAeF,EAAKG,KAE1B,IAAID,EAAaE,qBAIb,OAFA,EAAKT,SAASU,KAAK,oDAAqD,CAACN,QAASlB,EAASkB,QAAS5B,KAAMU,EAASV,OAE5G,KAGX,EAAKwB,SAASW,MAAM,oDAAqD,CAACP,QAASlB,EAASkB,QAAS5B,KAAMU,EAASV,OAEpH,MAAMoC,QAAqBL,EAAaE,qBAKxC,OAJAhB,OAAOC,OAAOkB,GAEd,EAAKX,OAAOE,GAAWS,EAEhBA,CAhC6C,E,gLAiCvD,E,iCAtDQd,GAA6Be,EAAAA,GAUlBC,EAAAA,IAAwBD,EAAAA,GACxBE,EAAAA,GAAM,K,oBAXjBjB,EAA6BkB,QAA7BlB,EAA6B,M,kDCLnC,MAAMmB,EACb,CACIC,gBAAiB,GACjBC,WAAY,GACZC,UAAU,EACVf,KAAMgB,EAAAA,GACNC,UAAWD,EAAAA,GACXE,KAAM,CAAC,E,6FCLL,MAAOC,EAGTlD,YAAgD0B,GAAA,KAAAA,QAAAA,CAE/C,CASMyB,UAAkBC,EAA+CC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQF,GAEA,KAGRA,aAAiBL,EAAAA,GAETK,GAGX/B,KAAKK,SAASU,KAAK,iDAEZ,KACV,E,iCA7BQc,GAAAA,EAAAA,EAGuBT,EAAAA,GAAMA,I,0CAH7BS,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/metadata/listBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions} from '../listBlock.options';\n\n/**\n * List block layout metadata\n */\nexport class ListBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<ListBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<ListBlockComponentOptions> =\n    {\n        name: 'List',\n        description: 'List block - displays template in array',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n            ],\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, ListBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.template = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [ListBlockComponentOptions|undefined|null]> = options => !options?.template;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [ListBlockComponentOptions|undefined|null]> = options => options?.template ? [options?.template] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, ListBlockComponentOptions]> = (_, options) =>\n    {\n        options.template = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["ListBlockLayoutEditorMetadata","constructor","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","addDescendant","metadata","options","template","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","this","LayoutPropertyMetadata","Symbol","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","cacheId","package","type","loadItem","metadataType","data","layoutEditorMetadata","warn","debug","metadataData","i0","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","FormControl","childType","args","AsFormControlPipe","transform","value","_valueHash","isBlank"],"sourceRoot":""}