{"version":3,"file":"7964.chunk.3120c90587b9f2bf91ce.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\n\n/**\n * Toggle button layout metadata loader\n */\nexport const ToggleButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ToggleButtonComponentOptions>> = async () => new (await import('./metadata/toggleButton.layoutMetadata')).ToggleButtonLayoutEditorMetadata();\n\n/**\n * Toggle button relations metadata loader\n */\nexport const ToggleButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/toggleButton.relationsMetadata')).ToggleButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {isPresent, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\nimport {ToggleButtonLayoutMetadataLoader, ToggleButtonRelationsMetadataLoader} from './toggleButton.metadata';\n\n/**\n * Component used for displaying toggle button\n */\n@Component(\n{\n    selector: 'toggle-button',\n    templateUrl: 'toggleButton.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<ToggleButtonSAComponent>('disabled'),\n    ],\n    outputs:\n    [\n        nameof<ToggleButtonSAComponent>('toggle'),\n    ],\n})\n@RelationsEditorMetadata(ToggleButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ToggleButtonLayoutMetadataLoader)\nexport class ToggleButtonSAComponent extends LayoutComponentBase<ToggleButtonComponentOptions> implements LayoutComponent<ToggleButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is toggle button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting on/off state of toggle button\n     */\n    @DynamicOutput()\n    public toggle: boolean|undefined|null;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n\n        if(isPresent(this.options?.state))\n        {\n            this.toggle = this.options?.state;\n        }\n    }\n}","<button type=\"button\" type=\"button\" [ngClass]=\"options?.buttonCssClass ?? ''\" [disabled]=\"disabled\" (click)=\"toggle = !toggle\">\n    <span>{{toggle ? options?.onText : options?.offText}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ToggleButtonSAComponent} from './toggleButton.component';\n\nexport default ToggleButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ToggleButtonLayoutMetadataLoader","_ref","_asyncToGenerator","ToggleButtonLayoutEditorMetadata","apply","arguments","ToggleButtonRelationsMetadataLoader","_ref2","ToggleButtonRelationsEditorMetadata","ToggleButtonSAComponent","LayoutComponentBase","constructor","disabled","onOptionsSet","this","options","isPresent","state","toggle","t","selectors","inputs","standalone","features","i0","decls","vars","consts","template","rf","ctx","tmp_0_0","buttonCssClass","undefined","onText","offText","CommonModule","i1","styles","changeDetection","__decorate","DynamicOutput","DebugData","nameof","outputs","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}