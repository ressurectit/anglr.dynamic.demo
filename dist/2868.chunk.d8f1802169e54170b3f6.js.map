{"version":3,"file":"2868.chunk.d8f1802169e54170b3f6.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/expansionPanel.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/expansionPanel/type.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\n\n/**\n * Material expansion panel layout metadata loader\n */\nexport const MaterialExpansionPanelLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialExpansionPanelComponentOptions>> = async () => new (await import('./metadata/expansionPanel.layoutMetadata')).MaterialExpansionPanelLayoutEditorMetadata();\n","<mat-expansion-panel [expanded]=\"expanded\">\n    <mat-expansion-panel-header>\n        <mat-panel-title>{{title}}</mat-panel-title>\n        <mat-panel-description>{{description}}</mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <ng-container *ngFor=\"let type of options?.children\">\n        <ng-template [layoutComponentRenderer]=\"type\"></ng-template>\n    </ng-container>\n</mat-expansion-panel>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {MaterialExpansionPanelComponentOptions} from './expansionPanel.options';\nimport {MaterialExpansionPanelLayoutMetadataLoader} from './expansionPanel.metadata';\n\n/**\n * Component used for displaying toggle panel layout\n */\n@Component(\n{\n    selector: 'material-expansion-panel',\n    templateUrl: 'expansionPanel.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatExpansionModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<MaterialExpansionPanelComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(MaterialExpansionPanelLayoutMetadataLoader)\nexport class MaterialExpansionPanelSAComponent extends LayoutComponentBase<MaterialExpansionPanelComponentOptions> implements LayoutComponent<MaterialExpansionPanelComponentOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether panel is expanded\n     */\n    @Input()\n    public expanded: boolean = true;\n\n    /**\n     * Expansion panel title\n     */\n    @Input()\n    public title: string|null|undefined;\n\n    /**\n     * Expansion panel description\n     */\n    @Input()\n    public description: string|null|undefined;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        this.expanded = this.options?.expanded ?? false;\n        this.title = this.options?.title;\n        this.description = this.options?.description;\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialExpansionPanelSAComponent} from './expansionPanel.component';\n\nexport default MaterialExpansionPanelSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","LayoutComponentBase","element","this","componentElement","extensionsOptions","options","constructor","changeDetector","injector","logger","extensions","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","onOptionsSet","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","features","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","selectors","standalone","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","component","ɵComponentRef","instance","componentRef","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","id","clear","customInjector","scope","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialExpansionPanelLayoutMetadataLoader","MaterialExpansionPanelLayoutEditorMetadata","MaterialExpansionPanelSAComponent","expanded","title","description","CommonModule","MatExpansionModule","styles","changeDetection","DescendantsGetter","children","metadata"],"sourceRoot":""}