{"version":3,"file":"4243.chunk.ca5dcd636d02eead1610.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\n\n/**\n * Template block layout metadata loader\n */\nexport const TemplateBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TemplateBlockComponentOptions>> = async () => new (await import('./metadata/templateBlock.layoutMetadata')).TemplateBlockLayoutEditorMetadata();\n\n/**\n * Template block layout designer type loader\n */\nexport const TemplateBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/templateBlockDesigner.component')).TemplateBlockDesignerSAComponent;","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\nimport {TemplateBlockLayoutDesignerTypeLoader, TemplateBlockLayoutMetadataLoader} from './templateBlock.metadata';\n\n/**\n * Component used for displaying template block\n */\n@Component(\n{\n    selector: 'template-block',\n    templateUrl: 'templateBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(TemplateBlockLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(TemplateBlockLayoutMetadataLoader)\nexport class TemplateBlockSAComponent extends LayoutComponentBase<TemplateBlockComponentOptions> implements LayoutComponent<TemplateBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onOptionsSet(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        const id = this.options?.layoutId;\n\n        if(!id)\n        {\n            return;\n        }\n\n        this.metadata = await this.layoutMetadataStorage.getMetadata(id);\n\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            const relations = await this.relationsMetadataStorage.getMetadata(id);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n    }\n}","<ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockSAComponent} from './templateBlock.component';\n\nexport default TemplateBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TemplateBlockLayoutMetadataLoader","TemplateBlockLayoutEditorMetadata","TemplateBlockLayoutDesignerTypeLoader","TemplateBlockDesignerSAComponent","TemplateBlockSAComponent","LayoutComponentBase","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","metadata","onOptionsSet","initialized","id","options","layoutId","getMetadata","relations","setRelations","t","selectors","standalone","features","RelationsComponentManager","RelationsProcessor","i0","decls","vars","consts","template","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","componentElement","injector","logger","destroyed","element","this","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","viewContainerRef","loader","childExtensions","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","ɵComponentRef","instance","componentRef","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","SCOPE_ID","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DynamicItemExtensionBase","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}