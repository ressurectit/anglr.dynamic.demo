{"version":3,"file":"6425.chunk.ac9d09b456396eefe431.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/datepicker/datepicker.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/datepicker/datepicker.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/datepicker/datepicker.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/datepicker/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {{@name}}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {DatepickerComponentOptions} from './datepicker.options';\n\n/**\n * Datepicker layout metadata loader\n */\nexport const DatepickerLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<DatepickerComponentOptions>> = async () => new (await import('./metadata/datepicker.layoutMetadata')).DatepickerLayoutEditorMetadata();\n\n/**\n * Datepicker relations metadata loader\n */\nexport const DatepickerRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/datepicker.relationsMetadata')).DatepickerRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {DatepickerLayoutMetadataLoader, DatepickerRelationsMetadataLoader} from './datepicker.metadata';\nimport {DatepickerComponentOptions} from './datepicker.options';\n\n/**\n * Component used for displaying datepicker\n */\n@Component(\n{\n    selector: 'form-datepicker',\n    templateUrl: 'datepicker.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        ReactiveFormsModule,\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n    ]\n})\n@RelationsEditorMetadata(DatepickerRelationsMetadataLoader)\n@LayoutEditorMetadata(DatepickerLayoutMetadataLoader)\nexport class DatepickerSAComponent extends FormComponentBase<DatepickerComponentOptions> implements FormComponent<DatepickerComponentOptions>\n{}","<label>{{options?.label}}</label>\n<input type=\"date\" [attr.placeholder]=\"options?.placeholder\" [formControl]=\"control|asFormControl|asRequired\"/>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {DatepickerSAComponent} from './datepicker.component';\n\n\nexport default DatepickerSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}"],"names":["FormComponentBase","LayoutComponentBase","value","oldValue","this","valueOutput","control","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","FormControl","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","DatepickerLayoutMetadataLoader","_ref","_asyncToGenerator","DatepickerLayoutEditorMetadata","apply","arguments","DatepickerRelationsMetadataLoader","_ref2","DatepickerRelationsEditorMetadata","DatepickerSAComponent","t","selectors","standalone","decls","vars","consts","template","rf","ctx","label","placeholder","ReactiveFormsModule","i1","FormPipesModule","i2","CastPipesModule","i3","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","InjectionToken","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","initialized","destroyed","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","_this","onInit","extension","initialize","afterInit","ngOnChanges","changes","_this2","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","AsFormControlPipe","transform","_valueHash","isBlank","pure"],"sourceRoot":""}