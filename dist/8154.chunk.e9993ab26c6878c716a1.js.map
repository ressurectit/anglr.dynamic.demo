{"version":3,"file":"8154.chunk.e9993ab26c6878c716a1.js","mappings":"ikBAUO,MAAMA,EAA+B,eAAAC,EAAAC,GAAuF,mBAAY,WAAW,iCAAiDC,gCAAiC,sBAAhM,OAAAF,EAAAG,MAAA,KAAAC,UAAA,KAK/BC,EAAmC,eAAAC,EAAAL,GAAiD,yBAAmB,iCAAoDM,8BAA8B,sBAAtJ,OAAAD,EAAAH,MAAA,KAAAC,UAAA,K,oCCN1C,MAAOI,EAGTC,WAAAA,CAAsBC,GAAA,KAAAA,mBAAAA,CAEtB,CAQOC,SAAAA,CAAUC,GAEb,OAAOC,KAAKH,mBAAmBI,WAAWF,EAC9C,E,iCAhBSJ,GAAuBO,EAAAA,EAAAC,EAAAA,EAAA,M,4CAAvBR,EAAuBS,MAAA,EAAAC,YAAA,I,4FC0D7B,IAAMC,EAAN,cAAqCC,EAAAA,EAArCX,WAAAA,G,oBAOO,KAAAC,oBAA+EW,EAAAA,EAAAA,IAAOC,EAAAA,GAOzF,KAAAC,GAAa,E,CAObC,KAAAA,CAAMD,GAETV,KAAKU,GAAKA,CACd,G,wDAxBSJ,KAAsBM,GAAtBN,EAAsB,G,qBAAtBA,EAAsBO,UAAA,kBAAAR,YAAA,EAAAS,SAAA,CAAAZ,EAAAA,EAvC/B,CAEI,CACIa,QAASC,EAAAA,EACTC,WAAYA,KAAMT,EAAAA,EAAAA,IAAOC,EAAAA,GAAoBS,2BAGjD,CACIH,QAASI,EAAAA,EACTF,WAAYA,KAAMT,EAAAA,EAAAA,IAAOC,EAAAA,GAAoBW,kBAGjD,CACIL,QAASM,EAAAA,EACTJ,WAAYA,KAAMT,EAAAA,EAAAA,IAAOC,EAAAA,GAAoBa,oBAGjD,CACIP,QAASQ,EAAAA,EACTN,WAAYA,KAAMT,EAAAA,EAAAA,IAAOC,EAAAA,GAAoBe,yBAGjD,CACIT,QAASU,EAAAA,EACTR,WAAYA,KAAMT,EAAAA,EAAAA,IAAOC,EAAAA,GAAoBiB,mBAGjD,CACIX,QAASN,EAAAA,EACTQ,WAAYA,IAED,IAAIR,EAAAA,EAAmBH,MAGzCJ,EAAAA,EAAAA,EAAAA,GAAAyB,MAAA,EAAAC,KAAA,EAAAC,OAAA,gCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IC9DL7B,EAAAA,GAAA,GACIA,EAAAA,GAAA,K,4BACJA,EAAAA,M,MADkBA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,0BAAAA,EAAAA,GAAA,IAAA8B,EAAAtB,K,gBDuBVuB,EAAAA,EACAtC,GAAuBuC,OAAA,sCAAAC,gBAAA,IA0ClB7B,GAAsB8B,EAAAA,EAAAA,IAAA,EAFlCC,EAAAA,EAAAA,GAAyB7C,IACzB8C,EAAAA,EAAAA,GAAqBpD,IACToB,E,+EEhEb,Q,SAAqC,EAExBiC,EAAa,CAACC,EAAAA,E","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/misc/pipes/containerMetadata/containerMetadata.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/type.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\n\n/**\n * Placeholder layout metadata loader\n */\nexport const PlaceholderLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PlaceholderComponentOptions>> = async () => new (await import('./metadata/placeholder.layoutMetadata')).PlaceholderLayoutEditorMetadata();\n\n/**\n * Placeholder layout designer type loader\n */\nexport const PlaceholderLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/placeholderDesigner.component')).PlaceholderDesignerSAComponent;\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {PlaceholderHandler} from '../../../../../services';\n\n/**\n * Gets container metadata that are displayed in placeholder\n */\n@Pipe({name: 'containerMetadata', standalone: true,})\nexport class ContainerMetadataSAPipe<TOptions = unknown> implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(protected placeholderHandler: PlaceholderHandler<TOptions>,)\n    {\n    }\n\n    //######################### public methods - implementation of ContainerMetadataSAPipe #########################\n\n    /**\n     * Gets container metadata that are displayed in placeholder\n     * @param value - Id of container\n     */\n    public transform(value: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this.placeholderHandler.getOptions(value);\n    }\n}","import {Component, ChangeDetectionStrategy, inject, FactoryProvider} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\nimport {PlaceholderLayoutDesignerTypeLoader, PlaceholderLayoutMetadataLoader} from './placeholder.metadata';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services';\nimport {PlaceholderContainerComponentOptions} from '../placeholderContainer';\nimport {ContainerMetadataSAPipe} from './misc/pipes';\n\n/**\n * Component used for displaying placeholder\n */\n@Component(\n{\n    selector: 'placeholder',\n    templateUrl: 'placeholder.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n        ContainerMetadataSAPipe,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(PlaceholderHandler).relationsComponentManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsManager,\n            useFactory: () => inject(PlaceholderHandler).relationsManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(PlaceholderHandler).relationsProcessor,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsChangeDetector,\n            useFactory: () => inject(PlaceholderHandler).relationsChangeDetector,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsDebugger,\n            useFactory: () => inject(PlaceholderHandler).relationsDebugger,\n        },\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(PlaceholderSAComponent);\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(PlaceholderLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(PlaceholderLayoutMetadataLoader)\nexport class PlaceholderSAComponent extends LayoutComponentBase<PlaceholderComponentOptions> implements LayoutComponent<PlaceholderComponentOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Handler used for working with placeholder\n     */\n    protected placeholderHandler: PlaceholderHandler<PlaceholderContainerComponentOptions> = inject(PlaceholderHandler);\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","<ng-container>\n    <ng-container [layoutComponentRenderer]=\"id | containerMetadata\"></ng-container>\n</ng-container>","import {IdSetterExtension} from '../../misc/extensions';\nimport {PlaceholderSAComponent} from './placeholder.component';\n\nexport default PlaceholderSAComponent;\n\nexport const extensions = [IdSetterExtension];"],"names":["PlaceholderLayoutMetadataLoader","_ref","_asyncToGenerator","PlaceholderLayoutEditorMetadata","apply","arguments","PlaceholderLayoutDesignerTypeLoader","_ref2","PlaceholderDesignerSAComponent","ContainerMetadataSAPipe","constructor","placeholderHandler","transform","value","this","getOptions","i0","i1","pure","standalone","PlaceholderSAComponent","LayoutComponentBase","inject","PlaceholderHandler","id","setId","t","selectors","features","provide","RelationsComponentManager","useFactory","relationsComponentManager","RelationsManager","relationsManager","RelationsProcessor","relationsProcessor","RelationsChangeDetector","relationsChangeDetector","RelationsDebugger","relationsDebugger","decls","vars","consts","template","rf","ctx","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","IdSetterExtension"],"sourceRoot":""}