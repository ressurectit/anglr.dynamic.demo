{"version":3,"file":"7195.chunk.1a9e0f063ecf7db0afaf.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/htmlBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/htmlBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\n\n/**\n * Html block layout metadata loader\n */\nexport const HtmlBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>> = async () => new (await import('./metadata/htmlBlock.layoutMetadata')).HtmlBlockLayoutEditorMetadata();\n\n/**\n * Html block relations metadata loader\n */\nexport const HtmlBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/htmlBlock.relationsMetadata')).HtmlBlockRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input, SimpleChanges} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from './htmlBlock.options';\nimport {HtmlBlockLayoutMetadataLoader, HtmlBlockRelationsMetadataLoader} from './htmlBlock.metadata';\n\n/**\n * Component used for displaying html block\n */\n@Component(\n{\n    selector: 'html-block',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(HtmlBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(HtmlBlockLayoutMetadataLoader)\nexport class HtmlBlockSAComponent extends LayoutComponentBase<HtmlBlockComponentOptions> implements LayoutComponent<HtmlBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public override async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        await super.ngOnChanges(changes);\n\n        if(nameof<HtmlBlockSAComponent>('content') in changes)\n        {\n            this._element.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        if(this.options?.content)\n        {\n            this.content = this.options.content;\n            this._element.nativeElement.innerHTML = this.content ?? '';\n        }\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {HtmlBlockSAComponent} from './htmlBlock.component';\n\nexport default HtmlBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension, ComponentStylingExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this._injector.get(RelationsProcessor, null);\n        this.componentManager ??= this._injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this._metadata.id, this._instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this._metadata.id);\n        this.componentManager.unregisterComponent(this._metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["HtmlBlockLayoutMetadataLoader","HtmlBlockLayoutEditorMetadata","HtmlBlockRelationsMetadataLoader","HtmlBlockRelationsEditorMetadata","HtmlBlockSAComponent","LayoutComponentBase","ngOnChanges","changes","nameof","_element","nativeElement","innerHTML","content","_onOptionsSet","this","_initialized","options","t","selectors","inputs","standalone","features","decls","vars","template","styles","changeDetection","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_injector","_logger","_extensions","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","extension","initialize","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","i0","LOGGER","DynamicItemExtensionBase","_applyStyling","_options","style","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","_metadata","_instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent","injector","instance"],"sourceRoot":""}