{"version":3,"file":"9968.chunk.0dfa7bdd6560a73d6e46.js","mappings":"+MAKO,MAAMA,EAAoB,I,SAAIC,GAAc,OAAQ,QAAQC,GAExDA,EAAOC,YAAYC,YAAc,K,eCEtC,MAAOC,EAUTC,YAAYC,GAHL,KAAAC,QAAiC,KAKpCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BF,EAC9B,ECZC,MAAOI,EAuCTL,cAhCO,KAAAM,SACP,CACIC,KAAM,aACNC,YAAa,uCACbC,MAAO,OACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,IAGR,CACIH,UAAWb,EACXe,mBACA,EACIE,EAAAA,EAAAA,GAAyC,UAAWtB,OAKpEuB,eACA,CACIf,QAAS,wDAObgB,OAAOC,OAAOf,KACjB,E,mCCpCE,MAAMgB,EAAyBC,OAAO,yB,kDCTtC,MAAMC,EACb,CACIC,gBAAiB,GACjBC,WAAY,GACZC,UAAU,EACVC,KAAMC,EAAAA,GACNC,UAAWD,EAAAA,GACXE,KAAM,CAAC,E,6FCLL,MAAOC,EAGT9B,YAAgD+B,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkB/B,EAA+CgC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQjC,GAEA,KAGRA,aAAiB0B,EAAAA,GAET1B,GAGXG,KAAK2B,SAASI,KAAK,iDAEZ,KACV,E,iCA7BQL,GAAAA,EAAAA,EAGuBM,EAAAA,GAAMA,I,0CAH7BN,E","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/htmlLanguageModel.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/htmlBlock/metadata/htmlBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Html language model for code editor\n */\nexport const HtmlLanguageModel = new LanguageModel('html', 'html', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\n\n//TODO: check all models for \"public\" \n\n/**\n * Html block model for properties editor\n */\nexport class HtmlBlockModel implements HtmlBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Html content to be displayed inside block\n     */\n    public content: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: HtmlBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {HtmlLanguageModel} from '@anglr/dynamic';\n\nimport {HtmlBlockComponentOptions} from '../htmlBlock.options';\nimport {HtmlBlockModel} from './htmlBlock.model';\n\n/**\n * Html block layout metadata\n */\nexport class HtmlBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<HtmlBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<HtmlBlockComponentOptions> =\n    {\n        name: 'Html block',\n        description: 'Html block - displays html or string',\n        group: 'Data',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: HtmlBlockModel,\n                    propertiesControls:\n                    [\n                        codePropertiesControlFor<HtmlBlockModel>('content', HtmlLanguageModel),\n                    ],\n                },\n            ]\n        },\n        defaultOptions:\n        {\n            content: '<div>This is your <strong>HTML</strong> block</div>'\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}"],"names":["HtmlLanguageModel","LanguageModel","editor","getModel","getValue","HtmlBlockModel","constructor","value","content","mapValuesToThis","this","HtmlBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","codePropertiesControlFor","defaultOptions","Object","freeze","LayoutPropertyMetadata","Symbol","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","AsFormControlPipe","_logger","transform","_valueHash","isBlank","warn","LOGGER"],"sourceRoot":""}