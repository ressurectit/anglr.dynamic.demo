{"version":3,"file":"5957.chunk.79cddc036f9e0fbc9b05.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/defaultDynamicModuleRelationsProvider/defaultDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts"],"sourcesContent":["import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', '3px');\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const half = (this.end.y - this.start.y) / 2;\n            \n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + width, this.start.y + half],\n                [this.end.x - width, this.start.y + half],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                //TODO: similar handling\n\n                // switch(this._options?.missingTypeBehavior)\n                // {\n                //     default:\n                //     //case MissingTypeBehavior.ShowNotFound:\n                //     {\n                //         this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.Ignore:\n                //     {\n                //         //do nothing\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.ThrowError:\n                //     {\n                //         throw new Error(`RelationsNodeRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                //     }\n                // }\n\n                return;\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * TODO\n * - Zoom to point\n */\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    styleUrls: ['relationsCanvas.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this.zoomLevel = newZoomLevel;\n            this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await relationsExportExtractor(module, logger);\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n\n    /**\n     * Display name of layout component\n     */\n    displayName?: string;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n        displayName: localModule.displayName,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module relations types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/relations');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_HISTORY_MANAGER, RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, DefaultDynamicModuleRelationsProvider, RelationsNodeManager} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for default package relations nodes provider\n */\nexport const DEFAULT_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for default dynamic relations types provider\n */\nexport const DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for relations history manager state\n */\nexport const RELATIONS_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: RelationsNodeManager,\n};\n\n/**\n * Provider for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};\n","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isString, isType} from '@jscrpt/common';\n\nimport {DEFAULT_RELATIONS_NODES_PROVIDER, DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_HISTORY_MANAGER_STATE, RELATIONS_HISTORY_MANAGER_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, StaticComponentsRegister} from '../services';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //display name should be string if used\n    if(isPresent(data.displayName) && !isString(data.displayName))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideRelationsEditor(packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_NODES_PROVIDER,\n        DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n        RELATIONS_HISTORY_MANAGER_STATE,\n        RELATIONS_HISTORY_MANAGER_PROVIDER,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideRelationsEditor(packages),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager implements MetadataStateManager<RelationsNodeMetadata[]>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}"],"names":["NodeRelationPath","constructor","_parentGroup","_relationManager","history","start","end","_destroyingSubject","Subject","output","input","this","_path","append","attr","_lineGenerator","line","curve","curveBundle","destroying","asObservable","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","width","half","y","third","RelationsNodeRendererSADirective","viewContainerRef","relationsNodeManager","loader","logger","destroySubscription","componentRef","componentMetadata","zoomLevel","create","EventEmitter","component","instance","ngOnChanges","changes","nameof","isPresent","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","createComponent","data","injector","node","subscribe","metadata","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","i0","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","ctx_r1","RelationsCanvasSAComponent","element","relationManager","backgroundSize","dragStartPosition","canvasPosition","isDragging","nodeDefinitions","backgroundSizeStyle","_backgroundPositionStyle","boundingBox","nativeElement","getBoundingClientRect","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","ctx","CommonModule","i2","styles","changeDetection","relationsNodeExtractor","module","relations","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","metaInfo","componentRelationsNodeExtractor","localModule","default","singleton","displayName","StaticComponentsRelationsNodesProvider","_componentsRegister","_logger","tryToGet","source","type","getType","factory","DefaultDynamicModuleRelationsProvider","moduleName","e","StaticComponentsRelationsTypesProvider","types","DEFAULT_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","DefaultDynamicModuleItemsProvider","multi","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","DEFAULT_RELATIONS_NODES_EXTRACTOR","RELATIONS_NODES_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","defaultExportExtractor","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","RELATIONS_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isRelationsModuleTypes","optional","undefined","RELATIONS_NODES_LOADER_PROVIDER","isRelationsNodeDef","RELATIONS_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","RelationsNodeManager","RELATIONS_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","num","min","max","Math","isBlank","Array","isArray","isType","isBoolean","isString","isJsObject","provideRelationsEditor","packages","map","pkg","provideStaticPackageSource","provideRelationsEditorWithStatic","staticRegister","StaticComponentsRegister","_nodes","_waitingInputRelations","_activeInput","outputNode","outputName","relationsNode","relation","startRelation","_b","_a","push","inputName","inputNode","endRelation","waitingInputRelations","waiting","getMetadata","result","nodeIds","Object","keys","relationsOptions","nodeMetadata","allOutputs","outputMeta","parentId","_definedTypes","getDefinedTypes","isRelationsComponentType","metadataState","activeIndex","saveIndex","states","enabled","popSubject","historyChangeSubject","canUndo","canRedo","length","saved","pop","historyChange","state","JSON","parse","undo","redo","shift","stringify","save","setInitialState","clean","enable","disable"],"sourceRoot":""}