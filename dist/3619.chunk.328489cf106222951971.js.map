{"version":3,"file":"3619.chunk.328489cf106222951971.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/asyncDataLoader/asyncDataLoader.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/asyncDataLoader/asyncDataLoader.component.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/asyncDataLoader/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {AsyncDataLoaderComponentOptions} from './asyncDataLoader.options';\n\n/**\n * Async data loader layout metadata loader\n */\nexport const AsyncDataLoaderLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<AsyncDataLoaderComponentOptions>> = async () => new (await import('./metadata/asyncDataLoader.layoutMetadata')).AsyncDataLoaderLayoutEditorMetadata();\n\n/**\n * Async data loader relations metadata loader\n */\nexport const AsyncDataLoaderRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/asyncDataLoader.relationsMetadata')).AsyncDataLoaderRelationsEditorMetadata();\n\n/**\n * Async data loader layout designer type loader\n */\nexport const AsyncDataLoaderLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/asyncDataLoaderDesigner.component')).AsyncDataLoaderDesignerSAComponent;","import {Component, ChangeDetectionStrategy, Input, SimpleChanges} from '@angular/core';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {Grid, PluginDescription, AsyncDataLoaderOptions, AsyncDataLoaderSAComponent as GridAsyncDataLoader, SimpleOrdering, DataResponse} from '@anglr/grid';\nimport {Action1, BindThis, PagedData, PromiseOr, RecursivePartial, nameof, noop} from '@jscrpt/common';\n\nimport {AsyncDataLoaderComponentOptions, AsyncDataLoaderRelationsOptions} from './asyncDataLoader.options';\nimport {AsyncDataLoaderLayoutDesignerTypeLoader, AsyncDataLoaderLayoutMetadataLoader, AsyncDataLoaderRelationsMetadataLoader} from './asyncDataLoader.metadata';\nimport {GridPluginComponent} from '../../interfaces';\n\n/**\n * Component used for displaying async data loader\n */\n@Component(\n{\n    selector: 'async-data-loader',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(AsyncDataLoaderLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(AsyncDataLoaderRelationsMetadataLoader)\n@LayoutEditorMetadata(AsyncDataLoaderLayoutMetadataLoader)\nexport class AsyncDataLoaderSAComponent extends LayoutComponentBase<AsyncDataLoaderComponentOptions> implements GridPluginComponent<GridAsyncDataLoader, AsyncDataLoaderComponentOptions, AsyncDataLoaderOptions>, RelationsComponent<AsyncDataLoaderRelationsOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of grid\n     */\n    protected grid: Grid|undefined|null;\n\n    /**\n     * Resolve function for async data loader\n     */\n    protected resolve: Action1<DataResponse<unknown>> = noop;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: AsyncDataLoaderRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Result of async REST request for obtaining data\n     */\n    @Input()\n    public result: PagedData<unknown>|undefined|null;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Requested page used for obtaining data\n     */\n    @DynamicOutput()\n    public page: number|undefined|null;\n    \n    /**\n     * Requested items per page used for obtaining data\n     */\n    @DynamicOutput()\n    public itemsPerPage: number|undefined|null;\n    \n    /**\n     * Requested ordering used for obtaining data\n     */\n    @DynamicOutput()\n    public ordering: SimpleOrdering|undefined|null;\n\n    //######################### public properties - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Description of plugin that will be used in grid\n     */\n    public pluginDescription: PluginDescription<GridAsyncDataLoader, RecursivePartial<AsyncDataLoaderOptions>> =\n    {\n        instance: null,\n        instanceCallback: null,\n        options:\n        {\n            dataCallback: this.getData,\n        },\n        type: GridAsyncDataLoader,\n    };\n\n    //######################### public methods - implementation of GridDataLoaderPlugin #########################\n    \n    /**\n     * Sets grid instance to this type\n     * @param grid - Instance of grid\n     */\n    public setGridInstance(grid: Grid): void\n    {\n        this.grid = grid;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        if(nameof<AsyncDataLoaderSAComponent>('result') in changes)\n        {\n            this.resolve(\n            {\n                data: this.result?.content ?? [],\n                totalCount: this.result?.totalElements ?? 0,\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Callback used for obtaining data\n     * @param page - Index of requested page\n     * @param itemsPerPage - Number of items per page\n     * @param ordering - Order by column name\n     */\n    @BindThis\n    protected getData(page: number, itemsPerPage: number, ordering: SimpleOrdering): Promise<DataResponse<unknown>>\n    {\n        this.page = page - 1;\n        this.itemsPerPage = itemsPerPage;\n        this.ordering = ordering;\n\n        return new Promise(resolve => this.resolve = resolve);\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {AsyncDataLoaderSAComponent} from './asyncDataLoader.component';\n\nexport default AsyncDataLoaderSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["AsyncDataLoaderLayoutMetadataLoader","_ref","_asyncToGenerator","AsyncDataLoaderLayoutEditorMetadata","apply","arguments","AsyncDataLoaderRelationsMetadataLoader","_ref2","AsyncDataLoaderRelationsEditorMetadata","AsyncDataLoaderLayoutDesignerTypeLoader","_ref3","AsyncDataLoaderDesignerSAComponent","AsyncDataLoaderSAComponent","LayoutComponentBase","constructor","resolve","noop","pluginDescription","instance","instanceCallback","options","dataCallback","this","getData","type","GridAsyncDataLoader","setGridInstance","grid","onChanges","changes","nameof","data","result","content","totalCount","totalElements","page","itemsPerPage","ordering","Promise","t","selectors","inputs","standalone","features","i0","decls","vars","template","rf","ctx","styles","changeDetection","__decorate","DynamicOutput","BindThis","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","_this2","firstChange","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","invalidateVisuals","detectChanges","_changes","DynamicItemExtensionBase","relationsProcessor","componentManager","metadata","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","initialized","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}