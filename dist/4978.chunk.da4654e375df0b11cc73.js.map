{"version":3,"file":"4978.chunk.da4654e375df0b11cc73.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/radio/radio.metadata.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/radio/radio.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/radio/radio.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/radio/type.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Input, Optional} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### constructor #########################\n\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _parentControl?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this._parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {@name}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/form/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('@anglr/dynamic/form/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n\n/**\n * Injection token for observables that allows refreshing of components palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this.element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this.element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialRadioComponentOptions} from './radio.options';\n\n/**\n * Material radio layout metadata loader\n */\nexport const MaterialRadioLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialRadioComponentOptions>> = async () => new (await import('./metadata/radio.layoutMetadata')).MaterialRadioLayoutEditorMetadata();\n\n/**\n * Material radio relations metadata loader\n */\nexport const MaterialRadioRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/radio.relationsMetadata')).MaterialRadioRelationsEditorMetadata();","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {MaterialRadioLayoutMetadataLoader, MaterialRadioRelationsMetadataLoader} from './radio.metadata';\nimport {MaterialRadioComponentOptions} from './radio.options';\n\n/**\n * Component used for displaying material radio\n */\n@Component(\n{\n    selector: 'material-radio',\n    templateUrl: 'radio.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n        MatRadioModule,\n    ]\n})\n@RelationsEditorMetadata(MaterialRadioRelationsMetadataLoader)\n@LayoutEditorMetadata(MaterialRadioLayoutMetadataLoader)\nexport class MaterialRadioSAComponent extends FormComponentBase<MaterialRadioComponentOptions> implements FormComponent<MaterialRadioComponentOptions>\n{}","<mat-radio-group [formControl]=\"control|asFormControl|asRequired\">\n    <mat-radio-button value=\"1\">{{options?.options}}</mat-radio-button>\n</mat-radio-group>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {MaterialRadioSAComponent} from './radio.component';\n\n\nexport default MaterialRadioSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}","var map = {\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_parentControl","_logger","super","control","FormControl","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","parentControl","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","i0","FORM_COMPONENT_CONTROL","LOGGER","inputs","features","__decorate","DynamicOutput","InjectionToken","FormDynamicModuleItemsProvider","tryToGet","source","package","debug","e","factory","FormDynamicModuleTypesProvider","moduleName","FORM_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideFormLayout","provideFormLayoutEditor","provideStaticPackageSource","defaultValue","get","type","FormArray","FormGroup","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","InputBooleanComponent","PropertyTypeControlBase","t","selectors","decls","vars","consts","template","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","InputStringComponent","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_LOADER","LAYOUT_HISTORY_MANAGER","REFRESH_PALETTE_OBSERVABLES","_initialized","values","_control","_controlSet","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","val_r1","changeDetector","componentElement","injector","extensions","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","onInit","extension","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","_changes","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","LAYOUT_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_CHILD_EXTENSIONS","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_LOADER","LAYOUT_METADATA_STORAGE","MaterialRadioLayoutMetadataLoader","MaterialRadioLayoutEditorMetadata","MaterialRadioRelationsMetadataLoader","MaterialRadioRelationsEditorMetadata","MaterialRadioSAComponent","standalone","FormPipesModule","i1","CastPipesModule","i2","ReactiveFormsModule","i3","MatRadioModule","i4","styles","changeDetection","RelationsEditorMetadata","RelationsRegistrationExtension","relationsProcessor","componentManager","metadata","instance","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent","addSimpleChange","key","currentValue","previousValue","firstChange","isFirstChange","packageName","PACKAGE_SOURCES","useValue","packages","packagesChange","NEVER","refresh","getJson","jsonString","JSON","parse","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}