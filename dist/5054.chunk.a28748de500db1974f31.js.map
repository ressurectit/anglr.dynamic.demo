{"version":3,"file":"5054.chunk.a28748de500db1974f31.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentMetadata|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parentMetadata, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - Metadata for parent layout component\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parentMetadata: LayoutComponentMetadata<TOptions>|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        this._items.push(\n        {\n            metadata,\n            parentMetadata,\n            levelIndex,\n            level\n        });\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], metadata, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = type.data;\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager} from '../services';\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideLayoutEditor(false),\n        ...provideRelationsEditor(),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        }\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        }\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(),\n                provideLayoutEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister),\n                provideLayoutEditor(),\n            ]\n        };\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["LayoutComponentsIterator","constructor","_layoutMetadata","_extractor","_logger","_items","_initialized","_initPromise","Symbol","asyncIterator","x","initPromise","this","_getInitPromise","items","next","length","value","done","forEach","callback","item","metadata","parentMetadata","levelIndex","level","_getComponents","_getComponent","push","meta","extractMetadata","debug","package","name","getDescendants","childrenMeta","options","LayoutComponentsIteratorService","getIteratorFor","layoutMetadata","i0","LOGGER","factory","LayoutComponentsRegister","_layoutManager","_loader","_iteratorSvc","_initSubscriptions","Subscription","_definedTypes","add","layoutChange","subscribe","types","_initializeTypes","then","Object","keys","ngOnDestroy","unsubscribe","getType","layout","layoutComponents","component","type","loadItem","id","data","LAYOUT_COMPONENTS_LOADER","LayoutComponentsRelationsNodesProvider","_componentsRegister","tryToGet","source","default","LayoutComponentsRelationsTypesProvider","resultTypes","RELATIONS_NODES_LOADER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","multi","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","provideLayoutRelationsEditor","provideLayoutEditor","provideRelationsEditor","LayoutManager","REFRESH_PALETTE_OBSERVABLES","useFactory","layoutManager","deps","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","DynamicLayoutRelationsEditorModule","ngModule","providers","DynamicLayoutEditorModule","DynamicRelationsEditorModule","_layout","_layoutChange","Subject","asObservable","setLayout","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DefaultDynamicModuleItemsProvider","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","Optional","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","undefined","isBlank","isType","provideRelations","RelationsComponentManager","RelationsManager","RelationsProcessor","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","GoBackModule"],"sourceRoot":""}