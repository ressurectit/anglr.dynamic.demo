{"version":3,"file":"3973.chunk.f84483a661cb12e7e73b.js","mappings":"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","sources":["webpack://ng-universal-demo/./content/l10n/ lazy ^\\.\\/.*\\.json$ namespace object","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.ts","webpack://ng-universal-demo/./app/components/userSettings/userSettings.component.html","webpack://ng-universal-demo/../layout-relations/src/pipes/propertySelected/propertySelected.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.html","webpack://ng-universal-demo/../layout-relations/src/components/customComponentOptions/customComponentOptions.component.ts","webpack://ng-universal-demo/../layout-relations/src/directives/showCustomComponentOptions/showCustomComponentOptions.directive.ts","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.html","webpack://ng-universal-demo/./app/components/loadSaveNew/loadSaveNew.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.metadata.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/relationsResult.component.html","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.metadata.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.ts","webpack://ng-universal-demo/./app/components/relationsSampleClick/relationsSampleClick.component.html","webpack://ng-universal-demo/./app/hacks.ts","webpack://ng-universal-demo/./app/boot/app.component.animations.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.ts","webpack://ng-universal-demo/./app/modules/menu/components/mainMenu/mainMenu.component.html","webpack://ng-universal-demo/./app/boot/app.component.html","webpack://ng-universal-demo/./app/boot/app.component.ts","webpack://ng-universal-demo/./app/pages/accessDenied/accessDenied.route.ts","webpack://ng-universal-demo/./app/boot/app.component.routes.ts","webpack://ng-universal-demo/./app/pages/notFound/notFound.route.ts","webpack://ng-universal-demo/./app/services/globalization/globalization.service.ts","webpack://ng-universal-demo/./app/boot/app.config.ts","webpack://ng-universal-demo/./app/misc/constants.ts","webpack://ng-universal-demo/./app/services/webpackTranslateLoader/webpackTranslateLoader.service.ts","webpack://ng-universal-demo/./app/modules/debuggingFeature.module.ts","webpack://ng-universal-demo/./app/modules/gridFeature.module.ts","webpack://ng-universal-demo/./app/modules/menu/modules/menu.module.ts","webpack://ng-universal-demo/./app/services/missingTranslation/missingTranslation.service.ts","webpack://ng-universal-demo/./app/boot/app.module.ts","webpack://ng-universal-demo/./app/boot/browser-app.module.ts","webpack://ng-universal-demo/./app/main.browser.bootstrap.ts","webpack://ng-universal-demo/./app/misc/tokens.ts","webpack://ng-universal-demo/./app/modules/displayingFeature.module.ts","webpack://ng-universal-demo/./app/modules/formsFeature.module.ts","webpack://ng-universal-demo/./app/services/demoCustomComponentsRegister/demoCustomComponentsRegister.service.ts","webpack://ng-universal-demo/./app/services/settings/settings.service.ts","webpack://ng-universal-demo/./app/services/settings/localSettingsStorage.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/descendantsGetter/descendantsGetter.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/textarea/textarea.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/liveEvents/liveEvents.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleItemsProvider/customComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleTypesProvider/customComponentsDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsDynamicModuleRelationsProvider/customComponentsDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/getModel/getModel.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/pipes/propertiesMetadata/propertiesMetadata.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/services/customComponentsRegister/customComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/decorators/relationsEditorMetadata/relationsEditorMetadata.decorator.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/scopeRegister/scopeRegister.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/decorators/dynamicOutput/dynamicOutput.decorator.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../relations/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/services/codeExecutor/codeExecutor.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.options.ts","webpack://ng-universal-demo/../relations/src/services/relationsChangeDetector/relationsChangeDetector.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsComponentManager/relationsComponentManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsManager/relationsManager.service.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsDataTransferInstruction.ts","webpack://ng-universal-demo/../relations/src/services/relationsProcessor/relationsProcessor.service.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicClassMetadata.decorator.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts"],"sourcesContent":["var map = {\n\t\"./en.json\": [\n\t\t79587,\n\t\t9587\n\t],\n\t\"./sk.json\": [\n\t\t5930,\n\t\t5930\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 25048;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormGroup, FormBuilder} from '@angular/forms';\nimport {DebugDataEnabledService} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {ValueNamePair} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\n\nimport {config, SettingsGeneral, SettingsDebug, LanguageDef} from '../../config';\nimport {SettingsService} from '../../services/settings';\nimport {DisplayingFeatureModule} from '../../modules/displayingFeature.module';\nimport {FormsFeatureModule} from '../../modules/formsFeature.module';\n\n/**\n * Available sections for user settings\n */\nenum UserSettingsSections\n{\n    /**\n     * General user settings\n     */\n    General,\n\n    /**\n     * Loggers settings\n     */\n    Logging,\n\n    /**\n     * Debugging settings\n     */\n    Debugging\n}\n\ninterface SettingsLoggingEnum\n{\n    /**\n     * Minimal log level for console sink\n     */\n    consoleLogLevel: LogEventLevel;\n}\n\n/**\n * User settings component\n */\n@Component(\n{\n    selector: 'user-settings',\n    templateUrl: 'userSettings.component.html',\n    styleUrls: ['userSettings.component.scss'],\n    standalone: true,\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserSettingsSAComponent\n{\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Array of available themes\n     */\n    public themes: string[] = config.configuration.themes;\n\n    /**\n     * Array of language definitions\n     */\n    public languages: LanguageDef[] = config.configuration.languages;\n\n    /**\n     * Available log levels\n     */\n    public logLevels: ValueNamePair[] = [];\n\n    /**\n     * Form group for general settings\n     */\n    public generalSettingsForm: FormGroup;\n\n    /**\n     * Form group for debugging settings\n     */\n    public debuggingSettingsForm: FormGroup;\n\n    /**\n     * Form group for logging settings\n     */\n    public loggingSettingsForm: FormGroup;\n\n    /**\n     * Active section\n     */\n    public activeSection: UserSettingsSections = UserSettingsSections.General;\n\n    /**\n     * User settings section enum\n     */\n    public UserSettingsSections = UserSettingsSections;\n\n    //######################### constructors #########################\n    constructor(settingsSvc: SettingsService,\n                formBuilder: FormBuilder,\n                consoleConfig: ConsoleSinkConfigService,\n                debugDataEnabled: DebugDataEnabledService)\n    {\n        const settings = settingsSvc.settings;\n        const debuggingSettings = settingsSvc.settingsDebugging;\n        const loggingSettings = settingsSvc.settingsLogging;\n        \n        this._getLogLevels();\n\n        this.generalSettingsForm = formBuilder.group(\n        <SettingsGeneral>\n        {\n            language: settings.language,\n            theme: settings.theme\n        });\n\n        this.debuggingSettingsForm = formBuilder.group(\n        <SettingsDebug>\n        {\n            consoleEnabled: debuggingSettings.consoleEnabled,\n            debugData: debuggingSettings.debugData\n        });\n\n        this.loggingSettingsForm = formBuilder.group(\n        <SettingsLoggingEnum>\n        {\n            consoleLogLevel: LogEventLevel[loggingSettings.consoleLogLevel],\n        });\n\n        this.generalSettingsForm.valueChanges.subscribe((generalSettings: SettingsGeneral) =>\n        {\n            settingsSvc.setSettings(generalSettings);\n        });\n\n        this.debuggingSettingsForm.valueChanges.subscribe((debugSettings: SettingsDebug) =>\n        {\n            debugDataEnabled.setEnabled(debugSettings.debugData);\n\n            settingsSvc.setDebuggingSettings(debugSettings);\n        });\n        \n        this.loggingSettingsForm.valueChanges.subscribe((loggingSettings: SettingsLoggingEnum) =>\n        {\n            consoleConfig.restrictToLevel = +loggingSettings.consoleLogLevel;\n\n            settingsSvc.setLoggingSettings(\n            {\n                consoleLogLevel: LogEventLevel[+loggingSettings.consoleLogLevel],\n            });\n        });\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Gets available log levels\n     */\n    private _getLogLevels(): void\n    {\n        Object.keys(LogEventLevel).forEach(val =>\n        {\n            if(!isNaN(+val))\n            {\n                this.logLevels.push(\n                {\n                    name: LogEventLevel[val],\n                    value: val\n                });\n            }\n        });\n    }\n}","<div class=\"flex-column settings-menu\">\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.General\"\r\n       (click)=\"activeSection = UserSettingsSections.General\">\r\n        <span class=\"fas fa-cog\"></span>\r\n        <span>{{'general' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Logging\"\r\n       (click)=\"activeSection = UserSettingsSections.Logging\">\r\n        <span class=\"fas fa-pen\"></span>\r\n        <span>{{'logging' | translate}}</span>\r\n    </a>\r\n\r\n    <a class=\"btn-line\"\r\n       [class.active]=\"activeSection == UserSettingsSections.Debugging\"\r\n       (click)=\"activeSection = UserSettingsSections.Debugging\">\r\n        <span class=\"fas fa-bug\"></span>\r\n        <span>{{'debug' | translate}}</span>\r\n    </a>\r\n</div>\r\n\r\n<div>\r\n    <!-- GENERAL SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"generalSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.General\">\r\n        <!-- THEME -->\r\n        <div class=\"text-capitalize\">{{'theme' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"theme\">\r\n                <ng-option *ngFor=\"let theme of themes\" [text]=\"theme | translate\" [value]=\"theme\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n\r\n        <!-- LANGUAGE -->\r\n        <div class=\"text-capitalize\">{{'language' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"language\">\r\n                <ng-option *ngFor=\"let lang of languages\" [text]=\"lang?.name\" [value]=\"lang?.lang\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- LOGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"loggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Logging\">\r\n        <!-- CONSOLE LOG LEVEL -->\r\n        <div class=\"text-capitalize\">{{'console log' | translate}}</div>\r\n\r\n        <div>\r\n            <ng-select formControlName=\"consoleLogLevel\">\r\n                <ng-option *ngFor=\"let level of logLevels\" [text]=\"level?.name\" [value]=\"level?.value\"></ng-option>\r\n            </ng-select>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- DEBUGGING SETTIGNS -->\r\n    <div class=\"settings-items\" [formGroup]=\"debuggingSettingsForm\" *ngIf=\"activeSection == UserSettingsSections.Debugging\">\r\n        <!-- CONSOLE -->\r\n        <div class=\"text-capitalize\">{{'console' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"consoleEnabled\"></mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- DEBUG DATA -->\r\n        <div class=\"text-capitalize\">{{'debug data' | translate}}</div>\r\n\r\n        <div>\r\n            <mat-slide-toggle formControlName=\"debugData\"></mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n</div>","import {Pipe, PipeTransform} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets indication whether is property selected\n */\n@Pipe({name: 'propertySelected', standalone: true})\nexport class PropertySelectedSAPipe implements PipeTransform\n{\n    /**\n     * Gets indication whether is property selected\n     * @param value - Stores selected properties in their models and components\n     * @param component - Name of component\n     * @param model - Name of model\n     * @param property - Name of property\n     */\n    public transform(value: Dictionary<Dictionary<string[]>>, component: string, model: string, property: string): boolean\n    {\n        if(!value[component]?.[model])\n        {\n            return false;\n        }\n\n        return value[component][model].indexOf(property) >= 0;\n    }\n}","<div class=\"dynamic-margin-bottom-small dynamic-flex-row\">\n    <div class=\"dynamic-flex-1 dynamic-margin-right-small\">\n        <label class=\"dynamic-control-label\">Available content components</label>\n\n        <select class=\"dynamic-form-control\" [formControl]=\"component\">\n            <option *ngFor=\"let component of contentComponents\" [value]=\"component\">{{data.customComponentContentMetadata[component]?.metadata?.displayName}}</option>\n        </select>\n    </div>\n\n    <a class=\"dynamic-btn-icon dynamic-margin-left-small dynamic-large-text\" (click)=\"addComponent()\">\n        <span class=\"fas fa-plus\"></span>\n    </a>\n</div>\n\n<div>\n    <div *ngFor=\"let component of usedProperties | keyvalue\" class=\"dynamic-margin-bottom-small\">\n        <div class=\"dynamic-bold dynamic-flex-row \">\n            <span class=\"dynamic-margin-right-small\">{{data.customComponentContentMetadata[component.key]?.metadata?.displayName}}</span>\n            \n            <a class=\"dynamic-btn-icon\" (click)=\"removeComponent(component.key)\">\n                <span class=\"fas fa-times\"></span>\n            </a>\n        </div>\n        \n        <ng-container *ngFor=\"let modelProps of availableProperties[component.key] | keyvalue\">\n            <div *ngFor=\"let prop of modelProps.value\">\n                <label>\n                    <input type=\"checkbox\" (change)=\"toggleSelected(component.key, modelProps.key, prop)\" [checked]=\"usedProperties | propertySelected: component.key: modelProps.key: prop\">\n                    <span>{{(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.name ?? prop}}</span>\n                    <span class=\"fas fa-info-circle dynamic-margin-left-extra-small\" *ngIf=\"(modelProps.key | getModel: data.customComponentContentMetadata[component.key] | propertiesMetadata: data.propsMetadataExtractor)?.[prop]?.description as description\" [tooltip]=\"description\" ></span>\n                </label>\n            </div>\n        </ng-container>\n    </div>\n</div>\n\n<div class=\"dynamic-flex-row dynamic-flex-end\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" [mat-dialog-close]=\"undefined\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" [mat-dialog-close]=\"{configurableProperties: usedProperties, displayName: '', description: ''}\">\n        <span>ok</span>\n    </button>\n</div>","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {DialogRef} from '@angular/cdk/dialog';\nimport {CommonModule} from '@angular/common';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FormModelBuilder, FormModelGroup} from '@anglr/common/forms';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {TooltipModule} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {CustomComponentOptionsData} from './customComponentOptions.interface';\nimport {GetModelSAPipe, PropertySelectedSAPipe, PropertiesMetadataSAPipe} from '../../pipes';\nimport {CustomComponentConfiguration} from '../../services';\n\n/**\n * Component used for displaying and editation of custom component options\n */\n@Component(\n{\n    selector: 'custom-component-options',\n    templateUrl: 'customComponentOptions.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        PropertySelectedSAPipe,\n        GetModelSAPipe,\n        PropertiesMetadataSAPipe,\n        TooltipModule,\n    ],\n    providers: [FormModelBuilder],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomComponentOptionsSAComponent<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of form control that is used for selection of component\n     */\n    protected component: FormControl<string> = new FormControl();\n\n    /**\n     * Form for name and description of custom component\n     */\n    protected nameDescriptionForm: FormGroup<FormModelGroup<CustomComponentConfiguration>>;\n\n    /**\n     * Array of used properties for components and their models\n     */\n    protected usedProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of available properties for components and their models\n     */\n    protected availableProperties: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Array of content components that are available\n     */\n    protected contentComponents: string[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CustomComponentOptionsData,\n                protected dialog: DialogRef<CustomComponentOptionsSAComponent<TConfig>, TConfig>,\n                formModelBuilder: FormModelBuilder,)\n    {\n        this.contentComponents = Object.keys(data.customComponentContentMetadata);\n        this.nameDescriptionForm = formModelBuilder.build<CustomComponentConfiguration>({displayName: '', description: '',});\n\n        for(const id in this.data.configuration.configurableProperties)\n        {\n            const models = this.data.configuration.configurableProperties[id];\n\n            this.usedProperties[id] ??= {};\n\n            for(const modelName in models)\n            {\n                const properties = models[modelName];\n\n                this.usedProperties[id][modelName] = [...properties];\n            }\n        }\n\n        const usedComponents = Object.keys(this.usedProperties);\n        this.contentComponents = this.contentComponents.filter(itm => usedComponents.indexOf(itm) < 0);\n\n        for(const id in data.customComponentContentMetadata)\n        {\n            const meta = data.customComponentContentMetadata[id];\n\n            if(!meta?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata)\n            {\n                continue;\n            }\n\n            for(const propMeta of meta.editorMetadata.metaInfo.optionsMetadata.propertiesMetadata)\n            {\n                const model = new propMeta.modelType(undefined);\n\n                if(!Object.keys(model).length)\n                {\n                    continue;\n                }\n\n                const modelName = propMeta.modelType.name;\n\n                this.availableProperties[id] ??= {};\n                this.availableProperties[id][modelName] ??= [];\n\n                for(const prop in model)\n                {\n                    this.availableProperties[id][modelName].push(prop);\n                }\n            }\n        }\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds component from custom component layout\n     */\n    protected addComponent(): void\n    {\n        if(!this.component.value)\n        {\n            return;\n        }\n\n        this.usedProperties[this.component.value] = {};\n        const index = this.contentComponents.indexOf(this.component.value);\n\n        if(index >= 0)\n        {\n            this.contentComponents.splice(index, 1);\n            this.component.setValue(this.contentComponents[0] ?? null);\n        }\n    }\n\n    /**\n     * Removes component options\n     * @param id - Id of component that should be removed\n     */\n    protected removeComponent(id: string): void\n    {\n        delete this.usedProperties[id];\n        this.contentComponents.push(id);\n\n        if(this.contentComponents.length == 1)\n        {\n            this.component.setValue(this.contentComponents[0]);\n        }\n    }\n\n    /**\n     * Toggle selected property in component in model\n     * @param id - Id of component to be edited\n     * @param modelName - Name of model to be edited\n     * @param propertyName - Name of property to be toggled\n     */\n    protected toggleSelected(id: string, modelName: string, propertyName: string): void\n    {\n        this.usedProperties[id] ??= {};\n        this.usedProperties[id][modelName] ??= [];\n\n        const index = this.usedProperties[id][modelName].indexOf(propertyName);\n\n        //remove\n        if(index >= 0)\n        {\n            this.usedProperties[id][modelName].splice(index, 1);\n            this.usedProperties[id][modelName] = [...this.usedProperties[id][modelName]];\n        }\n        //add\n        else\n        {\n            this.usedProperties[id][modelName] =\n            [\n                ...this.usedProperties[id][modelName],\n                propertyName,\n            ];\n        }\n    }\n}","import {Directive, ElementRef, HostListener, Injector, Input, OnChanges, OnInit} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorPropertyMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {ContentComponentData, CustomComponentOptionsData, CustomComponentOptionsSAComponent} from '../../components';\nimport {getCustomComponentMeta} from '../../misc/utils';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '../../services';\n\n/**\n * Directive that is used for displaying custom component options\n */\n@Directive(\n{\n    selector: '[showCustomComponentOptions]',\n    standalone: true,\n})\nexport class ShowCustomComponentOptionsSADirective<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> implements OnInit, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Metadata for each component in custom component\n     */\n    protected customComponentContentMetadata: Dictionary<ContentComponentData|undefined|null> = {};\n\n    /**\n     * Custom component layout metadata\n     */\n    protected customComponentMetadata: LayoutComponentMetadata|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of custom component which will be edited\n     */\n    @Input('showCustomComponentOptions')\n    public name: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                protected dialogSvc: TitledDialogService,\n                protected customComponentsRegister: CustomComponentsRegister<TConfig>,\n                protected propsMetadataExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected element: ElementRef<HTMLButtonElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        if(!this.name)\n        {\n            return;\n        }\n\n        const result = (await getCustomComponentMeta(this.name, this.injector));\n\n        if(!result)\n        {\n            return;\n        }\n\n        this.customComponentContentMetadata = result.contentMetadata;\n        this.customComponentMetadata = result.metadata;\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(!this.name && !this.element.nativeElement.disabled)\n        {\n            throw new Error('Please provide name of custom component for its options');\n        }\n    }\n    \n    //######################### protected methods - host #########################\n\n    /**\n     * Shows content options selection dialog\n     * @param event - Event that occured\n     */\n    @HostListener('click', ['$event'])\n    protected async show(event: MouseEvent): Promise<void>\n    {\n        event.preventDefault();\n        event.stopPropagation();\n        \n        const result = await lastValueFrom(this.dialogSvc.open<CustomComponentOptionsSAComponent, CustomComponentOptionsData, TConfig|undefined|null>(CustomComponentOptionsSAComponent,\n        {\n            title: 'custom component options',\n            width: '75vw',\n            data:\n            {\n                customComponentContentMetadata: this.customComponentContentMetadata,\n                configuration: this.customComponentsRegister.getConfigurationForComponent(this.name ?? '') ?? {},\n                propsMetadataExtractor: this.propsMetadataExtractor,\n            }\n        }).afterClosed());\n\n        if(result)\n        {\n            await this.customComponentsRegister.setConfigurationForComponent(this.name ?? '', result);\n        }\n    }\n}","<ng-select [formControl]=\"_available\" style=\"width: 180px\">\n    <ng-option [value]=\"''\" text=\"*unsaved*\"></ng-option>\n    <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\n</ng-select>\n\n<button class=\"btn btn-danger\" type=\"button\" (click)=\"_delete()\" [disabled]=\"!_available.value\">\n    <span>remove</span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_load()\" [disabled]=\"!_available.value\">\n    <span>load</span>\n</button>\n\n<input type=\"text\" [formControl]=\"_name\">\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_save()\" [disabled]=\"!_name.value\">\n    <span>save <ng-container *ngIf=\"!(history?.saved ?? true)\">*</ng-container></span>\n</button>\n\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"_new()\">\n    <span>new</span>\n</button>\n\n<ng-container *ngIf=\"layoutControls\">\n    <mat-slide-toggle [checked]=\"liveEvents.enabled\" (change)=\"liveEvents.setEnabled(!liveEvents.enabled)\">live events</mat-slide-toggle>\n\n    <label class=\"margin-horizontal-extra-small\" *ngIf=\"componentMarking\"><input type=\"checkbox\" [formControl]=\"_component\"> component</label>\n\n    <button type=\"button\" class=\"btn btn-primary\" [showCustomComponentOptions]=\"_available.value\" [disabled]=\"!_component.value\">CC options</button>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input, OnInit, EventEmitter, Output, OnDestroy, Inject, Optional, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStateManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {ShowCustomComponentOptionsSADirective} from '@anglr/dynamic/layout-relations';\nimport {LiveEventService} from '@anglr/dynamic/layout-editor';\nimport {extend, Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {StoreDataService} from '../../services/storeData';\nimport {DemoCustomComponentsRegister} from '../../services/demoCustomComponentsRegister';\n\n/**\n * Component used for loading saving and creating new layout/relations template\n */\n@Component(\n{\n    selector: 'load-save-new',\n    templateUrl: 'loadSaveNew.component.html',\n    styleUrls: ['loadSaveNew.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NgSelectModule,\n        CommonModule,\n        ShowCustomComponentOptionsSADirective,\n        MatSlideToggleModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoadSaveNewSAComponent<TStoreMetadata = any, TMetadata = any> implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: TStoreMetadata|null = null;\n    \n    protected _available: FormControl<string> = new FormControl('');\n\n    protected _component: FormControl<boolean> = new FormControl(false);\n\n    protected _name: FormControl = new FormControl(null);\n\n    protected _availableNames: string[] = [];\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    @Input()\n    public store: StoreDataService<TStoreMetadata>;\n\n    @Input()\n    public history: MetadataHistoryManager|null = null;\n\n    @Input()\n    public routePath: string;\n\n    @Input()\n    public getMetadataCallback: Func<TStoreMetadata, [TMetadata]>;\n\n    @Input()\n    public componentMarking: boolean = false;\n\n    @Input()\n    public layoutControls: boolean = true;\n\n    //######################### public properties - outputs #########################\n\n    @Output()\n    public metadataChange: EventEmitter<TStoreMetadata|null> = new EventEmitter<TStoreMetadata|null>();\n\n    //######################### constructor #########################\n    constructor(private _router: Router,\n                private _route: ActivatedRoute,\n                @Inject(METADATA_STATE_MANAGER) private _metaManager: MetadataStateManager<TMetadata>,\n                private _changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,\n\n                @Optional() private _customComponentsRegister?: DemoCustomComponentsRegister,\n                @Optional() private _hotkeys?: EditorHotkeys,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(this.componentMarking)\n        {\n            this._available.valueChanges.subscribe(value =>\n            {\n                if(!value)\n                {\n                    return;\n                }\n    \n                const components = this._customComponentsRegister?.getRegisteredComponents();\n    \n                this._component.setValue(components.indexOf(value) >= 0, {emitEvent: false});\n            });\n    \n            this._component.valueChanges.subscribe(() => this._customComponentsRegister?.toggleRegisteredComponent(this._available.value));\n        }\n\n        if(this._hotkeys)\n        {\n            this.initSubscriptions.add(this._hotkeys.save.subscribe(() => this._save()));\n        }\n\n        if(this.history)\n        {\n            this.initSubscriptions.add(this.history.historyChange.subscribe(() => this._changeDetector.detectChanges()));\n            this.initSubscriptions.add(this.history.pop.subscribe(() => this._changeDetector.detectChanges()));\n        }\n\n        this._availableNames = this.store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(!id)\n            {\n                this._metadata = null;\n                this.metadataChange.next(this._metadata);\n\n                this._name.setValue('');\n                this._available.setValue('');\n            }\n            else\n            {\n                this._name.setValue(id);\n                this._available.setValue(id);\n                this._metadata = this.store.getData(this._available.value);\n                this.metadataChange.next(this._metadata);\n            }\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected _load(): void\n    {\n        this._metadata = this.store.getData(this._available.value);\n        this.metadataChange.next(this._metadata);\n        this._name.setValue(this._available.value);\n\n        this._router.navigate([this.routePath, this._available.value], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _save(): void\n    {\n        this._saveData(this._metaManager.getMetadata());\n    }\n\n    protected _delete(): void\n    {\n        this.store.removeData(this._available.value);\n\n        this._availableNames = this.store.getStored();\n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _new(): void\n    {\n        this._metadata = null;\n        this.metadataChange.next(this._metadata);\n\n        this._name.setValue('');\n        this._available.setValue('');\n        \n        this._router.navigate([this.routePath], {skipLocationChange: false, replaceUrl: true});\n    }\n\n    protected _saveData(metadata: TMetadata): void\n    {\n        const data = this.store.getData(this._name.value) ?? {};\n        this.history?.save();\n\n        this.store.setData(this._name.value, extend(data, this.getMetadataCallback(metadata)));\n\n        this._availableNames = this.store.getStored();\n        this._changeDetector.detectChanges();\n        this._router.navigate([this.routePath, this._name.value], {skipLocationChange: false, replaceUrl: true});\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations result relations metadata loader\n */\nexport const RelationsResultRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsResult.relationsMetadata')).RelationsResultRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Input, ChangeDetectorRef, SimpleChanges} from '@angular/core';\nimport {RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsResultRelationsMetadataLoader} from './relationsResult.metadata';\n\n/**\n * Component used for displaying result binding of relations\n */\n@Component(\n{\n    selector: 'relations-result',\n    templateUrl: 'relationsResult.component.html',\n    // styleUrls: ['relationsResult.component.scss'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsResultRelationsMetadataLoader)\nexport class RelationsResultSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-result';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsResultSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsResultSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsResultSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsResultSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil v result', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations sample click relations metadata loader\n */\nexport const RelationsSampleClickRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/relationsSampleClick.relationsMetadata')).RelationsSampleClickRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, SimpleChanges, ChangeDetectorRef, Input, OnInit, OnDestroy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {DynamicOutput, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\n\nimport {RelationsSampleClickRelationsMetadataLoader} from './relationsSampleClick.metadata';\n\n/**\n * Sample relations click component\n */\n@Component(\n{\n    selector: 'relations-sample-click',\n    templateUrl: 'relationsSampleClick.component.html',\n    // styleUrls: ['relationsSampleClick.component.scss'],\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(RelationsSampleClickRelationsMetadataLoader)\nexport class RelationsSampleClickSAComponent implements RelationsComponent, OnInit, OnDestroy\n{\n    //######################### public static properties #########################\n\n    /**\n     * Gets relations id\n     */\n    public static get relationsId(): string\n    {\n        return 'relations-sample-click';\n    }\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Defines form control for vystup value\n     */\n    protected _vystupForm: FormControl<string> = new FormControl<string>('');\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Test input for data\n     */\n    @Input()\n    public vstup: string;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Test output\n     */\n    @DynamicOutput()\n    public vystup: string;\n\n    //######################### constructor #########################\n    constructor(private _changeDetector: ChangeDetectorRef,\n                private _relationsProcessor: RelationsProcessor,\n                private _componentManager: RelationsComponentManager,)\n    {\n        this._vystupForm.valueChanges.subscribe(value => this.vystup = value);\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._componentManager.registerComponent(RelationsSampleClickSAComponent.relationsId, this);\n        await this._relationsProcessor.initialized;\n        this._relationsProcessor.updateRelations(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._relationsProcessor.destroyComponent(RelationsSampleClickSAComponent.relationsId);\n        this._componentManager.unregisterComponent(RelationsSampleClickSAComponent.relationsId);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsSampleClickSAComponent>('vstup') in changes && this.vstup)\n        {\n            console.log('vstup sa zmenil', this.vstup);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n}","<div>VSTUP: {{vstup}}</div>\n<div>\n    <input type=\"text\" [formControl]=\"_vystupForm\">\n</div>","import {isFunction, isBlank, globalDefine} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {config} from './config';\n\nglobalDefine(global =>\n{\n    if(!global.Document)\n    {\n        global.Document = function(){};\n    }\n});\n\n//HACK - prevents application crash if no error handler provided\nconst observableSubscribe = Observable.prototype.subscribe;\n\nObservable.prototype.subscribe = <any>function(next, error, complete)\n{\n    if(isBlank(error) || !isFunction(error))\n    {\n        error = (err) => \n        {\n            if(config.configuration.debug)\n            {\n                console.log(err);\n            }\n        };\n    }\n\n    return observableSubscribe.call(this, next, error, complete);\n};","import {trigger, transition, query, animate, style, animateChild, group} from '@angular/animations';\n\n/**\n * Animations run when changing route\n */\nexport const routeAnimationTrigger = trigger('routeAnimations',\n[\n    transition('void <=> *, none <=> *',\n    [\n        query(':enter', animateChild(), {optional: true})\n    ]),\n    transition('* => login',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('login => *',\n    [\n        query('.main-content',\n        [\n            style(\n            {\n                position: 'relative',\n                perspective: '10000px'\n            }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style(\n                {\n                    transform: 'rotateY(-90deg)',\n                    opacity: 0\n                })\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style(\n                    {\n                        transform: 'rotateY(90deg)',\n                        opacity: 0\n                    }))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms 350ms ease-out', style(\n                    {\n                        transform: 'rotateY(0)',\n                        opacity: 1\n                    }))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ]),\n    transition('* => *',\n    [\n        query('.main-content',\n        [\n            style({ position: 'relative' }),\n            query(':enter, :leave',\n            [\n                style(\n                {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%'\n                })\n            ]),\n            query(':enter',\n            [\n                style({ opacity: 0})\n            ]),\n            query(':leave', animateChild()),\n            group(\n            [\n                query(':leave',\n                [\n                    animate('350ms ease-out', style({ opacity: 0}))\n                ]),\n                query(':enter',\n                [\n                    animate('350ms ease-out', style({ opacity: 1}))\n                ])\n            ]),\n            query(':enter', animateChild())\n        ])\n    ])\n]);\n\nexport const loaderTrigger = trigger('loaderAnimation',\n[\n    transition(':leave',\n    [\n        // group(\n        // [\n        //     query('.loading-card', \n        //     [\n        //         animate('300ms', style(\n        //         {\n        //             transform: 'scale(4)'\n        //         }))\n        //     ]),\n        //     animate('200ms 100ms', style(\n        //     {\n        //         opacity: 0\n        //     }))\n            \n        // ])\n    ])\n]);","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {TitledDialogService} from '@anglr/common/material';\n\nimport {UserSettingsSAComponent} from '../../../../components';\n\n/**\n * Component used for displaying application main menu\n */\n@Component(\n{\n    selector: 'main-menu',\n    templateUrl: 'mainMenu.component.html',\n    styleUrls: ['mainMenu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MainMenuComponent\n{\n    //######################### constructor #########################\n    constructor(private _dialog: TitledDialogService)\n    {\n    }\n\n    //######################### public methods - template bindings #########################\n\n    /**\n     * Opens settings dialog\n     */\n    public openSettings()\n    {\n        this._dialog.open(UserSettingsSAComponent,\n        {\n            title: 'user settings',\n            maxHeight: '80vh'\n        });\n    }\n}","<div class=\"flex-row\">\r\n    <a routerLink=\"/layout/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Preview</a>\r\n    <a routerLink=\"/layout/editor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Editor</a>\r\n    <a routerLink=\"/relationsEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations editor</a>\r\n    <a routerLink=\"/relationsStatic\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations</a>\r\n    <a routerLink=\"/relationsWithEditor\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with editor</a>\r\n    <a routerLink=\"/relationsWithLayoutEditor/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations with layout editor</a>\r\n    <a routerLink=\"/relationsComplex/preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations complex</a>\r\n    <a routerLink=\"/relationsLayoutForm/form-preview\" routerLinkActive=\"active\" class=\"margin-horizontal-small\">Relations form</a>\r\n    <div class=\"flex-1\"></div>\r\n    <a (click)=\"openSettings()\" class=\"fas fa-cog\"></a>\r\n</div>","<main-menu></main-menu>\r\n\r\n<progress-indicator></progress-indicator>\r\n<internal-server-error></internal-server-error>\r\n<global-notifications></global-notifications>\r\n<hotkeys-cheatsheet></hotkeys-cheatsheet>\r\n\r\n<!-- <div class=\"content relative\" [@routeAnimations]=\"routeComponentState\"> -->\r\n<div class=\"content relative\">\r\n    <div class=\"main-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"gui-version\">GUI version: {{guiVersion}}</div>\r\n\r\n<console *ngIf=\"consoleVisible\" @consoleAnimation></console>\r\n\r\n<div class=\"loading-indicator\" *ngIf=\"!initialized\" @loaderAnimation>\r\n    <div></div>\r\n</div>","import {Component, OnDestroy, AfterViewInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef, Inject, OnInit} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {consoleAnimationTrigger} from '@anglr/common/structured-log';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {fadeInOutTrigger} from '@anglr/animations';\nimport {nameof} from '@jscrpt/common';\nimport {TranslateService} from '@ngx-translate/core';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Subscription} from 'rxjs';\n\nimport {loaderTrigger, routeAnimationTrigger} from './app.component.animations';\nimport {SettingsService} from '../services/settings';\nimport {SettingsGeneral, SettingsDebug} from '../config';\nimport version from '../../config/version.json';\n\n/**\n * Application entry component\n */\n@Component(\n{\n    selector: 'app',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.scss'],\n    animations: [routeAnimationTrigger, fadeInOutTrigger, consoleAnimationTrigger, loaderTrigger],\n    providers: [AppHotkeysService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy\n{\n    //######################### private fields #########################\n    \n    /**\n     * Subscription for router outlet activation changes\n     */\n    private _routerOutletActivatedSubscription: Subscription;\n\n    /**\n     * Subscription for changes of general settings\n     */\n    private _settingsChangeSubscription: Subscription;\n\n    /**\n     * Subscription for changes of debugging settings\n     */\n    private _settingsDebuggingChangeSubscription: Subscription;\n\n    /**\n     * Currently active theme\n     */\n    private _theme: string;\n\n    //######################### public properties - template bindings #########################\n\n    /**\n     * Indication whether is console visible\n     */\n    public consoleVisible: boolean = false;\n\n    /**\n     * Name of state for routed component animation\n     */\n    public routeComponentState: string = 'none';\n\n    /**\n     * Current version of gui\n     */\n    public guiVersion: string = version.version;\n\n    /**\n     * Indication whether is application initialized\n     */\n    public initialized: boolean = false;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Router outlet that is used for loading routed components\n     */\n    @ViewChild('outlet')\n    public routerOutlet: RouterOutlet;\n\n    //######################### constructor #########################\n    constructor(translateSvc: TranslateService,\n                private _changeDetector: ChangeDetectorRef,\n                private _appHotkeys: AppHotkeysService,\n                settings: SettingsService,\n                @Inject(LOGGER) logger: Logger,\n                @Inject(DOCUMENT) document: Document)\n    {\n        logger.verbose('Application is starting, main component constructed.');\n\n        document.body.classList.add('app-page', settings.settings.theme);\n        this._theme = settings.settings.theme;\n\n        this._settingsChangeSubscription = settings.settingsChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsGeneral>('theme'))\n                {\n                    document.body.classList.remove(this._theme);\n                    this._theme = settings.settings.theme;\n                    document.body.classList.add(this._theme);\n                }\n\n                if(itm == nameof<SettingsGeneral>('language'))\n                {\n                    translateSvc.use(settings.settings.language);\n                    this._changeDetector.detectChanges();\n                }\n            });\n\n        this._settingsDebuggingChangeSubscription = settings.settingsDebuggingChange\n            .subscribe(itm => \n            {\n                if(itm == nameof<SettingsDebug>('consoleEnabled'))\n                {\n                    this._toggleConsoleHotkey();\n                }\n            });\n\n        translateSvc.setDefaultLang('en');\n        translateSvc.use(settings.settings.language);\n\n        if(settings.settingsDebugging?.consoleEnabled)\n        {\n            this._toggleConsoleHotkey();\n        }\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit()\n    {\n        this._routerOutletActivatedSubscription = this.routerOutlet.activateEvents.subscribe(() =>\n        {\n            this.routeComponentState = this.routerOutlet.activatedRouteData['animation'] || (<any>this.routerOutlet.activatedRoute.component).name;\n        });\n\n        this.initialized = true;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy()\n    {\n        this._routerOutletActivatedSubscription?.unsubscribe();\n        this._routerOutletActivatedSubscription = null;\n\n        this._settingsChangeSubscription?.unsubscribe();\n        this._settingsChangeSubscription = null;\n\n        this._settingsDebuggingChangeSubscription?.unsubscribe();\n        this._settingsDebuggingChangeSubscription = null;\n\n        this._appHotkeys.destroy();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Toggles hotkey for displaying console log\n     */\n    private _toggleConsoleHotkey()\n    {\n        const oldHelpHotkey = this._appHotkeys.hotkeys.get('~');\n\n        if(oldHelpHotkey)\n        {\n            this._appHotkeys.hotkeys.remove(oldHelpHotkey);\n        }\n        else\n        {\n            this._appHotkeys.hotkeys.add(new Hotkey('~', () =>\n            {\n                this.consoleVisible = !this.consoleVisible;\n                this._changeDetector.detectChanges();\n\n                return false;\n            }, null, 'Show console'));\n        }\n    }\n}","import {Route} from '@angular/router';\n\n/**\n * Route for access denied component\n */\nexport const accessDeniedRoute: Route =\n{\n    path: 'accessDenied',\n    loadComponent: () => import('./accessDenied.component').then(({AccessDeniedComponent}) => AccessDeniedComponent)\n};","import {Type} from '@angular/core';\nimport {ModuleRoutesOptions} from '@anglr/common/router';\n\nimport {accessDeniedRoute} from '../pages/accessDenied/accessDenied.route';\nimport {notFoundRoute} from '../pages/notFound/notFound.route';\n\nexport const components: Type<any>[] =\n[\n];\n\nexport const routesOptions: ModuleRoutesOptions =\n{\n    rootModule: true,\n    rootModuleConfig:\n    {\n        enableTracing: false,\n        useHash: true\n        // preloadingStrategy: PreloadAllModules\n    },\n    staticRoutesBefore:\n    [\n        {\n            path: '',\n            redirectTo: '/layout/preview',\n            pathMatch: 'full'\n        },\n        {\n            path: 'layout',\n            loadChildren: () => import('../pages/+layout/layout.module').then(({LayoutModule}) => LayoutModule)\n        },\n        {\n            path: 'layout',\n            loadChildren: () => import('../pages/+layoutEditor/layoutEditor.module').then(({LayoutEditorModule}) => LayoutEditorModule)\n        },\n        {\n            path: 'relationsStatic',\n            loadChildren: () => import('../pages/+relationsStatic/relationsStatic.module').then(({RelationsStaticModule}) => RelationsStaticModule)\n        },\n        {\n            path: 'relationsEditor',\n            loadChildren: () => import('../pages/+relationsEditor/relationsEditor.module').then(({RelationsEditorModule}) => RelationsEditorModule)\n        },\n        {\n            path: 'relationsWithEditor',\n            loadChildren: () => import('../pages/+relationsWithEditor/relationsWithEditor.module').then(({RelationsWithEditorModule}) => RelationsWithEditorModule)\n        },\n        {\n            path: 'relationsWithLayoutEditor',\n            loadChildren: () => import('../pages/+relationsWithLayoutEditor/relationsWithLayoutEditor.module').then(({RelationsWithLayoutEditorModule}) => RelationsWithLayoutEditorModule)\n        },\n        {\n            path: 'relationsComplex',\n            loadChildren: () => import('../pages/+relationsComplex/relationsComplex.module').then(({RelationsComplexModule}) => RelationsComplexModule)\n        },\n        {\n            path: 'relationsLayoutForm',\n            loadChildren: () => import('../pages/+relationsLayoutForm/relationsLayoutForm.module').then(({RelationsLayoutFormModule}) => RelationsLayoutFormModule)\n        },\n    ],\n    staticRoutesAfter:\n    [\n        accessDeniedRoute,\n        notFoundRoute,\n    ]\n};","import {Route} from '@angular/router';\n\n/**\n * Route for not found component\n */\nexport const notFoundRoute: Route =\n{\n    path: '**',\n    loadComponent: () => import('./notFound.component').then(({NotFoundComponent}) => NotFoundComponent)\n};","import {Injectable} from '@angular/core';\nimport {GlobalizationService as GlobalizationServiceInterface} from '@anglr/common';\nimport {Observable, EMPTY} from 'rxjs';\n\n/**\n * Globalization service that is used for obtaining globalization language\n */\n@Injectable()\nexport class GlobalizationService extends GlobalizationServiceInterface\n{\n    /**\n     * Gets current name of locale, that is used within picker\n     */\n    public get locale(): string\n    {\n        return 'en';\n    }\n    \n    /**\n     * Gets observable that emits data when locale changes and change should be applied to picker\n     */\n    public get localeChange(): Observable<void>\n    {\n        return EMPTY;\n    }\n}","import {FactoryProvider, ClassProvider, ValueProvider, Provider, ExistingProvider} from '@angular/core';\nimport {LocalPermanentStorageService} from '@anglr/common/store';\nimport {PROGRESS_INTERCEPTOR_PROVIDER, GlobalizationService, STRING_LOCALIZATION, PERMANENT_STORAGE, DebugDataEnabledService, DEFAULT_NOTIFICATIONS, NOTIFICATIONS} from '@anglr/common';\nimport {ConsoleSinkConfigService} from '@anglr/common/structured-log';\nimport {NgxTranslateStringLocalizationService} from '@anglr/translate-extensions';\nimport {ERROR_HANDLING_NOTIFICATIONS, HttpGatewayTimeoutInterceptorOptions, NoConnectionInterceptorOptions, HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER, NO_CONNECTION_INTERCEPTOR_PROVIDER, SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER, ANGLR_EXCEPTION_HANDLER_PROVIDER, ERROR_WITH_URL_EXTENDER, HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER, CLIENT_ERROR_NOTIFICATIONS, handle404Func, HttpClientErrorResponseMapper, HttpClientValidationErrorResponseMapper, HTTP_CLIENT_ERROR_RESPONSE_MAPPER, HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER, RestNotFoundError} from '@anglr/error-handling';\nimport {DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER} from '@anglr/error-handling/material';\nimport {NO_DATA_RENDERER_OPTIONS, NoDataRendererOptions, PAGING_OPTIONS, BasicPagingOptions, METADATA_SELECTOR_TYPE, METADATA_SELECTOR_OPTIONS, CONTENT_RENDERER_OPTIONS, TableContentRendererOptions, HEADER_CONTENT_RENDERER_OPTIONS, TableHeaderContentRendererOptions, GRID_INITIALIZER_TYPE, GRID_INITIALIZER_OPTIONS, QueryPermanentStorageGridInitializerOptions, QueryGridInitializerComponent} from '@anglr/grid';\nimport {DialogMetadataSelectorComponent, DialogMetadataSelectorOptions} from '@anglr/grid/material';\nimport {ReservedSpaceValidationErrorsContainerComponent, ValidationErrorRendererFactoryOptions, VALIDATION_ERROR_MESSAGES, VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS} from '@anglr/common/forms';\nimport {ConfirmationDialogOptions, CONFIRMATION_DIALOG_OPTIONS, MovableTitledDialogComponent, TitledDialogServiceOptions} from '@anglr/common/material';\nimport {FLOATING_UI_POSITION} from '@anglr/common/floating-ui';\nimport {MD_HELP_NOTIFICATIONS, RenderMarkdownConfig, RENDER_MARKDOWN_CONFIG} from '@anglr/md-help/web';\nimport {ClientErrorHandlingMiddleware, HttpClientErrorCustomHandlerDef, HTTP_CLIENT_ERROR_CUSTOM_HANDLER, REST_ERROR_HANDLING_MIDDLEWARE_ORDER} from '@anglr/error-handling/rest';\nimport {NORMAL_STATE_OPTIONS, NormalStateOptions} from '@anglr/select';\nimport {DATE_API} from '@anglr/datetime';\nimport {DateFnsDateApi, DateFnsLocale, DATE_FNS_DATE_API_OBJECT_TYPE, DATE_FNS_FORMAT_PROVIDER, DATE_FNS_LOCALE} from '@anglr/datetime/date-fns';\nimport {LoggerMiddleware, ReportProgressMiddleware, ResponseTypeMiddleware, REST_METHOD_MIDDLEWARES} from '@anglr/rest';\nimport {DATETIME_REST_DATE_API} from '@anglr/rest/datetime';\nimport {isString, isJsObject} from '@jscrpt/common';\nimport {LogEventLevel} from 'structured-log';\nimport {sk} from 'date-fns/locale';\n\nimport {GlobalizationService as GlobalizationServiceImpl} from '../services/globalization/globalization.service';\nimport {NOTHING_SELECTED} from '../misc/constants';\nimport {SettingsService, LocalSettingsStorage} from '../services/settings';\nimport {SETTINGS_STORAGE} from '../misc/tokens';\n\n/**\n * Array of providers that are used in app module\n */\nexport const providers: Provider[] =\n[\n    //######################### HTTP INTERCEPTORS #########################\n    HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER,\n    SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER,\n    HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER,\n    NO_CONNECTION_INTERCEPTOR_PROVIDER,\n    PROGRESS_INTERCEPTOR_PROVIDER,\n\n    //######################### NO CONNECTION INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new NoConnectionInterceptorOptions('Server je mimo prevádzky.'),\n        provide: NoConnectionInterceptorOptions\n    },\n\n    //######################### HTTP GATEWAY TIMEOUT INTERCEPTOR OPTIONS #########################\n    <FactoryProvider>\n    {\n        useFactory: () => new HttpGatewayTimeoutInterceptorOptions('Server neodpovedal v stanovenom čase.'),\n        provide: HttpGatewayTimeoutInterceptorOptions\n    },\n\n    //######################### GLOBALIZATION SERVICE #########################\n    <ClassProvider>\n    {\n        provide: GlobalizationService,\n        useClass: GlobalizationServiceImpl\n    },\n\n    //######################### ERROR HANDLING #########################\n    ERROR_WITH_URL_EXTENDER,\n    ANGLR_EXCEPTION_HANDLER_PROVIDER,\n    DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER,\n\n    //######################### GRID GLOBAL OPTIONS #########################\n    <ValueProvider>\n    {\n        provide: NO_DATA_RENDERER_OPTIONS,\n        useValue: <NoDataRendererOptions>\n        {\n            texts:\n            {\n                loading: 'Loading data ...',\n                noData: 'No data for requested parameters',\n                notLoaded: 'Data have not been loaded yet'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_TYPE,\n        useValue: QueryGridInitializerComponent\n    },\n    <ValueProvider>\n    {\n        provide: PAGING_OPTIONS,\n        useValue: <BasicPagingOptions>\n        {\n            itemsPerPageValues: [15, 30, 60],\n            initialItemsPerPage: 15\n        }\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_TYPE,\n        useValue: DialogMetadataSelectorComponent\n    },\n    <ValueProvider>\n    {\n        provide: METADATA_SELECTOR_OPTIONS,\n        useValue: <DialogMetadataSelectorOptions>\n        {\n            showButtonVisible: false\n        }\n    },\n    <ValueProvider>\n    {\n        provide: GRID_INITIALIZER_OPTIONS,\n        useValue: <QueryPermanentStorageGridInitializerOptions>\n        {\n            storageIppName: 'all-grid-ipp'\n        }\n    },\n    <ValueProvider>\n    {\n        provide: CONTENT_RENDERER_OPTIONS,\n        useValue: <TableContentRendererOptions>\n        {\n            cssClasses:\n            {\n                containerDiv: 'table-container thin-scrollbar'\n            }\n        }\n    },\n    <ValueProvider>\n    {\n        provide: HEADER_CONTENT_RENDERER_OPTIONS,\n        useValue: <TableHeaderContentRendererOptions>\n        {\n            cssClasses:\n            {\n                thDefault: 'header-default fixed-header'\n            }\n        }\n    },\n    \n    //############################ SELECT GLOBAL OPTIONS ############################\n    <ValueProvider>\n    {\n        provide: NORMAL_STATE_OPTIONS,\n        useValue: <NormalStateOptions<any>>\n        {\n            texts:\n            {\n                nothingSelected: NOTHING_SELECTED\n            }\n        }\n    },\n\n    //######################### STRING LOCALIZATION #########################\n    <ClassProvider>\n    {\n        provide: STRING_LOCALIZATION,\n        useClass: NgxTranslateStringLocalizationService\n    },\n\n    //######################### PERMANENT STORAGE #########################\n    <ClassProvider>\n    {\n        provide: PERMANENT_STORAGE,\n        useClass: LocalPermanentStorageService\n    },\n\n    //######################### LOGGER #########################\n    <FactoryProvider>\n    {\n        provide: ConsoleSinkConfigService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            return new ConsoleSinkConfigService(null, LogEventLevel[settingsSvc?.settingsLogging?.consoleLogLevel]);\n        },\n        deps: [SettingsService]\n    },\n    <ClassProvider>\n    {\n        provide: SETTINGS_STORAGE,\n        useClass: LocalSettingsStorage\n    },\n    ...isProduction ? \n        [] :\n        [\n            // <FactoryProvider>\n            // {\n            //     provide: LOGGER_SINKS,\n            //     useFactory: () => new ConsoleSink(),\n            //     multi: true\n            // }\n        ],\n\n    //######################### DEBUG DATA #########################\n    <FactoryProvider>\n    {\n        provide: DebugDataEnabledService,\n        useFactory: (settingsSvc: SettingsService) =>\n        {\n            const debugDataEnabled = new DebugDataEnabledService();\n\n            debugDataEnabled.setEnabled(settingsSvc.settingsDebugging?.debugData);\n\n            return debugDataEnabled;\n        },\n        deps: [SettingsService]\n    },\n\n    //######################### DATE API #########################\n    <ClassProvider>\n    {\n        provide: DATE_API,\n        useClass: DateFnsDateApi\n    },\n    DATE_FNS_FORMAT_PROVIDER,\n    DATE_FNS_DATE_API_OBJECT_TYPE,\n    <ValueProvider>\n    {\n        provide: DATE_FNS_LOCALE,\n        useValue: <DateFnsLocale>\n        {\n            locale: sk\n        }\n    },\n\n    //######################### VALIDATION ERRORS #########################\n\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_MESSAGES,\n        useValue:\n        {\n            required: 'Položka je povinná.',\n            number: 'Položka musí byť číslo.',\n            pattern: 'Položka nie je v požadovanom formáte.',\n            minValue: 'Nedodržaná minimálna povolená hodnota.',\n            maxValue: 'Nedodržaná maximálna povolená hodnota.',\n            minlength: 'Nedodržaná minimálna dĺžka.',\n            maxlength: 'Nedodržaná maximálna dĺžka.',\n            birthNumber: 'Nesprávny formát rodného čísla.',\n            email: 'Položka musí byť email.',\n            availableUsername: 'Prihlasovacie meno je použité',\n        }\n    },\n    <ValueProvider>\n    {\n        provide: VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS,\n        useValue: <ValidationErrorRendererFactoryOptions>\n        {\n            container: ReservedSpaceValidationErrorsContainerComponent\n        }\n    },\n\n    //######################### NOTIFICATIONS #########################\n    DEFAULT_NOTIFICATIONS,\n    <ExistingProvider>\n    {\n        provide: MD_HELP_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: ERROR_HANDLING_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n    <ExistingProvider>\n    {\n        provide: CLIENT_ERROR_NOTIFICATIONS,\n        useExisting: NOTIFICATIONS\n    },\n\n    //######################### TITLED DIALOG #########################\n\n    <ValueProvider>\n    {\n        provide: TitledDialogServiceOptions,\n        useValue: new TitledDialogServiceOptions(MovableTitledDialogComponent)\n    },\n    \n    //######################### CONFIRMATION DIALOG #########################\n    <ValueProvider>\n    {\n        provide: CONFIRMATION_DIALOG_OPTIONS,\n        useValue: <ConfirmationDialogOptions>\n        {\n            confirmationText: 'Prajete si pokračovať?',\n            dialogCancelText: 'Nie',\n            dialogConfirmText: 'Áno'\n        }\n    },\n\n    //######################### POSITION #########################\n    FLOATING_UI_POSITION,\n\n    //######################### MARKDOWN #########################\n    <ValueProvider>\n    {\n        provide: RENDER_MARKDOWN_CONFIG,\n        useValue: <RenderMarkdownConfig>\n        {\n            assetsPathPrefix: 'dist/md',\n            baseUrl: '/pomoc'\n        }\n    },\n\n    //######################### REST CONFIG #########################\n    DATETIME_REST_DATE_API,\n    REST_ERROR_HANDLING_MIDDLEWARE_ORDER,\n    <ValueProvider>\n    {\n        provide: REST_METHOD_MIDDLEWARES,\n        useValue:\n        [\n            LoggerMiddleware,\n            ResponseTypeMiddleware,\n            ReportProgressMiddleware,\n            ClientErrorHandlingMiddleware,\n        ]\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientErrorResponseMapper>(err => \n        {\n            if(err?.error?.errors)\n            {\n                return err?.error?.errors;\n            }\n\n            if(isString(err?.error))\n            {\n                return [err?.error];\n            }\n\n            if(isJsObject(err?.error))\n            {\n                return [JSON.stringify(err?.error)];\n            }\n            \n            return [err.message];\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER,\n        useValue: <HttpClientValidationErrorResponseMapper>(err => \n        {\n            if(err?.error?.validationErrors)\n            {\n                return err?.error?.validationErrors;\n            }\n\n            return null;\n        })\n    },\n    <ValueProvider>\n    {\n        provide: HTTP_CLIENT_ERROR_CUSTOM_HANDLER,\n        useValue: <Record<number, HttpClientErrorCustomHandlerDef>>\n        {\n            404: [handle404Func, error => new RestNotFoundError(error.errors)]\n        },\n    },\n];\n","export const APP_TRANSFER_ID = 'my-app-id';\nexport const NOTHING_SELECTED = 'Nothing selected';\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const NAME_DATE_FORMAT = 'DD. MMMM YYYY (dddd)';\nexport const DEBUG_INFO = 'debugInfo';","import {Injectable} from '@angular/core';\nimport {TranslateLoader} from '@ngx-translate/core';\nimport {Observable, Observer} from 'rxjs';\n\n/**\n * Service used as webpack translate loader\n */\n@Injectable()\nexport class WebpackTranslateLoaderService implements TranslateLoader\n{\n    //######################### public methods - implementation of TranslateLoader #########################\n\n    /**\n     * Gets translations for specified language\n     * @param lang Language which translations are required\n     */\n    public getTranslation(lang: string): Observable<any> \n    {\n        return new Observable((observer: Observer<any>) =>\n        {\n            (async () => \n            {\n                const result = await import(`../../../content/l10n/${lang}.json`);\n\n                observer.next(result.default);\n                observer.complete();\n            })();\n        });\n    }\n}","import {NgModule} from '@angular/core';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\n\n/**\n * Common module for allowing debugging features in code\n */\n@NgModule(\n{\n    exports:\n    [\n        DebugDataCopyClickModule,\n    ]\n})\nexport class DebuggingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {GridModule} from '@anglr/grid';\n\n/**\n * Common module for enabling usage of Grid\n */\n@NgModule(\n{\n    exports:\n    [\n        GridModule\n    ]\n})\nexport class GridFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {TitledDialogModule} from '@anglr/common/material';\n\nimport {DisplayingFeatureModule} from '../../displayingFeature.module';\nimport {MainMenuComponent} from '../components';\nimport {UserSettingsSAComponent} from '../../../components';\n\n/**\n * Module for menu components\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        UserSettingsSAComponent,\n        TitledDialogModule,\n    ],\n    declarations:\n    [\n        MainMenuComponent\n    ],\n    exports:\n    [\n        MainMenuComponent\n    ]\n})\nexport class MenuModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from '@ngx-translate/core';\n\n/**\n * Service that reports missing translations, allows easier finding of missing translations\n */\n@Injectable()\nexport class ReportMissingTranslationService implements MissingTranslationHandler\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) private _logger: Logger)\n    {\n    }\n\n    //######################### public methods - MissingTranslationHandler #########################\n\n    /**\n     * @inheritdoc\n     */\n    public handle(params: MissingTranslationHandlerParams): string\n    {\n        this._logger.debug(`MISSING TRANSLATION: ${params.key}`);\n\n        return `MISSING: '${params.key}'`;\n    }\n}","import {NgModule, ClassProvider} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport {RouterModule} from '@angular/router';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {ConsoleLogModule} from '@anglr/common/structured-log';\nimport {ProgressIndicatorModule} from '@anglr/common';\nimport {InternalServerErrorModule} from '@anglr/error-handling';\nimport {NotificationsGlobalModule} from '@anglr/notifications';\nimport {TranslateModule, TranslateLoader, MissingTranslationHandler} from '@ngx-translate/core';\nimport {DndModule} from '@ng-dnd/core';\nimport {HotkeyModule} from 'angular2-hotkeys';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\n\nimport {AppComponent} from './app.component';\nimport {components, routesOptions} from './app.component.routes';\nimport {APP_TRANSFER_ID} from '../misc/constants';\nimport {providers} from './app.config';\nimport {WebpackTranslateLoaderService} from '../services/webpackTranslateLoader';\nimport {MenuModule} from '../modules';\nimport {config} from '../config';\nimport {ReportMissingTranslationService} from '../services/missingTranslation';\n\n//TODO: think of how to include dnd\n\n/**\n * Main module shared for both server and browser side\n */\n@NgModule(\n{\n    imports:\n    [\n        BrowserModule.withServerTransition(\n        {\n            appId: APP_TRANSFER_ID\n        }),\n        HttpClientModule,\n        InternalServerErrorModule,\n        ProgressIndicatorModule,\n        NotificationsGlobalModule.forRoot(),\n        RouterModule,\n        HotkeyModule,\n        MenuModule,\n        ConsoleLogModule.forRoot(),\n        DndModule.forRoot(\n        {\n            backend: HTML5Backend\n        }),\n        TranslateModule.forRoot(\n        {\n            loader: <ClassProvider>\n            {\n                provide: TranslateLoader, \n                useClass: WebpackTranslateLoaderService\n            },\n            ...config.configuration.debugTranslations ? \n                {\n                    missingTranslationHandler:\n                    {\n                        provide: MissingTranslationHandler,\n                        useClass: ReportMissingTranslationService\n                    }\n                } : \n                {\n                },\n            useDefaultLang: !config.configuration.debugTranslations\n        })\n    ],\n    providers: providers,\n    declarations:\n    [\n        AppComponent,\n        ...components\n    ],\n    exports: [AppComponent]\n})\n@ModuleRoutes(components, routesOptions)\nexport class AppModule\n{\n}\n","import {NgModule, FactoryProvider} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserTransferStateModule} from '@angular/platform-browser';\nimport {AnglrExceptionHandlerOptions} from '@anglr/error-handling';\nimport {HotkeyModule} from 'angular2-hotkeys';\n\nimport {config} from '../config';\nimport {AppComponent} from './app.component';\nimport {AppModule} from './app.module';\n\n/**\n * Entry module for browser side\n */\n@NgModule(\n{\n    bootstrap: [AppComponent],\n    imports:\n    [\n        AppModule,\n        BrowserAnimationsModule,\n        BrowserTransferStateModule,\n        HotkeyModule.forRoot(\n        {\n            cheatSheetCloseEsc: true\n        })\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: AnglrExceptionHandlerOptions,\n            useFactory: () => new AnglrExceptionHandlerOptions(config.configuration.debug, false)\n        }\n    ]\n})\nexport class BrowserAppModule\n{\n}\n","/* eslint-disable ressurectit/imports-order */\nimport './dependencies';\nimport './dependencies.browser';\nimport 'zone.js';\nimport './hacks';\nimport {platformBrowser} from '@angular/platform-browser';\nimport {NgModuleRef, enableProdMode} from '@angular/core';\nimport {runWhenModuleStable} from '@anglr/common';\nimport {RestTransferStateService} from '@anglr/rest';\nimport {simpleNotification} from '@jscrpt/common';\n\nimport {config} from './config';\nimport {BrowserAppModule} from './boot/browser-app.module';\n\nif(isProduction)\n{\n    enableProdMode();\n}\n\nconst platform = platformBrowser();\n\nrunWhenModuleStable(platform.bootstrapModule(BrowserAppModule), (moduleRef: NgModuleRef<any>) =>\n{\n    moduleRef.injector.get(RestTransferStateService)?.clearAndDeactivate();\n    jsDevMode && simpleNotification(jsDevMode && import.meta.webpackHot);\n}, config.configuration.debug);\n","import {InjectionToken} from '@angular/core';\n\nimport {SettingsStorage} from '../services/settings';\n\n/**\n * Token used for settings storage\n */\nexport const SETTINGS_STORAGE: InjectionToken<SettingsStorage> = new InjectionToken<SettingsStorage>('SETTINGS_STORAGE');","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {CommonUtilsModule, CommonLocalizeModule, TooltipModule} from '@anglr/common';\nimport {NumeralModule} from '@anglr/common/numeral';\nimport {AuthorizationModule} from '@anglr/authentication';\nimport {DatePipesModule} from '@anglr/datetime';\nimport {TranslateModule} from '@ngx-translate/core';\n\n/**\n * Common module for displaying readonly data helpers\n */\n@NgModule(\n{\n    exports:\n    [\n        CommonModule,\n        RouterModule,\n        CommonUtilsModule,\n        CommonLocalizeModule,\n        NumeralModule,\n        TooltipModule,\n        TranslateModule,\n        DatePipesModule,\n        AuthorizationModule,\n    ]\n})\nexport class DisplayingFeatureModule\n{\n}","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {NgSelectEditModule, NgSelectModule} from '@anglr/select';\nimport {NumberInputModule, HasErrorModule, FormPipesModule} from '@anglr/common/forms';\n\n/**\n * Common module for enabling forms features\n */\n@NgModule(\n{\n    exports:\n    [\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        NumberInputModule,\n        NgSelectModule,\n        NgSelectEditModule,\n        HasErrorModule,\n        FormPipesModule,\n    ]\n})\nexport class FormsFeatureModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {CustomComponentConfiguration, CustomComponentsRegister} from '@anglr/dynamic/layout-relations';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst CUSTOM_COMPONENTS = 'DEMO_CUSTOM_COMPONENTS';\n\n/**\n * Demo custom components register\n */\n@Injectable()\nexport class DemoCustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration> extends CustomComponentsRegister<TConfig>\n{\n    //######################### private fields #########################\n    \n    /**\n     * Used for emitting registered changes\n     */\n    private _registeredChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when registered changes\n     */\n    public get registeredChange(): Observable<void>\n    {\n        return this._registeredChange.asObservable();\n    }\n    \n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _store: PermanentStorage)\n    {\n        super();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggles template as registered custom component\n     * @param name - Name of template to be toggled\n     */\n    public toggleRegisteredComponent(name: string): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(customComponents[name])\n        {\n            delete customComponents[name];\n        }\n        else\n        {\n            customComponents[name] = {} as TConfig;\n        }\n\n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override getRegisteredComponents(): string[]\n    {\n        return Object.keys(this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override getConfigurationForComponent(name: string): TConfig|undefined|null\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return null;\n        }\n\n        return customComponents[name];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public override setConfigurationForComponent(name: string, config: TConfig): void\n    {\n        const customComponents = this._store.get<Dictionary<TConfig>|null>(CUSTOM_COMPONENTS) ?? {};\n\n        if(!customComponents[name])\n        {\n            return;\n        }\n\n        customComponents[name] = config;\n        \n        this._store.set(CUSTOM_COMPONENTS, customComponents);\n        this._registeredChange.next();\n    }\n}","import {Injectable, KeyValueDiffers, Inject, KeyValueDiffer} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport {Subject, Observable} from 'rxjs';\n\nimport {SettingsStorage} from './settings.interface';\nimport {SETTINGS_STORAGE} from '../../misc/tokens';\nimport {SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\n\n/**\n * Class used as settings service\n */\n@Injectable({providedIn: 'root'})\nexport class SettingsService\n{\n    //######################### private methods #########################\n\n    /**\n     * Current general settings value\n     */\n    private _settings: SettingsGeneral = this._storage.get();\n\n    /**\n     * Current debugging settings value\n     */\n    private _settingsDebugging: SettingsDebug = this._storage.getDebugging();\n\n    /**\n     * Current logging settings value\n     */\n    private _settingsLogging: SettingsLogging = this._storage.getLogging();\n\n    /**\n     * General settings value differ\n     */\n    private _settingsValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Debugging settings value differ\n     */\n    private _settingsDebuggingValueDiff: KeyValueDiffer<any, any>;\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    private _settingsChangeSubject: Subject<keyof SettingsGeneral> = new Subject<keyof SettingsGeneral>();\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    private _settingsDebuggingChangeSubject: Subject<keyof SettingsDebug> = new Subject<keyof SettingsDebug>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets general settings object value\n     */\n    public get settings(): SettingsGeneral\n    {\n        return this._settings;\n    }\n\n    /**\n     * Gets debugging settings object value\n     */\n    public get settingsDebugging(): SettingsDebug\n    {\n        return this._settingsDebugging;\n    }\n\n    /**\n     * Gets logging settings object value\n     */\n    public get settingsLogging(): SettingsLogging\n    {\n        return this._settingsLogging;\n    }\n\n    /**\n     * Occurs when any of general settings properties change\n     */\n    public get settingsChange(): Observable<keyof SettingsGeneral>\n    {\n        return this._settingsChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when any of debugging settings properties change\n     */\n    public get settingsDebuggingChange(): Observable<keyof SettingsDebug>\n    {\n        return this._settingsDebuggingChangeSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(keyValueDiffers: KeyValueDiffers,\n                @Inject(SETTINGS_STORAGE) private _storage: SettingsStorage)\n    {\n        this._settingsValueDiff = keyValueDiffers.find(this._settings).create();\n        this._settingsValueDiff.diff(this._settings);\n\n        this._settingsDebuggingValueDiff = keyValueDiffers.find(this._settingsDebugging).create();\n        this._settingsDebuggingValueDiff.diff(this._settingsDebugging);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets new general settings\n     * @param settings Instance of general settings object\n     */\n    public setSettings(settings: SettingsGeneral): void\n    {\n        this._settings = extend(true, {}, this._settings, settings);\n        this._storage.set(settings);\n\n        const diff = this._settingsValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new debugging settings\n     * @param settings Instance of debugging settings object\n     */\n    public setDebuggingSettings(settings: SettingsDebug): void\n    {\n        this._settingsDebugging = extend(true, {}, this._settingsDebugging, settings);\n        this._storage.setDebugging(settings);\n\n        const diff = this._settingsDebuggingValueDiff.diff(settings);\n        \n        if(diff)\n        {\n            diff.forEachChangedItem(itm =>\n            {\n                this._settingsDebuggingChangeSubject.next(itm.key as any);\n            });\n        }\n    }\n\n    /**\n     * Sets new logging settings\n     * @param settings Instance of logging settings object\n     */\n    public setLoggingSettings(settings: SettingsLogging): void\n    {\n        this._settingsLogging = extend(true, {}, this._settingsLogging, settings);\n        this._storage.setLogging(settings);\n    }\n}","import {Injectable} from '@angular/core';\nimport {extend} from '@jscrpt/common';\nimport store from 'store';\n\nimport {config, SettingsGeneral, SettingsDebug, SettingsLogging} from '../../config';\nimport {SettingsStorage} from './settings.interface';\n\nconst GENERAL_SETTINGS_STORAGE = 'general-settings';\nconst DEBUGGING_SETTINGS_STORAGE = 'debugging-settings';\nconst LOGGING_SETTINGS_STORAGE = 'logging-settings';\n\n/**\n * Settings storage using local storage\n */\n@Injectable()\nexport class LocalSettingsStorage implements SettingsStorage\n{\n    //######################### public methods - implementation of SettingsStorage #########################\n\n    /**\n     * Gets general settings object from storage\n     */\n    public get(): SettingsGeneral\n    {\n        let settings = store.get(GENERAL_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsGeneral>\n                          {\n                              theme: config.general.theme,\n                              language: config.general.language\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets general settings object to storage\n     * @param config General settings object to be stored\n     */\n    public set(config: SettingsGeneral): void\n    {\n        store.set(GENERAL_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets debugging settings object from storage\n     */\n    public getDebugging(): SettingsDebug\n    {\n        let settings = store.get(DEBUGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsDebug>\n                          {\n                              consoleEnabled: config.debug.consoleEnabled,\n                              debugData: config.debug.debugData\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets debugging settings object to storage\n     * @param config Debugging settings object to be stored\n     */\n    public setDebugging(config: SettingsDebug): void\n    {\n        store.set(DEBUGGING_SETTINGS_STORAGE, config);\n    }\n\n    /**\n     * Gets logging settings object from storage\n     */\n    public getLogging(): SettingsLogging\n    {\n        let settings = store.get(LOGGING_SETTINGS_STORAGE);\n\n        settings = extend(true,\n                          {},\n                          <SettingsLogging>\n                          {\n                              consoleLogLevel: config.logging.consoleLogLevel\n                          },\n                          settings);\n\n        return settings;\n    }\n\n    /**\n     * Sets logging settings object to storage\n     * @param config Logging settings object to be stored\n     */\n    public setLogging(config: SettingsLogging)\n    {\n        store.set(LOGGING_SETTINGS_STORAGE, config);\n    }\n}","import {Type} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Func1} from '@jscrpt/common';\n\n/**\n * Symbol used for storing descendants getter\n */\nconst descendantsGetterSymbol = Symbol('descendantsGetter');\n\n/**\n * Defines function for dynamic component which is used for obtaining its descendants\n * @param descendantsGetterFn - Function used for obtaining descendants of dynamic component\n */\nexport function DescendantsGetter<TOptions = unknown>(descendantsGetterFn: Func1<LayoutComponentMetadata[], TOptions|undefined|null>): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        Object.defineProperty(target,\n                              descendantsGetterSymbol,\n                              {\n                                  writable: false,\n                                  configurable: false,\n                                  enumerable: false,\n                                  value: descendantsGetterFn,\n                              });\n\n        return target;\n    };\n}\n\n/**\n * Gets descendants getter if is set\n * @param type - Type which could contains descendants getter\n */\nexport function getDescendantsGetter<TOptions = unknown>(type: Type<unknown>): Func1<LayoutComponentMetadata[], TOptions|undefined|null>|undefined|null\n{\n    if(descendantsGetterSymbol in type)\n    {\n        return (type as any)[descendantsGetterSymbol];\n    }\n\n    return null;\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"properties-form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying textarea\n */\n@Component(\n{\n    selector: 'textarea-input',\n    templateUrl: 'textarea.component.html',\n    styles: [HostDisplayBlockStyle],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TextareaComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<textarea class=\"properties-form-control\" [formControl]=\"_control | asRequired\"></textarea>","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable} from 'rxjs';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\nimport {TextareaComponent} from '../modules/propertyTypeControls/components/textarea/textarea.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                                 'textarea': TextareaComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>> = new InjectionToken<MetadataHistoryManager<LayoutComponentMetadata>>('LAYOUT_HISTORY_MANAGER');\n\n/**\n * Injection token for observables that allows refreshing of components palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor, LiveEventService} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LiveEventService,\n        LayoutComponentsIteratorService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this.initPromise ??= this.getInitPromise());\n\n        for(const item of this.items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async getComponents(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        \n        this.items.push(iteratorItem);\n\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsIterator: failed to get dynamic component type for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this.getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getComponents();\n        }\n    }\n}","import {Inject} from '@angular/core';\nimport {Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\n\nimport {getDescendantsGetter} from '../../decorators';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const def = await this.loader.loadItem(metadata);\n\n        if(!def)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get dynamic component type for children iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        const getDescendants = getDescendantsGetter(def.data);\n\n        //component does not have children\n        if(!getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LayoutComponentMetadata, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.loader, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.loader, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {EditorHotkeys, MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, extend, generateId, isBlank} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Clipboard for layout metadata copy/paste/cut operations\n     */\n    protected metadataClipboard: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected layoutChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    /**\n     * Id of dragged over component\n     */\n    protected _draggedOverComponent: string|null = null;\n\n    /**\n     * Used for emitting dragged over component changes\n     */\n    protected _draggedOverComponentChange: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets id of dragged over component\n     */\n    public get draggedOverComponent(): string|null\n    {\n        return this._draggedOverComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this.layoutChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Occurs when dragged over component changes\n     */\n    public get draggedOverComponentChange(): Observable<void>\n    {\n        return this._draggedOverComponentChange.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(protected _editorHotkeys: EditorHotkeys,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        this.initSubscriptions.add(this._editorHotkeys.delete.subscribe(() => \n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.copy.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            this.metadataClipboard = component.component.options?.typeMetadata;\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.cut.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            this.metadataClipboard = component.component.options?.typeMetadata;\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.paste.subscribe(() =>\n        {\n            if(!this.selectedComponent || !this.metadataClipboard)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            const newId = `${this.metadataClipboard.name}-${generateId(12)}`;\n\n            if(component.component.canDrop)\n            {\n                component.component.addDescendant(\n                {\n                    index: 0,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n            else if(component.parent?.component.canDrop)\n            {\n                component.parent.component.addDescendant(\n                {\n                    index: component.component.index + 1,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    \n    /**\n     * Mark component as being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public dragOverComponent(id?: string): void\n    {\n        if (id === this._draggedOverComponent)\n        {\n            return;\n        }\n\n        this._draggedOverComponent = id ?? null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Removes indication of component being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public cancelDragOverComponent(): void\n    {\n        this._draggedOverComponent = null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this.rootComponentId = id;\n        }\n\n        //already exists\n        if(this.components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this.components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this.components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this.components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this.components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this.components[id];\n        delete this.components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this.rootComponentId)\n        {\n            this.rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this.rootComponentId) || !this.components[this.rootComponentId])\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this.components[this.rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Observable, Subject} from 'rxjs';\n\nconst LIVE_EVENTS_STATUS = 'LIVE_EVENTS_STATUS';\n\n/**\n * Service used for handling state of layout live events\n */\n@Injectable()\nexport class LiveEventService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current enabled value\n     */\n    protected ɵenabled: boolean = false;\n    \n    /**\n     * Used for emitting enabled changes\n     */\n    protected ɵenabledChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current enabled value\n     */\n    public get enabled(): boolean\n    {\n        return this.ɵenabled;\n    }\n    \n    /**\n     * Occurs when enabled changes\n     */\n    public get enabledChange(): Observable<void>\n    {\n        return this.ɵenabledChange.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) protected storage: PermanentStorage,)\n    {\n        this.ɵenabled = this.storage.get<boolean|undefined>(LIVE_EVENTS_STATUS) ?? false;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets enabled new value\n     * @param enabled - Value of enabled that changed\n     */\n    public setEnabled(enabled: boolean): void\n    {\n        if(this.ɵenabled == enabled)\n        {\n            return;\n        }\n    \n        this.storage.set(LIVE_EVENTS_STATUS, enabled);\n\n        this.ɵenabled = enabled;\n        this.ɵenabledChange.next();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        //TODO: add type for return\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n        const scope = await this._componentsRegister.getScope(source.name);\n\n        return {\n            default: type,\n            displayName,\n            scope,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for custom components module items\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleItemsProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        switch(source.name)\n        {\n            case 'placeholder':\n            {\n                return await import('../../dynamicItems/placeholder/type');\n            }\n            case 'placeholderContainer':\n            {\n                return await import('../../dynamicItems/placeholderContainer/type');\n            }\n            case 'componentInputs':\n            {\n                return await import('../../dynamicItems/componentInputs/type');\n            }\n            case 'componentOutputs':\n            {\n                return await import('../../dynamicItems/componentOutputs/type');\n            }\n            default:\n            {\n                return await import('../../dynamicItems/customComponent/type');\n            }\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {CustomComponentsRegister} from '../customComponentsRegister/customComponentsRegister.service';\n\n/**\n * Dynamic module types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: CustomComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.getRegisteredComponents();\n\n        if(!types.length)\n        {\n            return {\n                default: \n                [\n                    'placeholder',\n                ]\n            };\n        }\n\n        return {\n            default: \n            [\n                ...types,\n                'placeholder',\n            ]\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module relations types provider, for custom components types\n */\n@Injectable()\nexport class CustomComponentsDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with custom components\n        if(source.package != 'custom-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('CustomComponentsDynamicModuleRelationsProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        return {\n            default: [\n                'componentInputs',\n                'componentOutputs',\n            ]\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\nimport {RELATIONS_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/relations';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider, CustomComponentsDynamicModuleItemsProvider, CustomComponentsDynamicModuleRelationsProvider, CustomComponentsDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package layout components provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic layout module types provider\n */\nexport const CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components dynamic relations types provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations nodes provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for custom components package relations components provider\n */\nexport const CUSTOM_COMPONENTS_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CustomComponentsDynamicModuleItemsProvider,\n    multi: true\n};","import {Injectable, OnDestroy} from '@angular/core';\nimport {ScopeRegister as RelationsScopeRegister} from '@anglr/dynamic/relations-editor';\nimport {DebounceCall, WithSync} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Service that is used for obtaining existing scopes from layout\n */\n@Injectable()\nexport class ScopeRegister extends RelationsScopeRegister implements OnDestroy\n{\n    //######################### protoected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                protected componentRegister: LayoutComponentsRegister,)\n    {\n        super();\n\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.getScopes()));\n        this.getScopes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets available scopes\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async getScopes(): Promise<void>\n    {\n        this.ɵScopes = [];\n        const types = await this.componentRegister.types;\n\n        for(const type of types)\n        {\n            let scope: string|undefined|null = null;\n\n            if((scope = await this.componentRegister.getScope(type)))\n            {\n                if(this.ɵScopes.indexOf(scope) < 0)\n                {\n                    this.ɵScopes.push(scope);\n                }\n            }\n        }\n\n        this.scopesChangeSubject.next();\n    }\n}","import {ClassProvider, FactoryProvider, Injector, Provider, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE, provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, ScopeRegister as RelationsScopeRegister, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {MetadataStorage, provideStaticPackageSource} from '@anglr/dynamic';\nimport {LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER, CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager, CustomComponentsRegister, ScopeRegister} from '../services';\nimport {ContentComponentData} from '../components';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsCustomComponents(): Provider[]\n{\n    return [\n        ...provideLayoutRelations(),\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n */\nexport function provideLayoutRelationsEditor(): Provider[]\n{\n    const relationsProviders = provideRelationsEditor();\n    relationsProviders.splice(relationsProviders.indexOf(RelationsScopeRegister), 1);\n\n    return [\n        ...provideLayoutEditor(false),\n        ...relationsProviders,\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <ClassProvider>\n        {\n            provide: RelationsScopeRegister,\n            useClass: ScopeRegister,\n        },\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers that enables use of custom relations components in relations editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorRelationsCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                       customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    return [\n        CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers that enables use of custom layout components in layout editor\n * @param layoutRelationsEditorProviders - Array of providers for layout relations editor\n * @param customComponentRegister - Type that represents implementation of custom components register\n */\nexport function provideEditorLayoutCustomComponents(layoutRelationsEditorProviders: Provider[],\n                                                    customComponentRegister: Type<CustomComponentsRegister> = CustomComponentsRegister,): Provider[]\n{\n    //TODO: maybe remove first parameter\n\n    return [\n        CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER,\n        CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('custom-components'),\n        <ClassProvider>\n        {\n            provide: CustomComponentsRegister,\n            useClass: customComponentRegister,\n        },\n        ...layoutRelationsEditorProviders,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Gets custom component metadata info\n * @param name - Name of component which metadata are obtained\n * @param injector - Instance of injector used for obtaining required services\n */\nexport async function getCustomComponentMeta(name: string, injector: Injector): Promise<{contentMetadata: Dictionary<ContentComponentData>, metadata: LayoutComponentMetadata|undefined|null}|null>\n{\n    const layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = injector.get(LAYOUT_METADATA_STORAGE);\n    const customComponentMetadata = await layoutMetadataStorage.getMetadata(name);\n    const logger = injector.get(LOGGER);\n\n    if(!customComponentMetadata)\n    {\n        logger.warn('ContentOptionsPropertiesControlSAComponent: missing layout metadata for custom component!');\n\n        return null;\n    }\n\n    const layoutMetadataIterator = injector.get(LayoutComponentsIteratorService);\n    const iterator = layoutMetadataIterator.getIteratorFor(customComponentMetadata);\n    const metadataExtractor = injector.get(LayoutEditorMetadataExtractor);\n    const customComponentContentMetadata: Dictionary<ContentComponentData> = {};\n\n    for await(const component of iterator)\n    {\n        const metadata = await metadataExtractor.extractMetadata(component.metadata);\n\n        if(!metadata)\n        {\n            logger.warn('ContentOptionsPropertiesControlSAComponent: missing metadata for component!');\n\n            continue;\n        }\n\n        customComponentContentMetadata[component.metadata.id] =\n        {\n            metadata: component.metadata,\n            editorMetadata: metadata,\n        };\n    }\n\n    return {\n        contentMetadata: customComponentContentMetadata,\n        metadata: customComponentMetadata,\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\n\nimport {ContentComponentData} from '../../components';\n\n/**\n * Gets properties model using its name\n */\n@Pipe({name: 'getModel', standalone: true})\nexport class GetModelSAPipe implements PipeTransform\n{\n    /**\n     * Gets properties model using its name\n     * @param value - Name of model class\n     * @param metadata - Metadata containing model\n     */\n    public transform(value: string, metadata: ContentComponentData|undefined|null,): LayoutPropertiesModelType|null\n    {\n        return metadata?.editorMetadata.metaInfo?.optionsMetadata?.propertiesMetadata?.find(itm => itm.modelType.name == value)?.modelType ?? null;\n    }\n}","import {Optional, Pipe, PipeTransform} from '@angular/core';\nimport {LayoutEditorPropertyMetadata, LayoutEditorPropertyMetadataExtractor, LayoutPropertiesModelType} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Gets properties metadata for for model type\n */\n@Pipe({name: 'propertiesMetadata', standalone: true,})\nexport class PropertiesMetadataSAPipe implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(@Optional() protected propertyExtractor?: LayoutEditorPropertyMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Gets properties metadata for for model type\n     * @param value - Type of properties model\n     * @param propertyExtractor - Extractor used for obtaining metadata for model\n     */\n    public transform(value: LayoutPropertiesModelType|null, propertyExtractor?: LayoutEditorPropertyMetadataExtractor): Dictionary<LayoutEditorPropertyMetadata>|null\n    {\n        if(!value)\n        {\n            return null;\n        }\n\n        this.propertyExtractor ??= propertyExtractor;\n\n        if(!this.propertyExtractor)\n        {\n            throw new Error('Please provide LayoutEditorPropertyMetadataExtractor for propertiesMetadata pipe!');\n        }\n\n        return this.propertyExtractor.extract(value);\n    }\n}","import {Injectable} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentConfiguration} from './customComponentsRegister.interface';\n\n/**\n * Register that contains registered custom components\n */\n@Injectable()\nexport class CustomComponentsRegister<TConfig extends CustomComponentConfiguration = CustomComponentConfiguration>\n{\n    //######################### public methods #########################\n\n    /**\n     * Gets array of registered custom components names\n     */\n    public getRegisteredComponents(): PromiseOr<string[]>\n    {\n        return [];\n    }\n\n    /**\n     * Gets configuration for custom component by its name\n     * @param _name - Name of template of custom component for which configuration will be returned\n     */\n    public getConfigurationForComponent(_name: string): TConfig|undefined|null\n    {\n        return null;\n    }\n\n    /**\n     * Sets configuration for custom component by its name\n     * @param _name - Name of template of custom component for which configuration will be set\n     * @param _config - Value of configuration to be set\n     */\n    public setConfigurationForComponent(_name: string, _config: TConfig): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n\n    /**\n     * Name of layout component\n     */\n    name: string;\n\n    /**\n     * Scope of layout component\n     */\n    scope: string|undefined;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this.initPromise ??= this.initializeTypes();\n\n        return this.initPromise.then(() =>\n        {\n            return Object.keys(this.definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                protected iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this.initSubscriptions.add(this.layoutManager.layoutChange.subscribe(() => this.initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.displayName ?? undefined;\n    }\n\n    /**\n     * Gets scope of type by its name\n     * @param name - Name of type that scope should be obtained\n     */\n    public async getScope(name: string): Promise<string|undefined>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.scope;\n    }\n\n    /**\n     * Gets component name of type byt its name\n     * @param name - Name of type that component name should be obtained\n     */\n    public async getComponentName(name: string): Promise<string|null>\n    {\n        await (this.initPromise ??= this.initializeTypes());\n\n        return this.definedTypes[name]?.name ?? null;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async initializeTypes(): Promise<void>\n    {\n        this.definedTypes = {};\n\n        if(!this.layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this.iteratorSvc.getIteratorFor(this.layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this.loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this.definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n                name: component.metadata.name,\n                scope: component.metadata.scope,\n            };\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataType} from './relationsEditorMetadata.interface';\n\n/**\n * Sets relations editor metadata to class on which is this decorator applied\n * @param metadataLoader - Relations editor metadata loader function used for obtaining metadata\n */\nexport function RelationsEditorMetadata(metadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<RelationsEditorMetadataDescriptor, RelationsEditorMetadataType>(metadataLoader, 'relationsEditorMetadata');\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await relationsExportExtractor(module, logger);\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n\n    /**\n     * Display name of layout component\n     */\n    displayName?: string;\n\n    /**\n     * Current scope of node that is being used\n     */\n    scope?: string;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n        displayName: localModule.displayName,\n        scope: localModule.scope,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_HISTORY_MANAGER, RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, RelationsNodeManager} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for relations history manager state\n */\nexport const RELATIONS_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: RelationsNodeManager,\n};\n\n/**\n * Provider for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};\n","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataHistoryManager} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeMetadata} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token for relations history manager\n */\nexport const RELATIONS_HISTORY_MANAGER: InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>> = new InjectionToken<MetadataHistoryManager<RelationsNodeMetadata[]>>('RELATIONS_HISTORY_MANAGER');","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isString, isType} from '@jscrpt/common';\n\nimport {DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_HISTORY_MANAGER_STATE, RELATIONS_HISTORY_MANAGER_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, ScopeRegister, StaticComponentsRegister} from '../services';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //display name should be string if used\n    if(isPresent(data.displayName) && !isString(data.displayName))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n        ScopeRegister,\n        RELATIONS_HISTORY_MANAGER_STATE,\n        RELATIONS_HISTORY_MANAGER_PROVIDER,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}\n\n/**\n * Transforms any string to colour code\n * @param str - String to be changed to colour code\n */\nexport function stringToColour(str: string): string\n{\n    let hash = 0;\n\n    for (let i = 0; i < str.length; i++) \n    {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    let colour = '#';\n\n    for (let i = 0; i < 3; i++)\n    {\n        const value = (hash >> (i * 8)) & 0xFF;\n        colour += ('00' + value.toString(16)).substr(-2);\n    }\n\n    return colour;\n}","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager implements MetadataStateManager<RelationsNodeMetadata[]>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Active relations node\n     */\n    protected _activeNode: string|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n    \n    /**\n     * Used for emitting node registration\n     */\n    protected _nodesChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting active node change\n     */\n    protected _activeNodeChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting node registration change\n     */\n    protected _nodeRegisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n\n    /**\n     * Used for emitting node unregistration change\n     */\n    protected _nodeUnregisterChange: Subject<RelationsNode> = new Subject<RelationsNode>();\n    \n    //######################### public properties #########################\n\n    /**\n     * Registered relation nodes\n     */\n    public get nodes(): Dictionary<RelationsNode>\n    {\n        return this._nodes;\n    }\n\n    /**\n     * Occurs when new node is registered\n     */\n    public get nodesChange(): Observable<void>\n    {\n        return this._nodesChange.asObservable();\n    }\n\n    /**\n     * Active relations node\n     */\n    public get activeNode(): string|null|undefined\n    {\n        return this._activeNode;\n    }\n\n    /**\n     * Occurs when active relations node is changed\n     */\n    public get activeNodeChange(): Observable<void>\n    {\n        return this._activeNodeChange.asObservable();\n    }\n\n    /**\n     * Occurs when registered node is changed\n     */\n    public get nodeRegisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeRegisterChange.asObservable();\n    }\n\n    /**\n     * Occurs when unregistered node is changed\n     */\n    public get nodeUnregisterChange(): Observable<RelationsNode>\n    {\n        return this._nodeUnregisterChange.asObservable();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n        this._nodesChange.next();\n        this._nodeRegisterChange.next(node);\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n        this._nodesChange.next();\n        this._nodeUnregisterChange.next(node);\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                scope: node.metadata.scope,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n\n    /**\n     * Sets active relations node\n     * @param id node identifier\n     */\n    public setActiveNode(id?: string|null): void\n    {\n        this._activeNode = id;\n        this._activeNodeChange.next();\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that is used for obtaining existing scopes\n */\n@Injectable()\nexport class ScopeRegister\n{\n    //######################### protected properties #########################\n\n    /**\n     * Array of all scopes\n     */\n    protected ɵScopes: string[] = [];\n\n    /**\n     * Subject used for emitting changes of scopes\n     */\n    protected scopesChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets array of all scopes\n     */\n    public get scopes(): string[]\n    {\n        return this.ɵScopes;\n    }\n\n    /**\n     * Occurs when array of scopes changes\n     */\n    public get scopesChange(): Observable<void>\n    {\n        return this.scopesChangeSubject.asObservable();\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Subject} from 'rxjs';\n\nimport {defineAssignedProp, defineSkipInitProp} from '../../misc/utils';\nimport {RelationsChangeDetector, RelationsComponentManager} from '../../services';\nimport {RelationsWithInjector} from '../../services/relationsChangeDetector/relationsChangeDetector.interface';\n\n/**\n * Creates dynamic output for property\n * @param options - Options that allows configure dynamic output\n *\n * `skipInit` - Means that there will be no initial data transfer for this output\n * `sync` - Means that changes will be transfered synchronously, right away\n */\nexport function DynamicOutput(options?: {skipInit?: boolean; sync?: boolean}): PropertyDecorator\n{\n    return function(target: any, propertyKey: string|symbol)\n    {\n        const prop = propertyKey as string;\n\n        Object.defineProperty(target,\n                              `${prop}Change`,\n                              {\n                                  get: function()\n                                  {\n                                      if(!this[`ɵ${prop}Change`])\n                                      {\n                                          this[`ɵ${prop}Change`] = new Subject<void>();\n                                      }\n\n                                      return this[`ɵ${prop}Change`];\n                                  }\n                              });\n\n        Object.defineProperty(target,\n                              prop,\n                              {\n                                  get: function()\n                                  {\n                                      return this[`ɵ${prop}`];\n                                  },\n                                  set: function(value: any)\n                                  {\n                                      this[`ɵ${prop}`] = value;\n                                      defineAssignedProp(this, prop);\n\n                                      if(options?.sync)\n                                      {\n                                          this[`${prop}Change`].next();\n                                      }\n                                      else\n                                      {\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: prop,\n                                          });\n                                      }\n                                  }\n                              });\n\n        if(options?.skipInit)\n        {\n            defineSkipInitProp(target, prop);\n        }\n    };\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {RelationsComponentDef} from './types';\n\n/**\n * Injection token for relations components module data extractors\n */\nexport const RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations components module providers\n */\nexport const RELATIONS_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<RelationsComponentDef>> = new InjectionToken<DynamicItemLoader<RelationsComponentDef>>('RELATIONS_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for relations\n */\nexport const RELATIONS_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('RELATIONS_METADATA_STORAGE');\n\n/**\n * Injection token for indication whether skip relations process initialization\n */\nexport const RELATIONS_PROCESSOR_SKIP_INIT: InjectionToken<boolean> = new InjectionToken<boolean>('RELATIONS_PROCESSOR_SKIP_INIT');\n","import {FactoryProvider, inject, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {Dictionary, isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {CodeExecutor, RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n//TODO: skip init as constant\n//TODO: assigned as constant\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        CodeExecutor,\n    ];\n}\n\n/**\n * Defines skip initial data transfer for relations for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is skip init defined\n */\nexport function defineSkipInitProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}SkipInit`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is skip init defined for property\n * @param object - Object containg skip init property to be tested\n * @param name - Name of property for which should be skip init defined\n * @returns \n */\nexport function isSkipInit<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}SkipInit`];\n}\n\n/**\n * Defines indication that property was at least once assigned for specified property\n * @param object - Object which will have this new property defined\n * @param name - Name of property for which is assigned defined\n */\nexport function defineAssignedProp<TObj>(object: TObj, name: string): void\n{\n    const propName = `${name}Assigned`;\n\n    if(!Reflect.has(object as object, propName))\n    {\n        Object.defineProperty(object,\n                              propName,\n                              {\n                                  value: true,\n                              });\n    }\n}\n\n/**\n * Tests whether there is assigned defined for property\n * @param object - Object containg assigned property to be tested\n * @param name - Name of property for which should be assigned defined\n * @returns \n */\nexport function isAssigned<TObj>(object: TObj, name: string): boolean\n{\n    return (object as unknown as Dictionary<boolean>)[`${name}Assigned`];\n}","import {Injectable, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {generateId, Dictionary} from '@jscrpt/common';\n\n/**\n * Class used for executing javascript code and obtaining types from executed javascript code\n */\n@Injectable()\nexport class CodeExecutor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Loaded data cache for relations id\n     */\n    protected loadedDataCache: Dictionary<any> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads data from dynamicaly executed code\n     * @param relationsId - Id of relations for which is data loaded from code\n     * @param code - Code used for obtaining data\n     */\n    public async loadData<TResult>(relationsId: string, code: string): Promise<TResult|null>\n    {\n        if(this.loadedDataCache[relationsId])\n        {\n            return this.loadedDataCache[relationsId];\n        }\n\n        const scriptElement = this.document.createElement('script');\n        const loadHelper = `loadType${generateId(12)}`;\n        let result: TResult|null = null;\n\n        scriptElement.innerText = `\n        (function(exports, loadType, require)\n        {\n            ${code}\n\n            loadType(exports);\n        })({}, ${loadHelper}.loadType, ${loadHelper}.require);`;\n\n        (window as any)[loadHelper] =\n        {\n            loadType: (exp: {default: any}) => result = exp.default ?? null,\n            require: (requireName: string) =>\n            {\n                console.log(requireName);\n\n                return null;\n            }\n        };\n\n        this.document.getElementsByTagName('head')[0].appendChild(scriptElement);\n        delete (window as any)[loadHelper];\n        scriptElement.remove();\n\n        this.loadedDataCache[relationsId] = result;\n\n        return result;\n    }\n}","import {isPresent} from '@jscrpt/common';\n\n/**\n * Options for RelationsChangeDetector\n */\nexport class RelationsChangeDetectorOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Indication whether run detection in single run, new changes added to same run, or new changes added to next run\n     */\n    public detectionInSingleRun: boolean = true;\n\n    //######################### constructor #########################\n    constructor(detectionInSingleRun?: boolean)\n    {\n        if(isPresent(detectionInSingleRun))\n        {\n            this.detectionInSingleRun = detectionInSingleRun;\n        } \n    }\n}","import {inject, Inject, Injectable, Injector, Optional} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {BindThis, Dictionary, isEmptyObject, isString} from '@jscrpt/common';\n\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsProcessorComponentData} from '../relationsProcessor/relationsProcessor.interface';\nimport {RelationsProcessor} from '../relationsProcessor/relationsProcessor.service';\nimport {MarkForCheckId} from './relationsChangeDetector.interface';\nimport {RelationsChangeDetectorOptions} from './relationsChangeDetector.options';\n\n/**\n * Change detector for relations, which allows async change detection\n */\n@Injectable()\nexport class RelationsChangeDetector\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor for handling relations\n     */\n    protected ɵrelationsProcessor: RelationsProcessor|undefined|null;\n\n    /**\n     * Gets instance of relations processor for handling relations\n     */\n    protected get relationsProcessor(): RelationsProcessor\n    {\n        return (this.ɵrelationsProcessor ??= this.injector.get(RelationsProcessor));\n    }\n\n    /**\n     * Instance of relations component manager storing registered components\n     */\n    protected ɵrelationsComponentManager: RelationsComponentManager|undefined|null;\n\n    /**\n     * Gets instance of relations component manager storing registered components\n     */\n    protected get relationsComponentManager(): RelationsComponentManager\n    {\n        return (this.ɵrelationsComponentManager ??= this.injector.get(RelationsComponentManager));\n    }\n\n    /**\n     * Objects storing components and theirs outputs and related input components\n     */\n    protected ɵoutputsComponents: Dictionary<Dictionary<string[]>> = {};\n\n    /**\n     * Instance of parent relations change detector\n     */\n    protected parent: RelationsChangeDetector|undefined|null = inject(RelationsChangeDetector, {optional: true, skipSelf: true,});\n\n    /**\n     * Objects storing components and theirs outputs and related input components\n     */\n    protected get outputsComponents(): Dictionary<Dictionary<string[]>>\n    {\n        if(isEmptyObject(this.ɵoutputsComponents) && this.parent)\n        {\n            return this.parent.outputsComponents;\n        }\n\n        return this.ɵoutputsComponents;\n    }\n\n    /**\n     * Options for relations change detector\n     */\n    protected options: RelationsChangeDetectorOptions;\n\n    /**\n     * Identifier of running timeout\n     */\n    protected timeout: number|undefined|null;\n\n    /**\n     * Array of input component ids that should be checked in first run\n     */\n    protected firstRunIds: string[] = [];\n\n    /**\n     * Array of input component ids that should be checked in second run\n     */\n    protected secondRunIds: string[] = [];\n\n    /**\n     * Indication whether is check running\n     */\n    protected checkRunning: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,\n                @Inject(LOGGER) protected logger: Logger,\n                @Optional() options?: RelationsChangeDetectorOptions,)\n    {\n        if(!options || !(options instanceof RelationsChangeDetectorOptions))\n        {\n            options = new RelationsChangeDetectorOptions();\n        }\n\n        this.options = options;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks input component connected to this for checking\n     * @param id - Identification of what should be checked\n     */\n    public markForCheck(id: MarkForCheckId): void\n    {\n        const componentId = isString(id.componentId) ? id.componentId : this.relationsComponentManager.getId(id.componentId);\n\n        if(!componentId)\n        {\n            this.logger.warn('RelationsChangeDetector: Unable to find component!');\n\n            return;\n        }\n\n        const inputComponents = this.outputsComponents[componentId]?.[id.outputName] ?? [];\n        const ids = this.checkRunning && !this.options.detectionInSingleRun ? this.secondRunIds : this.firstRunIds;\n\n        for(const inputComponent of inputComponents)\n        {\n            //already exists\n            if(ids.indexOf(inputComponent) >= 0)\n            {\n                continue;\n            }\n\n            ids.push(inputComponent);\n        }\n\n        //schedule check\n        if(!this.timeout)\n        {\n            this.timeout = setTimeout(this.runCheck, 0) as unknown as number;\n        }\n    }\n\n    /**\n     *\n     * @param relations - Object storing current relations\n     */\n    public initialize(relations: Dictionary<RelationsProcessorComponentData>): void\n    {\n        this.ɵoutputsComponents = {};\n\n        for(const componentId in relations)\n        {\n            const relationsDef = relations[componentId];\n\n            this.ɵoutputsComponents[componentId] ??= {};\n\n            if(!relationsDef.inputOutputs)\n            {\n                continue;\n            }\n\n            for(const inputOutput of relationsDef.inputOutputs)\n            {\n                this.ɵoutputsComponents[componentId][inputOutput.outputName] ??= [];\n                this.ɵoutputsComponents[componentId][inputOutput.outputName].push(inputOutput.inputComponentId);\n            }\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Runs check for marked components\n     */\n    @BindThis\n    protected runCheck(): void\n    {\n        this.checkRunning = true;\n\n        for(const id of this.firstRunIds)\n        {\n            this.relationsProcessor.transferInputsData(id, false);\n        }\n\n        if(this.options.detectionInSingleRun)\n        {\n            this.firstRunIds = [];\n        }\n        else\n        {\n            this.firstRunIds = this.secondRunIds;\n            this.secondRunIds = [];\n        }\n\n        this.checkRunning = false;\n        this.timeout = null;\n    }\n}\n","import {inject, Inject, Injectable, Injector, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsProcessorComponent} from '../../misc/types';\n\n/**\n * Manager used for managing all components used in relations\n */\n@Injectable()\nexport class RelationsComponentManager implements OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of current scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Registered components\n     */\n    protected components: Dictionary<RelationsComponent> = {};\n\n    /**\n     * Object storing all scopes and their managers\n     */\n    protected scopes: Dictionary<RelationsComponentManager[]> = {};\n\n    /**\n     * Instance of parent relations component manager\n     */\n    protected parent: RelationsComponentManager|null = null;\n\n    /**\n     * Cache containing children scoped components\n     */\n    protected childrenCache: Dictionary<RelationsComponent[]> = {};\n\n    /**\n     * Injector for angular DI\n     */\n    protected injector: Injector = inject(Injector);\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //removes nested scopes first\n        if(this.scopes)\n        {\n            for(const scopeId in this.scopes)\n            {\n                const scope = this.scopes[scopeId];\n\n                if(scope)\n                {\n                    for(const manager of scope)\n                    {\n                        manager.ngOnDestroy();\n                    }\n                }\n\n                delete this.scopes[scopeId];\n            }\n            \n        }\n\n        for(const componentId in this.components)\n        {\n            this.removeCacheFromHierarchy(componentId);\n        }\n\n        //removes self from parent scopes\n        if(this.parent && this.scopeId)\n        {\n            const scope = this.parent.scopes[this.scopeId];\n\n            if(scope)\n            {\n                const index = scope.indexOf(this);\n\n                if(index >= 0)\n                {\n                    scope.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Registers newly created component\n     * @param id - Id of component to be registered\n     * @param component - Instance of registered component\n     */\n    public registerComponent(id: string, component: RelationsProcessorComponent): void\n    {\n        if(this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' is already registered, provide unique id.`);\n\n            return;\n        }\n\n        component.ɵɵRelationsComponentId ??= generateId(12);\n        this.removeCacheFromHierarchy(id);\n        this.components[id] = component;\n        component.ɵɵinjector = this.injector;\n    }\n\n    /**\n     * Unregisters component\n     * @param id - Id of component to be unregistered\n     */\n    public unregisterComponent(id: string): void\n    {\n        if(!this.components[id])\n        {\n            this.logger?.warn(`RelationsComponentManager: Component with id '${id}' has already been unregistered.`);\n\n            return;\n        }\n\n        this.removeCacheFromHierarchy(id);\n        delete this.components[id];\n    }\n\n    /**\n     * Gets instance of component or array of component instances or null\n     * @param id - Unique identification of component, or components\n     */\n    public get(id: string): RelationsProcessorComponent[]|RelationsProcessorComponent|null\n    {\n        const component = this.components[id];\n\n        if(component)\n        {\n            return component;\n        }\n\n        if(this.childrenCache[id])\n        {\n            return this.childrenCache[id];\n        }\n\n        const components = this.getChildrenComponents(id);\n\n        if(components)\n        {\n            return components;\n        }\n\n        return this.getParentComponents(id);\n    }\n\n    /**\n     * Gets id of relations component, for this manager\n     * @param component - Component which id should be found\n     */\n    public getId(component: RelationsComponent): string|null\n    {\n        for(const id in this.components)\n        {\n            const comp = this.components[id];\n\n            if(comp === component)\n            {\n                return id;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Opens new scope for relations component manager\n     * @param id - Id of newly created scope\n     */\n    public openScope(id: string): RelationsComponentManager\n    {\n        this.scopes[id] ??= [];\n        const scope = new RelationsComponentManager(this.logger);\n        scope.scopeId = id;\n        scope.parent = this;\n        this.scopes[id].push(scope);\n\n        return scope;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes cached components from hierarchy\n     * @param id - Id of component which will be removed from cache\n     */\n    protected removeCacheFromHierarchy(id: string): void\n    {\n        //no parent or parent cache does not contains id\n        if(!this.parent || !this.parent.childrenCache[id])\n        {\n            return;\n        }\n\n        delete this.parent.childrenCache[id];\n        this.parent.removeCacheFromHierarchy(id);\n    }\n\n    /**\n     * Gets children components when scopes are used\n     * @param id - Id of components to be get\n     */\n    protected getChildrenComponents(id: string): RelationsComponent[]|null\n    {\n        const getFromScope = (scopeId: string) =>\n        {\n            const scope = this.scopes[scopeId];\n            const result: RelationsComponent[] = [];\n\n            for(const mngr of scope)\n            {\n                const component = mngr.components[id];\n\n                if(component)\n                {\n                    result.push(component);\n\n                    continue;\n                }\n\n                const components = mngr.getChildrenComponents(id);\n\n                if(Array.isArray(components))\n                {\n                    for(const cmp of components)\n                    {\n                        result.push(cmp);\n                    }\n\n                    continue;\n                }\n\n                return null;\n            }\n\n            if(result.length)\n            {\n                return result;\n            }\n\n            return null;\n        };\n\n\n        for(const scopeId in this.scopes)\n        {\n            const result = getFromScope(scopeId);\n\n            if(result)\n            {\n                this.childrenCache[id] = result;\n\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets parent components when scopes are used\n     * @param id - Id of component to be get\n     */\n    protected getParentComponents(id: string): RelationsComponent|null\n    {\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        const component = this.parent.components[id] ?? null;\n\n        if(component)\n        {\n            return component;\n        }\n\n        return this.parent.getParentComponents(id);\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {RelationsComponentMetadata} from '../../interfaces';\n\n/**\n * Manager of relations metadata\n */\n@Injectable()\nexport class RelationsManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current relations value\n     */\n    protected _relations: RelationsComponentMetadata[] = [];\n    \n    /**\n     * Used for emitting relations changes\n     */\n    protected _relationsChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current relations value\n     */\n    public get relations(): RelationsComponentMetadata[]\n    {\n        return this._relations;\n    }\n    \n    /**\n     * Occurs when relations changes\n     */\n    public get relationsChange(): Observable<void>\n    {\n        return this._relationsChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets relations new value\n     * @param relations - Value of relations that changed\n     */\n    public setRelations(relations: RelationsComponentMetadata[]): void\n    {\n        if(this._relations == relations)\n        {\n            return;\n        }\n    \n        this._relations = relations;\n        this._relationsChange.next();\n    }\n}","import {SimpleChanges} from '@angular/core';\n\nimport {RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstruction} from './relationsProcessor.interface';\n\n/**\n * Instruction containing data/changes that are needed for data transfer\n */\nexport class RelationsDataTransferInstructionImpl implements RelationsDataTransferInstruction\n{\n    //######################### private fields #########################\n\n    /**\n     * Changes that are coming into component\n     */\n    private _changes: SimpleChanges = {};\n\n    //######################### public properties - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get changes(): SimpleChanges\n    {\n        return this._changes;\n    }\n\n    //######################### constructor #########################\n    constructor(protected components: RelationsProcessorComponent[],)\n    {\n    }\n\n    //######################### public methods - implementation of RelationsDataTransferInstruction #########################\n\n    /**\n     * @inheritdoc\n     */\n    public applyChanges(): void\n    {\n        for(const component of this.components)\n        {\n            if(!component)\n            {\n                continue;\n            }\n\n            for(const key in this._changes)\n            {\n                const change = this._changes[key];\n\n                (component as any)[key] = change.currentValue;\n            }\n            \n            component.ngOnChanges?.(this._changes);\n            component.invalidateVisuals();\n        }\n    }\n}","import {inject, Inject, Injectable, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {Dictionary, isBlank, noop, NoopAction} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {RelationsComponent, RelationsComponentMetadata, RelationsComponentType} from '../../interfaces';\nimport {RelationsComponentManager} from '../relationsComponentManager/relationsComponentManager.service';\nimport {RelationsManager} from '../relationsManager/relationsManager.service';\nimport {RelationsDataTransferInstruction, RelationsProcessorComponentData, RelationsProcessorInputOutputData} from './relationsProcessor.interface';\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_PROCESSOR_SKIP_INIT} from '../../misc/tokens';\nimport {RelationsComponentDef, RelationsProcessorComponent} from '../../misc/types';\nimport {RelationsDataTransferInstructionImpl} from './relationsDataTransferInstruction';\nimport {isAssigned, isSkipInit} from '../../misc/utils';\nimport {RelationsChangeDetector} from '../relationsChangeDetector/relationsChangeDetector.service';\n\n/**\n * Processor that applies relations to registered components\n */\n@Injectable()\nexport class RelationsProcessor implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Promise used for indication that processor was initialized\n     */\n    protected ɵInitialized: Promise<void> = Promise.resolve();\n\n    /**\n     * Relations metadata\n     */\n    protected ɵRelations: Dictionary<RelationsProcessorComponentData> = {};\n\n    /**\n     * Array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected ɵBackwardRelations: Dictionary<RelationsProcessorInputOutputData[]> = {};\n\n    /**\n     * Resolves initialized\n     */\n    protected resolveInitialized: NoopAction = noop;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Gets or sets relations metadata\n     */\n    protected get relations(): Dictionary<RelationsProcessorComponentData>\n    {\n        if(this.parent)\n        {\n            return this.parent.relations;\n        }\n\n        return this.ɵRelations;\n    }\n    protected set relations(value: Dictionary<RelationsProcessorComponentData>)\n    {\n        this.ɵRelations = value;\n    }\n\n    /**\n     * Gets or sets array of backward relations, relations that are used for obtaining data for inputs\n     */\n    protected get backwardRelations(): Dictionary<RelationsProcessorInputOutputData[]>\n    {\n        if(this.parent)\n        {\n            return this.parent.backwardRelations;\n        }\n\n        return this.ɵBackwardRelations;\n    }\n    protected set backwardRelations(value: Dictionary<RelationsProcessorInputOutputData[]>)\n    {\n        this.ɵBackwardRelations = value;\n    }\n\n    /**\n     * Instance of parent relations processor\n     */\n    protected parent: RelationsProcessor|null = null;\n\n    /**\n     * Id of scope\n     */\n    protected scopeId: string|null = null;\n\n    /**\n     * Injected relations change detector\n     */\n    protected relationsChangeDetector: RelationsChangeDetector = inject(RelationsChangeDetector);\n\n    //######################### public properties #########################\n\n    /**\n     * Gets promise that completes when processor was initialized\n     */\n    public get initialized(): Promise<void>\n    {\n        return this.ɵInitialized;\n    }\n\n    //######################### constructor #########################\n    constructor(protected relationsManager: RelationsManager,\n                protected componentManager: RelationsComponentManager,\n                protected injector: Injector,\n                @Inject(RELATIONS_COMPONENTS_LOADER) protected loader: DynamicItemLoader<RelationsComponentDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,\n                @Inject(RELATIONS_PROCESSOR_SKIP_INIT) @Optional() skipInit?: boolean,)\n    {\n        if(!skipInit)\n        {\n            this.initSubscriptions.add(this.relationsManager.relationsChange.subscribe(() => this.initializeRelations()));\n\n            this.initializeRelations();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.destroyRelations();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Updates relations\n     * @param id - Id of component to be registered\n     */\n    public updateRelations(id: string): void\n    {\n        this.logger?.debug('RelationsProcessor: Updating relations for {@id}', {id});\n\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n        let components = this.componentManager.get(id);\n\n        //this component has no relations\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {@id}', {id});\n\n            return;\n        }\n\n        this.initOptions(components, relations);\n\n        //initialize default value from connection to this\n        if(backwardRelations?.length)\n        {\n            backwardRelations.forEach(inputOutput =>\n            {\n                this.initBackwardRelation(inputOutput);\n            });\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            for(const outputComponent of components)\n            {\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                outputComponent.ɵɵRelationsOutputsChangeSubscriptions = [];\n\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    this.logger?.verbose('RelationsProcessor: processing input outputs {@data} ', {id, inputOutput, inputComponents, components});\n\n                    const outputObservable = (outputComponent as any)[`${inputOutput.outputName}Change`] as Observable<any>;\n\n                    //check whether is observable output\n                    if(!(outputObservable instanceof Observable))\n                    {\n                        this.logger?.warn('RelationsProcessor: Output on component {@data} is not observable', inputOutput);\n\n                        continue;\n                    }\n\n                    //set listening for output changes\n                    outputComponent.ɵɵRelationsOutputsChangeSubscriptions.push(outputObservable.subscribe(() =>\n                    {\n                        let inputs = this.componentManager.get(inputOutput.inputComponentId);\n\n                        if(!inputs)\n                        {\n                            this.logger?.warn('RelationsProcessor: Missing input components {@data} on output change', inputOutput);\n\n                            return;\n                        }\n\n                        if(!Array.isArray(inputs))\n                        {\n                            inputs = [inputs];\n                        }\n\n                        for(const input of inputs)\n                        {\n                            this.transferData(outputComponent, inputOutput.outputName, input, inputOutput.inputName, false);\n                        }\n                    }));\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {@data}', inputOutput);\n\n                        continue;\n                    }\n\n                    for(const inputComponent of inputComponents)\n                    {\n                        const id = `${inputComponent.ɵɵRelationsComponentId}-${outputComponent.ɵɵRelationsComponentId}`;\n\n                        //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                        if(!isSkipInit(outputComponent, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputComponent, inputOutput.outputName))\n                        {\n                            inputOutput.initialized[id] = this.transferData(outputComponent, inputOutput.outputName, inputComponent, inputOutput.inputName, true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method used for destroying component\n     */\n    public destroyComponent(id: string): void\n    {\n        const metadata: RelationsProcessorComponentData = this.relations[id];\n        const backwardRelations = this.backwardRelations[id];\n\n        //uninitialize backward relations\n        if(backwardRelations)\n        {\n            for(const relation of backwardRelations)\n            {\n                relation.initialized = {};\n            }\n        }\n\n        //destroy relations\n        if(metadata)\n        {\n            let components = this.componentManager.get(id);\n\n            if(components)\n            {\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                for(const cmp of components)\n                {\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions?.forEach(subscription => subscription.unsubscribe());\n                    cmp.ɵɵRelationsOutputsChangeSubscriptions = [];\n                    cmp.ɵɵRelationsOptionsInitialized = false;\n                }\n            }\n\n            if(metadata.inputOutputs && Array.isArray(metadata.inputOutputs))\n            {\n                for(const inputOutput of metadata.inputOutputs)\n                {\n                    inputOutput.initialized = {};\n                }\n            }\n\n            //destroy auto created components and unregister them\n            if(metadata.autoCreated)\n            {\n                let components = this.componentManager.get(id);\n\n                if(!components)\n                {\n                    return;\n                }\n\n                if(!Array.isArray(components))\n                {\n                    components = [components];\n                }\n\n                this.componentManager.unregisterComponent(id);\n\n                for(const cmp of components)\n                {\n                    cmp.ngOnDestroy?.();\n                }\n            }\n        }\n    }\n\n    /**\n     * Opens new scope of relations processor\n     * @param id - Id of newly created scope\n     * @param componentManager - Scoped instance of component manager\n     * @param injector - Injector for current scope\n     */\n    public openScope(id: string,\n                     componentManager: RelationsComponentManager,\n                     injector: Injector,): RelationsProcessor\n    {\n        const processor = new RelationsProcessor(this.relationsManager, componentManager, injector, this.loader, this.logger, true);\n        processor.scopeId = id;\n        processor.parent = this;\n\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === id && relationsDef.componentType)\n            {\n                const instance = new relationsDef.componentType(injector);\n                componentManager.registerComponent(componentId, instance);\n                processor.updateRelations(componentId);\n            }\n        }\n\n        return processor;\n    }\n\n    /**\n     * Destroyes opened scope itself\n     */\n    public destroyScope(): void\n    {\n        for(const componentId in this.relations)\n        {\n            const relationsDef = this.relations[componentId];\n\n            //Same scope initialize\n            if(relationsDef.scope === this.scopeId)\n            {\n                this.destroyComponent(componentId);\n            }\n        }\n    }\n\n    /**\n     * Transfers data for specified component using its output relations, all data are transfered in single change set per component\n     * @param id - Id of component whose outputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns dictionary with data transfer instructions per components\n     */\n    public transferOutputsData(id: string, delayed: true): Dictionary<RelationsDataTransferInstruction>\n    public transferOutputsData(id: string, delayed: false): null\n    public transferOutputsData(id: string, delayed: boolean = false): null|Dictionary<RelationsDataTransferInstruction>\n    {\n        const transfers: Dictionary<RelationsDataTransferInstructionImpl> = {};\n        const relations: RelationsProcessorComponentData = this.relations[id];\n        let components = this.componentManager.get(id);\n\n        if(!relations || !components)\n        {\n            this.logger?.warn('RelationsProcessor: No relations for {@id}', {id});\n\n            return delayed ? transfers : null;\n        }\n\n        if(relations?.inputOutputs)\n        {\n            if(!Array.isArray(components))\n            {\n                components = [components];\n            }\n\n            //for each component containing outputs\n            for(const outputComponent of components)\n            {\n                //for each relation\n                for(const inputOutput of relations.inputOutputs)\n                {\n                    let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n                    if(inputComponents && !Array.isArray(inputComponents))\n                    {\n                        inputComponents = [inputComponents];\n                    }\n\n                    if(!inputComponents || !Array.isArray(inputComponents))\n                    {\n                        this.logger?.warn('RelationsProcessor: Missing input components {@data}', inputOutput);\n\n                        continue;\n                    }\n\n                    transfers[inputOutput.inputComponentId] ??= new RelationsDataTransferInstructionImpl(inputComponents);\n\n                    //for each input component\n                    for(const inputComponent of inputComponents)\n                    {\n                        if(!outputComponent || !inputComponent)\n                        {\n                            continue;\n                        }\n\n                        const previousValue = (inputComponent as any)[inputOutput.inputName];\n                        const currentValue = (outputComponent as any)[inputOutput.outputName];\n\n                        transfers[inputOutput.inputComponentId].changes[inputOutput.inputName] =\n                        {\n                            previousValue,\n                            currentValue,\n                            firstChange: false,\n                            isFirstChange: () => false,\n                        };\n                    }\n                }\n            }\n\n            if(!delayed)\n            {\n                //transfers data\n                for(const key in transfers)\n                {\n                    const transfer = transfers[key];\n\n                    transfer.applyChanges();\n                }\n            }\n        }\n\n        return delayed ? transfers : null;\n    }\n\n    /**\n     * Transfers data for specified component using its inputs relations, all data are transfered in single change\n     * @param id - Id of component whose inputs relations should be applied to transfer data\n     * @param delayed - Indication whether delay data transfer and only generate instructions, if true returns transfer instructions\n     */\n    public transferInputsData(id: string, delayed: true): RelationsDataTransferInstruction\n    public transferInputsData(id: string, delayed: false): null\n    public transferInputsData(id: string, delayed: boolean = false): null|RelationsDataTransferInstruction\n    {\n        const backwardRelations = this.backwardRelations[id];\n        const inputComponent = this.componentManager.get(id);\n\n        if(!backwardRelations)\n        {\n            this.logger?.warn('RelationsProcessor: No backward relations for {@id}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(!inputComponent)\n        {\n            this.logger?.warn('RelationsProcessor: Missing input components for {@id}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        if(Array.isArray(inputComponent))\n        {\n            this.logger?.error('RelationsProcessor: Only one component must be available for id {@id}', {id});\n\n            return delayed ? new RelationsDataTransferInstructionImpl([]) : null;\n        }\n\n        const transfer: RelationsDataTransferInstructionImpl = new RelationsDataTransferInstructionImpl([inputComponent]);\n\n        //for each backward relation\n        for(const backwardRelation of backwardRelations)\n        {\n            const outputComponent = this.componentManager.get(backwardRelation.outputComponentId);\n\n            if((Array.isArray(outputComponent)))\n            {\n                this.logger?.error('RelationsProcessor: Only one output component must be available for id {@id}', {id});\n\n                continue;\n            }\n\n            if(!outputComponent || !inputComponent)\n            {\n                continue;\n            }\n\n            const previousValue = (inputComponent as any)[backwardRelation.inputName];\n            const currentValue = (outputComponent as any)[backwardRelation.outputName];\n\n            transfer.changes[backwardRelation.inputName] =\n            {\n                previousValue,\n                currentValue,\n                firstChange: false,\n                isFirstChange: () => false,\n            };\n        }\n\n        if(!delayed)\n        {\n            transfer.applyChanges();\n        }\n\n        return delayed ? transfer : null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize relations from metadata\n     */\n    protected async initializeRelations(): Promise<void>\n    {\n        await this.destroyRelations();\n        this.setInitializePromise();\n\n        this.logger?.debug('RelationsProcessor: initializing relations');\n\n        //empty relations\n        if(!this.relationsManager.relations.length)\n        {\n            this.resolveInitialized();\n\n            return;\n        }\n\n        for(const meta of this.relationsManager.relations)\n        {\n            const outputs: RelationsProcessorInputOutputData[] = [];\n\n            //no outputs metadata\n            if(!meta.outputs)\n            {\n                continue;\n            }\n\n            for(const output of meta.outputs)\n            {\n                //no inputs metadata\n                if(!output.inputs)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const inputOutput: RelationsProcessorInputOutputData =\n                    {\n                        inputComponentId: input.id,\n                        outputComponentId: meta.id,\n                        inputName: input.inputName,\n                        outputName: output.outputName,\n                        initialized: {},\n                    };\n\n                    outputs.push(inputOutput);\n\n                    if(!this.backwardRelations[input.id])\n                    {\n                        this.backwardRelations[input.id] = [];\n                    }\n\n                    this.backwardRelations[input.id].push(inputOutput);\n                }\n            }\n\n            //sets options for relations component\n            await this.initComponent(meta, outputs);\n        }\n\n        this.relationsChangeDetector.initialize(this.relations);\n        this.resolveInitialized();\n    }\n\n    /**\n     * Initialize backward relations\n     * @param inputOutput - Data for input and output\n     */\n    protected initBackwardRelation(inputOutput: RelationsProcessorInputOutputData): void\n    {\n        let outputComponents = this.componentManager.get(inputOutput.outputComponentId);\n        let inputComponents = this.componentManager.get(inputOutput.inputComponentId);\n\n        if((isBlank(outputComponents) || Array.isArray(outputComponents) && !outputComponents.length) ||\n           (isBlank(inputComponents) || Array.isArray(inputComponents) && !inputComponents.length))\n        {\n            this.logger?.warn('RelationsProcessor: missing metadata for backward relations {@data}', inputOutput);\n\n            return;\n        }\n\n        if(!Array.isArray(inputComponents))\n        {\n            inputComponents = [inputComponents];\n        }\n\n        if(!Array.isArray(outputComponents))\n        {\n            outputComponents = [outputComponents];\n        }\n\n        for(const inputCmp of inputComponents)\n        {\n            for(const outputCmp of outputComponents)\n            {\n                const id = `${inputCmp.ɵɵRelationsComponentId}-${outputCmp.ɵɵRelationsComponentId}`;\n\n                //init data transfer only if not marked as skip init and was not initialized and was already at least once assigned\n                if(!isSkipInit(outputCmp, inputOutput.outputName) && !inputOutput.initialized[id] && isAssigned(outputCmp, inputOutput.outputName))\n                {\n                    inputOutput.initialized[id] = this.transferData(outputCmp, inputOutput.outputName, inputCmp, inputOutput.inputName, true);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transfers data from source property to target property\n     * @param source Instance of source object containing source property with data\n     * @param sourceProperty Name of source property with data that are transfered\n     * @param target Instance of target object containing target property for data\n     * @param targetProperty Name of target property which will be filled with data\n     * @param initial Indication whether is transfer of data initial, or on event\n     */\n    protected transferData(source: RelationsComponent, sourceProperty: string, target: RelationsComponent, targetProperty: string, initial: boolean): boolean\n    {\n        if(!source || !target)\n        {\n            return false;\n        }\n\n        const previousValue = (target as any)[targetProperty];\n        const currentValue = (source as any)[sourceProperty];\n        (target as any)[targetProperty] = (source as any)[sourceProperty];\n        const changes: SimpleChanges = {};\n\n        changes[targetProperty] =\n        {\n            previousValue,\n            currentValue,\n            firstChange: initial,\n            isFirstChange: () => initial\n        };\n\n        target.ngOnChanges?.(changes);\n        target.invalidateVisuals();\n\n        return true;\n    }\n\n    /**\n     * Initialize relation component\n     * @param meta - Metadata for relations component\n     * @param outputs - Array of outputs data for relations component\n     */\n    protected async initComponent(meta: RelationsComponentMetadata, outputs: RelationsProcessorInputOutputData[]): Promise<void>\n    {\n        const component = this.componentManager.get(meta.id);\n\n        if(component)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n            this.updateRelations(meta.id);\n\n            return;\n        }\n\n        const componentMeta = await this.loader.loadItem(meta);\n\n        if(!componentMeta)\n        {\n            this.initRelation(false, meta, outputs, null, null);\n\n            this.logger?.warn('RelationsProcessor: Unable to load relations component! {@meta}', {package: meta.package, name: meta.name});\n\n            return;\n        }\n\n        if(!meta.scope)\n        {\n            const instance = new componentMeta.data(this.injector);\n            this.componentManager.registerComponent(meta.id, instance);\n        }\n\n        this.initRelation(true, meta, outputs, meta.scope ?? null, meta.scope ? componentMeta.data : null);\n        this.updateRelations(meta.id);\n    }\n\n    /**\n     * Initialize relation for metadata and component\n     * @param autoCreated - Indication whether was component auto created or not\n     * @param meta - Metadata for relations component\n     * @param inputOutputs - Array of outputs data for relations\n     * @param scope - Current scope used for this relations component\n     * @param componentType - Type used for creation of relations component (only for scoped ones)\n     */\n    protected initRelation(autoCreated: boolean, meta: RelationsComponentMetadata, inputOutputs: RelationsProcessorInputOutputData[], scope: string|null, componentType: RelationsComponentType|null): void\n    {\n        this.relations[meta.id] =\n        {\n            autoCreated,\n            inputOutputs,\n            metadataOptions: meta.relationsOptions,\n            componentType,\n            scope,\n        };\n    }\n\n    /**\n     * Initialize relations component options\n     * @param components - Components which options should be initialized\n     * @param meta - Metadata containing options for initialization\n     */\n    protected initOptions(components: RelationsProcessorComponent|RelationsProcessorComponent[], meta: RelationsProcessorComponentData): void\n    {\n        if(Array.isArray(components))\n        {\n            for(const comp of components)\n            {\n                if(!comp.ɵɵRelationsOptionsInitialized)\n                {\n                    comp.relationsOptions = meta.metadataOptions;\n                }\n            }\n        }\n        else\n        {\n            if(!components.ɵɵRelationsOptionsInitialized)\n            {\n                components.relationsOptions = meta.metadataOptions;\n            }\n        }\n    }\n\n    /**\n     * Sets initialized promise\n     */\n    protected setInitializePromise(): void\n    {\n        this.ɵInitialized = new Promise(resolve => this.resolveInitialized = resolve);\n    }\n\n    /**\n     * Destroys initialized relations\n     */\n    protected async destroyRelations(): Promise<void>\n    {\n        await this.ɵInitialized;\n\n        Object.keys(this.relations).forEach(id => this.destroyComponent(id));\n\n        this.relations = {};\n        this.backwardRelations = {};\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\n\nimport {DynamicMetadataLoader} from './dynamicMetadata.interface';\n\ndeclare let ngDesignerMetadata: boolean;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDesignerMetadata))\n    {\n        global.ngDesignerMetadata = true;\n    }\n});\n\n//TODO: rework also with symbol\n\n/**\n * Sets dynamic metadata to class on which is this decorator applied\n * @param metadataLoader - Metadata loader function used for obtaining metadata\n * @param propertyName - Name of property where will be metadata instance stored\n */\nexport function DynamicClassMetadata<TMetadata, TDecoratedClass>(metadataLoader: DynamicMetadataLoader<TMetadata>, propertyName: keyof TDecoratedClass): ClassDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function <TFunction extends Function> (target: TFunction): TFunction\n        {\n            (target as any)[propertyName] = metadataLoader();\n\n            return target;\n        };\n    }\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        return target;\n    };\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {InjectionToken} from '@angular/core';\n\nimport {MetadataStateManager, PackageSource} from '../interfaces';\n\n/**\n * Injection token used for injecting class that allows working with state of metadata\n */\nexport const METADATA_STATE_MANAGER: InjectionToken<MetadataStateManager> = new InjectionToken<MetadataStateManager>('METADATA_STATE_MANAGER');\n\n/**\n * Injection token used for injecting package sources\n */\nexport const PACKAGE_SOURCES: InjectionToken<PackageSource[]> = new InjectionToken<PackageSource[]>('PACKAGE_SOURCES');\n\n/**\n * Injection token used for injecting current scope id\n */\nexport const SCOPE_ID: InjectionToken<string> = new InjectionToken<string>('SCOPE_ID');","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}\n\n/**\n * Gets json from its string representation\n * @param jsonString - Json string to be parsed into json\n */\nexport function getJson<TResult = any>(jsonString: string): TResult|null\n{\n    try\n    {\n        return JSON.parse(jsonString);\n    }\n    catch\n    {\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger?: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger?.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger?.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await asyncDynamicModule;\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {extend, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await fn(module, this._logger));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","import {Injectable} from '@angular/core';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Class that handles hotkeys for editors\n */\n@Injectable()\nexport class EditorHotkeys\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subject used for emitting undo\n     */\n    protected undoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting redo\n     */\n    protected redoSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting save\n     */\n    protected saveSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting copy\n     */\n    protected copySubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting paste\n     */\n    protected pasteSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting cut\n     */\n    protected cutSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Subject used for emitting delete\n     */\n    protected deleteSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs on undo shortcut\n     */\n    public get undo(): Observable<void>\n    {\n        return this.undoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on redo shortcut\n     */\n    public get redo(): Observable<void>\n    {\n        return this.redoSubject.asObservable();\n    }\n\n    /**\n     * Occurs on save shortcut\n     */\n    public get save(): Observable<void>\n    {\n        return this.saveSubject.asObservable();\n    }\n    \n    /**\n     * Occurs on copy shortcut\n     */\n    public get copy(): Observable<void>\n    {\n        return this.copySubject.asObservable();\n    }\n\n    /**\n     * Occurs on cut shortcut\n     */\n    public get cut(): Observable<void>\n    {\n        return this.cutSubject.asObservable();\n    }\n\n    /**\n     * Occurs on paste shortcut\n     */\n    public get paste(): Observable<void>\n    {\n        return this.pasteSubject.asObservable();\n    }\n\n    /**\n     * Occurs on delete shortcut\n     */\n    public get delete(): Observable<void>\n    {\n        return this.deleteSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.saveSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits save event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.undoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits undo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.redoSubject.next();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Emits redo event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('del', () =>\n        {\n            this.deleteSubject.next();\n\n            return false;\n        }, [], 'Emits delete event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+c', () =>\n        {\n            this.copySubject.next();\n\n            return false;\n        }, [], 'Emits copy event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+v', () =>\n        {\n            this.pasteSubject.next();\n\n            return false;\n        }, [], 'Emits paste event'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+x', () =>\n        {\n            this.cutSubject.next();\n\n            return false;\n        }, [], 'Emits cut event'));\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","UserSettingsSections","i0","UserSettingsSAComponent","constructor","settingsSvc","formBuilder","consoleConfig","debugDataEnabled","themes","config","languages","logLevels","activeSection","General","settings","debuggingSettings","settingsDebugging","loggingSettings","settingsLogging","this","_getLogLevels","generalSettingsForm","group","language","theme","debuggingSettingsForm","consoleEnabled","debugData","loggingSettingsForm","consoleLogLevel","LogEventLevel","valueChanges","subscribe","generalSettings","setSettings","debugSettings","setEnabled","setDebuggingSettings","restrictToLevel","setLoggingSettings","forEach","val","isNaN","push","name","value","selectors","standalone","features","decls","vars","consts","template","DisplayingFeatureModule","FormsFeatureModule","styles","changeDetection","PropertySelectedSAPipe","transform","component","model","property","indexOf","pure","CustomComponentOptionsSAComponent","data","dialog","formModelBuilder","FormControl","usedProperties","availableProperties","contentComponents","customComponentContentMetadata","nameDescriptionForm","build","displayName","description","configuration","configurableProperties","models","modelName","properties","usedComponents","filter","itm","meta","editorMetadata","metaInfo","optionsMetadata","propertiesMetadata","propMeta","modelType","undefined","length","prop","addComponent","index","splice","setValue","removeComponent","toggleSelected","propertyName","TITLED_DIALOG_DATA","FormModelBuilder","ctx","CommonModule","MatDialogModule","ReactiveFormsModule","GetModelSAPipe","PropertiesMetadataSAPipe","TooltipModule","encapsulation","ShowCustomComponentOptionsSADirective","injector","dialogSvc","customComponentsRegister","propsMetadataExtractor","element","ngOnChanges","result","getCustomComponentMeta","contentMetadata","customComponentMetadata","metadata","ngOnInit","nativeElement","disabled","show","event","preventDefault","stopPropagation","lastValueFrom","open","title","width","getConfigurationForComponent","afterClosed","setConfigurationForComponent","hostBindings","LoadSaveNewSAComponent","_router","_route","_metaManager","_changeDetector","liveEvents","_customComponentsRegister","_hotkeys","_metadata","_available","_component","_name","_availableNames","initSubscriptions","Subscription","history","componentMarking","layoutControls","metadataChange","EventEmitter","components","getRegisteredComponents","emitEvent","toggleRegisteredComponent","add","save","_save","historyChange","detectChanges","pop","store","getStored","params","getData","next","ngOnDestroy","unsubscribe","_load","navigate","routePath","skipLocationChange","replaceUrl","_saveData","getMetadata","_delete","removeData","_new","setData","extend","getMetadataCallback","METADATA_STATE_MANAGER","inputs","outputs","NgSelectModule","MatSlideToggleModule","RelationsResultRelationsMetadataLoader","RelationsResultRelationsEditorMetadata","RelationsResultSAComponent","relationsId","_relationsProcessor","_componentManager","registerComponent","RelationsResultSAComponent_1","initialized","updateRelations","destroyComponent","unregisterComponent","changes","nameof","vstup","console","log","invalidateVisuals","RelationsEditorMetadata","ChangeDetectorRef","RelationsProcessor","RelationsComponentManager","RelationsSampleClickRelationsMetadataLoader","RelationsSampleClickRelationsEditorMetadata","RelationsSampleClickSAComponent","_vystupForm","vystup","RelationsSampleClickSAComponent_1","__decorate","DynamicOutput","globalDefine","global","Document","observableSubscribe","Observable","error","complete","isBlank","isFunction","err","call","routeAnimationTrigger","trigger","transition","query","animateChild","optional","style","position","perspective","top","left","height","opacity","animate","loaderTrigger","MainMenuComponent","_dialog","openSettings","maxHeight","AppComponent","translateSvc","_appHotkeys","logger","document","consoleVisible","routeComponentState","guiVersion","version","verbose","body","classList","_theme","_settingsChangeSubscription","settingsChange","remove","use","_settingsDebuggingChangeSubscription","settingsDebuggingChange","_toggleConsoleHotkey","setDefaultLang","ngAfterViewInit","_routerOutletActivatedSubscription","routerOutlet","activateEvents","activatedRouteData","activatedRoute","destroy","oldHelpHotkey","hotkeys","get","Hotkey","LOGGER","DOCUMENT","viewQuery","AppHotkeysService","fadeInOutTrigger","consoleAnimationTrigger","routesOptions","rootModule","rootModuleConfig","enableTracing","useHash","staticRoutesBefore","path","redirectTo","pathMatch","loadChildren","LayoutModule","LayoutEditorModule","RelationsStaticModule","RelationsEditorModule","RelationsWithEditorModule","RelationsWithLayoutEditorModule","RelationsComplexModule","RelationsLayoutFormModule","staticRoutesAfter","loadComponent","AccessDeniedComponent","NotFoundComponent","GlobalizationService","GlobalizationServiceInterface","locale","localeChange","EMPTY","factory","providers","HTTP_GATEWAY_TIMEOUT_INTERCEPTOR_PROVIDER","SERVICE_UNAVAILABLE_INTERCEPTOR_PROVIDER","HTTP_SERVER_ERROR_INTERCEPTOR_PROVIDER","NO_CONNECTION_INTERCEPTOR_PROVIDER","PROGRESS_INTERCEPTOR_PROVIDER","useFactory","NoConnectionInterceptorOptions","provide","HttpGatewayTimeoutInterceptorOptions","useClass","GlobalizationServiceImpl","ERROR_WITH_URL_EXTENDER","ANGLR_EXCEPTION_HANDLER_PROVIDER","DIALOG_INTERNAL_SERVER_ERROR_RENDERER_PROVIDER","NO_DATA_RENDERER_OPTIONS","useValue","texts","loading","noData","notLoaded","GRID_INITIALIZER_TYPE","QueryGridInitializerComponent","PAGING_OPTIONS","itemsPerPageValues","initialItemsPerPage","METADATA_SELECTOR_TYPE","DialogMetadataSelectorComponent","METADATA_SELECTOR_OPTIONS","showButtonVisible","GRID_INITIALIZER_OPTIONS","storageIppName","CONTENT_RENDERER_OPTIONS","cssClasses","containerDiv","HEADER_CONTENT_RENDERER_OPTIONS","thDefault","NORMAL_STATE_OPTIONS","nothingSelected","STRING_LOCALIZATION","NgxTranslateStringLocalizationService","PERMANENT_STORAGE","LocalPermanentStorageService","ConsoleSinkConfigService","deps","SettingsService","SETTINGS_STORAGE","LocalSettingsStorage","DebugDataEnabledService","DATE_API","DateFnsDateApi","DATE_FNS_FORMAT_PROVIDER","DATE_FNS_DATE_API_OBJECT_TYPE","DATE_FNS_LOCALE","sk","VALIDATION_ERROR_MESSAGES","required","number","pattern","minValue","maxValue","minlength","maxlength","birthNumber","email","availableUsername","VALIDATION_ERROR_RENDERER_FACTORY_OPTIONS","container","ReservedSpaceValidationErrorsContainerComponent","DEFAULT_NOTIFICATIONS","MD_HELP_NOTIFICATIONS","useExisting","NOTIFICATIONS","ERROR_HANDLING_NOTIFICATIONS","CLIENT_ERROR_NOTIFICATIONS","TitledDialogServiceOptions","MovableTitledDialogComponent","CONFIRMATION_DIALOG_OPTIONS","confirmationText","dialogCancelText","dialogConfirmText","FLOATING_UI_POSITION","RENDER_MARKDOWN_CONFIG","assetsPathPrefix","baseUrl","DATETIME_REST_DATE_API","REST_ERROR_HANDLING_MIDDLEWARE_ORDER","REST_METHOD_MIDDLEWARES","LoggerMiddleware","ResponseTypeMiddleware","ReportProgressMiddleware","ClientErrorHandlingMiddleware","HTTP_CLIENT_ERROR_RESPONSE_MAPPER","errors","isString","isJsObject","JSON","stringify","message","HTTP_CLIENT_VALIDATION_ERROR_RESPONSE_MAPPER","validationErrors","HTTP_CLIENT_ERROR_CUSTOM_HANDLER","handle404Func","RestNotFoundError","WebpackTranslateLoaderService","getTranslation","lang","observer","default","DebuggingFeatureModule","DebugDataCopyClickModule","GridFeatureModule","GridModule","MenuModule","TitledDialogModule","ReportMissingTranslationService","_logger","handle","debug","key","AppModule","imports","BrowserModule","appId","HttpClientModule","InternalServerErrorModule","ProgressIndicatorModule","NotificationsGlobalModule","RouterModule","HotkeyModule","ConsoleLogModule","DndModule","backend","HTML5Backend","TranslateModule","loader","TranslateLoader","missingTranslationHandler","MissingTranslationHandler","useDefaultLang","ModuleRoutes","BrowserAppModule","bootstrap","AnglrExceptionHandlerOptions","BrowserAnimationsModule","BrowserTransferStateModule","cheatSheetCloseEsc","enableProdMode","platform","platformBrowser","runWhenModuleStable","bootstrapModule","moduleRef","RestTransferStateService","clearAndDeactivate","InjectionToken","CommonUtilsModule","CommonLocalizeModule","NumeralModule","DatePipesModule","AuthorizationModule","NumberInputModule","NgSelectEditModule","HasErrorModule","FormPipesModule","CUSTOM_COMPONENTS","DemoCustomComponentsRegister","CustomComponentsRegister","registeredChange","_registeredChange","asObservable","_store","super","Subject","customComponents","set","_settings","_settingsDebugging","_settingsLogging","_settingsChangeSubject","_settingsDebuggingChangeSubject","keyValueDiffers","_storage","getDebugging","getLogging","_settingsValueDiff","find","create","diff","_settingsDebuggingValueDiff","forEachChangedItem","setDebugging","setLogging","providedIn","GENERAL_SETTINGS_STORAGE","DEBUGGING_SETTINGS_STORAGE","LOGGING_SETTINGS_STORAGE","descendantsGetterSymbol","Symbol","DescendantsGetter","descendantsGetterFn","target","defineProperty","writable","configurable","enumerable","getDescendantsGetter","type","LayoutDesignerDynamicModuleItemsProvider","tryToGet","source","package","warn","layoutDesignerTypeExtractor","def","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","layoutEditorDesignerType","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","DynamicModuleDataExtractor","Optional","multi","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LAYOUT_COMPONENT_TRANSFORM","options","typeMetadata","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","LAYOUT_MODULE_TYPES_PROVIDERS","isLayoutModuleTypes","LAYOUT_HISTORY_MANAGER_STATE","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","LAYOUT_HISTORY_MANAGER","MetadataHistoryManager","InputBooleanComponent","PropertyTypeControlBase","TextareaComponent","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","InputStringComponent","SelectValueComponent","REFRESH_PALETTE_OBSERVABLES","provideLayoutEditor","designerLayout","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LiveEventService","LayoutComponentsIteratorService","Array","isArray","control","_control","_controlSet","_initialized","values","_initialize","initialize","_dragging","_draggingChange","dragging","draggingChange","setDragging","LayoutComponentsIterator","asyncIterator","x","initPromise","getInitPromise","items","done","layoutMetadata","callback","item","parent","levelIndex","level","getComponents","getComponent","iteratorItem","loadItem","getDescendants","childrenMeta","__param","LAYOUT_COMPONENTS_LOADER","LayoutComponentsChildrenIterator","getChildren","getIteratorFor","getChildrenIteratorFor","_loader","_cache","extractMetadata","cacheId","metadataType","layoutEditorMetadata","metadataData","freeze","selectedComponent","_selectedComponent","highlightedComponent","_highlightedComponent","draggedOverComponent","_draggedOverComponent","root","rootComponentId","layoutChange","layoutChangeSubject","selectedChange","_selectedChange","highlightedChange","_highlightedChange","displayNameChange","_displayNameChanges","draggedOverComponentChange","_draggedOverComponentChange","flatTree","_flatTree","_buildFlatTree","_editorHotkeys","delete","removeDescendant","copy","metadataClipboard","cut","paste","newId","generateId","canDrop","addDescendant","parentId","selectComponent","unselectComponent","highlightComponent","cancelHighlightedComponent","dragOverComponent","cancelDragOverComponent","registerLayoutDesignerComponent","componentItem","children","getParent","getIndex","getComponentDef","unregisterLayoutDesignerComponent","displayNameUpdated","_buildFlatTreeForComponent","child","concat","_layoutPropertiesSymbols","extract","propSymbol","Reflect","prototype","LIVE_EVENTS_STATUS","enabled","ɵenabled","enabledChange","ɵenabledChange","storage","LayoutComponentsRelationsNodesProvider","_componentsRegister","getType","getDisplayName","scope","getScope","LayoutComponentsRelationsTypesProvider","types","resultTypes","RELATIONS_NODES_LOADER","CustomComponentsDynamicModuleItemsProvider","CustomComponentsDynamicModuleTypesProvider","CustomComponentsDynamicModuleRelationsProvider","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","CUSTOM_COMPONENTS_LAYOUT_COMPONENTS_PROVIDER","CUSTOM_COMPONENTS_LAYOUT_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","CUSTOM_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","ScopeRegister","RelationsScopeRegister","layoutManager","componentRegister","getScopes","ɵScopes","scopesChangeSubject","provideLayoutRelations","provideRelations","provideLayoutRelationsCustomComponents","provideLayoutRelationsEditor","relationsProviders","provideRelationsEditor","LayoutManager","LayoutComponentsRegister","provideStaticPackageSource","provideEditorRelationsCustomComponents","layoutRelationsEditorProviders","customComponentRegister","provideEditorLayoutCustomComponents","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","layoutMetadataStorage","LAYOUT_METADATA_STORAGE","iterator","metadataExtractor","DebounceCall","WithSync","propertyExtractor","_config","initializeTypes","definedTypes","iteratorSvc","getComponentName","layout","layoutComponents","_layout","_layoutChange","setLayout","LAYOUT_COMPONENT_CHILD_EXTENSIONS","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","isLayoutComponentDef","isType","isPresent","some","metadataLoader","DynamicClassMetadata","relationsNodeExtractor","relations","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","componentRelationsNodeExtractor","singleton","StaticComponentsRelationsNodesProvider","StaticComponentsRelationsTypesProvider","DEFAULT_RELATIONS_NODES_EXTRACTOR","RELATIONS_NODES_DATA_EXTRACTORS","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","RELATIONS_MODULE_TYPES_LOADER","isRelationsModuleTypes","RELATIONS_NODES_LOADER_PROVIDER","isRelationsNodeDef","RELATIONS_HISTORY_MANAGER_STATE","RelationsNodeManager","RELATIONS_HISTORY_MANAGER_PROVIDER","RELATIONS_HISTORY_MANAGER","clamp","num","min","max","Math","isBoolean","provideRelationsEditorWithStatic","stringToColour","str","hash","i","charCodeAt","colour","toString","substr","_nodes","_waitingInputRelations","_nodesChange","_activeNodeChange","_nodeRegisterChange","_nodeUnregisterChange","nodes","nodesChange","activeNode","_activeNode","activeNodeChange","nodeRegisterChange","nodeUnregisterChange","setActiveInput","input","_activeInput","getActiveInput","registerNode","node","output","outputNode","outputName","relationsNode","relation","startRelation","inputName","inputNode","endRelation","waitingInputRelations","waiting","unregisterNode","nodeIds","relationsOptions","nodeMetadata","allOutputs","outputMeta","setActiveNode","scopes","scopesChange","_definedTypes","getDefinedTypes","propertyKey","defineAssignedProp","sync","ɵɵinjector","componentManager","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","skipInit","defineSkipInitProp","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","RELATIONS_COMPONENTS_LOADER","RELATIONS_METADATA_STORAGE","RELATIONS_PROCESSOR_SKIP_INIT","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_LOADER_PROVIDER","isRelationsComponentDef","RelationsManager","CodeExecutor","object","propName","has","isSkipInit","isAssigned","loadedDataCache","loadData","scriptElement","createElement","loadHelper","innerText","window","loadType","exp","require","requireName","getElementsByTagName","appendChild","RelationsChangeDetectorOptions","detectionInSingleRun","relationsProcessor","ɵrelationsProcessor","relationsComponentManager","ɵrelationsComponentManager","outputsComponents","isEmptyObject","ɵoutputsComponents","skipSelf","firstRunIds","secondRunIds","checkRunning","inputComponents","inputComponent","timeout","setTimeout","runCheck","relationsDef","inputOutputs","inputOutput","inputComponentId","transferInputsData","BindThis","scopeId","childrenCache","Injector","manager","removeCacheFromHierarchy","ɵɵRelationsComponentId","getChildrenComponents","getParentComponents","openScope","getFromScope","mngr","cmp","_relations","_relationsChange","relationsChange","setRelations","RelationsDataTransferInstructionImpl","_changes","applyChanges","change","currentValue","ɵRelations","backwardRelations","ɵBackwardRelations","ɵInitialized","relationsManager","resolveInitialized","noop","relationsChangeDetector","initializeRelations","destroyRelations","initOptions","initBackwardRelation","outputComponent","ɵɵRelationsOutputsChangeSubscriptions","subscription","outputObservable","transferData","ɵɵRelationsOptionsInitialized","autoCreated","processor","componentType","instance","destroyScope","transferOutputsData","delayed","transfers","previousValue","firstChange","isFirstChange","transfer","backwardRelation","outputComponentId","setInitializePromise","initComponent","outputComponents","inputCmp","outputCmp","sourceProperty","targetProperty","initial","initRelation","componentMeta","metadataOptions","comp","ngDesignerMetadata","extensionsObject","PACKAGE_SOURCES","SCOPE_ID","addSimpleChange","packageName","packages","packagesChange","NEVER","refresh","getJson","jsonString","parse","extractors","validatorFn","noCache","cachedDynamicItems","dynamicModule","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","_extractorFunctions","fn","EditorHotkeys","undo","undoSubject","redo","redoSubject","saveSubject","copySubject","cutSubject","pasteSubject","deleteSubject","init","canUndo","activeIndex","canRedo","states","saved","saveIndex","popSubject","historyChangeSubject","state","metadataState","getNewState","shift","setInitialState","clean","enable","disable"],"sourceRoot":""}