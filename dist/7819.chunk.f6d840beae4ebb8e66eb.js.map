{"version":3,"file":"7819.chunk.f6d840beae4ebb8e66eb.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentInputs/componentInputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/componentOutputs/componentOutputs.relations.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/customComponent.utils.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/extensions/customComponentData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customComponent/type.ts","webpack://ng-universal-demo/../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component inputs relations metadata loader\n */\nexport const ComponentInputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentInputs.relationsMetadata')).ComponentInputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsComponent, RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentInputsRelationsMetadataLoader} from './componentInputs.metadata';\nimport {ComponentInputsRelationsOptions} from './componentInputs.options';\n\n/**\n * Relations used for connecting relations inputs with external relations\n */\n@RelationsEditorMetadata(ComponentInputsRelationsMetadataLoader)\nexport class ComponentInputsRelations implements RelationsComponent<ComponentInputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null;\n\n    /**\n     * Id of component inputs relations\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentInputsRelationsOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.relationsProcessor = this.injector.get(RelationsProcessor, null);\n\n        this.componentManager = this.injector.get(RelationsComponentManager, null);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            const $this = this as any;\n\n            $this[key] = changes[key].currentValue;\n            $this[`${key}Change`]?.next?.();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize inputs for component\n     * @param inputRelations - Input relations metadata\n     * @param id - Id of input relations\n     */\n    public async initInputs(inputRelations: RelationsNodeMetadata<ComponentInputsRelationsOptions>,\n                            id: string,): Promise<void>\n    {\n        this.id = id;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const input of inputRelations.relationsOptions?.inputs ?? [])\n        {\n            Object.defineProperty(this,\n                                  input.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${input.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${input.name}`] = value;\n                                          defineAssignedProp(this, input.name);\n                                      }\n                                  });\n\n            Object.defineProperty(this,\n                                  `${input.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(input.defaultValue !== undefined)\n            {\n                (this as Dictionary)[input.name] = input.defaultValue;\n            }\n            \n            if(input.skipInit)\n            {\n                defineSkipInitProp(this, input.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Component outputs relations metadata loader\n */\nexport const ComponentOutputsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/componentOutputs.relationsMetadata')).ComponentOutputsRelationsEditorMetadata();\n\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {defineAssignedProp, defineSkipInitProp, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsProcessor, RelationsWithInjector} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subject} from 'rxjs';\n\nimport {ComponentOutputsRelationsMetadataLoader} from './componentOutputs.metadata';\nimport {ComponentOutputsRelationsOptions} from './componentOutputs.options';\n\n/**\n * Relations used for connecting relations outputs with external relations\n */\n@RelationsEditorMetadata(ComponentOutputsRelationsMetadataLoader)\nexport class ComponentOutputsRelations implements RelationsComponent<ComponentOutputsRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations processor instance\n     */\n    protected relationsProcessor: RelationsProcessor|null;\n\n    /**\n     * Relations component manager\n     */\n    protected componentManager: RelationsComponentManager|null;\n\n    /**\n     * Id of component outputs relations\n     */\n    protected id: string = '';\n\n    /**\n     * Instance of custom component that uses these outputs\n     */\n    protected customComponent: any;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ComponentOutputsRelationsOptions|undefined|null;\n    \n    //######################### constructor #########################\n    constructor(protected injector: Injector,)\n    {\n        this.relationsProcessor = this.injector.get(RelationsProcessor, null);\n\n        this.componentManager = this.injector.get(RelationsComponentManager, null);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        for(const key of Object.keys(changes))\n        {\n            this.customComponent[key] = changes[key].currentValue;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public relationsOnDestroy(): void\n    {\n        if(this.id)\n        {\n            this.relationsProcessor?.destroyComponent(this.id);\n            this.componentManager?.unregisterComponent(this.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize outputs for component\n     * @param outputRelations - Output relations metadata\n     * @param id - Id of output relations\n     */\n    public async initOutputs(outputRelations: RelationsNodeMetadata<ComponentOutputsRelationsOptions>,\n                             id: string,\n                             customComponent: any): Promise<void>\n    {\n        this.id = id;\n        this.customComponent = customComponent;\n\n        if(!this.componentManager || !this.relationsProcessor)\n        {\n            return;\n        }\n\n        for(const output of outputRelations.relationsOptions?.outputs ?? [])\n        {\n            Object.defineProperty(this.customComponent,\n                                  output.name,\n                                  {\n                                      get: function()\n                                      {\n                                          return this[`ɵ${output.name}`];\n                                      },\n                                      set: function(value: any)\n                                      {\n                                          this[`ɵ${output.name}`] = value;\n                                          defineAssignedProp(this, output.name);\n\n                                          const injector = (this as RelationsWithInjector).ɵɵinjector;\n\n                                          if(!injector)\n                                          {\n                                              return;\n                                          }\n\n                                          const componentManager = injector.get(RelationsComponentManager);\n                                          const changeDetector = injector.get(RelationsChangeDetector);\n                                          const id = componentManager.getId(this);\n\n                                          if(!id)\n                                          {\n                                              return;\n                                          }\n\n                                          changeDetector.markForCheck(\n                                          {\n                                              componentId: id,\n                                              outputName: output.name,\n                                          });\n                                      }\n                                  });\n\n            Object.defineProperty(this.customComponent,\n                                  `${output.name}Change`,\n                                  {\n                                      value: new Subject()\n                                  });\n\n            //sets initial value\n            if(output.defaultValue !== undefined)\n            {\n                (this as Dictionary)[output.name] = output.defaultValue;\n            }\n\n            if(output.skipInit)\n            {\n                defineSkipInitProp(this.customComponent, output.name);\n            }\n        }\n\n        this.componentManager.registerComponent(this.id, this);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.id);\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {CustomComponentComponentOptions} from './customComponent.options';\n\n/**\n * Custom component layout metadata loader\n */\nexport const CustomComponentLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<CustomComponentComponentOptions>> = async () => new (await import('./metadata/customComponent.layoutMetadata')).CustomComponentLayoutEditorMetadata();\n\n/**\n * Custom component relations metadata loader\n */\nexport const CustomComponentRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/customComponent.relationsMetadata')).CustomComponentRelationsEditorMetadata();\n\n/**\n * Custom component layout designer type loader\n */\nexport const CustomComponentLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/customComponentDesigner.component')).CustomComponentDesignerSAComponent;\n","<ng-container *layoutComponentRenderer=\"metadata\"/>","import {Component, ChangeDetectionStrategy, inject, SimpleChanges, FactoryProvider} from '@angular/core';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE, LayoutRenderer} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutComponentsIteratorService, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {provideRelationsDebugger, RelationsChangeDetector, RelationsComponent, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {extend, PromiseOr} from '@jscrpt/common';\n\nimport {CustomComponentComponentOptions, CustomComponentRelationsOptions} from './customComponent.options';\nimport {CustomComponentLayoutDesignerTypeLoader, CustomComponentLayoutMetadataLoader, CustomComponentRelationsMetadataLoader} from './customComponent.metadata';\nimport {ComponentInputsRelations} from '../componentInputs/componentInputs.relations';\nimport {ComponentOutputsRelations} from '../componentOutputs/componentOutputs.relations';\nimport {getInputs, getOutputs} from './customComponent.utils';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services/placeholderHandler/placeholderHandler.service';\n\n/**\n * Component used for displaying custom component\n */\n@Component(\n{\n    selector: 'custom-component',\n    templateUrl: 'customComponent.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        LayoutRenderer,\n        ...provideRelationsDebugger(),\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(CustomComponentSAComponent, inject(CustomComponentSAComponent));\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<CustomComponentComponentOptions>(options => \n{\n    if(!options?.placeholderContainers)\n    {\n        return [];\n    }\n\n    const result: LayoutComponentMetadata[] = [];\n\n    for(const key in options.placeholderContainers)\n    {\n        if(options.placeholderContainers[key])\n        {\n            result.push(options.placeholderContainers[key]);\n        }\n    }\n\n    return result;\n})\n@LayoutEditorDesignerType(CustomComponentLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(CustomComponentRelationsMetadataLoader)\n@LayoutEditorMetadata(CustomComponentLayoutMetadataLoader)\nexport class CustomComponentSAComponent extends LayoutComponentBase<CustomComponentComponentOptions> implements LayoutComponent<CustomComponentComponentOptions>, RelationsComponent<CustomComponentRelationsOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    /**\n     * Parent relations processor instance\n     */\n    protected parentRelationsProcessor: RelationsProcessor|null = inject(RelationsProcessor, {skipSelf: true, optional: true});\n\n    /**\n     * Parent relations component manager\n     */\n    protected parentComponentManager: RelationsComponentManager|null = inject(RelationsComponentManager, {skipSelf: true, optional: true});\n\n    /**\n     * Service used for obtaining iterators that goes over all components in metadata\n     */\n    protected layoutMetadataIterator: LayoutComponentsIteratorService = inject(LayoutComponentsIteratorService);\n\n    /**\n     * Instance of inputs relations if it exists\n     */\n    protected inputsRelations: ComponentInputsRelations|null = null;\n\n    /**\n     * Instance of outputs relations if it exists\n     */\n    protected outputsRelations: ComponentOutputsRelations|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: CustomComponentRelationsOptions|undefined|null;\n\n    //######################### public methods #########################\n\n    /**\n     * Method that allows processing of custom component data\n     * @param _name - Name of custom component\n     */\n    public processCustomComponentData(_name: string): PromiseOr<void>\n    {\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async afterInit(): Promise<void>\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        //get layout metadata and displays layout\n        this.metadata = await this.layoutMetadataStorage.getMetadata(this.options.name);\n\n        if(this.metadata)\n        {\n            const iterator = this.layoutMetadataIterator.getIteratorFor(this.metadata);\n\n            for await(const itm of iterator)\n            {\n                const overrideOpts = this.options.contentOptions?.[itm.metadata.id];\n\n                //overide options of internal components for custom component from outside\n                if(overrideOpts)\n                {\n                    extend(itm.metadata.options, overrideOpts);\n                }\n            }\n        }\n\n        let relations: RelationsNodeMetadata[]|null = null;\n\n        //gets and initialize inner relations of custom component\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            relations = await this.relationsMetadataStorage.getMetadata(this.options.name);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n\n        //if relations available initialize custom component inputs\n        if(relations)\n        {\n            const inputsMeta = getInputs(relations);\n\n            if(inputsMeta)\n            {\n                this.inputsRelations = new ComponentInputsRelations(this.injector);\n                this.inputsRelations.initInputs(inputsMeta, inputsMeta.id);\n            }\n\n            const outputsMeta = getOutputs(relations);\n\n            if(outputsMeta)\n            {\n                this.outputsRelations = new ComponentOutputsRelations(this.injector);\n                this.outputsRelations.initOutputs(outputsMeta, outputsMeta.id, this);\n            }\n        }\n\n        //initialize and register relations from outside world to this custom component\n        if(this.parentComponentManager && this.parentRelationsProcessor)\n        {\n            this.parentComponentManager.registerComponent(this.id, this);\n            await this.parentRelationsProcessor.initialized;\n            this.parentRelationsProcessor.updateRelations(this.id);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onChanges(changes: SimpleChanges): PromiseOr<void>\n    {\n        this.inputsRelations?.dynamicOnChanges(changes);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.parentRelationsProcessor || !this.parentComponentManager)\n        {\n            return;\n        }\n\n        this.parentRelationsProcessor.destroyComponent(this.id);\n        this.parentComponentManager.unregisterComponent(this.id);\n    }\n}\n","import {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {ComponentInputsRelationsOptions} from '../componentInputs/componentInputs.options';\nimport {ComponentOutputsRelationsOptions} from '../componentOutputs/componentOutputs.options';\n\n//TODO: check if this is duplicit in output js bundle\n\n/**\n * Gets component inputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getInputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentInputs');\n}\n\n/**\n * Gets component outputs relations metadata or undefined if not exists\n * @param relations - All available relations metadata\n */\nexport function getOutputs(relations: RelationsNodeMetadata[]): RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined\n{\n    return relations.find(itm => itm.package == 'custom-components' && itm.name == 'componentOutputs');\n}\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport type {CustomComponentSAComponent} from '../customComponent.component';\nimport {CustomComponentDataExtensionOptions} from '../customComponentExtensions.options';\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class CustomComponentDataExtension extends DynamicItemExtensionBase<CustomComponentDataExtensionOptions, CustomComponentSAComponent> implements DynamicItemExtension<CustomComponentDataExtensionOptions, CustomComponentSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            await this.instance.processCustomComponentData(this.metadata.name);\n        }\n    }\n}","// import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\nimport {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {IdSetterExtension} from '../../misc/extensions';\nimport {CustomComponentSAComponent} from './customComponent.component';\nimport {CustomComponentDataExtension} from './extensions';\n\nexport default CustomComponentSAComponent;\n\nexport const extensions = [ComponentStylingExtension, CustomComponentDataExtension, IdSetterExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutRenderer} from '@anglr/dynamic/layout';\nimport {LayoutEditorRenderer} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            this.injector.get(LayoutRenderer) instanceof LayoutEditorRenderer :\n            this.injector.get(LayoutRenderer, null, {skipSelf: true}) instanceof LayoutEditorRenderer);\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout renderer\n     */\n    public get layoutRenderer(): LayoutRenderer|null\n    {\n        //current renderer\n        let transform = this.injector.get(LayoutRenderer, null, {skipSelf: true});\n\n        if(!(transform instanceof LayoutEditorRenderer))\n        {\n            transform = null;\n        }\n\n        //current or parent layout renderer\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LayoutRenderer, null, {skipSelf: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations debugger instance that is used for placeholders\n     */\n    public get relationsDebugger(): RelationsDebugger|null\n    {\n        //TODO: fix this optional if needed\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsDebugger, undefined, {skipSelf: true, optional: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {{@id}}', {id: this.id});\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","ComponentInputsRelationsMetadataLoader","_ref","ComponentInputsRelationsEditorMetadata","apply","arguments","ComponentInputsRelations","constructor","injector","id","this","relationsProcessor","get","RelationsProcessor","componentManager","RelationsComponentManager","dynamicOnChanges","changes","key","Object","keys","$this","currentValue","next","invalidateVisuals","relationsOnDestroy","destroyComponent","unregisterComponent","initInputs","inputRelations","_this","input","relationsOptions","inputs","defineProperty","name","set","value","defineAssignedProp","Subject","undefined","defaultValue","skipInit","defineSkipInitProp","registerComponent","initialized","updateRelations","__decorate","RelationsEditorMetadata","Injector","ComponentOutputsRelationsMetadataLoader","ComponentOutputsRelationsEditorMetadata","ComponentOutputsRelations","customComponent","initOutputs","outputRelations","output","outputs","ɵɵinjector","changeDetector","RelationsChangeDetector","getId","markForCheck","componentId","outputName","CustomComponentLayoutMetadataLoader","_asyncToGenerator","CustomComponentLayoutEditorMetadata","CustomComponentRelationsMetadataLoader","_ref2","CustomComponentRelationsEditorMetadata","CustomComponentLayoutDesignerTypeLoader","_ref3","CustomComponentDesignerSAComponent","i0","CustomComponentSAComponent","LayoutComponentBase","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","parentRelationsProcessor","skipSelf","parentComponentManager","layoutMetadataIterator","LayoutComponentsIteratorService","inputsRelations","outputsRelations","metadata","processCustomComponentData","_name","setId","afterInit","options","getMetadata","iterator","getIteratorFor","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","done","itm","overrideOpts","contentOptions","extend","err","return","relations","setRelations","inputsMeta","getInputs","outputsMeta","getOutputs","onChanges","onDestroy","t","selectors","standalone","features","LayoutRenderer","provideRelationsDebugger","provide","PlaceholderHandler","useFactory","decls","vars","consts","template","rf","ctx","CustomComponentSAComponent_ng_container_0_Template","LayoutComponentRendererSADirective","styles","changeDetection","DescendantsGetter","placeholderContainers","result","push","find","package","CustomComponentDataExtension","DynamicItemExtensionBase","onInit","instance","extensions","ComponentStylingExtension","IdSetterExtension","ɵid","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LayoutEditorRenderer","placeholderContainer","layoutRenderer","transform","findRelatedCustomComponentHandler","relationsComponentManager","getParentCustomComponentHandler","relationsChangeDetector","relationsDebugger","RelationsDebugger","logger","LOGGER","getOptions","initOptions","custom","containerId","_a","displayName","error","placeholders","customComponents","Error","destroyed","ChangeDetectorRef","componentElement","ElementRef","optionsSafe","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","dynamicOnInit","onOptionsSet","extension","initialize","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","registerExtensions","detectChanges","_changes","generateId","viewContainer","ViewContainerRef","renderer","parentRendererDirective","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","isBlank","previousValue","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","destroyRenderer","useValue","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}