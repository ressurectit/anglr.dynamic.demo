{"version":3,"file":"7329.chunk.66d5bd27e95eed5492ee.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+relationsStatic/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsStatic/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsStatic/relationsStatic.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsStatic/relationsStatic.module.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/modules/dynamicRelations.module.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts"],"sourcesContent":["<div>\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"visible = !visible\">\n        <span>click</span>\n    </button>\n</div>\n\n<div *ngIf=\"visible\">\n    <div class=\"bold\">relations sample click</div>\n    <relations-sample-click></relations-sample-click>\n</div>\n\n<div>\n    <div class=\"bold\">relations result</div>\n    <relations-result></relations-result>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsManager} from '@anglr/dynamic/relations';\n\nimport {DemoData} from '../../../services/demoData';\n\n/**\n * Page for displaying relations\n */\n@Component(\n{\n    selector: 'relations-view',\n    templateUrl: 'relations.component.html',\n    // styleUrls: ['relations.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\nexport class RelationsComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is relations sample click component visible\n     */\n    protected visible: boolean = true;\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._relationsManager.setRelations(DemoData.relationsStaticDemo);\n    }\n}","import {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    RelationsComponent,\n];","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsModule} from '@anglr/dynamic/relations';\n\nimport {components} from './relationsStatic.routes';\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\n\n/**\n * Module for relations with static components samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        RelationsSampleClickSAComponent,\n        RelationsResultSAComponent,\n        DynamicRelationsModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsStaticModule\n{\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {provideRelations} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic relations rendering\n */\n@NgModule(\n{\n})\nexport class DynamicRelationsModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsModule>\n    {\n        return {\n            ngModule: DynamicRelationsModule,\n            providers:\n            [\n                provideRelations(),\n            ]\n        };\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}"],"names":["i0","RelationsComponent","constructor","_relationsManager","visible","ngOnInit","this","setRelations","DemoData","selectors","decls","vars","consts","template","ComponentRoute","path","RelationsManager","components","RelationsStaticModule","CommonModule","RelationsSampleClickSAComponent","RelationsResultSAComponent","DynamicRelationsModule","ModuleRoutes","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","relationsExportExtractor","module","logger","localModule","debug","isPresent","relations","isType","data","default","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","provide","RELATIONS_COMPONENTS_MODULE_PROVIDERS","useClass","DefaultDynamicModuleItemsProvider","multi","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","LOGGER","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","undefined","isBlank","provideRelations","RelationsComponentManager","RelationsProcessor","ngModule","providers","route","rt","component","routeDecoratedComponent","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push"],"sourceRoot":""}