{"version":3,"file":"7964.chunk.a16a5876b1455cb48933.js","mappings":"gjBASO,MAAMA,EAAgC,oBAAwF,mBAAY,WAAW,oEAAkDC,iCAAzE,IAAxF,qDAKhCC,EAAmC,oBAA6D,mBAAY,WAAW,sFAAqDC,oCAA5E,IAA7D,qD,qHCUnCC,EAAuB,cAASC,EAAAA,E,kCAelC,KAAAC,UAAoB,EAQpB,KAAAC,OAAuB,IAgBjC,CATsBC,eAEfC,KAAKH,SAAWG,KAAKC,SAASJ,WAAY,EAEvCG,KAAKC,SAASC,QAEbF,KAAKF,OAASE,KAAKC,QAAQC,MAElC,G,6DAtCQP,KAAuBQ,GAAvBR,EAAuB,E,qBAAvBA,EAAuBS,UAAAA,CAAAA,CAAAA,kBAAAC,OAAAA,CAAAR,SAAAA,YAAAS,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,OAAAA,SAAAA,OAAAA,SAAAA,EAAAA,MAAAA,cAAAA,EAAAA,WAAAA,UAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCxBpCC,EAAAA,GAAAA,EAAAA,SAAAA,GAAkFA,EAAAA,EAAC,SAADA,WAAA,6BAC9EA,EAAAA,GAAAA,EAAAA,QAAMA,EAAAA,EAAAA,GAA+CA,EAAAA,IAAAA,I,MADGA,EAAAA,EAAAA,WAAAA,EAAAA,UAClDA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,OAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,S,oED8CNC,EAAAA,EAAAA,IAAAA,EADCC,EAAAA,EAAAA,MACD,6DAvBSnB,GAAuB,UAFnCoB,EAAAA,EAAAA,GAAwBtB,IACxBuB,EAAAA,EAAAA,GAAqBzB,IACTI,GEnBb,UAEasB,EAAa,CAACC,EAAAA,EAA2BC,EAAAA,E,kDCChD,SAAUH,EAAqBI,GAEjC,OAAOC,EAAAA,EAAAA,GAA+ED,EAAgB,uBACzG,C,qcCAK,MAAgBxB,EA6ClB0B,YAAsBC,EACAC,EACAC,EAC4BC,GAH5B,KAAAH,eAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAC,SAAAA,EAC4B,KAAAC,OAAAA,EAzCxC,KAAAT,WAA+C,GAK/C,KAAAU,aAAuB,EAKvB,KAAAC,WAAqB,CAiC9B,CA1BaC,cAEV,OAAO7B,KAAKwB,gBACf,CAKaM,wBAEV,OAAO9B,KAAKC,OACf,CAsBM8B,cAEH,IAAG/B,KAAK4B,UAAR,CAKA5B,KAAK4B,WAAY,EAEjB,IAAI,MAAMI,KAAOhC,KAAKiB,WAElBe,EAAIC,UAGRjC,KAAKkC,WATJ,CAUJ,CAOYC,WAAQ,iCAEjB,GAAG,EAAKR,YAEJ,OAGJ,EAAKA,aAAc,EACnB,MAAMG,EAAoB,EAAKA,kBAK/B,SAHM,EAAKM,eACL,EAAKrC,eAER+B,EAEC,IAAI,MAAMO,KAAa,EAAKpB,iBAElBoB,EAAUC,WAAW,EAAKb,SAAU,EAAKI,QAAS,SAI1D,EAAKU,WArBM,KAsBpB,CAKYC,YAAYC,GAAsB,iCAG3C,IAAGC,EAAAA,EAAAA,GAAsC,aAAcD,EACvD,OACU,EAAK1C,eAEX,MAAM+B,EAAoB,EAAKA,kBAG/B,GAAGA,EAEC,IAAI,MAAMO,KAAa,EAAKpB,iBAElBoB,EAAUM,cAAcb,GAItC,IAAI,EAAKH,YAEL,aAGE,EAAKiB,iBACd,QAEMH,GAAQC,EAAAA,EAAAA,GAAsC,aAEjDG,EAAAA,EAAAA,IAAcJ,IAEd,EAAKK,UAAUL,EA9BwB,KAgC9C,CAKMM,mBAAmB9B,GAEtBjB,KAAKiB,WAAaA,CACrB,CAKM+B,oBAEHhD,KAAKuB,eAAe0B,eACvB,CAOSb,SAET,CAKSG,YAET,CAKSK,kBAET,CAMSE,UAAUI,GAEnB,CAKSnD,eAET,CAKSmC,YAET,E,iCAvMiBtC,GAAmBgB,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAgDjBuC,EAAAA,GAAM,K,kBAhDRvD,EAAmBW,SAAAA,CAAAA,EAAAA,I,4DCHnC,MAAOW,UAAkCkC,EAAAA,EAcxBhB,SAEfpC,KAAKqD,eACR,CAKkBT,kBAEf5C,KAAKqD,eACR,CAOSA,gBAEN,MAAMpD,EAAUD,KAAKC,QACfqD,EAAQtD,KAAK6B,SAAS0B,cAAcD,MAEvCtD,KAAK6B,WAED2B,EAAAA,EAAAA,IAAUxD,KAAKyD,eAEdzD,KAAK6B,QAAQ0B,cAAcG,UAAUC,OAAO3D,KAAKyD,cAGrDzD,KAAKyD,aAAexD,GAAS2D,SAE1B3D,GAAS2D,UAER5D,KAAK6B,SAAS0B,cAAcG,UAAUG,IAAI5D,EAAQ2D,YAIvDJ,EAAAA,EAAAA,IAAUF,KAENrD,GAAS6D,UAELN,EAAAA,EAAAA,IAAUvD,EAAQ6D,OAAOC,UAExBT,EAAMU,aAAe/D,EAAQ6D,OAAOC,SAGrCP,EAAAA,EAAAA,IAAUvD,EAAQ6D,OAAOG,SAExBX,EAAMY,YAAcjE,EAAQ6D,OAAOG,QAGpCT,EAAAA,EAAAA,IAAUvD,EAAQ6D,OAAOK,OAExBb,EAAMc,UAAYnE,EAAQ6D,OAAOK,MAGlCX,EAAAA,EAAAA,IAAUvD,EAAQ6D,OAAOO,QAExBf,EAAMgB,WAAarE,EAAQ6D,OAAOO,OAIvCpE,GAASsE,WAELf,EAAAA,EAAAA,IAAUvD,EAAQsE,QAAQR,UAEzBT,EAAMkB,cAAgBvE,EAAQsE,QAAQR,SAGvCP,EAAAA,EAAAA,IAAUvD,EAAQsE,QAAQN,SAEzBX,EAAMmB,aAAexE,EAAQsE,QAAQN,QAGtCT,EAAAA,EAAAA,IAAUvD,EAAQsE,QAAQJ,OAEzBb,EAAMoB,WAAazE,EAAQsE,QAAQJ,MAGpCX,EAAAA,EAAAA,IAAUvD,EAAQsE,QAAQF,QAEzBf,EAAMqB,YAAc1E,EAAQsE,QAAQF,OAIzCpE,GAAS2E,eAELpB,EAAAA,EAAAA,IAAUvD,EAAQ2E,YAAYC,YAE7BvB,EAAMuB,SAAW5E,EAAQ2E,YAAYC,WAGtCrB,EAAAA,EAAAA,IAAUvD,EAAQ2E,YAAYE,cAE7BxB,EAAMwB,WAAa7E,EAAQ2E,YAAYE,WAAWC,aAIjE,E,iMCjHC,MAAO5D,UAAuCiC,EAAAA,EAApD9B,c,oBAOc,KAAA0D,mBAA8C,KAK9C,KAAAC,iBAAmD,IAwChE,CAjC4B7C,SAAM,I,EAAA,c,EAAA,YAEvB,EAAKX,UAAa,EAAKyD,UAAa,EAAKC,WAK7C,EAAKH,qBAAL,EAAKA,mBAAuB,EAAKvD,SAAS2D,IAAIC,EAAAA,EAAoB,OAClE,EAAKJ,mBAAL,EAAKA,iBAAqB,EAAKxD,SAAS2D,IAAIE,EAAAA,EAA2B,OAEnE,EAAKN,oBAAuB,EAAKC,mBAKrC,EAAKA,iBAAiBM,kBAAkB,EAAKL,SAASM,GAAI,EAAKL,gBACzD,EAAKH,mBAAmBrD,YAC9B,EAAKqD,mBAAmBS,gBAAgB,EAAKP,SAASM,KAjB3B,E,gLAkB9B,CAKkBtD,YAEXlC,KAAKgF,oBAAuBhF,KAAKiF,kBAAqBjF,KAAKkF,WAK/DlF,KAAKgF,mBAAmBU,iBAAiB1F,KAAKkF,SAASM,IACvDxF,KAAKiF,iBAAiBU,oBAAoB3F,KAAKkF,SAASM,IAC3D,E,+VCnDC,MAAgBpC,EA8BlB9B,YAAsB4D,GAAA,KAAAA,SAAAA,EAHZ,KAAAvD,aAAuB,CAKhC,CAOYW,WAAWb,EAAoBI,EAAkCsD,GAAmB,iCAE7F,EAAKxD,aAAc,EAEnB,EAAKF,SAAWA,EAChB,EAAKI,QAAUA,EACf,EAAKsD,SAAWA,QAEV,EAAK/C,QARkF,KAShG,CAKYO,cAAc1C,GAAiB,iCAExC,EAAKA,QAAUA,EAEX,EAAK0B,oBAKH,EAAKiB,kBAT6B,KAU3C,CAKMX,UAEHjC,KAAKkC,WACR,CAOSE,SAET,CAKSQ,kBAET,CAKSV,YAET,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/toggleButton.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/toggleButton/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\n\n/**\n * Toggle button layout metadata loader\n */\nexport const ToggleButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ToggleButtonComponentOptions>> = async () => new (await import('./metadata/toggleButton.layoutMetadata')).ToggleButtonLayoutEditorMetadata();\n\n/**\n * Toggle button relations metadata loader\n */\nexport const ToggleButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/toggleButton.relationsMetadata')).ToggleButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {ToggleButtonComponentOptions} from './toggleButton.options';\nimport {ToggleButtonLayoutMetadataLoader, ToggleButtonRelationsMetadataLoader} from './toggleButton.metadata';\n\n/**\n * Component used for displaying toggle button\n */\n@Component(\n{\n    selector: 'toggle-button',\n    templateUrl: 'toggleButton.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(ToggleButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ToggleButtonLayoutMetadataLoader)\nexport class ToggleButtonSAComponent extends LayoutComponentBase<ToggleButtonComponentOptions> implements LayoutComponent<ToggleButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is toggle button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting on/off state of toggle button\n     */\n    @DynamicOutput()\n    public toggle: boolean|null = null;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n\n        if(this.options?.state)\n        {\n            this.toggle = this.options.state;\n        }\n    }\n}","<button type=\"button\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"disabled\" (click)=\"toggle = !toggle\">\n    <span>{{toggle ? options?.onText : options?.offText}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ToggleButtonSAComponent} from './toggleButton.component';\n\nexport default ToggleButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this.element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this.element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ToggleButtonLayoutMetadataLoader","ToggleButtonLayoutEditorMetadata","ToggleButtonRelationsMetadataLoader","ToggleButtonRelationsEditorMetadata","ToggleButtonSAComponent","LayoutComponentBase","disabled","toggle","onOptionsSet","this","options","state","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","changeDetector","componentElement","injector","logger","initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","onDestroy","ngOnInit","onInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","LOGGER","DynamicItemExtensionBase","_applyStyling","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","relationsProcessor","componentManager","metadata","instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","id","updateRelations","destroyComponent","unregisterComponent"],"sourceRoot":""}