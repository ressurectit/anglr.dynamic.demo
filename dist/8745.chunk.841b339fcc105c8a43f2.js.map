{"version":3,"file":"8745.chunk.841b339fcc105c8a43f2.js","mappings":"wNAcM,MAAOA,EAkCT,cAAWC,GAEP,OAAOC,KAAKC,kBAAkBC,cAClC,CAIAC,WAAAA,CAAsBC,EACAC,EACAC,EACHC,EACAC,GAJG,KAAAJ,YAAAA,EACA,KAAAC,gBAAAA,EACA,KAAAC,QAAAA,EACH,KAAAC,MAAAA,EACA,KAAAC,IAAAA,EAtCT,KAAAP,kBAAmC,IAAIQ,EAAAA,EAiB1C,KAAAC,OAAyC,KAKzC,KAAAC,MAAuC,KAkB1CX,KAAKY,KAAOZ,KAAKI,YAAYS,OAAO,QAC/BC,KAAK,OAAQ,eACbA,KAAK,SAAU,WACfA,KAAK,eAxDG,OAyDRC,GAAG,aAAa,KAEbf,KAAKgB,WAAW,IAEnBD,GAAG,YAAY,KAEZf,KAAKiB,iBAAiB,IAG9BjB,KAAKkB,eAAgBC,EAAAA,EAAAA,OAChBC,MAAMC,EAAAA,IAAYC,KAAK,KAChC,CAOOC,OAAAA,GAEHvB,KAAKY,MAAMY,SACXxB,KAAKC,kBAAkBwB,MAC3B,CAKOT,SAAAA,GAEHhB,KAAKY,KAAKE,KAAK,eArFQ,OAsFvBd,KAAKW,OAAOK,YACZhB,KAAKU,QAAQM,WACjB,CAKOC,eAAAA,GAEHjB,KAAKY,KAAKE,KAAK,eAhGF,OAiGbd,KAAKW,OAAOM,kBACZjB,KAAKU,QAAQO,iBACjB,CAMOS,iBAAAA,CAAkBC,GAErB,GAAGA,GAAgBC,EAAAA,EACnB,CACI,MAAMC,EAAc7B,KAAKK,gBAAgByB,iBACzC9B,KAAKK,gBAAgB0B,eAAe,MAGhCF,EAWIA,EAAYG,YAAYhC,OAExBA,KAAKQ,IAAMqB,EAAYI,iBACvBjC,KAAKW,MAAQkB,EACb7B,KAAKM,QAAQ4B,gBAIblC,KAAKuB,UACLvB,KAAKO,MAAQ,KACbP,KAAKQ,IAAM,KACXR,KAAKW,MAAQ,KACbX,KAAKU,OAAS,KACdV,KAAKM,QAAQ4B,gBAtBjBlC,KAAKuB,UACLvB,KAAKO,MAAQ,KACbP,KAAKQ,IAAM,KACXR,KAAKW,MAAQ,KACbX,KAAKU,OAAS,K,CAuBtB,IAAIV,KAAKO,QAAUP,KAAKQ,IAEpB,OAGJ,IAAI2B,EAGJ,GAAGnC,KAAKQ,IAAI4B,GAAKpC,KAAKO,MAAM6B,EAC5B,CACI,IAAIC,EAAQrC,KAAKO,MAAM6B,EAAIpC,KAAKQ,IAAI4B,EACpC,MAAME,GAAStC,KAAKQ,IAAI+B,EAAIvC,KAAKO,MAAMgC,GAAK,GAEzCF,EAAQ,KAEPA,EAAQ,IAGZA,GAAS,IAETF,EACA,CACI,CAACnC,KAAKO,MAAM6B,EAAGpC,KAAKO,MAAMgC,GAC1B,CAACvC,KAAKO,MAAM6B,EAAI,GAAIpC,KAAKO,MAAMgC,GAC/B,CAACvC,KAAKO,MAAM6B,EAAIC,EAAOrC,KAAKO,MAAMgC,EAAID,GACtC,CAACtC,KAAKQ,IAAI4B,EAAIC,EAAOrC,KAAKO,MAAMgC,EAAK,EAAID,GACzC,CAACtC,KAAKQ,IAAI4B,EAAI,GAAIpC,KAAKQ,IAAI+B,GAC3B,CAACvC,KAAKQ,IAAI4B,EAAGpC,KAAKQ,IAAI+B,G,KAK9B,CACI,MACMC,GADQxC,KAAKQ,IAAI4B,EAAIpC,KAAKO,MAAM6B,GAChB,EAEtBD,EACA,CACI,CAACnC,KAAKO,MAAM6B,EAAGpC,KAAKO,MAAMgC,GAC1B,CAACvC,KAAKO,MAAM6B,EAAII,EAAOxC,KAAKO,MAAMgC,GAClC,CAACvC,KAAKQ,IAAI4B,EAAII,EAAOxC,KAAKQ,IAAI+B,GAC9B,CAACvC,KAAKQ,IAAI4B,EAAGpC,KAAKQ,IAAI+B,G,CAI9BvC,KAAKY,KAAKE,KAAK,IAAKd,KAAKkB,cAAciB,GAC3C,E,ICjMQM,E,kEAAZ,SAAYA,GAKRA,EAAAA,EAAA,+BAKAA,EAAAA,EAAA,mBAKAA,EAAAA,EAAA,0BACH,CAhBD,CAAYA,IAAAA,EAAmB,KCIzB,MAAOC,EAUTvC,WAAAA,CAAYwC,GAHL,KAAAA,oBAA2CF,EAAoBG,cAK/DC,EAAAA,EAAAA,IAAUF,KAET3C,KAAK2C,oBAAsBA,EAEnC,E,mLCDE,MAAOG,EA+CT,aAAcC,GAEV,OAAI/C,KAAKgD,aAKFhD,KAAKgD,aAAaC,SAHd,IAIf,CAGA9C,WAAAA,CAAsB+C,EACAC,EACgCC,EACpBC,EACgBC,GAJ5B,KAAAJ,iBAAAA,EACA,KAAAC,qBAAAA,EACgC,KAAAC,OAAAA,EACpB,KAAAC,QAAAA,EACgB,KAAAC,OAAAA,EAvDxC,KAAAC,oBAAyC,KAKzC,KAAAP,aAA8C,KAQjD,KAAAQ,kBAAoF,KAMpF,KAAAC,UAAoB,EAQpB,KAAAC,OAAmC,IAAIC,EAAAA,EAMvC,KAAApC,QAAyE,IAAIoC,EAAAA,EAwB5E3D,KAAKqD,SAAarD,KAAKqD,mBAAmBX,IAE1C1C,KAAKqD,QAAU,IAAIX,EAE3B,CAOakB,WAAAA,CAAYC,GAAsB,I,EAAAC,EAAA,Y,EAAA,YAG3C,IAAGC,EAAAA,EAAAA,IAA+E,eAAgBF,IAAWhB,EAAAA,EAAAA,IAAUiB,EAAKL,eACvHM,EAAAA,EAAAA,IAA+E,uBAAwBF,GAD5G,CAGI,MAAMd,EAAYe,EAAKf,UAGvB,GAAGA,EACH,CACI,MAAMiB,EAAcH,GAAQE,EAAAA,EAAAA,IAA+E,cAC3GhB,EAAUU,UAAYK,EAAKL,UAE3B,MAAMQ,EAAuB,CAAC,GAC9BC,EAAAA,EAAAA,IAA+BD,EAAO,YAAaD,EAAaA,EAAYG,eAE5EpB,EAAUa,YAAYK,GACtBlB,EAAUrB,mB,OAYlB,GANAoC,EAAKR,QAAQc,MAAM,2DAA4D,CAACC,GAAIP,EAAKN,mBAAmBa,KAE5GP,EAAKQ,cACLR,EAAKZ,iBAAiBqB,SAGnBR,EAAAA,EAAAA,IAA+E,uBAAwBF,GAAWC,EAAKN,kBAC1H,CACI,IAAIgB,QAA4BV,EAAKV,OAAOqB,SAASX,EAAKN,mBAE1D,IAAIgB,EAIA,OAFAV,EAAKR,QAAQoB,KAAK,iFAAkF,CAACC,KAAM,CAACC,KAAMd,EAAKN,kBAAkBoB,KAAMC,QAASf,EAAKN,kBAAkBqB,WAExKf,EAAKT,SAASV,qBAEjB,QASI,GANA6B,QAA4BV,EAAKV,OAAOqB,SACxC,CACII,QAAS,mBACTD,KAAM,cAGNJ,EAIA,YAFAV,EAAKR,QAAQwB,MAAM,oEAKvB,MAEJ,KAAKrC,EAAoBsC,OAGrB,OAEJ,KAAKtC,EAAoBuC,WAErB,MAAM,IAAIC,MAAM,8EAA8EnB,EAAKN,kBAAkBoB,iBAAiBd,EAAKN,kBAAkBqB,WAYzK,GAPAf,EAAKd,aAAec,EAAKZ,iBAAiBgC,gBAAgBV,EAAoBW,KACpB,CACIC,SAAUtB,EAAKZ,iBAAiBkC,WAG9FtB,EAAKR,QAAQc,MAAM,0DAA2D,CAACC,GAAIP,EAAKN,mBAAmBa,KAExGP,EAAKf,UACR,CACI,MAAMsC,EAAOvB,EAAKf,UAElBe,EAAKP,oBAAsB8B,EAAK9D,QAAQ+D,WAAU,IAAMxB,EAAKQ,gBAE7DR,EAAKR,QAAQc,MAAM,4EAA6E,CAACC,GAAIP,EAAKN,mBAAmBa,KAC7HgB,EAAKE,SAAWzB,EAAKN,kBACrB6B,EAAK5B,UAAYK,EAAKL,UAEtB,MAAMQ,EAAuB,CAAC,GAE9BC,EAAAA,EAAAA,IAA+BD,EAAO,WAAYH,EAAKN,kBAAmB,MAAM,IAChFU,EAAAA,EAAAA,IAA+BD,EAAO,YAAaH,EAAKL,UAAW,MAAM,GAEzE4B,EAAKzB,YAAYK,SACXoB,EAAKG,aAEX1B,EAAKR,QAAQc,MAAM,sEAAuE,CAACC,GAAIP,EAAKN,mBAAmBa,KACvHgB,EAAK3D,oBACLoC,EAAKd,aAAayC,kBAAkBC,eAEpC5B,EAAKX,qBAAqBwC,aAAa7B,EAAKf,WAC5Ce,EAAKJ,OAAOjC,KAAK4D,E,EAExB,E,gLACL,CAOOf,WAAAA,GAEHtE,KAAKuD,qBAAqBqC,cAC1B5F,KAAKuD,oBAAsB,KAExBvD,KAAKgD,eAEJhD,KAAKsD,QAAQc,MAAM,4DAA6D,CAACC,GAAIrE,KAAKwD,mBAAmBa,KAE1GrE,KAAK+C,YAED/C,KAAKwD,mBAEJxD,KAAKuB,QAAQE,KAAKzB,KAAKwD,mBAG3BxD,KAAKmD,qBAAqB0C,eAAe7F,KAAK+C,YAGlD/C,KAAKgD,cAAczB,UACnBvB,KAAKgD,aAAe,KAE5B,E,iCA/MSF,GAAgCgD,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAC,EAAAA,GAAAD,EAAAA,EA4DrBE,EAAAA,IAAsBF,EAAAA,EAAAG,EAAA,GAAAH,EAAAA,EAEtBI,EAAAA,GAAM,K,kBA9DjBpD,EAAgCqD,UAAA,kCAAAC,OAAA,CAAA5C,kBAAA,8CAAAC,UAAA,aAAA4C,QAAA,CAAA3C,OAAA,SAAAnC,QAAA,WAAA+E,SAAA,0BAAAC,YAAA,EAAAC,SAAA,CAAAV,EAAAA,K,iPCjBzCA,EAAAA,KAAAA,EAAAA,GAAA,EAAAA,CAA6D,KACsBA,EAAAA,EAAC,WAAD,SAAAW,GAAAX,EAAAA,GAAAY,GAAA,MAAAC,EAAAb,EAAAA,IAAA,OAAWA,EAAAA,GAAAa,EAAAC,YAAAH,GAAmB,IAAEX,EAAAA,IAAAA,E,qCAAjGA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,wBAAAe,EAAAf,CAAwC,YAAAgB,EAAArD,U,ECW9D,MAeMsD,EAAqB,GAiBrB,MAAOC,EAmCT,uBACcC,GAEV,MAAO,GAAGjH,KAAKkH,oBAAoBlH,KAAKkH,kBAC5C,CAKA,4BACcC,GAEV,MAAO,GAAGnH,KAAKoH,eAAehF,EAAIpC,KAAKkH,oBAAoBlH,KAAKoH,eAAe7E,EAAIvC,KAAKkH,kBAC5F,CA6BA,eAAWG,GAEP,OAAOrH,KAAKsH,QAAQC,cAAcC,uBACtC,CAwBArH,WAAAA,CAAsBmH,EACAjH,EACFoH,EACqCnH,GAHnC,KAAAgH,QAAAA,EACA,KAAAjH,gBAAAA,EACF,KAAAoH,gBAAAA,EACqC,KAAAnH,QAAAA,EApGjD,KAAAoH,iBAAgC,KAO9B,KAAAC,mBAAmC,IAAIC,EAAAA,GAKvC,KAAAV,eAnDkB,GAwDlB,KAAAW,kBACV,CACIzF,EAAG,EACHG,EAAG,GA4BG,KAAA6E,eAA8B,CAAChF,EAAG,EAAGG,EAAG,GAKxC,KAAAuF,cAA6B,CAAC1F,EAAG,EAAGG,EAAG,GAKvC,KAAAkB,UAAY,EAKZ,KAAAsE,YAAsB,EA0BzB,KAAAC,gBAA2C,GAK3C,KAAAC,sBAA4C,IAAItE,EAAAA,CAQvD,CAOOuE,QAAAA,GAEHlI,KAAK2H,mBAAmBQ,IAAInI,KAAKK,gBAAgB+H,iBAAiB9C,WAAU,IAAMtF,KAAKqI,UAAUrI,KAAKK,gBAAgBiI,cAC1H,CAOOhE,WAAAA,GAEHtE,KAAK2H,mBAAmB/B,aAC5B,CASOyC,SAAAA,CAAUhE,GAEb,IAAKA,EAED,OAGJ,MAAMgB,EAAOrF,KAAKgI,iBAAiBO,MAAKlD,GAAQA,EAAKhB,KAAOA,IAExDgB,GAAMmD,cAAcC,cAGpBzI,KAAKoH,eACL,CACIhF,GAAKiD,GAAMmD,cAAcC,YAAYrG,EAAKpC,KAAKyD,UAAazD,KAAKqH,YAAYhF,MAAM,EACnFE,GAAK8C,GAAMmD,cAAcC,YAAYlG,EAAKvC,KAAKyD,UAAazD,KAAKqH,YAAYqB,OAAO,GAGxF1I,KAAKyH,gBAAgBkB,gBAE7B,CAKOC,cAAAA,GAEH,OAAO,IAAI9I,GAAiB+I,EAAAA,EAAAA,IAAO7I,KAAK8I,gBAAgBvB,eAAgBvH,KAAKK,gBAAiBL,KAAKM,QAAS,KAAM,KACtH,CAEOyI,mBAAAA,CAAoBC,GAEvB,MAAO,CACH5G,GAAI4G,EAAM5G,EAAIpC,KAAKqH,YAAY4B,KAAOjJ,KAAKoH,eAAehF,GAAGpC,KAAKyD,UAClElB,GAAIyG,EAAMzG,EAAIvC,KAAKqH,YAAY6B,IAAMlJ,KAAKoH,eAAe7E,GAAGvC,KAAKyD,UAEzE,CASU0F,WAAAA,CAAYC,GAEdA,EAAMC,SAAWC,EAAAA,EAAYC,OAE7BvJ,KAAK6H,kBACL,CACIzF,EAAGgH,EAAMI,QAAUxJ,KAAKoH,eAAehF,EACvCG,EAAG6G,EAAMK,QAAUzJ,KAAKoH,eAAe7E,GAG3CvC,KAAK+H,YAAa,EAE1B,CAOU2B,WAAAA,CAAYN,GAElBpJ,KAAK8H,cAAgB,CACjB1F,EAAGgH,EAAMI,QAAUxJ,KAAKqH,YAAY4B,KACpC1G,EAAG6G,EAAMK,QAAUzJ,KAAKqH,YAAY6B,KAGpClJ,KAAK+H,WAEL/H,KAAKoH,eACL,CACIhF,EAAGgH,EAAMI,QAAUxJ,KAAK6H,kBAAkBzF,EAC1CG,EAAG6G,EAAMK,QAAUzJ,KAAK6H,kBAAkBtF,GAK1C6G,GAAOC,UAAYC,EAAAA,EAAYC,OAE1BvJ,KAAK0H,mBAEN1H,KAAK0H,iBAAmBiC,aAAY,KAEhC,MAAMC,EAAqB,CACvBxH,EAAG,EACHG,EAAG,GAGHvC,KAAK8H,cAAc1F,GAA4B,GAAvBpC,KAAKqH,YAAYhF,MAEzCuH,EAAMxH,GAAKyH,KAAKC,KAAK9J,KAAK8H,cAAc1F,EAA2B,GAAvBpC,KAAKqH,YAAYhF,QAAYrC,KAAKqH,YAAYhF,MAAM,IAAI0E,EAAoBA,GAEnH/G,KAAK8H,cAAc1F,GAAKpC,KAAKqH,YAAYhF,MAAM,KAEpDuH,EAAMxH,GAAKyH,KAAKC,KAAK9J,KAAKqH,YAAYhF,MAAM,GAAKrC,KAAK8H,cAAc1F,IAAIpC,KAAKqH,YAAYhF,MAAM,IAAI0E,EAAoBA,IAGvH/G,KAAK8H,cAAcvF,GAA6B,GAAxBvC,KAAKqH,YAAYqB,OAEzCkB,EAAMrH,GAAKsH,KAAKC,KAAK9J,KAAK8H,cAAcvF,EAA4B,GAAxBvC,KAAKqH,YAAYqB,SAAa1I,KAAKqH,YAAYqB,OAAO,IAAI3B,EAAoBA,GAErH/G,KAAK8H,cAAcvF,GAAKvC,KAAKqH,YAAYqB,OAAO,KAErDkB,EAAMrH,GAAKsH,KAAKC,KAAK9J,KAAKqH,YAAYqB,OAAO,GAAK1I,KAAK8H,cAAcvF,IAAIvC,KAAKqH,YAAYqB,OAAO,IAAI3B,EAAoBA,IAG9G,GAAX6C,EAAMxH,GAAqB,GAAXwH,EAAMrH,IAEtBvC,KAAKiI,sBAAsB8B,OAC3B/J,KAAKoH,eAAehF,GAAKwH,EAAMxH,EAC/BpC,KAAKoH,eAAe7E,GAAKqH,EAAMrH,EAC/BvC,KAAKyH,gBAAgBkB,gB,GAE1B,KAInB,CAOUqB,SAAAA,CAAUC,GAEZjK,KAAK+H,aAEL/H,KAAK+H,YAAa,GAGlB/H,KAAK0H,mBAELwC,cAAclK,KAAK0H,kBACnB1H,KAAK0H,iBAAmB,KAEhC,CAOUyC,OAAAA,CAAQf,GAEd,GAAIA,EAAMgB,OACV,CACI,MAAMC,EAAerK,KAAKsK,uBAAuBlB,EAAMgB,OAAS,GAAK,EAAI,GAEnEG,GAAQnB,EAAMI,QAAUxJ,KAAKoH,eAAehF,EAAIpC,KAAKqH,YAAY4B,MAAQjJ,KAAKyD,UAC9E+G,GAAQpB,EAAMK,QAAUzJ,KAAKoH,eAAe7E,EAAIvC,KAAKqH,YAAY6B,KAAOlJ,KAAKyD,UAEnFzD,KAAKoH,eAAehF,EAAIgH,EAAMI,QAAUxJ,KAAKqH,YAAY4B,KAAOsB,EAAKF,EACrErK,KAAKoH,eAAe7E,EAAI6G,EAAMK,QAAUzJ,KAAKqH,YAAY6B,IAAMsB,EAAKH,EAEpErK,KAAKyK,cAAcJ,E,CAGvBjB,EAAMsB,iBACNtB,EAAMuB,0BACV,CAOOC,MAAAA,GAEH5K,KAAKyK,cAAczK,KAAKsK,uBAAuB,GACnD,CAKOO,OAAAA,GAEH7K,KAAKyK,cAAczK,KAAKsK,wBAAwB,GACpD,CAKOQ,SAAAA,GAEH9K,KAAKyK,cAAc,EACvB,CAQU7D,WAAAA,CAAYvB,GAElB,MAAM0F,EAAQ/K,KAAKgI,gBAAgBgD,QAAQ3F,GAExC0F,EAAQ,IAKX/K,KAAKgI,gBAAgBiD,OAAOF,EAAO,GAEnC/K,KAAKM,QAAQ4B,cACjB,CASQoI,sBAAAA,CAAuBV,GAE3B,OAAOsB,EAAAA,EAAAA,IAAMlL,KAAKyD,UAAoB,IAARmG,EAlYb,GAKA,EA8XrB,CAMQa,aAAAA,CAAcJ,GAElBrK,KAAKyD,UAAY4G,EACjBrK,KAAKkH,eAjZmB,GAiZwBlH,KAAKyD,SACzD,E,iCAlXSuD,GAA0BlB,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAC,EAAAA,GAAAD,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EA2GfqF,EAAAA,IAAyB,E,kBA3GpCnE,EAA0Bb,UAAA,uBAAAiF,UAAA,SAAAC,EAAAC,G,GAAA,EAAAD,G,SAuFCE,EAAAA,I,uIAvF3BD,EAAAnC,YAAA1C,EAAmB,G,CAAA,sBAAAA,GAAA,OAAnB6E,EAAA5B,YAAAjD,EAAmB,G,CAAA,oBAAAA,GAAA,OAAnB6E,EAAAtB,UAAAvD,EAAiB,MAAAX,EAAAA,G,CAAA,kBAAAW,GAAA,OAAjB6E,EAAAnB,QAAA1D,EAAe,I,iaDjD5BX,EAAAA,GAAA,WACIA,EAAAA,KAAAA,EAAAA,GAAA,WACIA,EAAAA,GAAA,cACJA,EAAAA,KAEAA,EAAAA,EAAA,EAAA0F,EAAA,sBAGJ1F,EAAAA,M,MARuBA,EAAAA,GAAA,yBAAAwF,EAAAlE,eAAAhF,EAAA,OAAAkJ,EAAAlE,eAAA7E,EAAA,aAAA+I,EAAA7H,UAAA,KAKsBqC,EAAAA,EAAA,GAAAA,EAAAA,EAAA,UAAAwF,EAAAtD,iB,gBCuCrCyD,EAAAA,EAAYxF,EAAAA,GACZnD,GAAgC4I,cAAA,EAAAC,gBAAA,G,mCC1CjC,MAAM/J,EAA0B,M,kBCAhC,IAAK0H,E,iBAAZ,SAAYA,GAKRA,EAAAA,EAAA,cACH,CAND,CAAYA,IAAAA,EAAW,I","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts"],"sourcesContent":["import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this.destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this.path = this.parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this.lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this.path?.remove();\n        this.destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this.path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this.path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this.relationManager.getActiveInput();\n            this.relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this.path.attr('d', this.lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {{@type}}', {type: {name: this.componentMetadata.name, package: this.componentMetadata.package}});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {{@id}}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {{@id}}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {{@id}}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {{@id}}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n\n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy, EventEmitter, Output} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum scale factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Maximal movement delta\n */\nconst MOVEMENT_DELTA_MAX = 10;\n\n/**\n * Component used as designer component wrapper for relations component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Identifier of canvas move timer\n     */\n    private _canvasMoveTimer: number|null = null;\n\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Mouse position in canvas\n     */\n    protected mousePosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    public get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Node definition data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### public properties - outputs #########################\n\n    @Output()\n    public convasPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        this.mousePosition = {\n            x: event.clientX - this.boundingBox.left,\n            y: event.clientY - this.boundingBox.top\n        };\n\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n        else\n        {\n            if (event?.buttons === MouseButton.LEFT)\n            {\n                if (!this._canvasMoveTimer)\n                {\n                    this._canvasMoveTimer = setInterval(() =>\n                    {\n                        const delta: Coordinates = {\n                            x: 0,\n                            y: 0,\n                        };\n\n                        if (this.mousePosition.x >= this.boundingBox.width*0.9)\n                        {\n                            delta.x -= Math.min((this.mousePosition.x - this.boundingBox.width*0.9)/(this.boundingBox.width/10)*MOVEMENT_DELTA_MAX, MOVEMENT_DELTA_MAX);\n                        }\n                        else if (this.mousePosition.x <= this.boundingBox.width/10)\n                        {\n                            delta.x += Math.min((this.boundingBox.width/10 - this.mousePosition.x)/(this.boundingBox.width/10)*MOVEMENT_DELTA_MAX, MOVEMENT_DELTA_MAX);\n                        }\n\n                        if (this.mousePosition.y >= this.boundingBox.height*0.9)\n                        {\n                            delta.y -= Math.min((this.mousePosition.y - this.boundingBox.height*0.9)/(this.boundingBox.height/10)*MOVEMENT_DELTA_MAX, MOVEMENT_DELTA_MAX);\n                        }\n                        else if (this.mousePosition.y <= this.boundingBox.height/10)\n                        {\n                            delta.y += Math.min((this.boundingBox.height/10 - this.mousePosition.y)/(this.boundingBox.height/10)*MOVEMENT_DELTA_MAX, MOVEMENT_DELTA_MAX);\n                        }\n\n                        if (delta.x != 0 || delta.y != 0)\n                        {\n                            this.convasPositionChanged.emit();\n                            this.canvasPosition.x += delta.x;\n                            this.canvasPosition.y += delta.y;\n                            this._changeDetector.detectChanges();\n                        }\n                    }, 33) as unknown as number;\n                }\n            }\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n\n        if (this._canvasMoveTimer)\n        {\n            clearInterval(this._canvasMoveTimer);\n            this._canvasMoveTimer = null;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = this._calculateNewZoomLevel(event.deltaY > 1 ? -1 : 1);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Zooms canvas in by one step\n     */\n    public zoomIn(): void\n    {\n        this._setZoomLevel(this._calculateNewZoomLevel(1));\n    }\n\n    /**\n     * Zooms canvas out by one step\n     */\n    public zoomOut(): void\n    {\n        this._setZoomLevel(this._calculateNewZoomLevel(-1));\n    }\n\n    /**\n     * Resets zoom level\n     */\n    public resetZoom(): void\n    {\n        this._setZoomLevel(1);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Calculates new zoom level based on dalte\n     * @param delta \n     * @returns \n     */\n    private _calculateNewZoomLevel(delta: number): number\n    {\n        return clamp(this.zoomLevel + delta * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);\n    }\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}"],"names":["NodeRelationPath","destroying","this","destroyingSubject","asObservable","constructor","parentGroup","relationManager","history","start","end","Subject","output","input","path","append","attr","on","highlight","cancelHighlight","lineGenerator","line","curve","curveBundle","beta","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","getNewState","points","x","width","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","isPresent","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","options","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","_this","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","type","name","package","error","Ignore","ThrowError","Error","createComponent","data","injector","node","subscribe","metadata","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","i0","i1","RELATIONS_NODES_LOADER","i2","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","$event","_r4","ctx_r3","destroyNode","nodeDefinition_r2","ctx_r1","MOVEMENT_DELTA_MAX","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","element","nativeElement","getBoundingClientRect","_changeDetector","_canvasMoveTimer","_initSubscriptions","Subscription","dragStartPosition","mousePosition","isDragging","nodeDefinitions","convasPositionChanged","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","nodeMetadata","coordinates","height","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","LEFT","clientX","clientY","onMouseMove","setInterval","delta","Math","min","emit","onMouseUp","_","clearInterval","onWheel","deltaY","newZoomLevel","_calculateNewZoomLevel","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","zoomIn","zoomOut","resetZoom","index","indexOf","splice","clamp","RELATIONS_HISTORY_MANAGER","viewQuery","rf","ctx","ElementRef","RelationsCanvasSAComponent_ng_container_4_Template","CommonModule","encapsulation","changeDetection"],"sourceRoot":""}