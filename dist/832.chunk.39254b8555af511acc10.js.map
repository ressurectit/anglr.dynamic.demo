{"version":3,"file":"832.chunk.39254b8555af511acc10.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.html","webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/services/basicComponentsDynamicModuleItemsProvider/basicComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t66249,\n\t\t634,\n\t\t6249\n\t],\n\t\"./gridPanel/type\": [\n\t\t49,\n\t\t49\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t9918,\n\t\t9918\n\t],\n\t\"./ifBlock/type\": [\n\t\t29781,\n\t\t634,\n\t\t9781\n\t],\n\t\"./negation/type\": [\n\t\t3214,\n\t\t3214\n\t],\n\t\"./sampleChange/type\": [\n\t\t89354,\n\t\t9354\n\t],\n\t\"./sampleSource/type\": [\n\t\t51133,\n\t\t1133\n\t],\n\t\"./stackPanel/type\": [\n\t\t14433,\n\t\t4433\n\t],\n\t\"./textBlock/type\": [\n\t\t2252,\n\t\t2252\n\t],\n\t\"./toggleButton/type\": [\n\t\t48928,\n\t\t634,\n\t\t8928\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 84635;\nmodule.exports = webpackAsyncContext;","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_metadata\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button class=\"button\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\nimport {FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'formPreview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _fb: FormBuilder,\n                private _injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n\n                //TODO build formGroup from metadata\n                this._formGroup = this._fb.group({\n                    checkbox: true,\n                    datepicker: new Date(),\n                    number: 10,\n                    period: '202201',\n                    radio: null,\n                    select: 'foo',\n                    textarea: 'Text in textarea',\n                    text: 'classic input field'\n                });\n        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    protected _submit()\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {FormPreviewComponent} from './formPreview/formPreview.component';\n\nexport const components =\n[\n    FormPreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {ComponentsPaletteSAComponent, ComponentsTreeSAComponent, PropertiesEditorSAComponent} from '@anglr/dynamic/layout-editor';\nimport {NodesPaletteSAComponent, RelationsCanvasSAComponent, RelationsEditorSAComponent} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\nimport {LoadSaveNewSAComponent} from '../../components';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule,\n        LayoutComponentRendererSADirective,\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        RelationsCanvasSAComponent,\n        MatTabsModule,\n        LoadSaveNewSAComponent,\n        NodesPaletteSAComponent,\n        DragDropModule,\n        RelationsEditorSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? id : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: (item.metadata.singleton ? item.itemSource.name : _newCompnentId): item.metadata.singleton\"\n                 (cdkDragDropped)=\"_generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? item.itemSource.name : item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this._initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    protected async loadNodes(): Promise<void>\n    {\n        this._allItems = [];\n        this._groupedItems = {};\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components', 'static-components', 'layout-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n    }\n}","<div class=\"flex-row flex-1\">\n    <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in basic-components\n */\n@Injectable()\nexport class BasicComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with basic-components\n        if(source.package != 'basic-components' && source.package != '@anglr/dynamic/basic-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/basic-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected _cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected _providers: DynamicModuleProvider[],\n                protected _extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected _validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected _logger?: Logger,\n                protected _noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this._cachedDynamicItems && !this._noCache)\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this._cachedDynamicItems[cacheId] = this._validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this._cachedDynamicItems[cacheId])\n                {\n                    this._logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this._cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this._cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, resolvePromiseOr, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await resolvePromiseOr(fn(module, this._logger)));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","i0","val_r2","ctx_r1","FormPreviewComponent","constructor","_store","_router","_route","_fb","_injector","_available","FormControl","_metadata","_availableNames","ngOnInit","this","getStored","params","subscribe","setValue","getData","_formGroup","group","checkbox","datepicker","Date","number","period","radio","select","textarea","text","_formInjector","Injector","parent","providers","provide","FORM_COMPONENT_CONTROL","useValue","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","selectors","features","LayoutEditorMetadataManager","createStoreDataServiceFactory","decls","vars","consts","template","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","defineProperty","enumerable","configurable","writable","path","push","pathMatch","ComponentRoute","StoreDataService","Router","ActivatedRoute","FormBuilder","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","RelationsCanvasSAComponent","MatTabsModule","LoadSaveNewSAComponent","NodesPaletteSAComponent","DragDropModule","RelationsEditorSAComponent","ModuleRoutes","InjectionToken","ToRelationsDragDataSAPipe","transform","singleton","newId","itemSource","name","metadata","displayName","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","x","y","options","pure","standalone","_moduleTypesLoader","_nodesLoader","_changeDetector","_metadataManager","_refreshObservables","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_newCompnentId","generateId","_isDragOverPalette","Array","isArray","obs","add","loadNodes","unsubscribe","packageName","types","loadItem","data","type","item","_a","detectChanges","_generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","LOGGER","inputs","canvasDropList","CommonModule","i2","i3","styles","changeDetection","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","ctx","i1","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","BasicComponentsDynamicModuleItemsProvider","tryToGet","source","debug","factory","DynamicItemLoader","_providers","_extractors","_validatorFn","_noCache","_cachedDynamicItems","error","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","resolvePromiseOr","extractor","dynamicItem","tryToExtract","DynamicModuleDataExtractor","_extractorFunctions","result","fn","isEmptyObject","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","formGroup","validator","filter","itm","propertyName","defaultValue","undefined","control","FormArray","controlOptions","formArray","disable","addControl","buildFormModel","FormModelBuilder","build","injector","route","rt","component","AsRequiredTypePipe","_valueHash","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","key","currentValue","sort","keyValueA","keyValueB","a","b","aString","String","bString","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule"],"sourceRoot":""}