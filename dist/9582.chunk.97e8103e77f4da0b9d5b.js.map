{"version":3,"file":"9582.chunk.97e8103e77f4da0b9d5b.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/debounceValue/node/debounceValueNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/debounceValue/node/debounceValueNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/debounceValue/metadata/debounceValue.relationsMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputControlValueAccessor.directive.ts","webpack://ng-universal-demo/../../../../forms/src/directives/numberInput/numberInputValidator.directive.ts","webpack://ng-universal-demo/../../../../forms/src/misc/validators.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {NumberInputModule} from '@anglr/common/forms';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\nimport {isNumber} from '@jscrpt/common';\n\nimport {DebounceValueRelationsOptions} from '../debounceValue.options';\n\n/**\n * Debounce value node component for negation\n */\n@Component(\n{\n    selector: 'debounce-value-node',\n    templateUrl: 'debounceValueNode.component.html',\n    standalone: true,\n    imports:\n    [\n        ReactiveFormsModule,\n        NumberInputModule,\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DebounceValueNodeSAComponent extends RelationsNodeBase<DebounceValueRelationsOptions> implements RelationsNode<DebounceValueRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Form control for handling debounce time\n     */\n    protected debounceTime: FormControl<number|null> = new FormControl<number>(50);\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override initialize(): void\n    {\n        this.debounceTime.valueChanges.subscribe(value =>\n        {\n            if(isNumber(value) && !isNaN(value) && this.metadata?.relationsOptions)\n            {\n                this.metadata.relationsOptions.delay = value;\n\n                this.history.getNewState();\n            }\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(this.metadata?.relationsOptions?.delay)\n        {\n            this.debounceTime.patchValue(this.metadata?.relationsOptions.delay);\n        }\n    }\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"debounce value\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"dynamic-form-group dynamic-margin-bottom-extra-small dynamic-margin-bottom-small\">\n        <label class=\"dynamic-control-label dynamic-text-uppercase\">debounce time</label>\n        <input type=\"text\" class=\"dynamic-form-control\" [formControl]=\"debounceTime\" number required>\n    </div>\n\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"value\" [parent]=\"this\"></relation-node-input>\n                <div>value</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>value</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"value\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {DebounceValueNodeSAComponent} from '../node/debounceValueNode.component';\n\n/**\n * Debounce value relations metadata\n */\nexport class DebounceValueRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Debounce value',\n        description: 'Debounce value by specific time',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = DebounceValueNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Directive, ExistingProvider, forwardRef, Renderer2, ElementRef} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Value accessor provider for number inputs\n */\nconst NUMBER_INPUT_VALUE_ACCESSOR = <ExistingProvider>\n{\n    provide: NG_VALUE_ACCESSOR, \n    useExisting: forwardRef(() => NumberInputControlValueAccessor), \n    multi: true\n};\n\n/**\n * Value accessor for getting and setting values for number inputs\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_INPUT_VALUE_ACCESSOR],\n    host: \n    {\n        '(change)': 'onChange($event.target.value)',\n        '(input)': 'onChange($event.target.value)',\n        '(blur)': 'onTouched()'\n    }\n})\nexport class NumberInputControlValueAccessor implements ControlValueAccessor\n{\n    //######################### public properties #########################\n    \n    public onChange = (_: any) => {};\n    \n    /**\n     * Method that is called when picker was touched\n     */\n    public onTouched = () => {};\n    \n    //######################### constructor #########################\n    constructor(private _renderer: Renderer2, private _elementRef: ElementRef)\n    {\n    }\n\n    //######################### public methods - implementation of ControlValueAccessor #########################\n\n    /**\n     * Sets value to select\n     */\n    public writeValue(value: any): void\n    {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n    }\n\n    /**\n     * Registers callback that is called when value of select changes\n     */\n    public registerOnChange(fn: (data: any) => any): void\n    {\n        this.onChange = (value: string) => \n        { \n            if(isBlank(value) || value == '')\n            {\n                fn(null);\n                \n                return;\n            }\n            \n            //removing all spaces\n            value = value.replace(/\\s+/g, '');\n            \n            if(!/^[+-]?\\d+(?:[,.]\\d+)?$/g.test(value))\n            {\n                fn(NaN);\n                \n                return;\n            }\n            \n            fn(parseFloat(value.replace(',', '.'))); \n        };\n    }\n\n    /**\n     * Registers callback that is called when select is closed\n     */\n    public registerOnTouched(fn: () => any): void\n    {\n        this.onTouched = fn;\n    }\n}\n","import {ExistingProvider, forwardRef, Directive} from '@angular/core';\nimport {NG_VALIDATORS, AbstractControl, Validator, ValidationErrors} from '@angular/forms';\n\nimport {Validators} from '../../misc/validators';\n\n/**\n * Validator that is injected with directive NumberInputValidatorDirective\n */\nconst NUMBER_VALIDATOR = <ExistingProvider>\n{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => NumberInputValidatorDirective),\n    multi: true\n};\n\n/**\n * Is number directive injecting checking for number validator\n */\n@Directive(\n{\n    selector: 'input[number][formControlName],input[number][formControl],input[number][ngModel]',\n    providers: [NUMBER_VALIDATOR]\n})\nexport class NumberInputValidatorDirective implements Validator\n{\n    //######################### public methods - implementation of Validator #########################\n\n    /**\n     * Validates input and returns validation result\n     * @param control - Control that is being validated\n     * @returns validation results\n     */\n    public validate(control: AbstractControl): ValidationErrors|null\n    {\n        return Validators.number(control);\n    }\n}","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Validations functions\n */\nexport class Validators\n{\n    /**\n     * Validates control if its value is number\n     * @param control - Control which value to be validated\n     */\n    public static number(control: AbstractControl): ValidationErrors|null\n    {\n        if(isNaN(control.value))\n        {\n            return {\n                'number': true\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates validator function that validates control if its value is higher than max value\n     * @param max - Max value that should be validated\n     */\n    public static max(max: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(max) && control.value > max)\n            {\n                return {\n                    'maxValue': max,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n\n    /**\n     * Creates validator function that validates control if its value is lower than min value\n     * @param min - Min value that should be validated\n     */\n    public static min(min: number|null): ValidatorFn\n    {\n        return (control: AbstractControl): ValidationErrors|null =>\n        {\n            if(!isNaN(control.value) && isPresent(control.value) && isPresent(min) && control.value < min)\n            {\n                return {\n                    'minValue': min,\n                    'actualValue': control.value\n                };\n            }\n\n            return null;\n        };\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}"],"names":["DebounceValueNodeSAComponent","RelationsNodeBase","constructor","debounceTime","FormControl","initialize","this","valueChanges","subscribe","value","isNumber","isNaN","metadata","relationsOptions","delay","history","getNewState","metadataSet","patchValue","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","ReactiveFormsModule","i1","NumberInputModule","i2","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","DebounceValueRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","NUMBER_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NumberInputControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","writeValue","setProperty","nativeElement","registerOnChange","fn","isBlank","replace","test","parseFloat","NaN","registerOnTouched","NUMBER_VALIDATOR","NG_VALIDATORS","NumberInputValidatorDirective","validate","control","max","isPresent","min","number","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","defaultValue","undefined","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector"],"sourceRoot":""}