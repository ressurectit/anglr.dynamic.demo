{"version":3,"file":"6056.chunk.fa34cfea0e6056dc34db.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/firstNonNull/node/firstNonNullNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/firstNonNull/node/firstNonNullNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/firstNonNull/metadata/firstNonNull.relationsMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\n\nimport {FirstNonNullRelationsOptions} from '../firstNonNull.options';\n\n/**\n * Relations node component for first non null\n */\n@Component(\n{\n    selector: 'first-non-null-node',\n    templateUrl: 'firstNonNullNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FirstNonNullNodeSAComponent extends RelationsNodeBase<FirstNonNullRelationsOptions> implements RelationsNode<FirstNonNullRelationsOptions>\n{\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"first non null\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data1\" [parent]=\"this\"></relation-node-input>\n                <div>data1</div>\n            </div>\n\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data2\" [parent]=\"this\"></relation-node-input>\n                <div>data2</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>data</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {FirstNonNullNodeSAComponent} from '../node/firstNonNullNode.component';\n\n/**\n * First non null relations metadata\n */\nexport class FirstNonNullRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'First non null',\n        description: 'Returns first input that is set (non null)',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = FirstNonNullNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ÉµDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ÉµDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ÉµControlsMetadata ?? {};\n    const groupValidators = model.ÉµValidators ?? [];\n    const groupAsyncValidators = model.ÉµAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ÉµArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ÉµDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}"],"names":["FirstNonNullNodeSAComponent","RelationsNodeBase","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","FirstNonNullRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","ÉµDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ÉµControlsMetadata","groupValidators","ÉµValidators","groupAsyncValidators","ÉµAsyncValidators","groupArgs","ÉµArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","metadata","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector"],"sourceRoot":""}