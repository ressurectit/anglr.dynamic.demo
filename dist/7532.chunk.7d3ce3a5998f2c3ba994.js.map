{"version":3,"file":"7532.chunk.7d3ce3a5998f2c3ba994.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/./app/misc/factories.ts","webpack://ng-universal-demo/./app/services/storeData/storeData.service.ts","webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/services/basicComponentsDynamicModuleItemsProvider/basicComponentsDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t38206,\n\t\t8206\n\t],\n\t\"./gridPanel/type\": [\n\t\t49,\n\t\t49\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t9918,\n\t\t9918\n\t],\n\t\"./sampleChange/type\": [\n\t\t89354,\n\t\t9354\n\t],\n\t\"./sampleSource/type\": [\n\t\t51133,\n\t\t1133\n\t],\n\t\"./stackPanel/type\": [\n\t\t14433,\n\t\t4433\n\t],\n\t\"./textBlock/type\": [\n\t\t2252,\n\t\t2252\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 84635;\nmodule.exports = webpackAsyncContext;","import {FactoryProvider} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\n\nimport {StoreDataService} from '../services/storeData';\n\n/**\n * Creates factory provider for store data service\n * @param storeName - Name of storage that should be used\n */\nexport function createStoreDataServiceFactory(storeName: string): FactoryProvider\n{\n    return {\n        provide: StoreDataService,\n        useFactory: (storage: PermanentStorage) => new StoreDataService(storage, storeName),\n        deps: [PERMANENT_STORAGE]\n    };\n}","import {PermanentStorage} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Service used for obtaining and storing data\n */\nexport class StoreDataService<TData = any>\n{\n    //######################### constructor #########################\n    constructor(private _storage: PermanentStorage,\n                private _storeKey: string,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Stores data into store\n     * @param name - Name of stored data\n     * @param data - Data to be stored\n     */\n    public setData(name: string, data: TData): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data\n     * @param name - Name of data to be retrieved\n     */\n    public getData(name: string): TData|null\n    {\n        return (this._storage.get(this._storeKey)?.[name]) ?? null;\n    }\n\n    /**\n     * Removes data from store\n     * @param name - Name of data to be removed\n     */\n    public removeData(name: string): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        delete store[name];\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data names\n     */\n    public getStored(): string[]\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        return Object.keys(store);\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"_designerDropLists\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {LAYOUT_MODULE_TYPES_LOADER} from '../../misc/tokens';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        this._getDesignerDropLists();\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n}","<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button mat-icon-button *ngIf=\"hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        (cdkDropListDropped)=\"data?.component?.addDescendant($event)\"\n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDrop() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"_visible\" class=\"properties-main\">\n    <div class=\"header\">Properties <span class=\"bold\">{{_metadata?.metaInfo?.name ?? _component?.options?.typeMetadata?.name}} - {{_component?.options?.typeMetadata?.id}}</span></div>\n\n    <div class=\"form-group\">\n        <label class=\"control-label\">Display name</label>\n        <input class=\"form-control\" type=\"text\" [formControl]=\"_displayName\">\n    </div>\n\n    <ng-container *ngFor=\"let props of _propertiesData\">\n        <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n            <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {addSimpleChange} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {Dictionary, extend, isPresent, resolvePromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected _optionsFormSubscription: Subscription|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected _visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected _component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected _metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected _displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected _propertiesData: PropertiesEditorData[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected _formModelBuilder: FormModelBuilder,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => this._initProperties()));\n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => this._initProperties()));\n\n        this._displayName\n            .valueChanges\n            .subscribe(async displayName =>\n            {\n                if(this._component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this._component.options.typeMetadata.displayName = displayName;\n\n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n\n                    // eslint-disable-next-line no-self-assign\n                    this._component.options = this._component.options;\n                    await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                    this._manager.displayNameUpdated();\n                }\n            });\n\n        this._initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    protected async _initProperties(): Promise<void>\n    {\n        if(isPresent(this._manager.selectedComponent))\n        {\n            this._visible = true;\n            const component = this._manager.getComponent(this._manager.selectedComponent);\n\n            if(component)\n            {\n                this._visible = true;\n                this._component = component;\n\n                await this._getMetadata();\n            }\n            else\n            {\n                this._hide();\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async _getMetadata(): Promise<void>\n    {\n        if(this._component?.options?.typeMetadata)\n        {\n            this._displayName.setValue(this._component.options.typeMetadata.displayName || this._component.options.typeMetadata.id, {emitEvent: false});\n\n            this._metadata = await this._metadataExtractor.extractMetadata(this._component.options?.typeMetadata);\n\n            if(!this._metadata)\n            {\n                this._logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this._component.options?.typeMetadata.package, name: this._component.options?.typeMetadata.name});\n\n                this._hide();\n            }\n\n            this._optionsFormSubscription?.unsubscribe();\n            this._optionsFormSubscription = new Subscription();\n            this._propertiesData = [];\n\n            //properties metadata\n            if(this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                    const metadata = this._propertyExtractor.extract(props.modelType);\n    \n                    this._optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n                    {\n                        if(this._component?.options?.typeMetadata)\n                        {\n                            extend(true, this._component.options.typeMetadata.options, data);\n\n                            const changes: SimpleChanges = {};\n                            addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n    \n                            // eslint-disable-next-line no-self-assign\n                            this._component.options = this._component.options;\n                            await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                            this._component.invalidateVisuals();\n                        }\n                    }));\n\n                    this._propertiesData.push(\n                    {\n                        form,\n                        metadata,\n                        controls: props.propertiesControls,\n                    });\n                }\n            }\n\n            if(this._component)\n            {\n                const parent = this._manager.getParent(this._component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this._metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                            const metadata = this._propertyExtractor.extract(props.modelType);\n            \n                            this._optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n                            {\n                                if(this._component?.options?.typeMetadata)\n                                {\n                                    extend(true, this._component.options.typeMetadata.options, data);\n            \n                                    const changes: SimpleChanges = {};\n                                    addSimpleChange<LayoutComponent>(changes, 'options', this._component.options, this._component.options);\n\n                                    // eslint-disable-next-line no-self-assign\n                                    this._component.options = this._component.options;\n                                    await resolvePromiseOr(this._component.ngOnChanges?.(changes));\n                                    this._component.invalidateVisuals();\n                                }\n                            }));\n        \n                            this._propertiesData.push(\n                            {\n                                form,\n                                metadata,\n                                controls: props.propertiesControls,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected _hide(): void\n    {\n        this._visible = false;\n        this._component = null;\n        this._metadata = null;\n        this._propertiesData = [];\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n        this._changeDetector.detectChanges();\n    }\n}","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDrop())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {LayoutModuleTypes} from '../components/componentsPalette/componentsPalette.interface';\nimport {InputStringComponent} from '../modules/propertyTypeControls/components/inputString/inputString.component';\nimport {InputBooleanComponent} from '../modules/propertyTypeControls/components/inputBoolean/inputBoolean.component';\nimport {SelectValueComponent} from '../modules/propertyTypeControls/components/selectValue/selectValue.component';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES');\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () => \n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                                 'selectValue': SelectValueComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }\n                                                                                                                                                                     });\n\n/**\n * Injection token for layout module types data extractors\n */\nexport const LAYOUT_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout module types providers\n */\nexport const LAYOUT_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<LayoutModuleTypes>> = new InjectionToken<DynamicItemLoader<LayoutModuleTypes>>('LAYOUT_MODULE_TYPES_LOADER');\n","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnChanges?.(changes));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(component.ngOnInit?.());\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef.changeDetectorRef.markForCheck();\n\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in basic-components\n */\n@Injectable()\nexport class BasicComponentsDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with basic-components\n        if(source.package != 'basic-components' && source.package != '@anglr/dynamic/basic-components')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            const dynamicItemModule = await import(`@anglr/dynamic/basic-components/${source.name}/type`);\n\n            return dynamicItemModule;\n        }\n        catch(e)\n        {\n            this._logger?.debug('BasicComponentsDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected _cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected _providers: DynamicModuleProvider[],\n                protected _extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected _validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this._cachedDynamicItems)\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this._cachedDynamicItems[cacheId] = this._validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this._cachedDynamicItems[cacheId])\n                {\n                    this._logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this._cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this._cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, resolvePromiseOr, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await resolvePromiseOr(fn(module, this._logger)));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","createStoreDataServiceFactory","storeName","provide","StoreDataService","useFactory","storage","deps","PERMANENT_STORAGE","constructor","_storage","_storeKey","setData","name","data","store","this","get","set","getData","removeData","getStored","ToLayoutDragDataSAPipe","transform","value","newId","itemSource","metadata","displayName","package","options","extend","metaInfo","defaultOptions","parentId","pure","standalone","i0","ComponentsPaletteSAComponent","_moduleTypesLoader","_changeDetector","_metadataExtractor","_metadataManager","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","ngOnInit","add","layoutChange","subscribe","_getDesignerDropLists","packageName","types","loadItem","type","extractMetadata","push","warn","item","group","_a","detectChanges","ngOnDestroy","unsubscribe","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","event","currentIdx","source","dropContainer","getSortedItems","findIndex","splice","flatTree","itm","component","reverse","LAYOUT_MODULE_TYPES_LOADER","LOGGER","selectors","features","decls","vars","consts","template","CommonModule","i2","DragDropModule","i3","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","styles","changeDetection","child_r5","ctx_r6","ComponentsTreeItemSAComponent","_manager","open","_canDrop","canDrop","hasChildren","children","length","selectedChange","highlightedChange","displayNameChange","toggle","expand","nodeId","typeMetadata","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","ctx_r1","ctx_r3","viewQuery","ctx","MatButtonModule","i4","ConnectDropListsSADirective","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","inputs","editorMetadata","layoutMetadata","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","propertiesMetadata","ngOnChanges","debug","clear","injector","createComponent","instance","form","resolvePromiseOr","initialize","invalidateVisuals","destroy","props_r2","PropertiesEditorSAComponent","_propertyExtractor","_formModelBuilder","_optionsFormSubscription","_visible","_component","_metadata","_displayName","FormControl","_propertiesData","_initProperties","valueChanges","changes","addSimpleChange","displayNameUpdated","getComponent","_getMetadata","_hide","setValue","emitEvent","error","optionsMetadata","props","build","modelType","extract","controls","propertiesControls","parent","getParent","parentMetadata","childPropertiesMetadata","FormModelBuilder","ReactiveFormsModule","i5","_cdkDropList","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","pipe","debounceTime","connectedTo","exportAs","InputStringComponent","PropertyTypeControlBase","t","InputBooleanComponent","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","providedIn","factory","SelectValueComponent","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_MODULE_TYPES_PROVIDERS","_initialized","values","control","_control","_controlSet","_initialize","val_r1","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","metadataType","layoutEditorMetadata","metadataData","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","highlightedComponent","isBlank","asObservable","_buildFlatTree","selectComponent","next","unselectComponent","registerLayoutDesignerComponent","componentItem","unregisterLayoutDesignerComponent","index","indexOf","getMetadata","_buildFlatTreeForComponent","result","concat","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","propSymbol","meta","Reflect","prototype","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_childExtensions","_options","_metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentRef","nameof","customInjector","layoutComponentType","Ignore","ThrowError","usedInjector","Injector","providers","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","registerExtensions","extensions","changeDetectorRef","markForCheck","designer","LAYOUT_COMPONENT_TRANSFORM","outputs","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","currentValue","previousValue","firstChange","isFirstChange","BasicComponentsDynamicModuleItemsProvider","tryToGet","DynamicItemLoader","_providers","_extractors","_validatorFn","_cachedDynamicItems","Array","isArray","dynamicModule","verbose","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","DynamicModuleDataExtractor","_extractorFunctions","fn","isEmptyObject"],"sourceRoot":""}