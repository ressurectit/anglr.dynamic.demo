{"version":3,"file":"7817.chunk.931e0fcc67d831e3aae8.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts","webpack://ng-universal-demo/../../../../src/cdk/coercion/boolean-property.ts","webpack://ng-universal-demo/../../../../src/material/core/common-behaviors/error-state.ts","webpack://ng-universal-demo/../../../../src/material/core/error/error-options.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/hint.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/label.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/suffix.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field-control.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/error.ts","webpack://ng-universal-demo/../../../../src/cdk/observers/private/shared-resize-observer.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/floating-label.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/line-ripple.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/notched-outline.ts","webpack://ng-universal-demo/../../../../src/material/form-field/directives/notched-outline.html","webpack://ng-universal-demo/../../../../src/material/form-field/directives/prefix.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field-animations.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field.ts","webpack://ng-universal-demo/../../../../src/material/form-field/form-field.html","webpack://ng-universal-demo/../../../../src/material/form-field/module.ts"],"sourcesContent":["import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-mdc-form-field-hint mat-mdc-form-field-bottom-align',\n    '[class.mat-mdc-form-field-hint-end]': 'align === \"end\"',\n    '[id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  },\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-mdc-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label',\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SUFFIX = new InjectionToken<MatSuffix>('MatSuffix');\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix], [matIconSuffix], [matTextSuffix]',\n  providers: [{provide: MAT_SUFFIX, useExisting: MatSuffix}],\n})\nexport class MatSuffix {\n  @Input('matTextSuffix')\n  set _isTextSelector(value: '') {\n    this._isText = true;\n  }\n\n  _isText = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {AbstractControlDirective, NgControl} from '@angular/forms';\nimport {Directive} from '@angular/core';\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n@Directive()\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the AbstractControlDirective for this control. */\n  readonly ngControl: NgControl | AbstractControlDirective | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /**\n   * Value of `aria-describedby` that should be merged with the described-by ids\n   * which are set by the form-field.\n   */\n  readonly userAriaDescribedBy?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, ElementRef, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_ERROR = new InjectionToken<MatError>('MatError');\n\n/** Single error message to be shown underneath the form-field. */\n@Directive({\n  selector: 'mat-error, [matError]',\n  host: {\n    'class': 'mat-mdc-form-field-error mat-mdc-form-field-bottom-align',\n    'aria-atomic': 'true',\n    '[id]': 'id',\n  },\n  providers: [{provide: MAT_ERROR, useExisting: MatError}],\n})\nexport class MatError {\n  @Input() id: string = `mat-mdc-error-${nextUniqueId++}`;\n\n  constructor(@Attribute('aria-live') ariaLive: string, elementRef: ElementRef) {\n    // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n    // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n    if (!ariaLive) {\n      elementRef.nativeElement.setAttribute('aria-live', 'polite');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {inject, Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, shareReplay, takeUntil} from 'rxjs/operators';\n\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\nconst loopLimitExceededErrorHandler = (e: unknown) => {\n  if (e instanceof Error && e.message === 'ResizeObserver loop limit exceeded') {\n    console.error(\n      `${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`,\n    );\n  }\n};\n\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\nclass SingleBoxSharedResizeObserver {\n  /** Stream that emits when the shared observer is destroyed. */\n  private _destroyed = new Subject<void>();\n  /** Stream of all events from the ResizeObserver. */\n  private _resizeSubject = new Subject<ResizeObserverEntry[]>();\n  /** ResizeObserver used to observe element resize events. */\n  private _resizeObserver?: ResizeObserver;\n  /** A map of elements to streams of their resize events. */\n  private _elementObservables = new Map<Element, Observable<ResizeObserverEntry[]>>();\n\n  constructor(\n    /** The box type to observe for resizes. */\n    private _box: ResizeObserverBoxOptions,\n  ) {\n    if (typeof ResizeObserver !== 'undefined') {\n      this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n    }\n  }\n\n  /**\n   * Gets a stream of resize events for the given element.\n   * @param target The element to observe.\n   * @return The stream of resize events for the element.\n   */\n  observe(target: Element): Observable<ResizeObserverEntry[]> {\n    if (!this._elementObservables.has(target)) {\n      this._elementObservables.set(\n        target,\n        new Observable<ResizeObserverEntry[]>(observer => {\n          const subscription = this._resizeSubject.subscribe(observer);\n          this._resizeObserver?.observe(target, {box: this._box});\n          return () => {\n            this._resizeObserver?.unobserve(target);\n            subscription.unsubscribe();\n            this._elementObservables.delete(target);\n          };\n        }).pipe(\n          filter(entries => entries.some(entry => entry.target === target)),\n          // Share a replay of the last event so that subsequent calls to observe the same element\n          // receive initial sizing info like the first one. Also enable ref counting so the\n          // element will be automatically unobserved when there are no more subscriptions.\n          shareReplay({bufferSize: 1, refCount: true}),\n          takeUntil(this._destroyed),\n        ),\n      );\n    }\n    return this._elementObservables.get(target)!;\n  }\n\n  /** Destroys this instance. */\n  destroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._resizeSubject.complete();\n    this._elementObservables.clear();\n  }\n}\n\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SharedResizeObserver implements OnDestroy {\n  /** Map of box type to shared resize observer. */\n  private _observers = new Map<ResizeObserverBoxOptions, SingleBoxSharedResizeObserver>();\n\n  /** The Angular zone. */\n  private _ngZone = inject(NgZone);\n\n  constructor() {\n    if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      this._ngZone.runOutsideAngular(() => {\n        window.addEventListener('error', loopLimitExceededErrorHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    for (const [, observer] of this._observers) {\n      observer.destroy();\n    }\n    this._observers.clear();\n    if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      window.removeEventListener('error', loopLimitExceededErrorHandler);\n    }\n  }\n\n  /**\n   * Gets a stream of resize events for the given target element and box type.\n   * @param target The element to observe for resizes.\n   * @param options Options to pass to the `ResizeObserver`\n   * @return The stream of resize events for the element.\n   */\n  observe(target: Element, options?: ResizeObserverOptions): Observable<ResizeObserverEntry[]> {\n    const box = options?.box || 'content-box';\n    if (!this._observers.has(box)) {\n      this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n    }\n    return this._observers.get(box)!.observe(target);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  InjectionToken,\n} from '@angular/core';\nimport {SharedResizeObserver} from '@angular/cdk/observers/private';\nimport {Subscription} from 'rxjs';\n\n/** An interface that the parent form-field should implement to receive resize events. */\nexport interface FloatingLabelParent {\n  _handleLabelResized(): void;\n}\n\n/** An injion token for the parent form-field. */\nexport const FLOATING_LABEL_PARENT = new InjectionToken<FloatingLabelParent>('FloatingLabelParent');\n\n/**\n * Internal directive that maintains a MDC floating label. This directive does not\n * use the `MDCFloatingLabelFoundation` class, as it is not worth the size cost of\n * including it just to measure the label width and toggle some classes.\n *\n * The use of a directive allows us to conditionally render a floating label in the\n * template without having to manually manage instantiation and destruction of the\n * floating label component based on.\n *\n * The component is responsible for setting up the floating label styles, measuring label\n * width for the outline notch, and providing inputs that can be used to toggle the\n * label's floating or required state.\n */\n@Directive({\n  selector: 'label[matFormFieldFloatingLabel]',\n  host: {\n    'class': 'mdc-floating-label mat-mdc-floating-label',\n    '[class.mdc-floating-label--float-above]': 'floating',\n  },\n})\nexport class MatFormFieldFloatingLabel implements OnDestroy {\n  /** Whether the label is floating. */\n  @Input()\n  get floating() {\n    return this._floating;\n  }\n  set floating(value: boolean) {\n    this._floating = value;\n    if (this.monitorResize) {\n      this._handleResize();\n    }\n  }\n  private _floating = false;\n\n  /** Whether to monitor for resize events on the floating label. */\n  @Input()\n  get monitorResize() {\n    return this._monitorResize;\n  }\n  set monitorResize(value: boolean) {\n    this._monitorResize = value;\n    if (this._monitorResize) {\n      this._subscribeToResize();\n    } else {\n      this._resizeSubscription.unsubscribe();\n    }\n  }\n  private _monitorResize = false;\n\n  /** The shared ResizeObserver. */\n  private _resizeObserver = inject(SharedResizeObserver);\n\n  /** The Angular zone. */\n  private _ngZone = inject(NgZone);\n\n  /** The parent form-field. */\n  private _parent = inject(FLOATING_LABEL_PARENT);\n\n  /** The current resize event subscription. */\n  private _resizeSubscription = new Subscription();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {}\n\n  ngOnDestroy() {\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Gets the width of the label. Used for the outline notch. */\n  getWidth(): number {\n    return estimateScrollWidth(this._elementRef.nativeElement);\n  }\n\n  /** Gets the HTML element for the floating label. */\n  get element(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Handles resize events from the ResizeObserver. */\n  private _handleResize() {\n    // In the case where the label grows in size, the following sequence of events occurs:\n    // 1. The label grows by 1px triggering the ResizeObserver\n    // 2. The notch is expanded to accommodate the entire label\n    // 3. The label expands to its full width, triggering the ResizeObserver again\n    //\n    // This is expected, but If we allow this to all happen within the same macro task it causes an\n    // error: `ResizeObserver loop limit exceeded`. Therefore we push the notch resize out until\n    // the next macro task.\n    setTimeout(() => this._parent._handleLabelResized());\n  }\n\n  /** Subscribes to resize events. */\n  private _subscribeToResize() {\n    this._resizeSubscription.unsubscribe();\n    this._ngZone.runOutsideAngular(() => {\n      this._resizeSubscription = this._resizeObserver\n        .observe(this._elementRef.nativeElement, {box: 'border-box'})\n        .subscribe(() => this._handleResize());\n    });\n  }\n}\n\n/**\n * Estimates the scroll width of an element.\n * via https://github.com/material-components/material-components-web/blob/c0a11ef0d000a098fd0c372be8f12d6a99302855/packages/mdc-dom/ponyfill.ts\n */\nfunction estimateScrollWidth(element: HTMLElement): number {\n  // Check the offsetParent. If the element inherits display: none from any\n  // parent, the offsetParent property will be null (see\n  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n  // This check ensures we only clone the node when necessary.\n  const htmlEl = element as HTMLElement;\n  if (htmlEl.offsetParent !== null) {\n    return htmlEl.scrollWidth;\n  }\n\n  const clone = htmlEl.cloneNode(true) as HTMLElement;\n  clone.style.setProperty('position', 'absolute');\n  clone.style.setProperty('transform', 'translate(-9999px, -9999px)');\n  document.documentElement.appendChild(clone);\n  const scrollWidth = clone.scrollWidth;\n  clone.remove();\n  return scrollWidth;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone, OnDestroy} from '@angular/core';\n\n/** Class added when the line ripple is active. */\nconst ACTIVATE_CLASS = 'mdc-line-ripple--active';\n\n/** Class added when the line ripple is being deactivated. */\nconst DEACTIVATING_CLASS = 'mdc-line-ripple--deactivating';\n\n/**\n * Internal directive that creates an instance of the MDC line-ripple component. Using a\n * directive allows us to conditionally render a line-ripple in the template without having\n * to manually create and destroy the `MDCLineRipple` component whenever the condition changes.\n *\n * The directive sets up the styles for the line-ripple and provides an API for activating\n * and deactivating the line-ripple.\n */\n@Directive({\n  selector: 'div[matFormFieldLineRipple]',\n  host: {\n    'class': 'mdc-line-ripple',\n  },\n})\nexport class MatFormFieldLineRipple implements OnDestroy {\n  constructor(private _elementRef: ElementRef<HTMLElement>, ngZone: NgZone) {\n    ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('transitionend', this._handleTransitionEnd);\n    });\n  }\n\n  activate() {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(DEACTIVATING_CLASS);\n    classList.add(ACTIVATE_CLASS);\n  }\n\n  deactivate() {\n    this._elementRef.nativeElement.classList.add(DEACTIVATING_CLASS);\n  }\n\n  private _handleTransitionEnd = (event: TransitionEvent) => {\n    const classList = this._elementRef.nativeElement.classList;\n    const isDeactivating = classList.contains(DEACTIVATING_CLASS);\n\n    if (event.propertyName === 'opacity' && isDeactivating) {\n      classList.remove(ACTIVATE_CLASS, DEACTIVATING_CLASS);\n    }\n  };\n\n  ngOnDestroy() {\n    this._elementRef.nativeElement.removeEventListener('transitionend', this._handleTransitionEnd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\n\n/**\n * Internal component that creates an instance of the MDC notched-outline component.\n *\n * The component sets up the HTML structure and styles for the notched-outline. It provides\n * inputs to toggle the notch state and width.\n */\n@Component({\n  selector: 'div[matFormFieldNotchedOutline]',\n  templateUrl: './notched-outline.html',\n  host: {\n    'class': 'mdc-notched-outline',\n    // Besides updating the notch state through the MDC component, we toggle this class through\n    // a host binding in order to ensure that the notched-outline renders correctly on the server.\n    '[class.mdc-notched-outline--notched]': 'open',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatFormFieldNotchedOutline implements AfterViewInit {\n  /** Whether the notch should be opened. */\n  @Input('matFormFieldNotchedOutlineOpen') open: boolean = false;\n\n  @ViewChild('notch') _notch: ElementRef;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {}\n\n  ngAfterViewInit(): void {\n    const label = this._elementRef.nativeElement.querySelector<HTMLElement>('.mdc-floating-label');\n    if (label) {\n      this._elementRef.nativeElement.classList.add('mdc-notched-outline--upgraded');\n\n      if (typeof requestAnimationFrame === 'function') {\n        label.style.transitionDuration = '0s';\n        this._ngZone.runOutsideAngular(() => {\n          requestAnimationFrame(() => (label.style.transitionDuration = ''));\n        });\n      }\n    } else {\n      this._elementRef.nativeElement.classList.add('mdc-notched-outline--no-label');\n    }\n  }\n\n  _setNotchWidth(labelWidth: number) {\n    if (!this.open || !labelWidth) {\n      this._notch.nativeElement.style.width = '';\n    } else {\n      const NOTCH_ELEMENT_PADDING = 8;\n      const NOTCH_ELEMENT_BORDER = 1;\n      this._notch.nativeElement.style.width = `calc(${labelWidth}px * var(--mat-mdc-form-field-floating-label-scale, 0.75) + ${\n        NOTCH_ELEMENT_PADDING + NOTCH_ELEMENT_BORDER\n      }px)`;\n    }\n  }\n}\n","<div class=\"mdc-notched-outline__leading\"></div>\n<div class=\"mdc-notched-outline__notch\" #notch>\n  <ng-content></ng-content>\n</div>\n<div class=\"mdc-notched-outline__trailing\"></div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_PREFIX = new InjectionToken<MatPrefix>('MatPrefix');\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix], [matIconPrefix], [matTextPrefix]',\n  providers: [{provide: MAT_PREFIX, useExisting: MatPrefix}],\n})\nexport class MatPrefix {\n  @Input('matTextPrefix')\n  set _isTextSelector(value: '') {\n    this._isText = true;\n  }\n\n  _isText = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({opacity: 1, transform: 'translateY(0%)'})),\n    transition('void => enter', [\n      style({opacity: 0, transform: 'translateY(-5px)'}),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {AbstractControlDirective} from '@angular/forms';\nimport {ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MAT_ERROR, MatError} from './directives/error';\nimport {\n  FLOATING_LABEL_PARENT,\n  FloatingLabelParent,\n  MatFormFieldFloatingLabel,\n} from './directives/floating-label';\nimport {MatHint} from './directives/hint';\nimport {MatLabel} from './directives/label';\nimport {MatFormFieldLineRipple} from './directives/line-ripple';\nimport {MatFormFieldNotchedOutline} from './directives/notched-outline';\nimport {MAT_PREFIX, MatPrefix} from './directives/prefix';\nimport {MAT_SUFFIX, MatSuffix} from './directives/suffix';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n} from './form-field-errors';\nimport {DOCUMENT} from '@angular/common';\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'fill' | 'outline';\n\n/** Behaviors for how the subscript height is set. */\nexport type SubscriptSizing = 'fixed' | 'dynamic';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  /** Default form field appearance style. */\n  appearance?: MatFormFieldAppearance;\n  /** Default color of the form field. */\n  color?: ThemePalette;\n  /** Whether the required marker should be hidden by default. */\n  hideRequiredMarker?: boolean;\n  /**\n   * Whether the label for form fields should by default float `always`,\n   * `never`, or `auto` (only when necessary).\n   */\n  floatLabel?: FloatLabelType;\n  /** Whether the form field should reserve space for one line by default. */\n  subscriptSizing?: SubscriptSizing;\n}\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nexport const MAT_FORM_FIELD = new InjectionToken<MatFormField>('MatFormField');\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken<MatFormFieldDefaultOptions>(\n  'MAT_FORM_FIELD_DEFAULT_OPTIONS',\n);\n\nlet nextUniqueId = 0;\n\n/** Default appearance used by the form field. */\nconst DEFAULT_APPEARANCE: MatFormFieldAppearance = 'fill';\n\n/**\n * Whether the label for form fields should by default float `always`,\n * `never`, or `auto`.\n */\nconst DEFAULT_FLOAT_LABEL: FloatLabelType = 'auto';\n\n/** Default way that the subscript element height is set. */\nconst DEFAULT_SUBSCRIPT_SIZING: SubscriptSizing = 'fixed';\n\n/**\n * Default transform for docked floating labels in a MDC text-field. This value has been\n * extracted from the MDC text-field styles because we programmatically modify the docked\n * label transform, but do not want to accidentally discard the default label transform.\n */\nconst FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM = `translateY(-50%)`;\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: './form-field.html',\n  styleUrls: ['./form-field.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-mdc-form-field',\n    '[class.mat-mdc-form-field-label-always-float]': '_shouldAlwaysFloat()',\n    '[class.mat-mdc-form-field-has-icon-prefix]': '_hasIconPrefix',\n    '[class.mat-mdc-form-field-has-icon-suffix]': '_hasIconSuffix',\n\n    // Note that these classes reuse the same names as the non-MDC version, because they can be\n    // considered a public API since custom form controls may use them to style themselves.\n    // See https://github.com/angular/components/pull/20502#discussion_r486124901.\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-form-field-no-animations]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-hide-placeholder]': '_hasFloatingLabel() && !_shouldLabelFloat()',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color !== \"accent\" && color !== \"warn\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MAT_FORM_FIELD, useExisting: MatFormField},\n    {provide: FLOATING_LABEL_PARENT, useExisting: MatFormField},\n  ],\n})\nexport class MatFormField\n  implements FloatingLabelParent, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy\n{\n  @ViewChild('textField') _textField: ElementRef<HTMLElement>;\n  @ViewChild('iconPrefixContainer') _iconPrefixContainer: ElementRef<HTMLElement>;\n  @ViewChild('textPrefixContainer') _textPrefixContainer: ElementRef<HTMLElement>;\n  @ViewChild(MatFormFieldFloatingLabel) _floatingLabel: MatFormFieldFloatingLabel | undefined;\n  @ViewChild(MatFormFieldNotchedOutline) _notchedOutline: MatFormFieldNotchedOutline | undefined;\n  @ViewChild(MatFormFieldLineRipple) _lineRipple: MatFormFieldLineRipple | undefined;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel | undefined;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel | undefined;\n  @ContentChild(MatFormFieldControl) _formFieldControl: MatFormFieldControl<any>;\n  @ContentChildren(MAT_PREFIX, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MAT_SUFFIX, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n  @ContentChildren(MAT_ERROR, {descendants: true}) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint, {descendants: true}) _hintChildren: QueryList<MatHint>;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean {\n    return this._hideRequiredMarker;\n  }\n  set hideRequiredMarker(value: BooleanInput) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker = false;\n\n  /** The color palette for the form field. */\n  @Input() color: ThemePalette = 'primary';\n\n  /** Whether the label should always float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel || this._defaults?.floatLabel || DEFAULT_FLOAT_LABEL;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value;\n      // For backwards compatibility. Custom form field controls or directives might set\n      // the \"floatLabel\" input and expect the form field view to be updated automatically.\n      // e.g. autocomplete trigger. Ideally we'd get rid of this and the consumers would just\n      // emit the \"stateChanges\" observable. TODO(devversion): consider removing.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** The form field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance;\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    const newAppearance = value || this._defaults?.appearance || DEFAULT_APPEARANCE;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (newAppearance !== 'fill' && newAppearance !== 'outline') {\n        throw new Error(\n          `MatFormField: Invalid appearance \"${newAppearance}\", valid values are \"fill\" or \"outline\".`,\n        );\n      }\n    }\n    this._appearance = newAppearance;\n    if (this._appearance === 'outline' && this._appearance !== oldValue) {\n      // If the appearance has been switched to `outline`, the label offset needs to be updated.\n      // The update can happen once the view has been re-checked, but not immediately because\n      // the view has not been updated and the notched-outline floating label is not present.\n      this._needsOutlineLabelOffsetUpdateOnStable = true;\n    }\n  }\n  private _appearance: MatFormFieldAppearance = DEFAULT_APPEARANCE;\n\n  /**\n   * Whether the form field should reserve space for one line of hint/error text (default)\n   * or to have the spacing grow from 0px as needed based on the size of the hint/error content.\n   * Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.\n   */\n  @Input()\n  get subscriptSizing(): SubscriptSizing {\n    return this._subscriptSizing || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n  }\n  set subscriptSizing(value: SubscriptSizing) {\n    this._subscriptSizing = value || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n  }\n  private _subscriptSizing: SubscriptSizing | null = null;\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string {\n    return this._hintLabel;\n  }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  _hasIconPrefix = false;\n  _hasTextPrefix = false;\n  _hasIconSuffix = false;\n  _hasTextSuffix = false;\n\n  // Unique id for the internal form field label.\n  readonly _labelId = `mat-mdc-form-field-label-${nextUniqueId++}`;\n\n  // Unique id for the hint label.\n  readonly _hintLabelId = `mat-mdc-hint-${nextUniqueId++}`;\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState = '';\n\n  /** Gets the current form field control */\n  get _control(): MatFormFieldControl<any> {\n    return this._explicitFormFieldControl || this._formFieldControl;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n\n  private _destroyed = new Subject<void>();\n  private _isFocused: boolean | null = null;\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n  private _needsOutlineLabelOffsetUpdateOnStable = false;\n\n  constructor(\n    public _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    private _dir: Directionality,\n    private _platform: Platform,\n    @Optional()\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n    private _defaults?: MatFormFieldDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    /**\n     * @deprecated not needed, to be removed.\n     * @breaking-change 17.0.0 remove this param\n     */\n    @Inject(DOCUMENT) _unusedDocument?: any,\n  ) {\n    if (_defaults) {\n      if (_defaults.appearance) {\n        this.appearance = _defaults.appearance;\n      }\n      this._hideRequiredMarker = Boolean(_defaults?.hideRequiredMarker);\n      if (_defaults.color) {\n        this.color = _defaults.color;\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Initial focus state sync. This happens rarely, but we want to account for\n    // it in case the form field control has \"focused\" set to true on init.\n    this._updateFocusState();\n    // Enable animations now. This ensures we don't animate on initial render.\n    this._subscriptAnimationState = 'enter';\n    // Because the above changes a value used in the template after it was checked, we need\n    // to trigger CD or the change might not be reflected if there is no other CD scheduled.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngAfterContentInit() {\n    this._assertFormFieldControl();\n    this._initializeControl();\n    this._initializeSubscript();\n    this._initializePrefixAndSuffix();\n    this._initializeOutlineLabelOffsetSubscriptions();\n  }\n\n  ngAfterContentChecked() {\n    this._assertFormFieldControl();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n  getLabelId(): string | null {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form field\n   * should be positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._textField || this._elementRef;\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    // This is for backwards compatibility only. Consumers of the form field might use\n    // this method. e.g. the autocomplete trigger. This method has been added to the non-MDC\n    // form field because setting \"floatLabel\" to \"always\" caused the label to float without\n    // animation. This is different in MDC where the label always animates, so this method\n    // is no longer necessary. There doesn't seem any benefit in adding logic to allow changing\n    // the floating label state without animations. The non-MDC implementation was inconsistent\n    // because it always animates if \"floatLabel\" is set away from \"always\".\n    // TODO(devversion): consider removing this method when releasing the MDC form field.\n    if (this._hasFloatingLabel()) {\n      this.floatLabel = 'always';\n    }\n  }\n\n  /** Initializes the registered form field control. */\n  private _initializeControl() {\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(\n        `mat-mdc-form-field-type-${control.controlType}`,\n      );\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.subscribe(() => {\n      this._updateFocusState();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n\n  private _checkPrefixAndSuffixTypes() {\n    this._hasIconPrefix = !!this._prefixChildren.find(p => !p._isText);\n    this._hasTextPrefix = !!this._prefixChildren.find(p => p._isText);\n    this._hasIconSuffix = !!this._suffixChildren.find(s => !s._isText);\n    this._hasTextSuffix = !!this._suffixChildren.find(s => s._isText);\n  }\n\n  /** Initializes the prefix and suffix containers. */\n  private _initializePrefixAndSuffix() {\n    this._checkPrefixAndSuffixTypes();\n    // Mark the form field as dirty whenever the prefix or suffix children change. This\n    // is necessary because we conditionally display the prefix/suffix containers based\n    // on whether there is projected content.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._checkPrefixAndSuffixTypes();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Initializes the subscript by validating hints and synchronizing \"aria-describedby\" ids\n   * with the custom form field control. Also subscribes to hint and error changes in order\n   * to be able to validate and synchronize ids on change.\n   */\n  private _initializeSubscript() {\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Initial mat-hint validation and subscript describedByIds sync.\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  private _assertFormFieldControl() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  private _updateFocusState() {\n    // Usually the MDC foundation would call \"activateFocus\" and \"deactivateFocus\" whenever\n    // certain DOM events are emitted. This is not possible in our implementation of the\n    // form field because we support abstract form field controls which are not necessarily\n    // of type input, nor do we have a reference to a native form field control element. Instead\n    // we handle the focus by checking if the abstract form field control focused state changes.\n    if (this._control.focused && !this._isFocused) {\n      this._isFocused = true;\n      this._lineRipple?.activate();\n    } else if (!this._control.focused && (this._isFocused || this._isFocused === null)) {\n      this._isFocused = false;\n      this._lineRipple?.deactivate();\n    }\n\n    this._textField?.nativeElement.classList.toggle(\n      'mdc-text-field--focused',\n      this._control.focused,\n    );\n  }\n\n  /**\n   * The floating label in the docked state needs to account for prefixes. The horizontal offset\n   * is calculated whenever the appearance changes to `outline`, the prefixes change, or when the\n   * form field is added to the DOM. This method sets up all subscriptions which are needed to\n   * trigger the label offset update. In general, we want to avoid performing measurements often,\n   * so we rely on the `NgZone` as indicator when the offset should be recalculated, instead of\n   * checking every change detection cycle.\n   */\n  private _initializeOutlineLabelOffsetSubscriptions() {\n    // Whenever the prefix changes, schedule an update of the label offset.\n    this._prefixChildren.changes.subscribe(\n      () => (this._needsOutlineLabelOffsetUpdateOnStable = true),\n    );\n\n    // Note that we have to run outside of the `NgZone` explicitly, in order to avoid\n    // throwing users into an infinite loop if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._needsOutlineLabelOffsetUpdateOnStable) {\n          this._needsOutlineLabelOffsetUpdateOnStable = false;\n          this._updateOutlineLabelOffset();\n        }\n      });\n    });\n\n    this._dir.change\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => (this._needsOutlineLabelOffsetUpdateOnStable = true));\n  }\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat() {\n    return this.floatLabel === 'always';\n  }\n\n  _hasOutline() {\n    return this.appearance === 'outline';\n  }\n\n  /**\n   * Whether the label should display in the infix. Labels in the outline appearance are\n   * displayed as part of the notched-outline and are horizontally offset to account for\n   * form field prefix content. This won't work in server side rendering since we cannot\n   * measure the width of the prefix container. To make the docked label appear as if the\n   * right offset has been calculated, we forcibly render the label inside the infix. Since\n   * the label is part of the infix, the label cannot overflow the prefix content.\n   */\n  _forceDisplayInfixLabel() {\n    return !this._platform.isBrowser && this._prefixChildren.length && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return !!this._labelChildNonStatic || !!this._labelChildStatic;\n  }\n\n  _shouldLabelFloat() {\n    return this._control.shouldLabelFloat || this._shouldAlwaysFloat();\n  }\n\n  /**\n   * Determines whether a class from the AbstractControlDirective\n   * should be forwarded to the host element.\n   */\n  _shouldForward(prop: keyof AbstractControlDirective): boolean {\n    const control = this._control ? this._control.ngControl : null;\n    return control && control[prop];\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n      ? 'error'\n      : 'hint';\n  }\n\n  /** Handle label resize events. */\n  _handleLabelResized() {\n    this._refreshOutlineNotchWidth();\n  }\n\n  /** Refreshes the width of the outline-notch, if present. */\n  _refreshOutlineNotchWidth() {\n    if (!this._hasOutline() || !this._floatingLabel || !this._shouldLabelFloat()) {\n      this._notchedOutline?._setNotchWidth(0);\n    } else {\n      this._notchedOutline?._setNotchWidth(this._floatingLabel.getWidth());\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each \"mat-hint\" alignment specified. The hint\n   * label specified set through the input is being considered as \"start\" aligned.\n   *\n   * This method is a noop if Angular runs in production mode.\n   */\n  private _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n      if (\n        this._control.userAriaDescribedBy &&\n        typeof this._control.userAriaDescribedBy === 'string'\n      ) {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'start')\n          : null;\n        const endHint = this._hintChildren\n          ? this._hintChildren.find(hint => hint.align === 'end')\n          : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /**\n   * Updates the horizontal offset of the label in the outline appearance. In the outline\n   * appearance, the notched-outline and label are not relative to the infix container because\n   * the outline intends to surround prefixes, suffixes and the infix. This means that the\n   * floating label by default overlaps prefixes in the docked state. To avoid this, we need to\n   * horizontally offset the label by the width of the prefix container. The MDC text-field does\n   * not need to do this because they use a fixed width for prefixes. Hence, they can simply\n   * incorporate the horizontal offset into their default text-field styles.\n   */\n  private _updateOutlineLabelOffset() {\n    if (!this._platform.isBrowser || !this._hasOutline() || !this._floatingLabel) {\n      return;\n    }\n    const floatingLabel = this._floatingLabel.element;\n    // If no prefix is displayed, reset the outline label offset from potential\n    // previous label offset updates.\n    if (!(this._iconPrefixContainer || this._textPrefixContainer)) {\n      floatingLabel.style.transform = '';\n      return;\n    }\n    // If the form field is not attached to the DOM yet (e.g. in a tab), we defer\n    // the label offset update until the zone stabilizes.\n    if (!this._isAttachedToDom()) {\n      this._needsOutlineLabelOffsetUpdateOnStable = true;\n      return;\n    }\n    const iconPrefixContainer = this._iconPrefixContainer?.nativeElement;\n    const textPrefixContainer = this._textPrefixContainer?.nativeElement;\n    const iconPrefixContainerWidth = iconPrefixContainer?.getBoundingClientRect().width ?? 0;\n    const textPrefixContainerWidth = textPrefixContainer?.getBoundingClientRect().width ?? 0;\n    // If the directionality is RTL, the x-axis transform needs to be inverted. This\n    // is because `transformX` does not change based on the page directionality.\n    const negate = this._dir.value === 'rtl' ? '-1' : '1';\n    const prefixWidth = `${iconPrefixContainerWidth + textPrefixContainerWidth}px`;\n    const labelOffset = `var(--mat-mdc-form-field-label-offset-x, 0px)`;\n    const labelHorizontalOffset = `calc(${negate} * (${prefixWidth} + ${labelOffset}))`;\n\n    // Update the translateX of the floating label to account for the prefix container,\n    // but allow the CSS to override this setting via a CSS variable when the label is\n    // floating.\n    floatingLabel.style.transform = `var(\n        --mat-mdc-form-field-label-transform,\n        ${FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM} translateX(${labelHorizontalOffset})\n    )`;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDom(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n}\n","<ng-template #labelTemplate>\n  <!--\n    MDC recommends that the text-field is a `<label>` element. This rather complicates the\n    setup because it would require every form-field control to explicitly set `aria-labelledby`.\n    This is because the `<label>` itself contains more than the actual label (e.g. prefix, suffix\n    or other projected content), and screen readers could potentially read out undesired content.\n    Excluding elements from being printed out requires them to be marked with `aria-hidden`, or\n    the form control is set to a scoped element for the label (using `aria-labelledby`). Both of\n    these options seem to complicate the setup because we know exactly what content is rendered\n    as part of the label, and we don't want to spend resources on walking through projected content\n    to set `aria-hidden`. Nor do we want to set `aria-labelledby` on every form control if we could\n    simply link the label to the control using the label `for` attribute.\n  -->\n  @if (_hasFloatingLabel()) {\n    <label matFormFieldFloatingLabel\n           [floating]=\"_shouldLabelFloat()\"\n           [monitorResize]=\"_hasOutline()\"\n           [id]=\"_labelId\"\n           [attr.for]=\"_control.id\">\n      <ng-content select=\"mat-label\"></ng-content>\n      <!--\n        We set the required marker as a separate element, in order to make it easier to target if\n        apps want to override it and to be able to set `aria-hidden` so that screen readers don't\n        pick it up.\n       -->\n       @if (!hideRequiredMarker && _control.required) {\n         <span\n           aria-hidden=\"true\"\n           class=\"mat-mdc-form-field-required-marker mdc-floating-label--required\"></span>\n       }\n    </label>\n  }\n</ng-template>\n\n<div class=\"mat-mdc-text-field-wrapper mdc-text-field\" #textField\n     [class.mdc-text-field--filled]=\"!_hasOutline()\"\n     [class.mdc-text-field--outlined]=\"_hasOutline()\"\n     [class.mdc-text-field--no-label]=\"!_hasFloatingLabel()\"\n     [class.mdc-text-field--disabled]=\"_control.disabled\"\n     [class.mdc-text-field--invalid]=\"_control.errorState\"\n     (click)=\"_control.onContainerClick($event)\">\n  @if (!_hasOutline() && !_control.disabled) {\n    <div class=\"mat-mdc-form-field-focus-overlay\"></div>\n  }\n  <div class=\"mat-mdc-form-field-flex\">\n    @if (_hasOutline()) {\n      <div matFormFieldNotchedOutline [matFormFieldNotchedOutlineOpen]=\"_shouldLabelFloat()\">\n        @if (!_forceDisplayInfixLabel()) {\n          <ng-template [ngTemplateOutlet]=\"labelTemplate\"></ng-template>\n        }\n      </div>\n    }\n\n    @if (_hasIconPrefix) {\n      <div class=\"mat-mdc-form-field-icon-prefix\" #iconPrefixContainer>\n        <ng-content select=\"[matPrefix], [matIconPrefix]\"></ng-content>\n      </div>\n    }\n\n    @if (_hasTextPrefix) {\n      <div class=\"mat-mdc-form-field-text-prefix\" #textPrefixContainer>\n        <ng-content select=\"[matTextPrefix]\"></ng-content>\n      </div>\n    }\n\n    <div class=\"mat-mdc-form-field-infix\">\n      @if (!_hasOutline() || _forceDisplayInfixLabel()) {\n        <ng-template [ngTemplateOutlet]=\"labelTemplate\"></ng-template>\n      }\n\n      <ng-content></ng-content>\n    </div>\n\n    @if (_hasTextSuffix) {\n      <div class=\"mat-mdc-form-field-text-suffix\">\n        <ng-content select=\"[matTextSuffix]\"></ng-content>\n      </div>\n    }\n\n    @if (_hasIconSuffix) {\n      <div class=\"mat-mdc-form-field-icon-suffix\">\n        <ng-content select=\"[matSuffix], [matIconSuffix]\"></ng-content>\n      </div>\n    }\n  </div>\n\n  @if (!_hasOutline()) {\n    <div matFormFieldLineRipple></div>\n  }\n</div>\n\n<div class=\"mat-mdc-form-field-subscript-wrapper mat-mdc-form-field-bottom-align\"\n     [class.mat-mdc-form-field-subscript-dynamic-size]=\"subscriptSizing === 'dynamic'\">\n\n  @switch (_getDisplayedMessages()) {\n    @case ('error') {\n      <div class=\"mat-mdc-form-field-error-wrapper\"\n           [@transitionMessages]=\"_subscriptAnimationState\">\n        <ng-content select=\"mat-error, [matError]\"></ng-content>\n      </div>\n    }\n\n    @case ('hint') {\n      <div class=\"mat-mdc-form-field-hint-wrapper\" [@transitionMessages]=\"_subscriptAnimationState\">\n        @if (hintLabel) {\n          <mat-hint [id]=\"_hintLabelId\">{{hintLabel}}</mat-hint>\n        }\n        <ng-content select=\"mat-hint:not([align='end'])\"></ng-content>\n        <div class=\"mat-mdc-form-field-hint-spacer\"></div>\n        <ng-content select=\"mat-hint[align='end']\"></ng-content>\n      </div>\n    }\n  }\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './directives/error';\nimport {MatFormFieldFloatingLabel} from './directives/floating-label';\nimport {MatHint} from './directives/hint';\nimport {MatLabel} from './directives/label';\nimport {MatFormFieldLineRipple} from './directives/line-ripple';\nimport {MatFormFieldNotchedOutline} from './directives/notched-outline';\nimport {MatPrefix} from './directives/prefix';\nimport {MatSuffix} from './directives/suffix';\nimport {MatFormField} from './form-field';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, ObserversModule],\n  exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n  declarations: [\n    MatFormField,\n    MatLabel,\n    MatError,\n    MatHint,\n    MatPrefix,\n    MatSuffix,\n    MatFormFieldFloatingLabel,\n    MatFormFieldNotchedOutline,\n    MatFormFieldLineRipple,\n  ],\n})\nexport class MatFormFieldModule {}\n"],"names":["AsFormControlPipe","_logger","constructor","transform","value","_valueHash","isBlank","FormControl","this","warn","LOGGER","pure","CastPipesModule","coerceBooleanProperty","mixinErrorState","base","updateErrorState","oldState","errorState","parent","_parentFormGroup","_parentForm","matcher","errorStateMatcher","_defaultErrorStateMatcher","control","ngControl","newState","isErrorState","stateChanges","next","args","super","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","factory","ɵfac","ErrorStateMatcher","touched","providedIn","nextUniqueId","MatHint","align","id","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","MatLabel","MAT_SUFFIX","InjectionToken","MatSuffix","_isText","_isTextSelector","inputs","features","provide","useExisting","MatFormFieldControl","MAT_ERROR","MatError","ariaLive","elementRef","nativeElement","setAttribute","i0","SingleBoxSharedResizeObserver","_box","_destroyed","Subject","_resizeSubject","_elementObservables","Map","ResizeObserver","_resizeObserver","entries","observe","target","has","set","Observable","observer","subscription","subscribe","box","unobserve","unsubscribe","delete","pipe","filter","some","entry","shareReplay","bufferSize","refCount","takeUntil","get","destroy","complete","clear","SharedResizeObserver","_observers","_ngZone","inject","NgZone","ngOnDestroy","options","FLOATING_LABEL_PARENT","MatFormFieldFloatingLabel","floating","_floating","monitorResize","_handleResize","_monitorResize","_subscribeToResize","_resizeSubscription","_elementRef","_parent","Subscription","getWidth","element","htmlEl","offsetParent","scrollWidth","clone","cloneNode","style","setProperty","document","documentElement","appendChild","remove","estimateScrollWidth","setTimeout","_handleLabelResized","runOutsideAngular","ACTIVATE_CLASS","DEACTIVATING_CLASS","MatFormFieldLineRipple","ngZone","_handleTransitionEnd","event","classList","isDeactivating","contains","propertyName","addEventListener","activate","add","deactivate","removeEventListener","_c0","_c1","_c2","MatFormFieldNotchedOutline","open","ngAfterViewInit","label","querySelector","requestAnimationFrame","transitionDuration","_setNotchWidth","labelWidth","NOTCH_ELEMENT_PADDING","NOTCH_ELEMENT_BORDER","_notch","width","viewQuery","MAT_PREFIX","MatPrefix","matFormFieldAnimations","transitionMessages","trigger","state","opacity","transition","animate","MatFormField_ng_template_0_Conditional_0_Conditional_2_Template","ctx_r13","_hasOutline","_labelId","MatFormField_Conditional_6_Template","MatFormField_Conditional_10_ng_template_0_Template","MatFormField_Conditional_10_Template","MatFormField_Conditional_12_Template","MatFormField_Conditional_13_Template","MatFormField_Conditional_14_Template","MatFormField_Case_16_Template","ctx_r11","MatFormField_Case_17_Conditional_1_Template","ctx_r12","MAT_FORM_FIELD","MAT_FORM_FIELD_DEFAULT_OPTIONS","DEFAULT_APPEARANCE","DEFAULT_SUBSCRIPT_SIZING","MatFormField","hideRequiredMarker","_hideRequiredMarker","floatLabel","_floatLabel","_defaults","_changeDetectorRef","markForCheck","appearance","_appearance","oldValue","newAppearance","_needsOutlineLabelOffsetUpdateOnStable","subscriptSizing","_subscriptSizing","hintLabel","_hintLabel","_processHints","_control","_explicitFormFieldControl","_formFieldControl","_dir","_platform","_animationMode","_unusedDocument","color","_hasIconPrefix","_hasTextPrefix","_hasIconSuffix","_hasTextSuffix","_hintLabelId","_subscriptAnimationState","_isFocused","Boolean","_updateFocusState","detectChanges","ngAfterContentInit","_assertFormFieldControl","_initializeControl","_initializeSubscript","_initializePrefixAndSuffix","_initializeOutlineLabelOffsetSubscriptions","ngAfterContentChecked","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_textField","_animateAndLockLabel","controlType","_syncDescribedByIds","valueChanges","_checkPrefixAndSuffixTypes","_prefixChildren","find","p","_suffixChildren","s","merge","changes","_hintChildren","_errorChildren","_validateHints","focused","_lineRipple","toggle","onStable","_updateOutlineLabelOffset","change","_shouldAlwaysFloat","_forceDisplayInfixLabel","isBrowser","length","_shouldLabelFloat","_labelChildNonStatic","_labelChildStatic","shouldLabelFloat","_shouldForward","prop","_getDisplayedMessages","_refreshOutlineNotchWidth","_floatingLabel","_notchedOutline","ids","userAriaDescribedBy","push","split","startHint","hint","endHint","map","error","setDescribedByIds","floatingLabel","_iconPrefixContainer","_textPrefixContainer","_isAttachedToDom","iconPrefixContainer","textPrefixContainer","iconPrefixContainerWidth","getBoundingClientRect","textPrefixContainerWidth","labelHorizontalOffset","getRootNode","rootNode","i1","i2","ANIMATION_MODULE_TYPE","DOCUMENT","contentQueries","dirIndex","_t","ngContentSelectors","_c4","decls","vars","consts","template","onContainerClick","$event","MatFormField_Conditional_7_Template","MatFormField_Conditional_8_Template","i3","i4","i5","i6","i7","styles","encapsulation","data","animation","changeDetection","MatFormFieldModule","MatCommonModule","CommonModule","ObserversModule"],"sourceRoot":""}