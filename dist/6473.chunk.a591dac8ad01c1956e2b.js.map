{"version":3,"file":"6473.chunk.a591dac8ad01c1956e2b.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/../css-components/src/misc/utils.ts","webpack://ng-universal-demo/../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/pages/+layout/formPreview/formPreview.component.html","webpack://ng-universal-demo/./app/pages/+layout/formPreview/formPreview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+layout/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+layout/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+layout/layout.routes.ts","webpack://ng-universal-demo/./app/pages/+layout/layout.module.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleItemsProvider/defaultDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../material-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t4999,\n\t\t4999\n\t],\n\t\"./gridPanel/type\": [\n\t\t28229,\n\t\t8229\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t24229,\n\t\t4229\n\t],\n\t\"./htmlBlock/type\": [\n\t\t57195,\n\t\t7195\n\t],\n\t\"./ifBlock/type\": [\n\t\t23234,\n\t\t3234\n\t],\n\t\"./negation/type\": [\n\t\t82937,\n\t\t2937\n\t],\n\t\"./rest/type\": [\n\t\t97496,\n\t\t7496\n\t],\n\t\"./sampleChange/type\": [\n\t\t37243,\n\t\t7243\n\t],\n\t\"./sampleSource/type\": [\n\t\t36736,\n\t\t6736\n\t],\n\t\"./stackPanel/type\": [\n\t\t54335,\n\t\t4335\n\t],\n\t\"./templateBlock/type\": [\n\t\t14243,\n\t\t4243\n\t],\n\t\"./textBlock/type\": [\n\t\t88127,\n\t\t8127\n\t],\n\t\"./toggleButton/type\": [\n\t\t77964,\n\t\t7964\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 78391;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t1934,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/css-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('@anglr/dynamic/css-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout css subpackage\n */\nexport function provideCssLayout(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor css subpackage\n */\nexport function provideCssLayoutEditor(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('css-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor css subpackage\n */\nexport function provideCssLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations css subpackage\n */\nexport function provideCssLayoutRelations(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}","import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_formGroup\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button class=\"button\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\n\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'formPreview.component.html',\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _injector: Injector,\n                private _formComponentControlBuilder: FormComponentControlBuilder,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(async ({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n                this._formGroup = await this._formComponentControlBuilder.build(this._metadata);\n        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n                this._changeDetector.detectChanges();\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/layout', 'form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Form submission\n     */\n    protected _submit(): void\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/layout/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","import {FormPreviewComponent} from './formPreview/formPreview.component';\nimport {PreviewComponent} from './preview/preview.component';\n\nexport const components =\n[\n    PreviewComponent,\n    FormPreviewComponent,\n];","import {FactoryProvider, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {NgSelectModule} from '@anglr/select';\nimport {DynamicLayoutModule, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {provideCssLayout} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayout} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayout} from '@anglr/dynamic/handlebars-components';\nimport {provideFormLayout} from '@anglr/dynamic/form';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {components} from './layout.routes';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout preview samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NgSelectModule,\n        LayoutComponentRendererSADirective,\n        DynamicLayoutModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideCssLayout(),\n        provideTinyMceLayout(),\n        provideHandlebarsLayout(),\n        provideFormLayout(),\n    ],\n})\n@ModuleRoutes(components)\nexport class LayoutModule\n{\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/form/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('@anglr/dynamic/form/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        this._items.push(iteratorItem);\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected _extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this._extractor, this._logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default package layout components provider\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in module items\n */\n@Injectable()\nexport class DefaultDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'basic-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/basic-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            case 'material-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n        \n                    const dynamicItemModule = await import(`@anglr/dynamic/material-components/dynamicItems/${source.name}/type`);\n        \n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger?: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger?.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger?.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await asyncDynamicModule;\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await fn(module, this._logger));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}",null,"var map = {\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./checkbox/type\": [\n\t\t7227,\n\t\t7227\n\t],\n\t\"./datepicker/type\": [\n\t\t2229,\n\t\t4279,\n\t\t9101,\n\t\t4262,\n\t\t6038,\n\t\t2229\n\t],\n\t\"./numberField/type\": [\n\t\t39310,\n\t\t4279,\n\t\t4262,\n\t\t9310\n\t],\n\t\"./period/type\": [\n\t\t40059,\n\t\t4279,\n\t\t4262,\n\t\t59\n\t],\n\t\"./radio/type\": [\n\t\t58037,\n\t\t8037\n\t],\n\t\"./select/type\": [\n\t\t68235,\n\t\t4279,\n\t\t5887,\n\t\t8235\n\t],\n\t\"./textField/type\": [\n\t\t98865,\n\t\t4279,\n\t\t4262,\n\t\t8865\n\t],\n\t\"./textarea/type\": [\n\t\t18226,\n\t\t4279,\n\t\t4262,\n\t\t8226\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 15033;\nmodule.exports = webpackAsyncContext;","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","all","slice","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","package","debug","name","i0","LOGGER","factory","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideCssLayout","provideCssLayoutEditor","provideStaticPackageSource","provideCssLayoutRelationsEditor","provideCssLayoutRelations","FormComponentControlBuilder","_iteratorsSvc","build","layoutMetadata","formGroup","FormGroup","activeGroup","getIteratorFor","iteratorItem","controlName","_getControlName","metadata","control","_getControlForMetadata","_getActiveGroup","parent","addControl","parentIterator","group","parentControlName","this","get","options","controlType","FormComponentControlType","FormArray","FormControl","val_r2","ctx_r1","FormPreviewComponent","_store","_router","_route","_injector","_formComponentControlBuilder","_changeDetector","_available","_metadata","_availableNames","ngOnInit","getStored","params","subscribe","setValue","getData","_formGroup","_formInjector","Injector","providers","FORM_COMPONENT_CONTROL","useValue","detectChanges","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","val_r1","selectors","features","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","decls","vars","consts","template","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","defineProperty","enumerable","configurable","writable","path","push","pathMatch","ComponentRoute","StoreDataService","Router","ActivatedRoute","ChangeDetectorRef","PreviewComponent","components","LayoutModule","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","deps","createStoreDataServiceFactory","provideTinyMceLayout","provideHandlebarsLayout","provideFormLayout","imports","CommonModule","ReactiveFormsModule","NgSelectModule","DynamicLayoutModule","ModuleRoutes","InjectionToken","FormDynamicModuleItemsProvider","FormDynamicModuleTypesProvider","FORM_COMPONENTS_PROVIDER","FORM_MODULE_TYPES_PROVIDER","provideFormLayoutEditor","LayoutComponentsIterator","_layoutMetadata","_extractor","_items","_initialized","_initPromise","Symbol","asyncIterator","x","initPromise","_getInitPromise","items","next","done","forEach","callback","item","levelIndex","level","_getComponents","_getComponent","meta","extractMetadata","getDescendants","childrenMeta","_loader","_cache","cacheId","type","loadItem","metadataType","data","layoutEditorMetadata","metadataData","freeze","LAYOUT_COMPONENTS_LOADER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","standalone","LayoutComponentRendererSADirective","_viewContainerRef","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","ngOnChanges","changes","clear","nameof","injector","customInjector","layoutComponentType","createComponent","Ignore","ThrowError","usedInjector","LAYOUT_COMPONENT_CHILD_EXTENSIONS","childExtensions","registerExtensions","itm","extensions","addSimpleChange","invalidateVisuals","changeDetectorRef","markForCheck","hostView","rootNodes","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","inputs","outputs","exportAs","DEFAULT_LAYOUT_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","defaultExportExtractor","extensionsExportsExtractor","Optional","LAYOUT_COMPONENTS_LOADER_PROVIDER","DynamicItemLoader","inject","isLayoutComponentDef","optional","undefined","isType","Array","isArray","some","provideLayout","ngModule","localModule","extensionsObject","isJsObject","extractors","validatorFn","noCache","cachedDynamicItems","error","dynamicModule","verbose","provider","asyncDynamicModule","extractor","dynamicItem","tryToExtract","_extractorFunctions","result","fn","extend","isEmptyObject","NEVER","Observable","noop","route","rt","AsRequiredTypePipe","transform","defaultValue","_valueHash"],"sourceRoot":""}