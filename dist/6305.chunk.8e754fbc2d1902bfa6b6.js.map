{"version":3,"file":"6305.chunk.8e754fbc2d1902bfa6b6.js","mappings":"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","sources":["webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/cssLanguageModel.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.model.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/metadata/styleBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts"],"sourcesContent":["import {LanguageModel} from './languageModel';\n\n/**\n * Css language model for code editor\n */\nexport const CssLanguageModel = new LanguageModel('css', 'css', editor =>\n{\n    return editor.getModel()?.getValue() ?? '';\n});","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\n\n/**\n * Style block model for properties editor\n */\nexport class StyleBlockModel implements StyleBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public style: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: StyleBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {codePropertiesControlFor} from '@anglr/dynamic/layout-editor';\nimport {CssLanguageModel} from '@anglr/dynamic';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StyleBlockComponentOptions} from '../styleBlock.options';\nimport {StyleBlockModel} from './styleBlock.model';\n\n/**\n * Style block layout metadata\n */\nexport class StyleBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<StyleBlockComponentOptions> =\n    {\n        name: 'Style',\n        description: 'Style block - allows styling of content',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata: \n            [\n                {\n                    modelType: StyleBlockModel,\n                    propertiesControls: \n                    [\n                        codePropertiesControlFor<StyleBlockModel>('style', CssLanguageModel),\n                    ],\n                },\n            ]\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StyleBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.content = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StyleBlockComponentOptions|undefined|null]> = options => !options?.content;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StyleBlockComponentOptions]> = (_, options) =>\n    {\n        options.content = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {FirstUppercaseLocalizeSAPipe} from '@anglr/common';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from '@jscrpt/common/rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    standalone: true,\n    imports:\n    [\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result.content);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            FirstUppercaseLocalizeSAPipe,\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}","<div class=\"properties-form-group ng-star-inserted\">\n    <label class=\"properties-control-label\">&nbsp;</label>\n    <div class=\"properties-form-actions\">\n        <button type=\"button\" type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\" (click)=\"showCodeEditor()\">\n            <span>{{'edit'|firstUppercaseLocalize}} {{property}}</span>\n        </button>\n    </div>\n</div>","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n//TODO: sideeffect\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-action-buttons\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>{{'cancel'|firstUppercaseLocalize}}</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>{{'ok'|firstUppercaseLocalize}}</span>\n    </button>\n</div>","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}"],"names":["CssLanguageModel","LanguageModel","editor","getModel","getValue","StyleBlockModel","constructor","value","style","mapValuesToThis","bind","this","StyleBlockLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","propertiesControls","codePropertiesControlFor","addDescendant","metadata","options","content","canDropMetadata","removeDescendant","_","Object","freeze","BaseCodePropertiesControlSAComponent","PropertiesControlBase","changeDetector","metadataExtractor","dialog","super","showCodeEditor","_this","isBlank","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","form","get","afterClosed","isPresent","control","FormControl","setValue","CodePropertiesControl","t","selectors","inputs","standalone","features","i0","decls","vars","consts","template","rf","ctx","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","i1","i2","_changeDetector","_extractor","_initialized","ngOnInit","_asyncToGenerator","_initialize","initialize","_this2","invalidateVisuals","detectChanges","globalDefine","global","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","label","target","languages","typescript","ScriptTarget","ES2020","module","ModuleKind","CommonJS","moduleResolution","ModuleResolutionKind","NodeJs","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","NewLineKind","LineFeed","typeRoots","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","CodeEditorComponent","element","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","updateContent","ngAfterViewInit","createEditor","saveContent","emit","code","compiledCode","ngOnDestroy","dispose","create","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","onDidChangeModelContent","createModel","initialData","language","Uri","file","extension","setModel","monacoInit","outputs","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","$event","_r1","_r0"],"sourceRoot":""}