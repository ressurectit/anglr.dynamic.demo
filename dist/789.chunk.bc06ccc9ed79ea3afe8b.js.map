{"version":3,"file":"789.chunk.bc06ccc9ed79ea3afe8b.js","mappings":"qSAUA,IAAaA,EAAb,MAaIC,YAAYC,GAHZ,KAAAC,KAA8B,KAM1BC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BF,MAN/BI,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,SACnBC,EAAAA,EAAAA,GAA0B,uCAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,0DAVST,GAAc,UAD1BU,EAAAA,EAAAA,GAAmBC,EAAAA,EAAuB,CAACC,EAAAA,GAAwBC,EAAAA,KACzC,uCAAdb,GCFP,MAAOc,EA2BTb,cApBO,KAAAc,SACP,CACIC,KAAM,aACNC,YAAa,gBACbC,gBACA,CACIC,UAAWnB,EACXoB,mBACA,CACIC,EAAAA,GACAC,EAAAA,EAAAA,GAA4B,CAAC,WAGrCC,eACA,CACIpB,KAAM,sBAOVqB,OAAOC,OAAOpB,S,gOCzBhB,MAAOqB,EAUTzB,YAA6D0B,EACCC,EACZC,GAFW,KAAAF,WAAAA,EACC,KAAAC,YAAAA,EACZ,KAAAC,QAAAA,EALxC,KAAAC,oBAAgE,GAQlEC,MAAMC,QAAQ3B,KAAKsB,cAEnBtB,KAAKwB,SAASI,MAAM,yCAEpB5B,KAAKsB,WAAa,IAIlBI,MAAMC,QAAQ3B,KAAKuB,eAEnBvB,KAAKwB,SAASI,MAAM,0CAEpB5B,KAAKuB,YAAc,IAUdM,SAA0CC,GAAyB,I,EAAA,c,EAAA,YAE5E,IAAIC,EAAoC,KACxC,MAAMC,EAAU,GAAGF,EAAOG,WAAWH,EAAOnB,OAG5C,GAAG,EAAKc,oBAAoBO,GAIxB,OAFA,EAAKR,SAASU,QAAQ,kDAAmD,CAACvB,KAAMmB,EAAOnB,KAAMsB,QAASH,EAAOG,UAEtG,EAAKR,oBAAoBO,GAIpC,IAAI,MAAMG,KAAY,EAAKb,WAC3B,CACI,MAAMc,EAAqBD,EAASE,SAASP,GAW7C,GAPIC,EAFDK,QAEuBE,EAAAA,EAAAA,GAAiBF,GAIvB,KAGjBL,EAEC,MAKR,IAAIA,EAIA,OAFA,EAAKP,SAASe,MAAM,4DAA6D,CAAC5B,KAAMmB,EAAOnB,KAAMsB,QAASH,EAAOG,UAE9G,KAIX,IAAI,MAAMO,KAAa,EAAKjB,YAC5B,CACI,MAAMkB,EAAkBD,EAAUE,aAAaX,GAE/C,GAAGU,IAAmBE,EAAAA,EAAAA,IAAOF,GAC7B,CACI,MAAMG,EACN,CACIC,KAAMJ,GAGV,OAAO,EAAKhB,oBAAoBO,GAAWY,GAMnD,OAFA,EAAKpB,SAASe,MAAM,8DAA+D,CAAC5B,KAAMmB,EAAOnB,KAAMsB,QAASH,EAAOG,UAEhH,M,mNAhGFZ,GAAiByB,EAAAA,GAUNC,EAAAA,IAA6BD,EAAAA,GAC7BE,EAAAA,IAA8BF,EAAAA,GAC9BG,EAAAA,GAAM,K,oBAZjB5B,EAAiB6B,QAAjB7B,EAAiB,KAAA8B,WADL,U,4UCLlB,SAAeb,EAAtB,kC,yBAAO,UAAyCzC,GAE5C,OAAGA,aAAiBuD,cAEHvD,EAGVA,M","sources":["webpack://ng-universal-demo/../basic-components/src/textBlock/metadata/textBlock.model.ts","webpack://ng-universal-demo/../basic-components/src/textBlock/metadata/textBlock.layoutMetadata.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {ComponentStylingModel, DefaultKnownPropertyTypes, FORM_MODEL_CONTROLS_METADATA_PROPERTY, LayoutPropertyDescription, LayoutPropertyMetadata, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {MetadataClassMixin} from '@anglr/dynamic';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {TextBlockComponentOptions} from '../textBlock.options';\n\n/**\n * Text block model for properties editor\n */\n@MetadataClassMixin(ComponentStylingModel, [LayoutPropertyMetadata, FORM_MODEL_CONTROLS_METADATA_PROPERTY])\nexport class TextBlockModel implements TextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Text')\n    @LayoutPropertyDescription('Text to be displayed in text block')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    text: string|undefined|null = null;\n    \n    //######################### constructor #########################\n    constructor(value: TextBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {TextBlockComponentOptions} from '../textBlock.options';\nimport {TextBlockModel} from './textBlock.model';\n\n/**\n * Text block layout metadata\n */\nexport class TextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<TextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<TextBlockComponentOptions> =\n    {\n        name: 'Text block',\n        description: 'Displays text',\n        optionsMetadata:\n        {\n            modelType: TextBlockModel,\n            propertiesControls: \n            [\n                ComponentStylingPropertiesControlComponent,\n                genericPropertiesControlFor(['text'])\n            ],\n        },\n        defaultOptions:\n        {\n            text: 'This is your text'\n        }\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["TextBlockModel","constructor","value","text","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","MetadataClassMixin","ComponentStylingModel","LayoutPropertyMetadata","FORM_MODEL_CONTROLS_METADATA_PROPERTY","TextBlockLayoutEditorMetadata","metaInfo","name","description","optionsMetadata","modelType","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","defaultOptions","Object","freeze","DynamicItemLoader","_providers","_extractors","_logger","_cachedDynamicItems","Array","isArray","error","loadItem","source","dynamicModule","cacheId","package","verbose","provider","asyncDynamicModule","tryToGet","resolvePromiseOr","debug","extractor","dynamicItemType","tryToExtract","isType","result","type","i0","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS","LOGGER","factory","providedIn","Promise"],"sourceRoot":""}