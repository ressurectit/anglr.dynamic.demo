{"version":3,"file":"3716.chunk.9614ecca1befa1877c6b.js","mappings":";kKASM,SAAUA,EAA8BC,GAE1C,MAAO,CACHC,QAASC,EAAAA,EACTC,WAAaC,GAA8B,IAAIF,EAAAA,EAAiBE,EAASJ,GACzEK,KAAM,CAACC,EAAAA,IAEd,4QCGYC,EAAwB,MAcjCC,YAAoBC,EACEC,GADF,KAAAD,SAAAA,EACE,KAAAC,OAAAA,EAXZ,KAAAC,UAAqC,GAErC,KAAAC,eAAyB,EAWlC,CATaC,oBAEV,MAAO,EACV,CAWSC,eAEN,OAAOC,KAAKN,SAASO,aACxB,CAESC,YAENF,KAAKJ,UAAYO,EAAAA,EAAAA,aACpB,CAESC,eAEN,MAAMC,EAAOL,KAAKD,eAElBC,KAAKH,eAAiBS,KAAKC,UAAUF,EAAM,KAAM,EACpD,oCArCQb,GAAwBgB,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAA,oBAAxBhB,EAAwBiB,UAAAA,CAAAA,CAAAA,0BAAAC,MAAAA,GAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,YAAAA,CAAAA,YAAAA,mBAAAA,EAAAA,QAAAA,sBAAAA,kBAAAA,CAAAA,OAAAA,SAAAA,EAAAA,MAAAA,cAAAA,EAAAA,SAAAA,CAAAA,EAAAA,SAAAA,YAAAA,CAAAA,EAAAA,SAAAA,EAAAA,YAAAA,CAAAA,EAAAA,cAAAA,EAAAA,QAAAA,SAAAA,CAAAA,EAAAA,iBAAAA,SAAAA,EAAAA,cAAAA,MAAAA,WAAAA,WAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCnBrCL,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAsB,qBACgFA,EAAAA,EAAC,kBAADA,SAAAA,GAAA,uEAA+DA,EAAAA,KAEjKA,EAAAA,GAAAA,EAAAA,SAAAA,GAA8CA,EAAAA,EAAC,SAADA,WAAA,OAASM,EAAAA,WAAW,IAC9DN,EAAAA,GAAAA,EAAAA,QAAMA,EAAAA,EAAAA,EAAAA,QAAIA,EAAAA,IAAAA,KAIlBA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,mBAAAA,GAEAA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAA+C,SACtCA,EAAAA,EAAAA,EAAAA,sBAAkBA,EAAAA,KAEvBA,EAAAA,GAAAA,GAAAA,MAAAA,CAAK,eAC6CA,EAAAA,EAAC,SAADA,WAAA,OAASM,EAAAA,cAAc,IACjEN,EAAAA,GAAAA,GAAAA,QAAMA,EAAAA,EAAAA,GAAAA,iBAAaA,EAAAA,IAAAA,KAI3BA,EAAAA,GAAAA,GAAAA,MAAAA,GAA+EA,EAAAA,EAAAA,IAAkBA,EAAAA,IAAAA,YAnBtFA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,EAAAA,OAAAA,CAAgB,sBAAAM,EAAAA,cAQEN,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,EAAAA,WAWkDA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,8EDqBnFO,EAAAA,EAAAA,IAAAA,CADCC,EAAAA,GACD,uIAtBSxB,GAAwB,UAFpCyB,EAAAA,EAAAA,GAAe,CAACC,KAAM,MACtBD,EAAAA,EAAAA,GAAe,CAACC,KAAM,SACc,6BAcHC,EAAAA,EACAhC,EAAAA,KAfrBK,GEjBN,MAAM4B,EACb,CACI5B,4CCwBS6B,EAAqB,yCAArBA,EAAqB,oBAArBA,2BALT,EACIrC,EAAAA,EAAAA,GAA8B,mBACjCsC,QAAAA,CAVGC,EAAAA,GACAC,EAAAA,EAAAA,mBAYKH,GAAqB,UADjCI,EAAAA,EAAAA,GAAaL,IACDC,qCCtBP,MAAOlC,EAGTM,YAAoBiC,EACAC,GADA,KAAAD,SAAAA,EACA,KAAAC,UAAAA,CAEnB,CASMC,QAAQC,EAAcC,GAEzB,MAAMC,EAA2B/B,KAAK0B,SAASM,IAAIhC,KAAK2B,YAAc,CAAC,EAEvEI,EAAMF,GAAQC,EAEd9B,KAAK0B,SAASO,IAAIjC,KAAK2B,UAAWI,EACrC,CAMMG,QAAQL,GAEX,OAAQ7B,KAAK0B,SAASM,IAAIhC,KAAK2B,aAAaE,IAAU,IACzD,CAMMM,WAAWN,GAEd,MAAME,EAA2B/B,KAAK0B,SAASM,IAAIhC,KAAK2B,YAAc,CAAC,SAEhEI,EAAMF,GAEb7B,KAAK0B,SAASO,IAAIjC,KAAK2B,UAAWI,EACrC,CAKMK,YAEH,MAAML,EAA2B/B,KAAK0B,SAASM,IAAIhC,KAAK2B,YAAc,CAAC,EAEvE,OAAOU,OAAOC,KAAKP,EACtB,mHClDC,MAAOQ,EAUFC,UAAUC,EAAyBC,EAAYC,GAElD,MAAMC,EAAQD,EAAYD,EAAK,GAAGD,EAAMI,WAAWhB,QAAQa,IAE3D,MAAO,CACHI,SACA,CACIJ,GAAIE,EACJG,YAAaH,EACbI,QAASP,EAAMI,WAAWG,QAC1BnB,KAAMY,EAAMI,WAAWhB,KACvBoB,kBAAkBC,EAAAA,EAAAA,KAAO,EAAM,CAAC,EAAGT,EAAMK,SAASK,UAAUC,gBAC5DC,QAAS,GACTC,aACA,CACIC,YACA,CACIC,EAAG,EACHC,EAAG,GAEPC,QAAS,OAIxB,mCAlCQnB,EAAyB,gDAAzBA,EAAyBoB,MAAAA,EAAAC,YAAAA,ikBCQtBpD,EAAAA,GAAAA,EAAAA,MAAAA,GAAsFA,EAAAA,EAAAA,GAAuCA,EAAAA,mCAAvCA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,oDAd9FA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAI8B,WAIrBA,EAAAA,EAAC,kBAADA,WAAAA,EAAAA,GAAC,GAAD,sBAAkBA,EAAAA,GAAAA,EAAAA,iBAAgB,kCAKnCA,EAAAA,GAAAA,EAAAA,MAAAA,GAAmCA,EAAAA,EAAAA,GAAyGA,EAAAA,KAC5IA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GACJA,EAAAA,IAAAA,8CAZCA,EAAAA,EAAAA,yBAAAA,EAAAA,gBAIIA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,cAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,UAAAA,EAAAA,WAAAA,KAAAA,EAAAA,eAAAA,EAAAA,SAAAA,YAMkCA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,SAAAA,UAAAA,EAAAA,WAAAA,KAAAA,QAAAA,EAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,YAAAA,IAAAA,EAAAA,EAAAA,EAAAA,WAAAA,MACQA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,SAAAA,SAAAA,KAAAA,EAAAA,SAAAA,SAAAA,uCAjBvDA,EAAAA,GAAAA,GACIA,EAAAA,GAAAA,EAAAA,MAAAA,GAA8FA,EAAAA,EAAAA,GAA2BA,EAAAA,KAEzHA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAiBJA,EAAAA,+BAnBkGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,KAExEA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,QC6BxB,MAAOqD,EAwCTpE,YAA6DqE,EACPC,EAChCC,EACAC,EACiDC,EACrBC,GALW,KAAAL,mBAAAA,EACP,KAAAC,aAAAA,EAChC,KAAAC,gBAAAA,EACA,KAAAC,iBAAAA,EACiD,KAAAC,oBAAAA,EACrB,KAAAC,QAAAA,EAtCxC,KAAAC,mBAAmC,IAAIC,EAAAA,EAKvC,KAAAC,UAAgC,GAOhC,KAAAC,cAAqE,CAAC,EAKtE,KAAAC,gBAAyBC,EAAAA,EAAAA,IAAW,IAKpC,KAAAC,oBAA8B,CAkBvC,CAOYC,WAAQ,iCAEjB,GAAG,EAAKT,qBAAuBU,MAAMC,QAAQ,EAAKX,qBAE9C,IAAI,MAAMY,KAAO,EAAKZ,oBAElB,EAAKE,mBAAmBW,IAAID,EAAIE,WAAU,IAAM,EAAKC,qBAIvD,EAAKA,WAVM,KAWpB,CAOMC,cAEHlF,KAAKoE,mBAAmBe,aAC3B,CAKeF,YAAS,uCAErB,EAAKX,UAAY,GACjB,EAAKC,cAAgB,CAAC,EAGtB,IAAK,MAAMa,IAAe,CAAC,mBAAoB,sBAAuB,oBAAqB,qBAC3F,CACI,MAAMC,SAAe,EAAKvB,mBAAmBwB,SAAS,CAACtC,QAASoC,EAAavD,KAAM,YAAYC,MAAQ,GAEvG,IAAI,MAAMyD,KAAQF,EAClB,CACI,MAAMxC,EAAgC,CAACG,QAASoC,EAAavD,KAAM0D,GAC7DzC,QAAiB,EAAKiB,aAAauB,SAASzC,GAE9CC,EAMA,EAAKwB,UAAUkB,KACf,CACI3C,aACAC,aAPJ,EAAKqB,SAASsB,KAAK,6EAA8E5C,EAUxG,CACJ,CAED,EAAK0B,cAAc,IAAM,GAGzB,IAAI,MAAMmB,KAAQ,EAAKpB,UACvB,CACI,MAAMqB,EAAQD,EAAK5C,SAASK,UAAUwC,OAAS,IAC/C,IAAKpB,eAAcoB,KAAKC,EAALD,GAAW,IAC9B,EAAKpB,cAAcoB,GAAOH,KAAKE,EAClC,CAED,EAAK1B,gBAAgB6B,eAxCA,KAyCxB,CAOSC,iBAEN9F,KAAKwE,gBAAiBC,EAAAA,EAAAA,IAAW,GACpC,mCAnIQZ,GAAuBrD,EAAAA,EAwCZuF,EAAAA,IAA6BvF,EAAAA,EAC7BwF,EAAAA,IAAsBxF,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAGtByF,EAAAA,GAA2B,GAAAzF,EAAAA,EAC3B0F,EAAAA,GAAM,uBA7CjBrC,EAAuBpD,UAAAA,CAAAA,CAAAA,kBAAA0F,OAAAA,CAAAC,eAAAA,kBAAAxC,YAAAA,EAAAyC,SAAAA,CAAAA,EAAAA,GAAA3F,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,eAAAA,CAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAAAA,cAAAA,kBAAAA,0BAAAA,0BAAAA,QAAAA,CAAAA,cAAAA,GAAAA,6BAAAA,GAAAA,QAAAA,mBAAAA,EAAAA,yBAAAA,EAAAA,QAAAA,WAAAA,CAAAA,cAAAA,GAAAA,6BAAAA,GAAAA,EAAAA,mBAAAA,EAAAA,0BAAAA,CAAAA,UAAAA,GAAAA,EAAAA,mBAAAA,mBAAAA,EAAAA,cAAAA,kBAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,QAAAA,+BAAAA,EAAAA,QAAAA,CAAAA,EAAAA,iCAAAC,SAAAA,SAAAA,EAAAA,GAAA,MDjCpCL,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,eAAAA,sBAqBJA,EAAAA,YArB4CA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,gCCwBpC8F,EAAAA,EAAYC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACZC,EAAAA,EAAcC,EAAAA,EAAAA,EAAAA,EAGdlE,GAAyBmE,OAAAA,CAAAA,ofAAAC,gBAAAA,gKCH3B,MAAOC,EAfbnH,cAuBW,KAAAqD,SAAoC,EA0B9C,CAlBa+D,QAAQC,GAId,MAAMC,EAAaD,EAAME,UAAUC,QAAQC,cAAcC,wBAEtDL,EAAMpB,KAAK5D,KAAKgB,SAASQ,cAAcC,cAEtCuD,EAAMpB,KAAK5D,KAAKgB,SAASQ,aAAaC,YAAYC,EAAIsD,EAAMM,UAAU5D,EAAIuD,EAAWvD,EACrFsD,EAAMpB,KAAK5D,KAAKgB,SAASQ,aAAaC,YAAYE,EAAIqD,EAAMM,UAAU3D,EAAIsD,EAAWtD,GAGzFzD,KAAK8C,SACL,IACO9C,KAAK8C,SACRgE,EAAMpB,KAAK5D,KAAKgB,SAEvB,mCAjCQ8D,EAA0B,oBAA1BA,EAA0BnG,UAAAA,CAAAA,CAAAA,qBAAA0F,OAAAA,CAAArD,SAAAA,YAAAc,YAAAA,EAAAyC,SAAAA,CAAAA,EAAAA,GAAA3F,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,WAAAA,UAAAA,CAAAA,EAAAA,QAAAA,QAAAA,EAAAA,kBAAAA,CAAAA,cAAAA,GAAAA,EAAAA,SAAAA,EAAAA,kBAAAA,sBAAAA,CAAAA,WAAAA,gBAAAC,SAAAA,SAAAA,EAAAA,MAAA,MC1BvCL,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,gBAAAA,GACAA,EAAAA,GAAAA,EAAAA,mBAAAA,EAAAA,GAAkGA,EAAAA,EAAC,sBAADA,SAAAA,GAAA,OAAsBM,EAAAA,QAAAA,EAAe,IAAEN,EAAAA,IAAAA,wBAD1HA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,iBAAAA,GAC2BA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,kBAAAA,EAAAA,0BDkBtCqD,EAAAA,EACAwD,EAAAA,EACAb,EAAAA,EAAcc,EAAAA,GAAAZ,OAAAA,CAAAA,oCAAAC,gBAAAA,sFEFhB,MAAOnF,EAOkB,uBAEvB,MAAO,CACH+F,SAAU/F,EACVgG,UACA,EACIC,EAAAA,EAAAA,OAGX,CAMiC,4BAACC,GAE/B,MAAO,CACHH,SAAU/F,EACVgG,UACA,EACIG,EAAAA,EAAAA,IAAiCD,IAG5C,mCA/BQlG,EAA4B,oBAA5BA,0BAPLoF,EAAAA,sBCMF,SAAUgB,EAAyBC,GAIrC,QAFaA,EAECC,sBACjB,CAKK,SAAUC,IAEZ,OAAO,SAAuCC,GAM1C,OAJaA,EAERF,wBAAyB,EAEvBE,CACV,CACJ,2CC7BK,SAAUC,EAAoCC,EAAwBC,EAAkCC,EAAqCC,EAAsCC,GAAuB,GAE5MJ,EAAQC,GACR,CACIC,eACAC,gBACAC,cACAC,cAAe,IAAMD,EAE5B,mECIK,SAAUrH,EAAeuH,GAG3B,OAAO,SAAuCR,GAE1C,MAAMS,EAAKD,EAEXC,EAAGC,UAAiBV,EAEpB,MAAMW,EAAwDX,EAgB9D,OAdGY,EAAAA,EAAAA,IAAQD,EAAwBE,cAE/BxG,OAAOyG,eAAed,EACA,cACA,CACIe,YAAY,EACZC,cAAc,EACdC,UAAU,EACVxG,MAAO,KAIrCkG,EAAwBE,YAAYrD,KAAKiD,GAElCT,CACV,CACJ,kFCZK,MAAOxB,oCAAAA,sBAAAA,2BAFA,CAAC0C,EAAAA,YARVC,EAAAA,4ECsBE,MAAOC,EACX3J,YAA6B4J,GAAA,KAAAA,QAAAA,EAGrB,KAAAC,UAAuC,GACvC,KAAAC,UAAsEC,CAJrB,CAiCzDhH,UACIiH,EACAF,EAA8DC,GAEhE,IAAKC,KAAYA,aAAiBC,MAAyB,iBAAVD,EAC/C,OAAO,KAGJzJ,KAAK2J,SAER3J,KAAK2J,OAAS3J,KAAKqJ,QAAQO,KAAKH,GAAOI,UAGzC,MAAMC,EAA4C9J,KAAK2J,OAAOI,KAAKN,GAC7DO,EAAmBT,IAAcvJ,KAAKuJ,UAY5C,OAVIO,IACF9J,KAAKsJ,UAAY,GACjBQ,EAAcG,aAAaC,IACzBlK,KAAKsJ,UAAU9D,KA5Fd,CAAC2C,IA4FmC+B,EAAE/B,IA5F3B1F,MA4FgCyH,EAAE9B,cAA9C,MAGA0B,GAAiBE,KACnBhK,KAAKsJ,UAAUa,KAAKZ,GACpBvJ,KAAKuJ,UAAYA,GAEZvJ,KAAKsJ,SACb,EAGG,SAAUE,EACZY,EAA2BC,GAC7B,MAAMC,EAAIF,EAAUjC,IACdoC,EAAIF,EAAUlC,IAEpB,GAAImC,IAAMC,EAAG,OAAO,EAEpB,QAAUC,IAANF,EAAiB,OAAO,EAC5B,QAAUE,IAAND,EAAiB,OAAQ,EAE7B,GAAU,OAAND,EAAY,OAAO,EACvB,GAAU,OAANC,EAAY,OAAQ,EACxB,GAAgB,iBAALD,GAA6B,iBAALC,EACjC,OAAOD,EAAIC,GAAK,EAAI,EAEtB,GAAgB,iBAALD,GAA6B,iBAALC,EACjC,OAAOD,EAAIC,EAEb,GAAgB,kBAALD,GAA8B,kBAALC,EAClC,OAAOD,EAAIC,GAAK,EAAI,EAGtB,MAAME,EAAUC,OAAOJ,GACjBK,EAAUD,OAAOH,GACvB,OAAOE,GAAWE,EAAU,EAAIF,EAAUE,GAAW,EAAI,CAC1D,yCAzFwBnK,EAAAA,EAAAA,oHC5CnB,SAAUQ,EAAS4J,EAAiBC,EAA4BC,GAElE,MAAMC,EAAsBD,EAAWrI,OAASqI,EAAW9I,QAE3D,KAAIgJ,EAAAA,EAAAA,IAAWD,GAEX,MAAM,IAAIE,MAAM,2CAA2CJ,EAAYK,oCAG3E,MAAO,CACHlC,cAAc,EACdhH,MAEI,MAAMmJ,EAAcJ,EAAcK,KAAKpL,MAUvC,OARAqC,OAAOyG,eAAe9I,KACA6K,EACA,CACIpI,MAAO0I,EACPnC,cAAc,EACdC,UAAU,IAG7BkC,CACV,EAER,+UC1BM,SAAeE,EAAtB,2DAAO,UAAyC5I,GAE5C,OAAGA,aAAiB6I,cAEH7I,EAGVA,CACV","sources":["webpack://ng-universal-demo/./app/misc/factories.ts","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsEditor/relationsEditor.module.ts","webpack://ng-universal-demo/./app/services/storeData/storeData.service.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {FactoryProvider} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\n\nimport {StoreDataService} from '../services/storeData';\n\n/**\n * Creates factory provider for store data service\n * @param storeName - Name of storage that should be used\n */\nexport function createStoreDataServiceFactory(storeName: string): FactoryProvider\n{\n    return {\n        provide: StoreDataService,\n        useFactory: (storage: PermanentStorage) => new StoreDataService(storage, storeName),\n        deps: [PERMANENT_STORAGE]\n    };\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeManager, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relationsEditor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\n@ComponentRoute({path: ':id'})\nexport class RelationsEditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected stringMetadata: string = '';\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: RelationsNodeManager,\n                protected _store: StoreDataService,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): RelationsNodeMetadata[]\n    {\n        return this._manager.getMetadata();\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.relationsDemo;\n    }\n\n    protected showMetadata(): void\n    {\n        const meta = this._getMetadata();\n\n        this.stringMetadata = JSON.stringify(meta, null, 4);\n    }\n}\n","<div class=\"flex-row\">\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsEditor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\"></load-save-new>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\n        <span>demo</span>\n    </button>\n</div>\n\n<div class=\"flex-1 flex-row\">\n    <relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>\n\n    <div style=\"width: 300px;\" class=\"flex-column\">\n        <div>Relations metadata</div>\n\n        <div>\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"showMetadata()\">\n                <span>show metadata</span>\n            </button>\n        </div>\n\n        <div style=\"white-space: pre; overflow: scroll;\" class=\"thin-scrollbar flex-1\">{{stringMetadata}}</div>\n    </div>\n</div>","import {RelationsEditorComponent} from './relationsEditor/relationsEditor.component';\n\nexport const components =\n[\n    RelationsEditorComponent,\n];","import {NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsEditorModule} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './relationsEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\n\n/**\n * Module for relations editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        LoadSaveNewSAComponent,\n        DynamicRelationsEditorModule.withProviders(),\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('RELATIONS_DATA'),\n    ]\n})\n@ModuleRoutes(components)\nexport class RelationsEditorModule\n{\n}","import {PermanentStorage} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Service used for obtaining and storing data\n */\nexport class StoreDataService<TData = any>\n{\n    //######################### constructor #########################\n    constructor(private _storage: PermanentStorage,\n                private _storeKey: string,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Stores data into store\n     * @param name - Name of stored data\n     * @param data - Data to be stored\n     */\n    public setData(name: string, data: TData): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data\n     * @param name - Name of data to be retrieved\n     */\n    public getData(name: string): TData|null\n    {\n        return (this._storage.get(this._storeKey)?.[name]) ?? null;\n    }\n\n    /**\n     * Removes data from store\n     * @param name - Name of data to be removed\n     */\n    public removeData(name: string): void\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        delete store[name];\n\n        this._storage.set(this._storeKey, store);\n    }\n\n    /**\n     * Gets stored data names\n     */\n    public getStored(): string[]\n    {\n        const store: Dictionary<TData> = this._storage.get(this._storeKey) ?? {};\n\n        return Object.keys(store);\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? id : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: (item.metadata.singleton ? item.itemSource.name : _newCompnentId): item.metadata.singleton\"\n                 (cdkDragDropped)=\"_generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? item.itemSource.name : item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this._initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    protected async loadNodes(): Promise<void>\n    {\n        this._allItems = [];\n        this._groupedItems = {};\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components', 'static-components', 'layout-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n    }\n}","<div class=\"flex-row flex-1\">\n    <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["createStoreDataServiceFactory","storeName","provide","StoreDataService","useFactory","storage","deps","PERMANENT_STORAGE","RelationsEditorComponent","constructor","_manager","_store","_metadata","stringMetadata","emptyMetadata","_getMetadata","this","getMetadata","_loadDemo","DemoData","showMetadata","meta","JSON","stringify","i0","selectors","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","RelationsNodeManager","components","RelationsEditorModule","imports","LoadSaveNewSAComponent","DynamicRelationsEditorModule","ModuleRoutes","_storage","_storeKey","setData","name","data","store","get","set","getData","removeData","getStored","Object","keys","ToRelationsDragDataSAPipe","transform","value","id","singleton","newId","itemSource","metadata","displayName","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","x","y","options","pure","standalone","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_changeDetector","_metadataManager","_refreshObservables","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_newCompnentId","generateId","_isDragOverPalette","ngOnInit","Array","isArray","obs","add","subscribe","loadNodes","ngOnDestroy","unsubscribe","packageName","types","loadItem","type","push","warn","item","group","_a","detectChanges","_generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","LOGGER","inputs","canvasDropList","features","CommonModule","i2","DragDropModule","i3","styles","changeDetection","RelationsEditorSAComponent","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","RelationsCanvasSAComponent","i1","ngModule","providers","provideRelationsEditor","staticRegister","provideRelationsEditorWithStatic","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","addSimpleChange","changes","key","currentValue","previousValue","firstChange","isFirstChange","route","rt","component","routeDecoratedComponent","isBlank","routeValues","defineProperty","enumerable","configurable","writable","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","sort","keyValueA","keyValueB","a","b","undefined","aString","String","bString","_target","propertyKey","descriptor","originalValue","isFunction","Error","toString","bound","bind","resolvePromiseOr","Promise"],"sourceRoot":""}