{"version":3,"file":"1863.chunk.1b5bef38c6efc279d92f.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations/src/directives/scopedRelations/scopedRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/misc/directives/listBlockScopeRelations/listBlockScopeRelations.directive.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/listBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/extensions/listBlockData.extension.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Directive, FactoryProvider, Inject, inject, Injector, OnDestroy} from '@angular/core';\nimport {SCOPE_ID} from '@anglr/dynamic';\n\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Creates scoped relations component manager and processor\n */\n@Directive(\n{\n    selector: '[scopedRelations]',\n    standalone: true,\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(RelationsComponentManager, {skipSelf: true}).openScope(inject(SCOPE_ID))\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(RelationsProcessor, {skipSelf: true}).openScope(inject(SCOPE_ID), inject(RelationsComponentManager), inject(Injector))\n        },\n        RelationsChangeDetector,\n    ],\n})\nexport class ScopedRelationsSADirective implements OnDestroy\n{\n    //######################### constructor #########################\n    constructor(protected componentManager: RelationsComponentManager,\n                protected relationsProcessor: RelationsProcessor,\n                @Inject(SCOPE_ID) protected scopeId: string,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.componentManager.ngOnDestroy();\n        this.relationsProcessor.destroyScope();\n    }\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {ListBlockComponentOptions} from './listBlock.options';\n\n/**\n * List block layout metadata loader\n */\nexport const ListBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ListBlockComponentOptions>> = async () => new (await import('./metadata/listBlock.layoutMetadata')).ListBlockLayoutEditorMetadata();\n\n/**\n * List block relations metadata loader\n */\nexport const ListBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/listBlock.relationsMetadata')).ListBlockRelationsEditorMetadata();\n\n/**\n * List block layout designer type loader\n */\nexport const ListBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/listBlockDesigner.component')).ListBlockDesignerSAComponent;\n","import {Directive} from '@angular/core';\nimport {DebugData, DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelationsOptions} from './listBlock.options';\n\n/**\n * List block scoped relations component\n */\n@DebugData(\n{\n    outputs: \n    [\n        nameof<ListBlockRelations>('datum'),\n        nameof<ListBlockRelations>('index'),\n        nameof<ListBlockRelations>('first'),\n        nameof<ListBlockRelations>('last'),\n    ],\n})\n@Directive()\nexport class ListBlockRelations<TDatum = any> implements RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @DynamicOutput()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @DynamicOutput()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @DynamicOutput()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @DynamicOutput()\n    public last: boolean = false;\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}\n","import {Directive, inject, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {RelationsComponentManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockRelations} from '../../../listBlock.relations';\n\n/**\n * Directive that creates list block scoped relations component\n */\n@Directive(\n{\n    selector: '[listBlockScope]',\n    standalone: true,\n})\nexport class ListBlockScopeRelationsSADirective<TDatum = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is component initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Instance of relations component manager\n     */\n    protected componentManager: RelationsComponentManager = inject(RelationsComponentManager);\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor = inject(RelationsProcessor);\n\n    /**\n     * Instance of relations component\n     */\n    protected relations: ListBlockRelations = new ListBlockRelations();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of datum assigned to this item in list\n     */\n    @Input()\n    public datum: TDatum|null = null;\n\n    /**\n     * Index of assigned datum to this item in list\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Indication whether is this first item in list\n     */\n    @Input()\n    public first: boolean = false;\n\n    /**\n     * Indication whether is this last item in list\n     */\n    @Input()\n    public last: boolean = false;\n\n    /**\n     * Id of component that is being created\n     */\n    @Input()\n    public componentId: string = '';\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<ListBlockScopeRelationsSADirective>('componentId') in changes && !this.initialized && this.componentId)\n        {\n            this.initialized = true;\n\n            this.componentManager.registerComponent(this.componentId, this.relations);\n            await this.relationsProcessor.initialized;\n            this.relationsProcessor.updateRelations(this.componentId);\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('datum') in changes)\n        {\n            this.relations.datum = this.datum;\n        }\n        \n        if(nameof<ListBlockScopeRelationsSADirective>('index') in changes)\n        {\n            this.relations.index = this.index;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('first') in changes)\n        {\n            this.relations.first = this.first;\n        }\n\n        if(nameof<ListBlockScopeRelationsSADirective>('last') in changes)\n        {\n            this.relations.last = this.last;\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.relationsProcessor.destroyComponent(this.componentId);\n        this.componentManager.unregisterComponent(this.componentId);\n    }\n}","<ng-container *ngFor=\"let datum of data; let index=index; let first=first; let last=last\">\n    <ng-template [layoutComponentRenderer]=\"options?.template\" scopedRelations listBlockScope [datum]=\"datum\" [first]=\"first\" [last]=\"last\" [index]=\"index\" [componentId]=\"id\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DebugData, RelationsComponent, ScopedRelationsSADirective} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {nameof} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions, ListBlockRelationsOptions} from './listBlock.options';\nimport {ListBlockLayoutDesignerTypeLoader, ListBlockLayoutMetadataLoader, ListBlockRelationsMetadataLoader} from './listBlock.metadata';\nimport {ListBlockScopeRelationsSADirective} from './misc/directives';\n\n/**\n * Component used for displaying list block\n */\n@Component(\n{\n    selector: 'list-block',\n    templateUrl: 'listBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n        ScopedRelationsSADirective,\n        ListBlockScopeRelationsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DebugData(\n{\n    inputs: \n    [\n        nameof<ListBlockSAComponent>('data'),\n    ],\n})\n@DescendantsGetter<ListBlockComponentOptions>(options => options?.template ? [options?.template] : [])\n@LayoutEditorDesignerType(ListBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(ListBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(ListBlockLayoutMetadataLoader)\nexport class ListBlockSAComponent<TDatum = any> extends LayoutComponentBase<ListBlockComponentOptions> implements LayoutComponent<ListBlockComponentOptions>, RelationsComponent<ListBlockRelationsOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Id of current component\n     */\n    protected id: string = '';\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: ListBlockRelationsOptions|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of data to be rendered in for cycle\n     */\n    @Input()\n    public data: Array<TDatum> = [];\n\n    //######################### public methods #########################\n\n    /**\n     * Sets id of custom component\n     * @param id - Id of custom component\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ListBlockSAComponent} from '../listBlock.component';\nimport {ListBlockDataExtensionOptions} from '../listBlockExtensions.options';\n\n//TODO: id use id setter extension\n\n/**\n * Extension that sets custom component data to instance\n */\nexport class ListBlockDataExtension extends DynamicItemExtensionBase<ListBlockDataExtensionOptions, ListBlockSAComponent> implements DynamicItemExtension<ListBlockDataExtensionOptions, ListBlockSAComponent>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ListBlockDataExtension} from './extensions';\nimport {ListBlockSAComponent} from './listBlock.component';\n\nexport default ListBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension, ListBlockDataExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle, LocalizeSAPipe} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>{{'NOT FOUND'|localize}}</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {{@id}}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {{@type}}', {type: {name: componentMetadata.name, package: componentMetadata.package}});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {{@id}}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {{@id}}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {{@id}}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {{@id}}', {id: componentMetadata?.id});\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>)?.rootNodes?.[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {{@id}}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(!this.injector || !this.metadata || !this.instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this.injector.get(RelationsProcessor, null);\n        this.componentManager ??= this.injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this.metadata.id, this.instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this.metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        if(!this.relationsProcessor || !this.componentManager || !this.metadata)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this.metadata.id);\n        this.componentManager.unregisterComponent(this.metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["ScopedRelationsSADirective","constructor","componentManager","relationsProcessor","scopeId","ngOnDestroy","this","destroyScope","i0","i1","SCOPE_ID","selectors","standalone","features","provide","RelationsComponentManager","useFactory","inject","skipSelf","openScope","RelationsProcessor","Injector","RelationsChangeDetector","ListBlockLayoutMetadataLoader","_ref","_asyncToGenerator","ListBlockLayoutEditorMetadata","apply","arguments","ListBlockRelationsMetadataLoader","_ref2","ListBlockRelationsEditorMetadata","ListBlockLayoutDesignerTypeLoader","_ref3","ListBlockDesignerSAComponent","ListBlockRelations","datum","index","first","last","invalidateVisuals","__decorate","DynamicOutput","DebugData","outputs","nameof","ListBlockScopeRelationsSADirective","initialized","relations","componentId","ngOnChanges","changes","_this","registerComponent","updateRelations","destroyComponent","unregisterComponent","inputs","ListBlockSAComponent_ng_container_0_ng_template_1_Template","ctx_r0","options","template","datum_r1","first_r3","last_r4","index_r2","id","ListBlockSAComponent","LayoutComponentBase","data","setId","t","decls","vars","consts","rf","ctx","ListBlockSAComponent_ng_container_0_Template","CommonModule","LayoutComponentRendererSADirective","styles","changeDetection","DescendantsGetter","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","ListBlockDataExtension","DynamicItemExtensionBase","onInit","instance","metadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","element","componentElement","extensionsOptions","changeDetector","injector","logger","destroyed","ext","destroy","onDestroy","ngOnInit","onOptionsSet","extension","initialize","afterInit","_this2","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","detectChanges","_changes","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","LocalizeSAPipe","component","ɵComponentRef","componentRef","viewContainerRef","loader","childExtensions","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","debug","clear","customInjector","scope","layoutComponentType","loadItem","warn","type","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","create","parent","providers","useValue","LAYOUT_COMPONENT_CHILD_EXTENSIONS","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","exportAs","_applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","get"],"sourceRoot":""}