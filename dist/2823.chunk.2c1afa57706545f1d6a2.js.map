{"version":3,"file":"2823.chunk.2c1afa57706545f1d6a2.js","mappings":"kKAOM,MAAOA,UAAiCC,EAAAA,EAG1CC,cAEIC,MAAM,wBACT,E,iCANQH,EAAwB,E,oBAAxBA,EAAwBI,QAAxBJ,EAAwB,M,6DCA/B,MAAOK,UAAoCJ,EAAAA,EAG7CC,cAEIC,MAAM,2BACT,E,iCANQE,EAA2B,E,oBAA3BA,EAA2BD,QAA3BC,EAA2B,M,sTCkClC,MAAOC,EAkBTJ,YAAsDK,EAChCC,EACYC,GAFoB,KAAAF,QAAAA,EAChC,KAAAC,eAAAA,EACY,KAAAC,QAAAA,EAbxB,KAAAC,kBAAkC,IAAIC,EAAAA,GAQzC,KAAAC,SAAmD,KAOtDH,GAASI,MACZ,CAOMC,WAEHC,KAAKL,kBAAkBM,IAAID,KAAKR,QAAQU,IAAIC,WAAUN,IAElDG,KAAKH,SAAWA,EAChBG,KAAKP,eAAeW,eAApB,KAGDJ,KAAKN,UAEJM,KAAKL,kBAAkBM,IAAID,KAAKN,QAAQW,KAAKF,WAAU,IAAMH,KAAKR,QAAQa,UAC1EL,KAAKL,kBAAkBM,IAAID,KAAKN,QAAQY,KAAKH,WAAU,IAAMH,KAAKR,QAAQc,UAEjF,CAOMC,YAAYC,IAEZC,EAAAA,EAAAA,GAAgC,cAAeD,IAE9CR,KAAKR,QAAQkB,QAEVV,KAAKH,UAEJG,KAAKR,QAAQmB,gBAAgBX,KAAKH,UAG7C,CAOMe,cAEHZ,KAAKL,kBAAkBkB,cACvBb,KAAKN,SAASoB,SACjB,E,iCAxEQvB,GAAuBwB,EAAAA,EAkBZC,EAAAA,IAAsBD,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAA,E,kBAlBjCxB,EAAuB0B,UAAAA,CAAAA,CAAAA,kBAAAC,OAAAA,CAAArB,SAAAA,YAAAsB,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAhBhC,CACIC,EAAAA,GACAC,EAAAA,IACHP,EAAAA,EAAAA,EAAAA,GAAAQ,MAAAA,GAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,WAAAA,iBAAAA,UAAAA,CAAAA,QAAAA,aAAAA,CAAAA,QAAAA,WAAAA,CAAAA,EAAAA,SAAAA,iBAAAA,kBAAAA,CAAAA,EAAAA,4BAAAC,SAAAA,SAAAA,EAAAA,GAAA,MC5BLX,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAA4C,kBAA5CA,CAA4C,eAGhCA,EAAAA,GAAAA,EAAAA,mBACJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,UAAAA,GACIA,EAAAA,GAAAA,EAAAA,kBAAAA,CAAmC,wBAEvCA,EAAAA,IAAAA,GAGJA,EAAAA,GAAAA,EAAAA,MAAAA,GACIA,EAAAA,GAAAA,EAAAA,GACJA,EAAAA,KAEAA,EAAAA,GAAAA,EAAAA,qBACJA,EAAAA,M,MAJsBA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,0BAAAA,EAAAA,U,gBDmBdY,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EAAoBC,EAAAA,EACpBC,EAAAA,EAAaC,EAAAA,GAAAA,EAAAA,GAAAC,OAAAA,CAAAA,6FAAAA,oCAAAC,gBAAAA,G,sVE7Bf,MAAOC,EAGTlD,YAAkDmD,GAAA,KAAAA,QAAAA,CAEjD,CAOYC,SAASC,GAAyB,I,EAAA,c,EAAA,YAG3C,GAAqB,gCAAlBA,EAAOC,QAEN,OAAO,KAGX,IAII,GAFA,EAAKH,SAASI,MAAM,uEAAwE,CAACC,KAAMH,EAAOG,KAAMF,QAASD,EAAOC,UAE9G,mBAAfD,EAAOG,KAEN,aAAa,+BAMpB,CAHD,MAAMC,GAEF,EAAKN,SAASO,KAAK,gFAAkFD,EAAG,CAACD,KAAMH,EAAOG,KAAMF,QAASD,EAAOC,SAC/I,CAID,OAFA,EAAKH,SAASI,MAAM,uEAAwE,CAACC,KAAMH,EAAOG,KAAMF,QAASD,EAAOC,UAEzH,IAxBoC,E,gLAyB9C,E,0JArCQJ,GAAwCtB,EAAAA,GAG7B+B,EAAAA,GAAM,K,oBAHjBT,EAAwChD,QAAxCgD,EAAwC,OCA/C,MAAOU,EAGT5D,YAAkDmD,GAAA,KAAAA,QAAAA,CAEjD,CAOYC,SAASC,GAAyB,I,EAAA,c,EAAA,YAE3C,IAII,OAFA,EAAKF,SAASI,MAAM,8EAA+E,CAACM,WAAYR,EAAOC,UAEhHD,EAAOC,SAEV,IAAK,mBACD,aAAa,+BACjB,IAAK,sBACD,aAAa,gCACjB,QACI,OAAO,KAMlB,CAHD,MAAMG,GAEF,EAAKN,SAASI,MAAM,8EAAgFE,EAAG,CAACI,WAAYR,EAAOC,SAC9H,CAED,OAAO,IArBoC,E,gLAsB9C,E,iCAlCQM,GAAiChC,EAAAA,GAGtB+B,EAAAA,GAAM,K,oBAHjBC,EAAiC1D,QAAjC0D,EAAiC,O,mLCDvC,MAAME,EAA2B,e,EAAA,G,EAA2E,UAAOC,EAAQC,GAE9H,MAAMC,QAAaC,EAAAA,EAAAA,GAAuBH,EAAQC,GAC5CG,QAAaC,EAAAA,EAAAA,GAA2BL,EAAQC,GAChDK,EAAcJ,GAAKK,KAIzB,GAFAN,GAAQT,MAAM,wEAEVc,GAAaE,yBAEb,OAAO,KAGX,MAAMC,QAAaH,GAAaE,yBAEhC,OAAGC,EAEQ,CACHF,KAAME,EACNC,gBAAiBN,GAAKM,gBACtBC,WAAYP,GAAKO,YAIlB,IACV,E,+KAzBuC,wDCQ3BC,EACb,CACIC,QAASC,EAAAA,GACTC,WAAad,GAEF,IAAIe,EAAAA,EAA2B,CACIjB,GAEJE,GAE1CgB,KAAM,CAAC,CAAC,IAAIC,EAAAA,GAAYtB,EAAAA,KACxBuB,OAAO,GAMEC,EACb,CACIP,QAASQ,EAAAA,GACTC,SAAUnC,EACVgC,OAAO,GAMEhD,EACb,CACI0C,QAASU,EAAAA,GACTC,SCpCsE,SAAS7E,GAE/E,MAAO,CACH8E,GAAI,GAAG9E,EAAS8E,cAChBlC,QAAS,+BACTE,KAAM,kBACNiC,QACA,CACIC,aAAchF,GAGzB,GD+BYiF,EACb,CACIf,QAASgB,EAAAA,GACTP,SAAUzB,EACVsB,OAAO,GAMEW,EACb,CACIjB,QAASkB,EAAAA,GACThB,WAAad,GAEF,IAAIe,EAAAA,EAA2B,CACIb,EAAAA,GAEJF,GAE1CgB,KAAM,CAAC,CAAC,IAAIC,EAAAA,GAAYtB,EAAAA,KACxBuB,OAAO,GAMEa,EACb,CACInB,QAASoB,EAAAA,GACTT,SACA,CACIU,EAAAA,IAOKC,EACb,CACItB,QAASuB,EAAAA,GACTrB,WAAY,IAAM,IAAIsB,EAAAA,GAAkBC,EAAAA,EAAAA,IAAOT,EAAAA,KACPS,EAAAA,EAAAA,IAAOP,EAAAA,IACPQ,EAAAA,GACAD,EAAAA,EAAAA,IAAO1C,EAAAA,GAAQ,CAAC4C,UAAU,UAAUC,IAMnEC,EACb,CACI7B,QAAS8B,EAAAA,EACTC,YAAaC,EAAAA,GAMJC,EACb,CACIjC,QAAS/C,EAAAA,GACTwD,SAAUyB,EAAAA,E,mCElGP,MAAMb,EAAyBc,OAAO,yB,iJCFvC,SAAUC,EAAoBC,GAA0B,EAAMC,EAAoC,CAAC,mBAAoB,wBAEzH,MAAO,IACAD,EAAiB,CAACtC,EAAAA,IAAwC,OAC1DwC,EAAAA,EAAAA,KACHhC,EAAAA,GACAQ,EAAAA,GACAE,EAAAA,GACAE,EAAAA,GACAG,EAAAA,GACAkB,EAAAA,EACAC,EAAAA,EACAT,EAAAA,EACAU,EAAAA,EACAC,EAAAA,EACAV,EAAAA,GACAJ,EAAAA,MACGS,EAASM,KAAIC,IAAOC,EAAAA,EAAAA,GAA2BD,KAEzD,CAMM,MAAMnB,EAAuE,SAAShC,GAEzF,SAAGqD,EAAAA,EAAAA,IAAQrD,GAAMA,QAAUsD,MAAMC,QAAQvD,EAAKA,MAMjD,C,6FCzBK,MAAOwD,EASkB,qBAACb,GAA0B,EAC1BC,GAExB,MAAO,CACHa,SAAUD,EACVE,UACA,EACIhB,EAAAA,EAAAA,GAAoBC,EAAgBC,IAG/C,E,iCAnBQY,EAAyB,E,kBAAzBA,I,sBARL1H,EAAAA,EAKA6H,EAAAA,I,0kCCUF,MAAOC,EAmCTlI,YAAsBmI,EACkCC,EAClCC,GAFA,KAAAF,eAAAA,EACkC,KAAAC,QAAAA,EAClC,KAAAC,aAAAA,EA9BZ,KAAAC,mBAAmC,IAAI7H,EAAAA,GAKvC,KAAA8H,cAA0D,CAAC,EAK3D,KAAAC,aAAmC,KAsBzC3H,KAAKyH,mBAAmBxH,IAAID,KAAKsH,eAAeM,aAAazH,WAAU,IAAMH,KAAK2H,aAAe,OACpG,CAhBUE,YAIP,OAFA7H,KAAK2H,eAAL3H,KAAK2H,aAAiB3H,KAAK8H,oBAEpB9H,KAAK2H,aAAaI,MAAK,IAEnBC,OAAOC,KAAKjI,KAAK0H,gBAE/B,CAeM9G,cAEHZ,KAAKyH,mBAAmB5G,aAC3B,CAQYqH,QAAQvF,GAAY,iCAI7B,aAFO,EAAKgF,eAAL,EAAKA,aAAiB,EAAKG,oBAE3B,EAAKJ,cAAc/E,IAAOgB,MAAQ,IAJZ,KAKhC,CAMYwE,eAAexF,GAAY,iCAIpC,aAFO,EAAKgF,eAAL,EAAKA,aAAiB,EAAKG,oBAE3B,EAAKJ,cAAc/E,IAAOyF,kBAAezC,CAJZ,KAKvC,CAOemC,mBAAgB,iCAI5B,GAFA,EAAKJ,cAAgB,CAAC,GAElB,EAAKJ,eAAee,OAEpB,OAGJ,MAAMC,EAAmB,EAAKd,aAAae,eAAe,EAAKjB,eAAee,QATlD,oBAW5B,Y,qRAAA,CAA6BC,GAA7B,gCACA,OADgBE,EAChB,QACU7E,QAAa,EAAK4D,QAAQkB,SAASD,EAAU3I,UAE/C8D,IAKJ,EAAK+D,cAAcc,EAAU3I,SAAS8E,IACtC,CACIhB,KAAMA,EAAKF,KACX2E,YAAaI,EAAU3I,SAASuI,aAEvC,CAzB2B,gGA0B/B,E,0JA3GQf,GAAwBtG,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAoCb2H,EAAAA,IAAwB3H,EAAAA,GAAAA,EAAAA,GAAA,E,oBApCnCsG,EAAwBhI,QAAxBgI,EAAwB,OCnB/B,MAAOsB,EAGTxJ,YAAsByJ,EAC4BtG,GAD5B,KAAAsG,oBAAAA,EAC4B,KAAAtG,QAAAA,CAEjD,CAOYC,SAASC,GAAyB,I,EAAA,c,EAAA,YAG3C,GAAqB,qBAAlBA,EAAOC,QAEN,OAAO,KAGX,EAAKH,SAASI,MAAM,qEAAsE,CAACC,KAAMH,EAAOG,KAAMF,QAASD,EAAOC,UAE9H,MAAMkB,QAAa,EAAKiF,oBAAoBV,QAAQ1F,EAAOG,MAE3D,OAAIgB,EAOG,CACHkF,QAASlF,EACTyE,kBAJsB,EAAKQ,oBAAoBT,eAAe3F,EAAOG,OAH9D,IAdgC,E,gLAuB9C,E,0JApCQgG,GAAsC5H,EAAAA,GAAAA,GAAAA,EAAAA,GAI3B+B,EAAAA,GAAM,K,oBAJjB6F,EAAsCtJ,QAAtCsJ,EAAsC,OCC7C,MAAOG,EAGT3J,YAAsByJ,EACgCrB,EACJjF,GAF5B,KAAAsG,oBAAAA,EACgC,KAAArB,QAAAA,EACJ,KAAAjF,QAAAA,CAEjD,CAOYC,SAASC,GAAyB,I,EAAA,c,EAAA,YAG3C,GAAqB,qBAAlBA,EAAOC,QAEN,OAAO,KAGX,EAAKH,SAASI,MAAM,gFAAiF,CAACC,KAAMH,EAAOG,KAAMF,QAASD,EAAOC,UAEzI,MAAMoF,QAAc,EAAKe,oBAAoBf,MAE7C,IAAIA,EAEA,OAAO,KAGX,MAAMkB,EAAc,GAEpB,IAAI,MAAMpF,KAAQkE,SAEK,EAAKN,QAAQkB,SAAS,CAAChG,QAAS,oBAAqBE,KAAMgB,MAErEF,MAELsF,EAAYC,KAAKrF,GAIzB,MAAO,CACHkF,QAASE,EA9B8B,E,gLAgC9C,E,iCA9CQD,GAAsC/H,EAAAA,GAAAA,GAAAA,EAAAA,GAI3BkI,EAAAA,IAAsBlI,EAAAA,GACtB+B,EAAAA,GAAM,K,oBALjBgG,EAAsCzJ,QAAtCyJ,EAAsC,OCH5C,MAAMI,EACb,CACInF,QAASoF,EAAAA,GACT3E,SAAUmE,EACVtE,OAAO,GAME+E,EACb,CACIrF,QAASsF,EAAAA,GACT7E,SAAUsE,EACVzE,OAAO,GCTL,SAAUiF,IAEZ,MAAO,KACAhD,EAAAA,EAAAA,SACAiD,EAAAA,EAAAA,KAEV,CAMK,SAAUC,EAA6BnD,GAEzC,MAAO,KACAF,EAAAA,EAAAA,IAAoB,EAAOE,OAC3BoD,EAAAA,EAAAA,IAAuB,IAC1BP,EACAE,EACAM,EAAAA,EACArC,EACAX,EAAAA,EAEA,CACI3C,QAAS4F,EAAAA,GACT1F,WAAa2F,GAEFA,EAAchC,aAEzBzD,KAAM,CAACuF,EAAAA,GACPrF,OAAO,IAEXwC,EAAAA,EAAAA,GAA2B,qBAElC,CAOK,SAAUgD,EAAuCC,EAAgDzD,GAEnG,MAAO,IACAmD,EAA6BnD,GAChC0D,EAAAA,GACAC,EAAAA,GAEA,CACIjG,QAASkG,EAAAA,EACTzF,SAAUsF,IAEdjD,EAAAA,EAAAA,GAA2B,qBAElC,C,8FCjDK,MAAOqD,EAQkB,qBAAC7D,GAExB,MAAO,CACHa,SAAUgD,EACV/C,UACA,EACIqC,EAAAA,EAAAA,IAA6BnD,IAGxC,CAOiC,4BAACyD,EACAzD,GAE/B,MAAO,CACHa,SAAUgD,EACV/C,UACA,EACI0C,EAAAA,EAAAA,IAAuCC,EAAgBzD,IAGlE,E,iCAlCQ6D,EAAkC,E,kBAAlCA,I,sBAJLjD,EAAAA,EACAkD,EAAAA,I,6DCPF,MAAOT,EADbvK,cAQc,KAAAiL,QAAwC,KAKxC,KAAAC,cAA+B,IAAIC,EAAAA,CAoChD,CA7BcjC,aAEP,OAAOrI,KAAKoK,OACf,CAKUxC,mBAEP,OAAO5H,KAAKqK,cAAcE,cAC7B,CAQMC,UAAUnC,GAEVrI,KAAKoK,SAAW/B,IAKnBrI,KAAKoK,QAAU/B,EACfrI,KAAKqK,cAAcI,OACtB,E,iCA/CQf,EAAa,E,oBAAbA,EAAarK,QAAbqK,EAAa,M,mFCapB,MAAOS,EAQkB,qBAAC9D,GAExB,MAAO,CACHa,SAAUiD,EACVhD,UACA,EACIsC,EAAAA,EAAAA,IAAuBpD,IAGlC,CAOiC,4BAACyD,EAAgDzD,GAE/E,MAAO,CACHa,SAAUiD,EACVhD,UACA,EACIuD,EAAAA,EAAAA,IAAiCZ,EAAgBzD,IAG5D,E,iCAjCQ8D,EAA4B,E,kBAA5BA,I,sBAPLQ,EAAAA,I,kJCHD,MAAMC,EACb,CACI7G,QAAS8G,EAAAA,GACTrG,SAAUsG,EAAAA,EACVzG,OAAO,GAME0G,EACb,CACIhH,QAASiH,EAAAA,GACT/G,WAAad,GAEF,IAAIe,EAAAA,EAA2B,CACI+G,EAAAA,GAEJ9H,GAE1CgB,KAAM,CAAC,CAAC,IAAIC,EAAAA,GAAYtB,EAAAA,KACxBuB,OAAO,GAME6G,EACb,CACInH,QAASoH,EAAAA,GACTlH,WAAY,IAAM,IAAIsB,EAAAA,GAAkBC,EAAAA,EAAAA,IAAOqF,EAAAA,KACPrF,EAAAA,EAAAA,IAAOwF,EAAAA,IACPI,GACA5F,EAAAA,EAAAA,IAAO1C,EAAAA,GAAQ,CAAC4C,UAAU,UAAUC,I,qCChCzE,MAAMyF,EAA+E,SAAS3H,GAGjG,SAAGqD,EAAAA,EAAAA,IAAQrD,GAAMA,SAAU4H,EAAAA,EAAAA,IAAO5H,EAAKA,MAM1C,EAKK,SAAU8F,IAEZ,MAAO,CACHqB,EACAG,EACAG,EACAI,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EAEP,C,mFC1BK,MAAOC,EAGTtM,YAAoBuM,GAAA,KAAAA,UAAAA,CAEnB,CASMC,OAAOC,GAEVA,EAAMC,iBACND,EAAME,kBAEN9L,KAAK0L,UAAUK,MAClB,E,iCApBQN,GAAAA,EAAAA,EAAeO,EAAAA,G,oBAAfP,E,6FAAA,W,mECQP,MAAOQ,G,iCAAAA,E,oBAAAA,I","sources":["webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRegister/layoutComponentsRegister.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsNodesProvider/layoutComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutComponentsRelationsTypesProvider/layoutComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../layout-relations/src/misc/providers.ts","webpack://ng-universal-demo/../layout-relations/src/misc/utils.ts","webpack://ng-universal-demo/../layout-relations/src/modules/dynamicLayoutRelationsEditor.module.ts","webpack://ng-universal-demo/../layout-relations/src/services/layoutManager/layoutManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef, Optional} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndBusService} from '../../modules';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        DndBusService,\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        PackageManagerModule,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <package-manager></package-manager>\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1 layout-content thin-scrollbar\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true, packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LayoutComponentsIteratorService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     * @param designerLayout - Indication whether provide extractor for layout designer types\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(designerLayout: boolean = true,\n                                packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(designerLayout, packages),\n            ]\n        };\n    }\n}","import {Inject, Injectable, OnDestroy, Type} from '@angular/core';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\nimport {Dictionary} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutManager} from '../layoutManager/layoutManager.service';\n\n/**\n * Layout component register type definition\n */\nexport interface LayoutComponentsRegisterType\n{\n    /**\n     * Type that represents layout component\n     */\n    type: Type<any>|undefined|null;\n\n    /**\n     * Display name of layout component\n     */\n    displayName: string|undefined|null;\n}\n\n/**\n * Register for layout components that are part of relations\n */\n@Injectable()\nexport class LayoutComponentsRegister implements OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<LayoutComponentsRegisterType> = {};\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as layout components\n     */\n    public get types(): Promise<string[]>\n    {\n        this._initPromise ??= this._initializeTypes();\n\n        return this._initPromise.then(() =>\n        {\n            return Object.keys(this._definedTypes);\n        });\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutManager: LayoutManager,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                protected _iteratorSvc: LayoutComponentsIteratorService)\n    {\n        this._initSubscriptions.add(this._layoutManager.layoutChange.subscribe(() => this._initPromise = null));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public async getType(name: string): Promise<Type<any>|null>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name]?.type ?? null;\n    }\n\n    /**\n     * Gets display name of type by its name\n     * @param name - Name of type that display name should be obtained\n     */\n    public async getDisplayName(name: string): Promise<string|undefined>\n    {\n        await (this._initPromise ??= this._initializeTypes());\n\n        return this._definedTypes[name]?.displayName ?? undefined;\n    }\n\n    //######################### protected method #########################\n\n    /**\n     * Initialize layout types\n     */\n    protected async _initializeTypes(): Promise<void>\n    {\n        this._definedTypes = {};\n\n        if(!this._layoutManager.layout)\n        {\n            return;\n        }\n\n        const layoutComponents = this._iteratorSvc.getIteratorFor(this._layoutManager.layout);\n\n        for await(const component of layoutComponents)\n        {\n            const type = await this._loader.loadItem(component.metadata);\n\n            if(!type)\n            {\n                continue;\n            }\n\n            this._definedTypes[component.metadata.id] = \n            {\n                type: type.data,\n                displayName: component.metadata.displayName,\n            };\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = await this._componentsRegister.getType(source.name);\n        \n        if(!type)\n        {\n            return null;\n        }\n\n        const displayName = await this._componentsRegister.getDisplayName(source.name);\n\n        return {\n            default: type,\n            displayName,\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader, DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {RelationsNodeDef, RELATIONS_NODES_LOADER} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRegister} from '../layoutComponentsRegister/layoutComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for layout components\n */\n@Injectable()\nexport class LayoutComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: LayoutComponentsRegister,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout components\n        if(source.package != 'layout-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('LayoutComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = await this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        const resultTypes = [];\n\n        for(const type of types)\n        {\n            const node = await this._loader.loadItem({package: 'layout-components', name: type});\n\n            if(node?.data)\n            {\n                resultTypes.push(type);\n            }\n        }\n\n        return {\n            default: resultTypes,\n        };\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_PROVIDERS} from '@anglr/dynamic/relations-editor';\n\nimport {LayoutComponentsRelationsNodesProvider, LayoutComponentsRelationsTypesProvider} from '../services';\n\n/**\n * Provider for layout components relations nodes provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: LayoutComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for layout components relations types provider\n */\nexport const LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: LayoutComponentsRelationsTypesProvider,\n    multi: true\n};","import {ClassProvider, FactoryProvider, Provider, Type} from '@angular/core';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {provideRelations} from '@anglr/dynamic/relations';\nimport {provideRelationsEditor, REFRESH_PALETTE_OBSERVABLES, StaticComponentsRegister, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponentsIteratorService, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {DefaultDynamicPackage, provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER, LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER} from './providers';\nimport {LayoutComponentsRegister, LayoutManager} from '../services';\n\n/**\n * Providers for relations subpackage that works with layout metadata\n */\nexport function provideLayoutRelations(): Provider[]\n{\n    return [\n        ...provideLayout(),\n        ...provideRelations(),\n    ];\n}\n\n/**\n * Providers for relations editor subpackage that works with layout metadata\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditor(packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutEditor(false, packages),\n        ...provideRelationsEditor([]),\n        LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        LayoutManager,\n        LayoutComponentsRegister,\n        LayoutComponentsIteratorService,\n        <FactoryProvider>\n        {\n            provide: REFRESH_PALETTE_OBSERVABLES,\n            useFactory: (layoutManager: LayoutManager) =>\n            {\n                return layoutManager.layoutChange;\n            },\n            deps: [LayoutManager],\n            multi: true\n        },\n        provideStaticPackageSource('layout-components'),\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, that works with layout metadata, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): Provider[]\n{\n    return [\n        ...provideLayoutRelationsEditor(packages),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        },\n        provideStaticPackageSource('static-components'),\n    ];\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {DynamicRelationsEditorModule, StaticComponentsRegister} from '@anglr/dynamic/relations-editor';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {provideLayoutRelationsEditor, provideLayoutRelationsEditorWithStatic} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout relations editor rendering\n */\n@NgModule(\n{\n    exports:\n    [\n        DynamicLayoutEditorModule,\n        DynamicRelationsEditorModule,\n    ]\n})\nexport class DynamicLayoutRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicLayoutRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>,\n                                       packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutRelationsEditorModule,\n            providers:\n            [\n                provideLayoutRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Manager of layout metadata\n */\n@Injectable()\nexport class LayoutManager\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Current layout value\n     */\n    protected _layout: LayoutComponentMetadata|null = null;\n    \n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current layout value\n     */\n    public get layout(): LayoutComponentMetadata|null\n    {\n        return this._layout;\n    }\n    \n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets layout new value\n     * @param layout - Value of layout that changed\n     */\n    public setLayout(layout: LayoutComponentMetadata|null): void\n    {\n        if(this._layout == layout)\n        {\n            return;\n        }\n    \n        this._layout = layout;\n        this._layoutChange.next();\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["DemoLayoutPackageManager","PackageManager","constructor","super","factory","DemoRelationsPackageManager","LayoutEditorSAComponent","history","changeDetector","hotkeys","initSubscriptions","Subscription","metadata","init","ngOnInit","this","add","pop","subscribe","detectChanges","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","ngOnDestroy","unsubscribe","destroy","i0","LAYOUT_HISTORY_MANAGER","selectors","inputs","standalone","features","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","DndBusService","decls","vars","consts","template","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","PackageManagerModule","i2","MatTabsModule","i3","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","_logger","tryToGet","source","package","debug","name","e","warn","LOGGER","DefaultDynamicModuleTypesProvider","moduleName","layoutDesignerTypeExtractor","module","logger","def","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","data","layoutEditorDesignerType","type","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","provide","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","multi","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","LAYOUT_COMPONENT_TRANSFORM","useValue","id","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","Symbol","provideLayoutEditor","designerLayout","packages","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LayoutComponentsIteratorService","map","pkg","provideStaticPackageSource","isBlank","Array","isArray","DynamicLayoutEditorModule","ngModule","providers","DynamicLayoutModule","LayoutComponentsRegister","_layoutManager","_loader","_iteratorSvc","_initSubscriptions","_definedTypes","_initPromise","layoutChange","types","_initializeTypes","then","Object","keys","getType","getDisplayName","displayName","layout","layoutComponents","getIteratorFor","component","loadItem","LAYOUT_COMPONENTS_LOADER","LayoutComponentsRelationsNodesProvider","_componentsRegister","default","LayoutComponentsRelationsTypesProvider","resultTypes","push","RELATIONS_NODES_LOADER","LAYOUT_COMPONENTS_RELATIONS_NODES_PROVIDER","RELATIONS_NODES_PROVIDERS","LAYOUT_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","provideLayoutRelations","provideRelations","provideLayoutRelationsEditor","provideRelationsEditor","LayoutManager","REFRESH_PALETTE_OBSERVABLES","layoutManager","provideLayoutRelationsEditorWithStatic","staticRegister","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","StaticComponentsRegister","DynamicLayoutRelationsEditorModule","DynamicRelationsEditorModule","_layout","_layoutChange","Subject","asObservable","setLayout","next","provideRelationsEditorWithStatic","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DefaultDynamicModuleItemsProvider","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","relationsExportExtractor","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","isRelationsComponentDef","isType","RelationsComponentManager","RelationsManager","RelationsProcessor","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","GoBackModule"],"sourceRoot":""}