{"version":3,"file":"7227.chunk.2a673a83fff5de4329d5.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/pipes/control/control.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox-module.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.metadata.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox-config.ts","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.ts","webpack://ng-universal-demo/../../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/../../../../src/material/checkbox/checkbox.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/checkbox.component.html","webpack://ng-universal-demo/../material-components/src/dynamicItems/checkbox/type.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions> extends LayoutComponentBase<TOptions>\n{\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _control?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FormComponentControlType} from '../../misc/enums';\n\n/**\n * Transforms control name to FormControl|FormArray|FormGroup\n */\n@Pipe({name: 'formComponentControl', standalone: true})\nexport class FormComponentControlSAPipe implements PipeTransform\n{\n    constructor(@Inject(LOGGER) protected _logger: Logger,)\n    {}\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms control name to FormControl|FormArray|FormGroup\n     */\n    public transform(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl): AbstractControl\n    {\n        if (!parentControl ||\n            !controlName)\n        {\n            return this._getControlForType(defaultControlType);\n        }\n\n        const control = parentControl.get(controlName);\n\n        if (!control)\n        {\n            this._logger?.warn('FormComponentControlSAPipe: Unable to find control with name {@name}', {name: controlName});\n        }\n\n        return control ?? this._getControlForType(defaultControlType);\n    }\n\n    //######################### private methods ########################\n\n    /**\n     * Generate dummy abstract control of specified type\n     * @param type \n     * @returns \n     */\n    private _getControlForType(type: FormComponentControlType): FormControl|FormArray|FormGroup\n    {\n        switch (type)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray<any>([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(this._element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                this._element.nativeElement.classList.remove(this.lastCssClass);\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                this._element?.nativeElement.classList.add(options.cssClass);\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {}\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Material checkbox layout metadata loader\n */\nexport const MaterialCheckboxLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialCheckboxComponentOptions>> = async () => new (await import('./metadata/checkbox.layoutMetadata')).MaterialCheckboxLayoutEditorMetadata();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /** Default theme color palette to be used for checkboxes. */\n  color?: ThemePalette;\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Directive,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n} from './checkbox-config';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxMixinBase = mixinTabIndex(\n  mixinColor(\n    mixinDisableRipple(\n      mixinDisabled(\n        class {\n          constructor(public _elementRef: ElementRef) {}\n        },\n      ),\n    ),\n  ),\n);\n\n@Directive()\nexport abstract class _MatCheckboxBase<E>\n  extends _MatCheckboxMixinBase\n  implements\n    AfterViewInit,\n    ControlValueAccessor,\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    CanDisableRipple,\n    FocusableOption\n{\n  /** Focuses the checkbox. */\n  abstract focus(origin?: FocusOrigin): void;\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected abstract _createChangeEvent(isChecked: boolean): E;\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected abstract _getAnimationTargetElement(): HTMLElement | null;\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected abstract _animationClasses: {\n    uncheckedToChecked: string;\n    uncheckedToIndeterminate: string;\n    checkedToUnchecked: string;\n    checkedToIndeterminate: string;\n    indeterminateToChecked: string;\n    indeterminateToUnchecked: string;\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<E> = new EventEmitter<E>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(\n    idPrefix: string,\n    elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    protected _ngZone: NgZone,\n    tabIndex: string,\n    public _animationMode?: string,\n    protected _options?: MatCheckboxDefaultOptions,\n  ) {\n    super(elementRef);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = `${idPrefix}${++nextUniqueId}`;\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: BooleanInput) {\n    const checked = coerceBooleanProperty(value);\n\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this._disabled;\n  }\n  override set disabled(value: BooleanInput) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: BooleanInput) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCheckbox\n  extends _MatCheckboxBase<MatCheckboxChange>\n  implements AfterViewInit, OnDestroy\n{\n  protected _animationClasses = {\n    uncheckedToChecked: 'mat-checkbox-anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mat-checkbox-anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mat-checkbox-anim-checked-unchecked',\n    checkedToIndeterminate: 'mat-checkbox-anim-checked-indeterminate',\n    indeterminateToChecked: 'mat-checkbox-anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mat-checkbox-anim-indeterminate-unchecked',\n  };\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n    options?: MatCheckboxDefaultOptions,\n  ) {\n    super('mat-checkbox-', elementRef, changeDetectorRef, ngZone, tabIndex, animationMode, options);\n  }\n\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  protected _getAnimationTargetElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        this._onBlur();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    super._handleInputClick();\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n}\n",null,"<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label>\n  <span class=\"mat-checkbox-inner-container\"\n       [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\">\n    <input #input\n           class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [checked]=\"checked\"\n           [attr.value]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabIndex]=\"tabIndex\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"_getAriaChecked()\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           (change)=\"_onInteractionEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n    <span matRipple class=\"mat-checkbox-ripple mat-focus-indicator\"\n         [matRippleTrigger]=\"label\"\n         [matRippleDisabled]=\"_isRippleDisabled()\"\n         [matRippleRadius]=\"20\"\n         [matRippleCentered]=\"true\"\n         [matRippleAnimation]=\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\">\n      <span class=\"mat-ripple-element mat-checkbox-persistent-ripple\"></span>\n    </span>\n    <span class=\"mat-checkbox-frame\"></span>\n    <span class=\"mat-checkbox-background\">\n      <svg version=\"1.1\"\n           focusable=\"false\"\n           class=\"mat-checkbox-checkmark\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mat-checkbox-checkmark-path\"\n              fill=\"none\"\n              stroke=\"white\"\n              d=\"M4.1,12.7 9,17.6 20.3,6.3\"/>\n      </svg>\n      <!-- Element for rendering the indeterminate state checkbox. -->\n      <span class=\"mat-checkbox-mixedmark\"></span>\n    </span>\n  </span>\n  <span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\n\nimport {MaterialCheckboxLayoutMetadataLoader} from './checkbox.metadata';\nimport {MaterialCheckboxComponentOptions} from './checkbox.options';\n\n/**\n * Component used for displaying material checkbox\n */\n@Component(\n{\n    selector: 'material-checkbox',\n    templateUrl: 'checkbox.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        MatCheckboxModule,\n        ReactiveFormsModule,\n    ]\n})\n@LayoutEditorMetadata(MaterialCheckboxLayoutMetadataLoader)\nexport class MaterialCheckboxSAComponent extends FormComponentBase<MaterialCheckboxComponentOptions> implements FormComponent<MaterialCheckboxComponentOptions>\n{}","<mat-checkbox [formControl]=\"options?.controlName|formComponentControl:_control|asFormControl|asRequired\">{{options?.label}}</mat-checkbox>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialCheckboxSAComponent} from './checkbox.component';\n\n\nexport default MaterialCheckboxSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_control","_logger","super","i0","FORM_COMPONENT_CONTROL","LOGGER","features","FormComponentControlType","InjectionToken","FormComponentControlSAPipe","transform","controlName","parentControl","defaultControlType","this","_getControlForType","control","get","warn","name","type","FormArray","FormGroup","FormControl","pure","standalone","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","_extensions","_initialized","destroyed","element","extensionsOptions","options","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","lastCssClass","classList","remove","cssClass","add","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatRippleModule","MatCommonModule","ObserversModule","MaterialCheckboxLayoutMetadataLoader","MaterialCheckboxLayoutEditorMetadata","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","_elementRef","_MatCheckboxBase","idPrefix","elementRef","_changeDetectorRef","_ngZone","tabIndex","_animationMode","ariaLabel","ariaLabelledby","labelPosition","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","id","_uniqueId","inputId","required","_required","value","coerceBooleanProperty","ngAfterViewInit","_syncIndeterminate","checked","markForCheck","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","_getAnimationTargetElement","_getAnimationClassForCheckStateTransition","length","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","_createChangeEvent","_inputElement","toggle","_handleInputClick","Promise","resolve","then","_onInteractionEvent","event","stopPropagation","_onBlur","_animationClasses","uncheckedToChecked","checkedToIndeterminate","uncheckedToIndeterminate","checkedToUnchecked","indeterminateToChecked","indeterminateToUnchecked","nativeCheckbox","MatRipple","changeDetectorRef","_focusMonitor","ngZone","animationMode","isChecked","source","monitor","subscribe","focusOrigin","stopMonitoring","_onInputClick","focus","origin","focusVia","ANIMATION_MODULE_TYPE","i2","MaterialCheckboxSAComponent","t","selectors","decls","vars","consts","template","FormPipesModule","i1","CastPipesModule","i3","ReactiveFormsModule","i4","styles","changeDetection","_metadata","injector","instance","_instance","AsFormControlPipe","_valueHash","isBlank","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}