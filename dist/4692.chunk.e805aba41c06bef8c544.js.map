{"version":3,"file":"4692.chunk.e805aba41c06bef8c544.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-config.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label-wrapper.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-animations.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-body.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-body.html","webpack://ng-universal-demo/../../../../src/material/tabs/ink-bar.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/paginated-tab-header.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-content.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label.ts","webpack://ng-universal-demo/../../src/material/tabs/tab.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/decorators/bindThis.decorator.ts"],"sourcesContent":["import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperBase = mixinDisabled(class {});\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state(\n      'left',\n      style({\n        transform: 'translate3d(-100%, 0, 0)',\n        minHeight: '1px',\n\n        // Normally this is redundant since we detach the content from the DOM, but if the user\n        // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.\n        visibility: 'hidden',\n      }),\n    ),\n    state(\n      'right',\n      style({\n        transform: 'translate3d(100%, 0, 0)',\n        minHeight: '1px',\n        visibility: 'hidden',\n      }),\n    ),\n\n    transition(\n      '* => left, * => right, left => center, right => center',\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * pseudo-prior state.\n */\nexport type MatTabBodyPositionState =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'left-origin-center'\n  | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]',\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  readonly _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: CdkPortalOutlet;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number | null;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n          this._onCentered.emit();\n        }\n\n        if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n          this._afterLeavingCenter.emit();\n        }\n      });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState | string): boolean {\n    return (\n      position == 'center' || position == 'left-origin-center' || position == 'right-origin-center'\n    );\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(origin: number): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(CdkPortalOutlet) _portalHost: CdkPortalOutlet;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {take} from 'rxjs/operators';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    // `onStable` might not run for a while if the zone has already stabilized.\n    // Wrap the call in `NgZone.run` to ensure that it runs relatively soon.\n    this._ngZone.run(() => {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        const positions = this._inkBarPositioner(element);\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n      });\n    });\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n  Directive,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  merge,\n  of as observableOf,\n  Subject,\n  EMPTY,\n  Observer,\n  Observable,\n  timer,\n  fromEvent,\n} from 'rxjs';\nimport {take, switchMap, startWith, skip, takeUntil} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() private _dir: Directionality,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap();\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n    // can hold up tests that are in a background tab.\n    this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<void> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<void>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(() => {\n                observer.next();\n              });\n              tabItems.forEach(item => {\n                resizeObserver.observe(item.elementRef.nativeElement);\n              });\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          this.selectFocusedIndex.emit(this.focusIndex);\n          this._itemSelected(event);\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) {\n      return true;\n    }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled =\n        this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n  Directive,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabHeaderBase\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase {\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n}\n",null,"<button class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\"\n     #previousPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     tabindex=\"-1\"\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     [disabled]=\"_disableScrollBefore || null\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n\n<div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\">\n  <div\n    #tabList\n    class=\"mat-tab-list\"\n    [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n    role=\"tablist\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n    <mat-ink-bar></mat-ink-bar>\n  </div>\n</div>\n\n<button class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\"\n     #nextPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     [disabled]=\"_disableScrollAfter || null\"\n     tabindex=\"-1\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-tab-header-pagination-chevron\"></div>\n</button>\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {merge, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n  'primary',\n);\n\ninterface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabGroupBase\n  extends _MatTabGroupMixinBase\n  implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple\n{\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  abstract _allTabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean {\n    return this._dynamicHeight;\n  }\n  set dynamicHeight(value: BooleanInput) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n  set animationDuration(value: NumberInput) {\n    this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : (value as string);\n  }\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input()\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n  set contentTabIndex(value: NumberInput) {\n    this._contentTabIndex = coerceNumberProperty(value, null);\n  }\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input()\n  get preserveContent(): boolean {\n    return this._preserveContent;\n  }\n  set preserveContent(value: BooleanInput) {\n    this._preserveContent = coerceBooleanProperty(value);\n  }\n  private _preserveContent: boolean = false;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(\n    elementRef: ElementRef,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    this.contentTabIndex = defaultConfig?.contentTabIndex ?? null;\n    this.preserveContent = !!defaultConfig?.preserveContent;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, index: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  inputs: ['color', 'disableRipple'],\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabGroupBaseHeader;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n  }\n}\n","<mat-tab-header #tabHeader\n               [selectedIndex]=\"selectedIndex || 0\"\n               [disableRipple]=\"disableRipple\"\n               [disablePagination]=\"disablePagination\"\n               (indexFocused)=\"_focusChanged($event)\"\n               (selectFocusedIndex)=\"selectedIndex = $event\">\n  <div class=\"mat-tab-label mat-focus-indicator\" role=\"tab\" matTabLabelWrapper mat-ripple\n       cdkMonitorElementFocus\n       *ngFor=\"let tab of _tabs; let i = index\"\n       [id]=\"_getTabLabelId(i)\"\n       [attr.tabIndex]=\"_getTabIndex(tab, i)\"\n       [attr.aria-posinset]=\"i + 1\"\n       [attr.aria-setsize]=\"_tabs.length\"\n       [attr.aria-controls]=\"_getTabContentId(i)\"\n       [attr.aria-selected]=\"selectedIndex === i\"\n       [attr.aria-label]=\"tab.ariaLabel || null\"\n       [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n       [class.mat-tab-label-active]=\"selectedIndex === i\"\n       [ngClass]=\"tab.labelClass\"\n       [disabled]=\"tab.disabled\"\n       [matRippleDisabled]=\"tab.disabled || disableRipple\"\n       (click)=\"_handleClick(tab, tabHeader, i)\"\n       (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n\n\n    <div class=\"mat-tab-label-content\">\n      <!-- If there is a label template, use it. -->\n      <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n        <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n      </ng-template>\n\n      <!-- If there is not a label template, fall back to the text label. -->\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\n    </div>\n  </div>\n</mat-tab-header>\n\n<div\n  class=\"mat-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  <mat-tab-body role=\"tabpanel\"\n               *ngFor=\"let tab of _tabs; let i = index\"\n               [id]=\"_getTabContentId(i)\"\n               [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\"\n               [attr.aria-labelledby]=\"_getTabLabelId(i)\"\n               [class.mat-tab-body-active]=\"selectedIndex === i\"\n               [ngClass]=\"tab.bodyClass\"\n               [content]=\"tab.content!\"\n               [position]=\"tab.position!\"\n               [origin]=\"tab.origin\"\n               [animationDuration]=\"animationDuration\"\n               [preserveContent]=\"preserveContent\"\n               (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n               (_onCentering)=\"_setTabBodyWrapperHeight($event)\">\n  </mat-tab-body>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  constructor(/** Content for the tab. */ public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB) @Optional() public _closestTab: any,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MAT_TAB_CONTENT} from './tab-content';\nimport {MAT_TAB_LABEL, MatTabLabel, MAT_TAB} from './tab-label';\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabBase = mixinDisabled(class {});\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n@Component({\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n})\nexport class MatTab extends _MatTabBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MAT_TAB_LABEL)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n  protected _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MAT_TAB_CONTENT, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /**\n   * Classes to be passed to the tab label inside the mat-tab-header container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() labelClass: string | string[];\n\n  /**\n   * Classes to be passed to the tab mat-tab-body container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB_GROUP) @Optional() public _closestTabGroup: any,\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {Func} from '../types/functions';\r\nimport {isFunction} from '../utils/lang';\r\n\r\n/**\r\n * Binds function to this, object instance where is defined, it is importat to place it in correct order with other decorators, usually should be first\r\n */\r\nexport function BindThis(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor): TypedPropertyDescriptor<Func<any, any>>\r\n{\r\n    const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n    if(!isFunction(originalValue))\r\n    {\r\n        throw new Error(`Unable to apply @BindThis decorator to '${propertyKey.toString()}', it is not a method.`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get(this: unknown): Func\r\n        {\r\n            const bound: Func = originalValue.bind(this);\r\n\r\n            Object.defineProperty(this,\r\n                                  propertyKey,\r\n                                  {\r\n                                      value: bound,\r\n                                      configurable: true,\r\n                                      writable: true\r\n                                  });\r\n\r\n            return bound;\r\n        }\r\n    };\r\n}"],"names":["ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","type","FormControl","childType","args","ValidatorFnFactory","constructor","_factoryFn","_args","valueOf","this","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","Object","keys","formGroup","map","validator","filter","itm","propertyName","metadata","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","val","push","disable","addControl","buildFormModel","FormModelBuilder","_injector","build","injector","i0","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","_pressedLetters","tabOut","change","QueryList","changes","subscribe","newItems","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","withTypeAhead","debounceInterval","unsubscribe","pipe","tap","letter","debounceTime","length","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","hasModifierKey","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","MAT_TABS_CONFIG","InjectionToken","_MatTabLabelWrapperBase","mixinDisabled","MatTabLabelWrapper","elementRef","super","focus","nativeElement","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","visibility","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","preserveContent","detach","ngOnDestroy","forwardRef","MatTabBody","DOCUMENT","_MatTabBodyBase","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","clientHeight","_getLayoutDirection","value","_MAT_INK_BAR_POSITIONER","providedIn","factory","element","left","width","MatInkBar","_ngZone","_inkBarPositioner","_animationMode","alignToElement","show","run","onStable","take","positions","inkBar","hide","ANIMATION_MODULE_TYPE","FocusKeyManager","_origin","setFocusOrigin","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","disablePagination","coerceBooleanProperty","selectedIndex","coerceNumberProperty","_keyManager","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","observableOf","resize","realign","updatePagination","_alignInkBarToSelectedTab","merge","_itemsResized","Promise","resolve","then","Math","max","min","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ResizeObserver","EMPTY","switchMap","tabItems","Observable","observer","resizeObserver","forEach","observe","disconnect","skip","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","ENTER","SPACE","focusIndex","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tab","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","ngZone","platform","animationMode","_disableRipple","disableRipple","MatTabHeader","i4","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","_MatTabGroupBase","defaultConfig","_tabs","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","_preserveContent","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","contentTabIndex","_animationDuration","test","_contentTabIndex","backgroundColor","_backgroundColor","classList","remove","add","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","_closestTabGroup","notifyOnChanges","destroy","realignInkBar","_tabHeader","focusTab","header","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","_tabFocusChanged","focusOrigin","MatTabGroup","MatTab","provide","MAT_TAB_GROUP","useExisting","i1","MAT_TAB_CONTENT","MatTabContent","template","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","templateRef","_closestTab","_MatTabBase","_viewContainerRef","textLabel","_contentPortal","templateLabel","_templateLabel","_setTemplateLabelInput","content","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","TemplateRef","MatTabsModule","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","BindThis","_target","propertyKey","descriptor","originalValue","get","isFunction","Error","toString","configurable","bound","bind","defineProperty","writable"],"sourceRoot":""}