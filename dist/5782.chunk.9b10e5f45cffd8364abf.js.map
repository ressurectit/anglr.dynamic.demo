{"version":3,"file":"5782.chunk.9b10e5f45cffd8364abf.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/button/node/buttonNode.component.ts","webpack://ng-universal-demo/../basic-components/src/button/node/buttonNode.component.html","webpack://ng-universal-demo/../basic-components/src/button/metadata/button.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations node component for sample change\n */\n@Component(\n{\n    selector: 'button-node',\n    templateUrl: 'buttonNode.component.html',\n    styleUrls: ['buttonNode.component.css'],\n    standalone: true,\n    imports:\n    [\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonNodeSAComponent extends RelationsNodeBase implements RelationsNode\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected metadataSet(): void\n    {\n    }\n}","<div class=\"node-header\">\n    {{metadata?.id}}\n</div>\n\n<div class=\"node-content\">\n    <div class=\"inputs margin-right-small\">\n        <div class=\"flex-row\">\n            <relation-node-input [parentCoordiantes]=\"_nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"vstup\" [parent]=\"this\"></relation-node-input>\n            <div class=\"margin-left-extra-small\">disabled</div>\n        </div>\n    </div>\n\n    <div class=\"outputs margin-left-small\">\n        <div class=\"flex-row\">\n            <div class=\"margin-right-extra-small\">click</div>\n            <relation-node-output [parentCoordiantes]=\"_nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"vystup\" [parent]=\"this\"></relation-node-output>\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {ButtonNodeSAComponent} from '../node/buttonNode.component';\n\n/**\n * Button relations metadata\n */\nexport class ButtonRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Button',\n        description: 'Simple button',\n        group: 'Sample',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = ButtonNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\n\n//TODO: add way of destruction for nodes! into renderer into interface and here\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected _lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected _nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected _allOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected _inputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected _outputs: Dictionary<RelationsOutput> = {};\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected _inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected _outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this._allOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this._inputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this._outputs;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,)\n    {\n        this._updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this._nodePosition = this.metadata.nodeMetadata.coordinates;\n                this._updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            this._initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._lastMouseDownNodePosition =\n        {\n            x: this._nodePosition.x,\n            y: this._nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._nodePosition =\n            {\n                x: this._lastMouseDownNodePosition.x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this._lastMouseDownNodePosition.y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this._updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected _initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this._inputs = {};\n\n            this._inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this._inputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this._inputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this._allOutputs = this._outputsChildren.toArray();\n            this._outputs = {};\n\n            this._outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this._outputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this._outputs);\n        };\n\n        this._inputsChildren?.changes.subscribe(() => updateInputs());\n        this._outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected _updateRelations(): void\n    {\n        this._inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this._outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected _updatePosition(): void\n    {\n        this._element.nativeElement.style.left = `${this._nodePosition.x}px`;\n        this._element.nativeElement.style.top = `${this._nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this._nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this._nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected abstract metadataSet(): void;\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}"],"names":["ButtonNodeSAComponent","RelationsNodeBase","metadataSet","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","styles","changeDetection","ButtonRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","_changeDetector","_element","_initialized","_isDragging","_lastMouseDownPosition","x","y","_lastMouseDownNodePosition","_nodePosition","_allOutputs","_inputs","_outputs","zoomLevel","_updatePosition","id","metadata","allOutputs","inputs","outputs","ngOnChanges","changes","nameof","nodeMetadata","coordinates","invalidateVisuals","detectChanges","_initEndpoints","_onMouseDown","event","clientX","clientY","stopImmediatePropagation","_onMouseMove","preventDefault","_updateRelations","_onMouseUp","updateInputs","_inputsChildren","forEach","input","updateOutputs","_outputsChildren","toArray","output","subscribe","updateRelation","nativeElement","style","left","top","viewQuery","RelationNodeEndpointBase","_relationManager","_canvas","parentCoordiantes","parentId","parent","ngOnInit","Error","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","addRelation","relation","_relation","start","destroy","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_tempRelation","INVALIDATE_DROP","hostBindings","CommonModule","_relations","relations","ngOnDestroy","startRelation","createRelation","destroying","index","indexOf","splice","push","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target"],"sourceRoot":""}