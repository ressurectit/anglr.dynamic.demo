{"version":3,"file":"6582.chunk.c93fef630d54804ffe4d.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/node/staticInputNode.component.ts","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/node/staticInputNode.component.html","webpack://ng-universal-demo/./app/pages/+relationsComplex/misc/components/staticInput/metadata/staticInput.relationsMetadata.ts","webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations node component for static input\n */\n@Component(\n{\n    selector: 'static-input-node',\n    templateUrl: 'staticInputNode.component.html',\n    // styleUrls: ['staticInputNode.component.scss'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StaticInputNodeSAComponent extends RelationsNodeBase implements RelationsNode\n{\n}","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n        </div>\n    \n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>string</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"stringOutput\" [parent]=\"this\"></relation-node-output>\n            </div>\n    \n            <div class=\"output\">\n                <div>boolean</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"booleanOutput\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {StaticInputNodeSAComponent} from '../node/staticInputNode.component';\n\n/**\n * Static input relations metadata\n */\nexport class StaticInputRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Static input',\n        description: 'Static input node',\n        group: 'Sample component',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = StaticInputNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["StaticInputNodeSAComponent","RelationsNodeBase","t","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationsNodeHeaderSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","StaticInputRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","Object","freeze","this","lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","value","error","complete","defaultValue","EmptyError","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","type","ngOnInit","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","i1","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog"],"sourceRoot":""}