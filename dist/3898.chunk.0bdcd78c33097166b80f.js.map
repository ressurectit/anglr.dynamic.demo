{"version":3,"file":"3898.chunk.0bdcd78c33097166b80f.js","mappings":"qMASM,MAAOA,EAsDTC,cA/CO,KAAAC,SACP,CACIC,KAAM,OACNC,YAAa,0CACbC,MAAO,SACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,OAUb,KAAAC,cAAuF,CAACC,EAAUC,KAErGA,EAAQC,SAAWF,CAAnB,EAMG,KAAAG,gBAA8EF,IAAYA,GAASC,SAKnG,KAAAE,eAA+FH,GAAWA,GAASC,SAAW,CAACD,GAASC,UAAY,GAKpJ,KAAAG,iBAAiE,CAACC,EAAGL,KAExEA,EAAQC,SAAW,IAAnB,EAMAK,OAAOC,OAAOC,KACjB,E,mCClDE,MAAMC,EAAyBC,OAAO,yB,gKCCvC,MAAOC,UAA6BC,EAAAA,G,6DAA7BD,KAAoBE,GAApBF,EAAoB,E,qBAApBA,EAAoBG,UAAAA,CAAAA,CAAAA,iBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,OAAAA,OAAAA,EAAAA,0BAAAA,EAAAA,gBAAAjB,SAAAA,SAAAA,EAAAA,GAAA,MCjBjCkB,EAAAA,GAAAA,EAAAA,QAAAA,G,2BAAmDA,EAAAA,EAAAA,cAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,U,weCU7C,MAAgBP,EAsClBzB,YAAsBiC,GAAA,KAAAA,gBAAAA,EA1BZ,KAAAC,cAAwB,EAuB3B,KAAAC,OAAmB,EAKzB,CApBUC,cAEP,OAAOf,KAAKgB,QACf,CACUD,YAAQE,GAEfjB,KAAKgB,SAAWC,EAEhBjB,KAAKkB,aACR,CAkBYC,WAAQ,iCAEd,EAAKN,eAKR,EAAKA,cAAe,QAEd,EAAKO,cATM,KAUpB,CAOYC,aAAU,uCAEb,EAAKF,UAFQ,KAGtB,CAKMG,oBAEHtB,KAAKY,gBAAgBW,eACxB,CAOSH,cAET,CAKSF,cAET,E,iCA3FiBd,GAAuBO,EAAAA,EAAAA,EAAAA,GAAA,E,kBAAvBP,EAAuBoB,OAAAA,CAAAT,QAAAA,UAAAD,OAAAA,W,oOCTzCH,EAAAA,GAAAA,EAAAA,SAAAA,G,yBAAmCA,EAAAA,EAAAA,QAAAA,EAAAA,CAAa,OAAAc,E,ECgB9C,MAAOC,UAA2CtB,EAAAA,G,6DAA3CsB,KAAoBrB,GAApBqB,EAAoB,E,qBAApBA,EAAoBpB,UAAAA,CAAAA,CAAAA,iBAAAC,SAAAA,CAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,EAAAA,0BAAAA,EAAAA,eAAAA,CAAAA,EAAAA,QAAAA,OAAAA,EAAAA,QAAAA,WAAAA,CAAAA,EAAAA,QAAAA,SAAAjB,SAAAA,SAAAA,EAAAA,GAAA,MDjBjCkB,EAAAA,GAAAA,EAAAA,SAAAA,G,qBACIA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,GACJA,EAAAA,M,MAFwCA,EAAAA,EAAAA,cAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,WACZA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,Q,6TEWtB,MAAOgB,EAUThD,YAAwDiD,EACNC,GADM,KAAAD,QAAAA,EACN,KAAAC,QAAAA,EAJxC,KAAAC,OAAqD,CAAC,CAM/D,CAQYC,gBAAgBxC,GAA2B,I,EAAA,c,EAAA,YAEpD,MAAMyC,EAAU,GAAGzC,EAAS0C,WAAW1C,EAASV,OAEhD,GAAG,EAAKiD,OAAOE,GAEX,OAAO,EAAKF,OAAOE,GAGvB,MAAME,QAAa,EAAKN,QAAQO,SAAS5C,GAEzC,IAAI2C,EAEA,OAAO,KAGX,MAAME,EAAeF,EAAKG,KAE1B,IAAID,EAAaE,qBAIb,OAFA,EAAKT,SAASU,KAAK,oDAAqD,CAACN,QAAS1C,EAAS0C,QAASpD,KAAMU,EAASV,OAE5G,KAGX,EAAKgD,SAASW,MAAM,oDAAqD,CAACP,QAAS1C,EAAS0C,QAASpD,KAAMU,EAASV,OAEpH,MAAM4D,QAAqBL,EAAaE,qBAKxC,OAJAxC,OAAOC,OAAO0C,GAEd,EAAKX,OAAOE,GAAWS,EAEhBA,CAhC6C,E,gLAiCvD,E,iCAtDQd,GAA6BhB,EAAAA,GAUlB+B,EAAAA,IAAwB/B,EAAAA,GACxBgC,EAAAA,GAAM,K,oBAXjBhB,EAA6BiB,QAA7BjB,EAA6B,M,kDCLnC,MAAMkB,EACb,CACIC,gBAAiB,GACjBC,WAAY,GACZC,UAAU,EACVd,KAAMe,EAAAA,GACNC,UAAWD,EAAAA,GACXE,KAAM,CAAC,E,6FCLL,MAAOC,EAGTzE,YAAgDkD,GAAA,KAAAA,QAAAA,CAE/C,CASMwB,UAAkBpC,EAA+CqC,GAEpE,OAAGC,EAAAA,EAAAA,IAAQtC,GAEA,KAGRA,aAAiBgC,EAAAA,GAEThC,GAGXjB,KAAK6B,SAASU,KAAK,iDAEZ,KACV,E,iCA7BQa,GAAAA,EAAAA,EAGuBT,EAAAA,GAAMA,I,0CAH7BS,E,2DCHP,MAAOI,EAQFH,UAAUpC,EAA6BwC,EAAqBH,GAE/D,OAAOrC,GAASwC,CACnB,E,iCAXQD,E,uCAAAA,E","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/listBlock/metadata/listBlock.layoutMetadata.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {ComponentStylingModel, ComponentStylingPropertiesControlComponent, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {ListBlockComponentOptions} from '../listBlock.options';\n\n/**\n * List block layout metadata\n */\nexport class ListBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<ListBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<ListBlockComponentOptions> =\n    {\n        name: 'List',\n        description: 'List block - displays template in array',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n            ],\n        },\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, ListBlockComponentOptions, number]> = (metadata, options) =>\n    {\n        options.template = metadata;\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [ListBlockComponentOptions|undefined|null]> = options => !options?.template;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [ListBlockComponentOptions|undefined|null]> = options => options?.template ? [options?.template] : [];\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, ListBlockComponentOptions]> = (_, options) =>\n    {\n        options.template = null;\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"properties-form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","<select class=\"properties-form-control\" [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["ListBlockLayoutEditorMetadata","constructor","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","addDescendant","metadata","options","template","canDropMetadata","getDescendants","removeDescendant","_","Object","freeze","this","LayoutPropertyMetadata","Symbol","InputStringComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","i0","_changeDetector","_initialized","values","control","_control","value","_controlSet","ngOnInit","_initialize","initialize","invalidateVisuals","detectChanges","inputs","val_r1","SelectValueComponent","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","cacheId","package","type","loadItem","metadataType","data","layoutEditorMetadata","warn","debug","metadataData","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","FormControl","childType","args","AsFormControlPipe","transform","_valueHash","isBlank","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}