{"version":3,"file":"9050.chunk.51550a5ccb09b42a7d4d.js","mappings":"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","sources":["webpack://ng-universal-demo/../grid-components/src/dynamicItems/gridColumns/gridColumns.metadata.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/gridColumns/gridColumns.component.ts","webpack://ng-universal-demo/../grid-components/src/dynamicItems/gridColumns/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridColumnsComponentOptions} from './gridColumns.options';\n\n/**\n * Grid columns layout metadata loader\n */\nexport const GridColumnsLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<GridColumnsComponentOptions>> = async () => new (await import('./metadata/gridColumns.layoutMetadata')).GridColumnsLayoutEditorMetadata();\n\n/**\n * Grid columns relations metadata loader\n */\nexport const GridColumnsRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/gridColumns.relationsMetadata')).GridColumnsRelationsEditorMetadata();\n\n/**\n * Grid columns layout designer type loader\n */\nexport const GridColumnsLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/gridColumnsDesigner.component')).GridColumnsDesignerSAComponent;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {DescendantsGetter, LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MatrixGridModule} from '@anglr/grid';\n\nimport {GridColumnsComponentOptions} from './gridColumns.options';\nimport {GridColumnsLayoutDesignerTypeLoader, GridColumnsLayoutMetadataLoader, GridColumnsRelationsMetadataLoader} from './gridColumns.metadata';\n\n/**\n * Component used for displaying grid columns\n */\n@Component(\n{\n    selector: 'grid-columns',\n    template: '',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        MatrixGridModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<GridColumnsComponentOptions>(options => \n{\n    return options?.columns ?? [];\n})\n@LayoutEditorDesignerType(GridColumnsLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(GridColumnsRelationsMetadataLoader)\n@LayoutEditorMetadata(GridColumnsLayoutMetadataLoader)\nexport class GridColumnsSAComponent extends LayoutComponentBase<GridColumnsComponentOptions> implements LayoutComponent<GridColumnsComponentOptions>\n{\n}","import {GridColumnsSAComponent} from './gridColumns.component';\n\nexport default GridColumnsSAComponent;\n","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["GridColumnsLayoutMetadataLoader","_ref","_asyncToGenerator","GridColumnsLayoutEditorMetadata","apply","arguments","GridColumnsRelationsMetadataLoader","_ref2","GridColumnsRelationsEditorMetadata","GridColumnsLayoutDesignerTypeLoader","_ref3","GridColumnsDesignerSAComponent","GridColumnsSAComponent","LayoutComponentBase","t","selectors","standalone","features","i0","decls","vars","template","rf","ctx","dependencies","MatrixGridModule","styles","changeDetection","__decorate","DescendantsGetter","options","columns","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","constructor","extensions","destroyed","changeDetector","inject","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","this","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","onInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes"],"sourceRoot":""}