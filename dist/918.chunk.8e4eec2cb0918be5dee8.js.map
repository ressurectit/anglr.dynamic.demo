{"version":3,"file":"918.chunk.8e4eec2cb0918be5dee8.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/gridPanelCell/gridPanelCell.utils.ts","webpack://ng-universal-demo/../basic-components/src/gridPanelCell/gridPanelCell.metadata.ts","webpack://ng-universal-demo/../basic-components/src/gridPanelCell/gridPanelCell.component.ts","webpack://ng-universal-demo/../basic-components/src/gridPanelCell/gridPanelCell.component.html","webpack://ng-universal-demo/../basic-components/src/gridPanelCell/type.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {Action} from '@jscrpt/common';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Applies CSS styles of element applying grid panel css grid coordinates\n * @param options - Options for grid panel cell component\n * @param styles - CSS styles of element that should be updated\n */\nexport const applyGridCoordinates: Action<[GridPanelCellComponentOptions|undefined|null, CSSStyleDeclaration]> = (options, style) =>\n{\n    style.gridRowStart = options?.gridRowStart?.toString() ?? '';\n    style.gridRowEnd = options?.gridRowEnd?.toString() ?? '';\n    style.gridColumnStart = options?.gridColumnStart?.toString() ?? '';\n    style.gridColumnEnd = options?.gridColumnEnd?.toString() ?? '';\n};","import {GenericLayoutAsyncMetadata, LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\n\n/**\n * Text block layout metadata descriptor\n */\nexport class GridPanelCellLayoutMetadata extends GenericLayoutAsyncMetadata<GridPanelCellComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected async _getInstance(): Promise<LayoutEditorMetadataDescriptor<GridPanelCellComponentOptions>>\n    {\n        return new (await import('./metadata/gridPanelCell.layoutMetadata')).GridPanelCellLayoutEditorMetadata();\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\n\nimport {GridPanelCellComponentOptions} from './gridPanelCell.options';\nimport {GridPanelCellLayoutMetadata} from './gridPanelCell.metadata';\nimport {applyGridCoordinates} from './gridPanelCell.utils';\n\n/**\n * Component used for displaying grid panel cell\n */\n@Component(\n{\n    selector: 'grid-panel-cell',\n    templateUrl: 'gridPanelCell.component.html',\n    styleUrls: ['gridPanelCell.component.css'],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(GridPanelCellLayoutMetadata)\nexport class GridPanelCellSAComponent extends LayoutComponentBase<GridPanelCellComponentOptions> implements LayoutComponent<GridPanelCellComponentOptions>\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _optionsSet(): void\n    {\n        const style = this._element.nativeElement.style;\n        \n        applyGridCoordinates(this._options, style);\n    }\n}","<ng-template [layoutComponentRenderer]=\"_options?.component\"></ng-template>","import {GridPanelCellSAComponent} from './gridPanelCell.component';\n\nexport default GridPanelCellSAComponent;","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _loader: DynamicItemLoader,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.type,\n                                                                        {\n                                                                            injector,\n                                                                        });\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, isType, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DYNAMIC_MODULE_DATA_EXTRACTORS, DYNAMIC_ITEM_LOADER_PROVIDERS} from '../../misc/tokens';\nimport {DynamicItemLoaderProvider} from './dynamicItemLoader.interface';\nimport {DynamicItem, DynamicModule, DynamicItemSource, DynamicItemType, DynamicModuleDataExtractor} from '../../interfaces';\n\n/**\n * Service used for loading dynamic items\n */\n@Injectable({providedIn: 'root'})\nexport class DynamicItemLoader\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items\n     */\n    protected _cachedDynamicItems: Dictionary<DynamicItemType<DynamicItem>> = {};\n\n    //######################### constructors #########################\n    constructor(@Inject(DYNAMIC_ITEM_LOADER_PROVIDERS) protected _providers: DynamicItemLoaderProvider[],\n                @Inject(DYNAMIC_MODULE_DATA_EXTRACTORS) protected _extractors: DynamicModuleDataExtractor<Type<DynamicItem>>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this._providers))\n        {\n            this._logger?.error('DynamicItemLoader: missing providers!');\n\n            this._providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this._extractors))\n        {\n            this._logger?.error('DynamicItemLoader: missing extractors!');\n\n            this._extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item type, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem<TType extends DynamicItem = any>(source: DynamicItemSource): Promise<DynamicItemType<TType>|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(this._cachedDynamicItems[cacheId])\n        {\n            this._logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this._cachedDynamicItems[cacheId] as DynamicItemType<TType>;\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this._providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this._logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this._extractors)\n        {\n            const dynamicItemType = extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItemType && isType(dynamicItemType))\n            {\n                const result = \n                {\n                    type: dynamicItemType as Type<TType>\n                };\n\n                return this._cachedDynamicItems[cacheId] = result;\n            }\n        }\n\n        this._logger?.debug('DynamicItemLoader: Failed to extract dynamic type {@source}', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["applyGridCoordinates","options","style","gridRowStart","toString","gridRowEnd","gridColumnStart","gridColumnEnd","GridPanelCellLayoutMetadata","GenericLayoutAsyncMetadata","_getInstance","GridPanelCellLayoutEditorMetadata","GridPanelCellSAComponent","LayoutComponentBase","_optionsSet","this","_element","nativeElement","_options","t","selectors","standalone","features","decls","vars","consts","template","i0","LayoutComponentRendererSADirective","changeDetection","LayoutEditorMetadata","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","constructor","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_metadataTransformer","_logger","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","component","instance","componentRef","ngOnChanges","changes","debug","id","ngOnDestroy","clear","nameof","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","type","next","resolvePromiseOr","initialize","invalidateVisuals","designer","destroy","LAYOUT_COMPONENT_TRANSFORM","LOGGER","inputs","outputs","exportAs","DynamicItemLoader","_providers","_extractors","_cachedDynamicItems","Array","isArray","error","source","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","tryToGet","extractor","dynamicItemType","tryToExtract","isType","result","DYNAMIC_ITEM_LOADER_PROVIDERS","DYNAMIC_MODULE_DATA_EXTRACTORS","factory","providedIn","value","Promise"],"sourceRoot":""}