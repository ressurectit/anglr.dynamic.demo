{"version":3,"file":"5957.chunk.454e709fbee913bd7d1b.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/relationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/misc/extractors/componentRelationsNode.extractor.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsNodesProvider/staticComponentsRelationsNodesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/defaultDynamicModuleRelationsProvider/defaultDynamicModuleRelationsProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRelationsTypesProvider/staticComponentsRelationsTypesProvider.service.ts","webpack://ng-universal-demo/../relations-editor/src/misc/providers.ts","webpack://ng-universal-demo/../relations-editor/src/misc/utils.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/../relations/src/misc/extractors/relations.extractor.ts"],"sourcesContent":["import {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', '3px');\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const half = (this.end.y - this.start.y) / 2;\n            \n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + width, this.start.y + half],\n                [this.end.x - width, this.start.y + half],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                //TODO: similar handling\n\n                // switch(this._options?.missingTypeBehavior)\n                // {\n                //     default:\n                //     //case MissingTypeBehavior.ShowNotFound:\n                //     {\n                //         this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.Ignore:\n                //     {\n                //         //do nothing\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.ThrowError:\n                //     {\n                //         throw new Error(`RelationsNodeRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                //     }\n                // }\n\n                return;\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {select} from 'd3';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * TODO\n * - Zoom to point\n */\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    styleUrls: ['relationsCanvas.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    /**\n     * Last mouse up position\n     */\n    protected lastMouseUpPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected relationManager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, null, null);\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.lastMouseDownPosition = \n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition = \n            {\n                x: this.lastMouseUpPosition.x + event.clientX - this.lastMouseDownPosition.x,\n                y: this.lastMouseUpPosition.y + event.clientY - this.lastMouseDownPosition.y,\n            };\n\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n\n            this.lastMouseUpPosition = \n            {\n                x: this.lastMouseUpPosition.x + event.clientX - this.lastMouseDownPosition.x,\n                y: this.lastMouseUpPosition.y + event.clientY - this.lastMouseDownPosition.y,\n            };\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);            \n            \n            this.canvasPosition = \n            {\n                x: (this.canvasPosition.x/this.zoomLevel) * newZoomLevel,\n                y: (this.canvasPosition.y/this.zoomLevel) * newZoomLevel,\n            };\n\n            this.zoomLevel = newZoomLevel;\n\n            this.lastMouseUpPosition = \n            {\n                x: this.canvasPosition.x,\n                y: this.canvasPosition.y\n            };\n\n            this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {relationsExportExtractor} from '@anglr/dynamic/relations';\nimport {resolvePromiseOr} from '@jscrpt/common';\n\nimport {RelationsEditorMetadataType} from '../../decorators';\nimport {RelationsNodeDef} from '../types';\n\n/**\n * Extracts dynamic relations node from default locations\n */\nexport const relationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const relations = await resolvePromiseOr(relationsExportExtractor(module, logger));\n\n    logger?.debug('relationsNodeExtractor: trying to extract dynamic node');\n\n    if(!relations)\n    {\n        return null;\n    }\n\n    const nodeMeta = relations.data as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n    };\n};","import {Type} from '@angular/core';\nimport {DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\n\nimport {RelationsNodeDef} from '../types';\nimport {RelationsEditorMetadataType} from '../../decorators';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic relations node from component relations node\n */\nexport const componentRelationsNodeExtractor: DynamicModuleDataExtractorFn<RelationsNodeDef> = async (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault<Type<any>>;\n    \n    logger?.debug('componentRelationsNodeExtractor: trying to extract dynamic node');\n\n    if(!localModule)\n    {\n        return null;\n    }\n\n    const nodeMeta = localModule.default as RelationsEditorMetadataType;\n\n    if(!nodeMeta)\n    {\n        return null;\n    }\n\n    const metadata = await nodeMeta.relationsEditorMetadata;\n    \n    if(!metadata)\n    {\n        return null;\n    }\n\n    return {\n        data: metadata.nodeDefinition,\n        metaInfo: metadata.metaInfo,\n        singleton: true,\n    };\n};","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations nodes provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsNodesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsNodesProvider: trying to get node {@item}', {name: source.name, package: source.package});\n\n        const type = this._componentsRegister.getType(source.name);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        return {\n            default: type\n        };\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module relations types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleRelationsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: trying to get relations types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/relations');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/relations');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleRelationsProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\nimport {StaticComponentsRegister} from '../staticComponentsRegister/staticComponentsRegister.service';\n\n/**\n * Dynamic relations types provider for static components\n */\n@Injectable()\nexport class StaticComponentsRelationsTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(protected _componentsRegister: StaticComponentsRegister,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public tryToGet(source: DynamicItemSource): DynamicModule|null\n    {\n        //only works with static components\n        if(source.package != 'static-components')\n        {\n            return null;\n        }\n\n        this._logger?.debug('StaticComponentsRelationsTypesProvider: trying to get relations types {@item}', {name: source.name, package: source.package});\n\n        const types = this._componentsRegister.types;\n\n        if(!types)\n        {\n            return null;\n        }\n\n        return {\n            default: types\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_MODULE_TYPES_DATA_EXTRACTORS, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_MODULE_TYPES_PROVIDERS, RELATIONS_NODES_DATA_EXTRACTORS, RELATIONS_NODES_LOADER, RELATIONS_NODES_PROVIDERS, RELATIONS_NODE_DESTROY_SUBJECT} from './tokens';\nimport {componentRelationsNodeExtractor, relationsNodeExtractor} from './extractors';\nimport {StaticComponentsRelationsNodesProvider, StaticComponentsRelationsTypesProvider, DefaultDynamicModuleRelationsProvider} from '../services';\nimport {isRelationsModuleTypes, isRelationsNodeDef} from './utils';\n\n/**\n * Provider for default package relations nodes provider\n */\nexport const DEFAULT_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations nodes provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_NODES_PROVIDERS,\n    useClass: StaticComponentsRelationsNodesProvider,\n    multi: true\n};\n\n/**\n * Provider for default dynamic relations types provider\n */\nexport const DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleRelationsProvider,\n    multi: true\n};\n\n/**\n * Provider for static components relations types provider\n */\nexport const STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_PROVIDERS,\n    useClass: StaticComponentsRelationsTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations nodes extractor\n */\nexport const DEFAULT_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for static and layout components relations nodes extractor\n */\nexport const COMPONENTS_RELATIONS_NODES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_NODES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  componentRelationsNodeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for default relations module types extractor\n */\nexport const DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations module types\n */\nexport const RELATIONS_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_MODULE_TYPES_PROVIDERS),\n                                            inject(RELATIONS_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isRelationsModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for relations node loader\n */\nexport const RELATIONS_NODES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_NODES_PROVIDERS),\n                                            inject(RELATIONS_NODES_DATA_EXTRACTORS),\n                                            isRelationsNodeDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for relations node destory subject\n */\nexport const RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_NODE_DESTROY_SUBJECT,\n    useFactory: () => ({})\n};","import {ClassProvider, Provider, Type} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isBoolean, isJsObject, isPresent, isType} from '@jscrpt/common';\n\nimport {DEFAULT_RELATIONS_NODES_PROVIDER, DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR, DEFAULT_RELATIONS_NODES_EXTRACTOR, DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER, RELATIONS_MODULE_TYPES_LOADER_PROVIDER, RELATIONS_NODES_LOADER_PROVIDER, COMPONENTS_RELATIONS_NODES_EXTRACTOR, STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER, STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER} from './providers';\nimport type {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeManager, StaticComponentsRegister} from '../services';\n\n/**\n * Clamps number between two values\n * @param num - Number to clamp \n * @param min - Minimum value\n * @param max - Maximum value\n */\nexport function clamp(num: number, min: number, max: number): number\n{\n    return Math.min(Math.max(num, min), max);\n}\n\n/**\n * Checks whether data is relations module types\n * @param data - Data to be checked\n */\nexport const isRelationsModuleTypes: DynamicItemLoaderValidatorFn<RelationsModuleTypes> = function(data): data is RelationsModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Checks whether data is relations node def\n * @param data - Data to be checked\n */\nexport const isRelationsNodeDef: DynamicItemLoaderValidatorFn<RelationsNodeDef> = function(data): data is RelationsNodeDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    //singleton should be boolean if used\n    if(isPresent(data.singleton) && !isBoolean(data.singleton))\n    {\n        return false;\n    }\n\n    //meta info should be object if used\n    if(isPresent(data?.metaInfo) && !isJsObject(data.metaInfo))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations editor subpackage\n */\nexport function provideRelationsEditor(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_NODES_PROVIDER,\n        DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER,\n        DEFAULT_RELATIONS_NODES_EXTRACTOR,\n        COMPONENTS_RELATIONS_NODES_EXTRACTOR,\n        DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR,\n        RELATIONS_MODULE_TYPES_LOADER_PROVIDER,\n        RELATIONS_NODES_LOADER_PROVIDER,\n        RelationsNodeManager,\n    ];\n}\n\n/**\n * Providers for relations editor subpackage, with support of static components\n * @param staticRegister - Type that represents implementation of static components register\n */\nexport function provideRelationsEditorWithStatic(staticRegister: Type<StaticComponentsRegister>): Provider[]\n{\n    return [\n        ...provideRelationsEditor(),\n        STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER,\n        STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER,\n        <ClassProvider>\n        {\n            provide: StaticComponentsRegister,\n            useClass: staticRegister\n        }\n    ];\n}\n","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling relations nodes metadata\n */\n@Injectable()\nexport class RelationsNodeManager\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n                delete this._waitingInputRelations[node.id];\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n}","import {Injectable, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\n/**\n * Register for statically typed components that are part of relations\n */\n@Injectable()\nexport abstract class StaticComponentsRegister\n{\n    //######################### protected fields #########################\n\n    /**\n     * Object storing defined types\n     */\n    protected _definedTypes: Dictionary<Type<any>> = this.getDefinedTypes();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets available types that are used as static components\n     */\n    public get types(): string[]\n    {\n        return Object.keys(this._definedTypes);\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets type by its name\n     * @param name - Name of type that should be obtained\n     */\n    public getType(name: string): Type<any>|null\n    {\n        return this._definedTypes[name] ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets defined static components types containing metadata\n     */\n    protected abstract getDefinedTypes(): Dictionary<Type<any>>;\n}","import {Type} from '@angular/core';\nimport {DynamicItemDefData, DynamicModule, DynamicModuleDataExtractorFn} from '@anglr/dynamic';\nimport {isPresent, isType} from '@jscrpt/common';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {isRelationsComponentType} from '../../decorators';\n\n/**\n * Module with relations exports\n */\ninterface ɵDynamicModuleWithRelations extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: Type<RelationsComponent>;\n\n    /**\n     * Relations named export value\n     */\n    relations?: Type<RelationsComponent>;\n}\n\n/**\n * Extracts dynamic relations from default locations\n * \n * - relations export\n * - default export\n */\nexport const relationsExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData<Type<RelationsComponent>>> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithRelations;\n\n    logger?.debug('relationsExportExtractor: trying to extract dynamic relations');\n\n    if(isPresent(localModule.relations) && isType(localModule.relations) && isRelationsComponentType(localModule.relations))\n    {\n        return {\n            data: localModule.relations\n        };\n    }\n\n    if(isPresent(localModule.default) && isType(localModule.default) && isRelationsComponentType(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};"],"names":["NodeRelationPath","constructor","_parentGroup","_relationManager","start","end","_destroyingSubject","Subject","output","input","this","_path","append","attr","_lineGenerator","line","curve","curveBundle","destroying","asObservable","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","x","width","half","y","third","RelationsNodeRendererSADirective","viewContainerRef","relationsNodeManager","loader","logger","destroySubscription","componentRef","componentMetadata","zoomLevel","create","EventEmitter","component","instance","ngOnChanges","changes","nameof","isPresent","zoomChanges","chngs","addSimpleChange","previousValue","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","createComponent","data","injector","node","subscribe","metadata","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","i0","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","ctx_r1","RelationsCanvasSAComponent","relationManager","backgroundSize","lastMouseDownPosition","lastMouseUpPosition","canvasPosition","isDragging","nodeDefinitions","backgroundSizeStyle","_backgroundPositionStyle","createRelation","select","relationsGroup","nativeElement","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","onWheel","deltaY","newZoomLevel","clamp","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","viewQuery","ElementRef","ctx","CommonModule","i2","styles","changeDetection","relationsNodeExtractor","module","relations","resolvePromiseOr","relationsExportExtractor","nodeMeta","relationsEditorMetadata","nodeDefinition","metaInfo","componentRelationsNodeExtractor","localModule","default","singleton","StaticComponentsRelationsNodesProvider","_componentsRegister","_logger","tryToGet","source","type","getType","factory","DefaultDynamicModuleRelationsProvider","moduleName","e","StaticComponentsRelationsTypesProvider","types","DEFAULT_RELATIONS_NODES_PROVIDER","provide","RELATIONS_NODES_PROVIDERS","useClass","DefaultDynamicModuleItemsProvider","multi","STATIC_COMPONENTS_RELATIONS_NODES_PROVIDER","DYNAMIC_RELATIONS_MODULE_TYPES_PROVIDER","RELATIONS_MODULE_TYPES_PROVIDERS","STATIC_COMPONENTS_RELATIONS_MODULE_TYPES_PROVIDER","DEFAULT_RELATIONS_NODES_EXTRACTOR","RELATIONS_NODES_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","COMPONENTS_RELATIONS_NODES_EXTRACTOR","DEFAULT_RELATIONS_MODULE_TYPES_EXTRACTOR","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","defaultExportExtractor","RELATIONS_MODULE_TYPES_LOADER_PROVIDER","RELATIONS_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isRelationsModuleTypes","optional","undefined","RELATIONS_NODES_LOADER_PROVIDER","isRelationsNodeDef","RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER","RELATIONS_NODE_DESTROY_SUBJECT","num","min","max","Math","isBlank","Array","isArray","isType","isBoolean","isJsObject","provideRelationsEditor","RelationsNodeManager","provideRelationsEditorWithStatic","staticRegister","StaticComponentsRegister","_nodes","_waitingInputRelations","_activeInput","outputNode","outputName","relationsNode","relation","startRelation","_b","_a","push","inputName","inputNode","endRelation","waitingInputRelations","waiting","getMetadata","result","nodeIds","Object","keys","displayName","relationsOptions","nodeMetadata","allOutputs","outputMeta","parentId","_definedTypes","getDefinedTypes","isRelationsComponentType"],"sourceRoot":""}