{"version":3,"file":"5987.chunk.62568a902460f2653b66.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/codePropertiesControl/codePropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":["import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, Type} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LanguageModel, CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent} from '@anglr/dynamic';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {PropertiesControl} from '../../interfaces';\nimport {PropertiesControlBase} from '../../modules';\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Base component used for displaying code properties control\n */\n@Component(\n{\n    selector: 'base-code-properties-control',\n    templateUrl: 'codePropertiesControl.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BaseCodePropertiesControlSAComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Name of property that will be set by this component\n     */\n    @Input()\n    public property: string|undefined|null;\n\n    /**\n     * Language model to be used in code editor\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        if(isBlank(this.property) || !this.languageModel)\n        {\n            return;\n        }\n\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.form?.get(this.property)?.value ?? '',\n                languageModel: this.languageModel\n\n            }\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.get(this.property);\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result.content);\n            }\n        }\n    }\n}\n\n/**\n * Gets code properties control component for specific property\n * @param property - Name of property that will be set by this component\n * @param languageModel - Language model to be used in code editor\n */\nexport function codePropertiesControlFor<TModel>(property: Extract<keyof TModel, string>, languageModel: LanguageModel): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'code-properties-control',\n        templateUrl: 'codePropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class CodePropertiesControl<TOptions = any> extends BaseCodePropertiesControlSAComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override property: string|undefined|null = property;\n\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override languageModel: LanguageModel|undefined|null = languageModel;\n    }\n\n    return CodePropertiesControl;\n}","<button type=\"button\" type=\"button\" class=\"dynamic-btn dynamic-btn-primary dynamic-margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit {{property}}</span>\n</button>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(75vh - 32px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-margin-top-extra-small\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>ok</span>\n    </button>\n</div>","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["BaseCodePropertiesControlSAComponent","PropertiesControlBase","constructor","changeDetector","metadataExtractor","dialog","super","showCodeEditor","isBlank","property","languageModel","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","form","get","value","afterClosed","isPresent","control","FormControl","setValue","codePropertiesControlFor","CodePropertiesControl","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","ctx","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","layoutEditorMetadata","warn","debug","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","globalDefine","global","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","_","label","options","target","languages","module","moduleResolution","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","noSemanticValidation","noSyntaxValidation","CodeEditorComponent","element","codeEditor","openedFile","changeEvent","save","EventEmitter","contentChange","ngOnChanges","changes","nameof","this","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","code","compiledCode","ngOnDestroy","dispose","editor","nativeElement","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","initialData","language","Uri","extension","setModel","outputs","encapsulation","changeDetection","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","LanguageModel","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","error","complete","defaultValue","EmptyError","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","ngOnInit","getClosestDialog","openDialogs","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","i1","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","parent","parentElement","classList","contains","find"],"sourceRoot":""}