{"version":3,"file":"3292.chunk.746140809eae4e2489a9.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/editorHotkeys/editorHotkeys.service.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? id : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: undefined,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: (item.metadata.singleton ? (item.metadata.displayName || item.itemSource.name) : newCompnentId): item.metadata.singleton\"\n                 (cdkDragDropped)=\"generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? (item.metadata.displayName || item.itemSource.name) : (item.metadata.metaInfo?.name ?? item.itemSource.name)}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DebounceCall, Dictionary, generateId, NoopAction} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: NodesPaletteItem[] = [];\n\n    /**\n     * Promise used for syncing async operations\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.loadNodes()));\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    @DebounceCall(10)\n    protected async loadNodes(): Promise<void>\n    {\n        await this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n\n        this.allItems = [];\n        this.groupedItems = {};\n\n        //TODO make it dynamic\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n\n        syncResolve?.();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected generateNewId(): void\n    {\n        this.newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input, FactoryProvider, inject, OnDestroy, OnInit, Inject, ChangeDetectorRef, OnChanges, SimpleChanges} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n        PackageManagerModule,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: EditorHotkeys,\n            useFactory: (hotkeys: AppHotkeysService, storage: MetadataStorage) => new EditorHotkeys(hotkeys, inject(RELATIONS_HISTORY_MANAGER), storage),\n            deps: [AppHotkeysService, MetadataStorage],\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected hotkeys: EditorHotkeys,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                protected changeDetector: ChangeDetectorRef,)\n    {\n        hotkeys.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys.destroy();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n\n        this.history.getNewState();\n    }\n}","<div class=\"flex-row flex-1\">\n    <div class=\"overflow-vertical-scroll thin-scrollbar\">\n        <package-manager></package-manager>\n        <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    </div>\n\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","<div class=\"flex-row\">\n    <button class=\"btn-icon margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"flex-row\">\n        <select class=\"form-control flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"flex-row align-items-center margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"flex-1\">{{package}}</div>\n\n        <button class=\"btn-icon margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    styleUrls: ['packageManager.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {AppHotkeysService} from '@anglr/common/hotkeys';\nimport {Hotkey} from 'angular2-hotkeys';\n\nimport {MetadataHistoryManager} from '../metadataHistoryManager/metadataHistoryManager.service';\nimport {MetadataStorage} from '../metadataStorage/metadataStorage.service';\n\n/**\n * Class that handles hotkeys for editors\n */\nexport class EditorHotkeys\n{\n    //######################### constructor #########################\n    constructor(protected hotkeys: AppHotkeysService,\n                protected historyManager: MetadataHistoryManager,\n                protected metadataStorage: MetadataStorage,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public destroy(): void\n    {\n        this.hotkeys.destroy();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Initialize hotkeys\n     */\n    public init(): void\n    {\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+s', () =>\n        {\n            this.metadataStorage.saveMetadata();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Saves current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+z', () =>\n        {\n            this.historyManager.undo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Undo current state of editor'));\n\n        this.hotkeys.hotkeys.add(new Hotkey('ctrl+y', () =>\n        {\n            this.historyManager.redo();\n\n            return false;\n        }, ['INPUT', 'TEXTAREA'], 'Redo current state of editor'));\n    }\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["ToRelationsDragDataSAPipe","transform","value","id","singleton","metadata","itemSource","name","displayName","undefined","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","x","y","options","pure","standalone","i0","NodesPaletteSAComponent","constructor","_moduleTypesLoader","_nodesLoader","_changeDetector","packageManager","_metadataManager","_refreshObservables","_logger","initSubscriptions","Subscription","allItems","syncPromise","Promise","resolve","groupedItems","newCompnentId","generateId","isDragOverPalette","ngOnInit","Array","isArray","obs","add","subscribe","loadNodes","usedPackagesChange","ngOnDestroy","this","unsubscribe","syncResolve","packageName","usedPackages","types","loadItem","data","type","push","warn","item","group","_a","detectChanges","generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","LOGGER","selectors","inputs","canvasDropList","features","decls","vars","consts","template","CommonModule","i3","DragDropModule","i4","styles","changeDetection","__decorate","DebounceCall","RelationsEditorSAComponent","hotkeys","history","changeDetector","init","pop","ngOnChanges","changes","nameof","clean","setInitialState","destroy","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","getNewState","RELATIONS_HISTORY_MANAGER","provide","EditorHotkeys","useFactory","storage","inject","deps","AppHotkeysService","MetadataStorage","ctx","RelationsCanvasSAComponent","i2","PackageManagerModule","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","PackageManagerComponent","detailVisible","availablePackages","updatedAvailablePackages","addPackage","setUsedPackages","removePackage","filter","itm","packages","find","it","ReactiveFormsModule","historyManager","metadataStorage","Hotkey","saveMetadata","undo","redo","PackageManager","storageName","_usedPackages","usedPackagesSubject","Subject","packagesChangeSubject","store","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","get","source","packagesChange","next","asObservable","result","set","refresh"],"sourceRoot":""}