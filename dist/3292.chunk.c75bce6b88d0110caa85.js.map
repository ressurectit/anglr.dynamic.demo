{"version":3,"file":"3292.chunk.c75bce6b88d0110caa85.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? id : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: singleton ? value.metadata.displayName || value.itemSource.name : undefined,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"editor-component-name\">{{data.metadata.singleton ? (data.metadata.displayName || data.itemSource.name) : (data.metadata.metaInfo?.name ?? data.itemSource.name)}}</div>\n<div class=\"editor-component-description\" *ngIf=\"data.metadata.metaInfo?.description\">{{data.metadata.metaInfo?.description}}</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input, HostBinding, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag} from '@angular/cdk/drag-drop';\nimport {PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNodeManager} from '../../../services';\nimport {NodesPaletteItem} from '../nodesPalette.interface';\n\n/**\n * Component displaying nodes palette item\n */\n@Component(\n{\n    selector: 'nodes-palette-item',\n    templateUrl: 'nodesPaletteItem.component.html',\n    styleUrls: ['nodesPaletteItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether node is already used\n     */\n    @HostBinding('class.used')\n    protected used: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Nodes palette item\n     */\n    @Input()\n    public data!: NodesPaletteItem;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Optional() protected _cdkDrag: CdkDrag,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        for (const nodeId in this._metadataManager.nodes)\n        {\n            if (this.data?.itemSource?.name === nodeId)\n            {\n                this._setUsed(true);\n                break;\n            }\n        }\n\n        //TODO initsubscription add used change\n        this.initSubscriptions.add(this._metadataManager.nodeRegisterChange.subscribe(registeredNode => \n        {\n            if (registeredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(true);\n            }\n        }));\n        this.initSubscriptions.add(this._metadataManager.nodeUnregisterChange.subscribe(unregisteredNode => \n        {\n            if (unregisteredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(false);\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets used indication for node\n     * @param used \n     */\n    protected _setUsed(used: boolean): void\n    {\n        this.used = used;\n\n        if (this._cdkDrag)\n        {\n            this._cdkDrag.disabled = used;\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Focus to relations node\n     * @param item \n     * @returns \n     */\n    @HostListener('dblclick')\n    protected focusNode(): void\n    {\n        if (!this.used ||\n            !this.data?.metadata?.singleton)\n        {\n            return;\n        }\n\n        this._metadataManager.setActiveNode(this.data?.itemSource?.name);\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <nodes-palette-item \n                [data]=\"item\"\n                class=\"editor-component mat-elevation-z2\"\n                cdkDrag\n                [cdkDragData]=\"item | toRelationsDragData: (item.metadata.singleton ? item.itemSource.name : newCompnentId): item.metadata.singleton\"\n                (cdkDragDropped)=\"generateNewId()\"></nodes-palette-item>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DebounceCall, Dictionary, generateId, NoopAction} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\nimport {NodesPaletteItemSAComponent} from './item/nodesPaletteItem.component';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n        NodesPaletteItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: NodesPaletteItem[] = [];\n\n    /**\n     * Promise used for syncing async operations\n     */\n    protected syncPromise: Promise<void> = Promise.resolve();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.loadNodes()));\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    @DebounceCall(10)\n    protected async loadNodes(): Promise<void>\n    {\n        await this.syncPromise;\n        let syncResolve: NoopAction|undefined;\n        this.syncPromise = new Promise(resolve => syncResolve = resolve);\n\n        this.allItems = [];\n        this.groupedItems = {};\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n\n        syncResolve?.();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected generateNewId(): void\n    {\n        this.newCompnentId = generateId(16);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnInit, Inject, ChangeDetectorRef, OnChanges, SimpleChanges, ViewChild, Optional} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n        PackageManagerModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relation canvas\n     */\n    @ViewChild(RelationsCanvasSAComponent)\n    protected relationCanvas: RelationsCanvasSAComponent|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {        \n        if (event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            const coordinates = this.relationCanvas?.getPositionInCanvas(event.dropPoint);\n            if(coordinates)\n            {\n                event.item.data.metadata.nodeMetadata.coordinates.x = coordinates.x;\n                event.item.data.metadata.nodeMetadata.coordinates.y = coordinates.y;\n            }\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n\n        this.history.getNewState();\n    }\n}","<div class=\"flex-row flex-1\">\n    <div class=\"overflow-vertical-scroll thin-scrollbar\">\n        <package-manager></package-manager>\n        <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    </div>\n\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","<div class=\"flex-row\">\n    <button type=\"button\" class=\"btn-icon margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"flex-row\">\n        <select class=\"form-control flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"flex-row align-items-center margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    styleUrls: ['packageManager.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["ToRelationsDragDataSAPipe","transform","value","id","singleton","metadata","itemSource","name","displayName","undefined","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","x","y","options","pure","standalone","i0","NodesPaletteItemSAComponent","constructor","_changeDetector","packageManager","_metadataManager","_cdkDrag","_logger","initSubscriptions","Subscription","used","ngOnInit","nodeId","nodes","data","_setUsed","add","nodeRegisterChange","subscribe","registeredNode","nodeUnregisterChange","unregisteredNode","ngOnDestroy","this","unsubscribe","disabled","markForCheck","focusNode","setActiveNode","LOGGER","selectors","hostVars","hostBindings","ctx","CommonModule","i4","styles","changeDetection","NodesPaletteSAComponent","_moduleTypesLoader","_nodesLoader","_refreshObservables","allItems","syncPromise","Promise","resolve","groupedItems","newCompnentId","generateId","isDragOverPalette","Array","isArray","obs","loadNodes","usedPackagesChange","syncResolve","packageName","usedPackages","types","loadItem","type","push","warn","item","group","_a","detectChanges","generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","inputs","canvasDropList","features","decls","vars","consts","template","i3","DragDropModule","__decorate","DebounceCall","RelationsEditorSAComponent","history","changeDetector","hotkeys","init","pop","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","destroy","addNode","event","relationCanvas","getPositionInCanvas","dropPoint","getNewState","RELATIONS_HISTORY_MANAGER","viewQuery","RelationsCanvasSAComponent","i2","PackageManagerModule","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","PackageManagerComponent","detailVisible","availablePackages","updatedAvailablePackages","addPackage","setUsedPackages","removePackage","filter","itm","packages","find","it","ReactiveFormsModule","PackageManager","storageName","_usedPackages","usedPackagesSubject","Subject","packagesChangeSubject","store","inject","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","get","source","packagesChange","next","asObservable","result","set","refresh"],"sourceRoot":""}