{"version":3,"file":"2584.chunk.f5103bab31fb52b68e49.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/./app/services/layoutData/layoutData.service.ts","webpack://ng-universal-demo/../layout/src/types/textStyling.types.ts","webpack://ng-universal-demo/./app/services/demoData/demoData.service.ts","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+default/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.html","webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.ts","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+default/preview/preview.component.ts","webpack://ng-universal-demo/./app/pages/+default/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+default/relations/relations.component.ts","webpack://ng-universal-demo/./app/services/relationsData/relationsData.service.ts","webpack://ng-universal-demo/./app/pages/+default/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/./app/pages/+default/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts"],"sourcesContent":["<div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n    <button mat-icon-button *ngIf=\"hasChildren\" (click)=\"toggle()\"\n        [attr.aria-label]=\"'Toggle'\">\n        <span class=\"fa\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n    </button>\n    <div \n        [class.selected]=\"data?.component?.options?.typeMetadata?.id === _manager.selectedComponent\"\n        [class.highlighted]=\"data?.component?.options?.typeMetadata?.id === _manager.highlightedComponent\"\n        (mouseover)=\"highlight($event, data?.component?.options?.typeMetadata?.id)\"\n        (click)=\"_manager.selectComponent(data?.component?.options?.typeMetadata?.id)\">{{data?.component?.options?.typeMetadata?.displayName || data?.component?.options?.typeMetadata?.id}}</div>\n</div>\n\n<div class=\"node-children\" \n        cdkDropList\n        (cdkDropListDropped)=\"data?.component?.addDescendant($event)\"\n        [cdkDropListEnterPredicate]=\"_canDrop\"\n        [id]=\"'component-tree-' + data?.component?.options?.typeMetadata?.id\"\n        *ngIf=\"hasChildren || _canDrop()\"\n        [class.hidden]=\"!open\"\n        connectDropLists\n        connectDropListsPrefix=\"component-tree-\">\n    <div \n        *ngFor=\"let child of data?.children\"\n        cdkDrag \n        [cdkDragData]=\"{metadata: child.component.options?.typeMetadata, parentId: child.parent?.component?.id}\"\n        [cdkDragDisabled]=\"child.component.dragDisabled\"\n        class=\"node-child\">\n        <components-tree-item [data]=\"child\"></components-tree-item>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Func} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../../directives';\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../../services';\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.data?.children && this.data?.children.length > 0;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.component?.options?.typeMetadata?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach(child => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Indicataion whether drag data can be dropped into node\n     * @returns \n     */\n    protected _canDrop: Func<boolean> = () => this.data?.component?.canDrop() ?? false;\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataManager, LayoutEditorMetadataManagerComponent} from '../../services';\nimport {ComponentTreeNodeTemplateSADirective, ConnectDropListsSADirective} from '../../directives';\nimport {ComponentsTreeItemSAComponent} from './item';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentTreeNodeTemplateSADirective,\n        DragDropModule,\n        ConnectDropListsSADirective,\n        ComponentsTreeItemSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutEditorMetadataManagerComponent|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.root;\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.root;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected hasChild(node: LayoutEditorMetadataManagerComponent): boolean\n    {\n        return !!node.children && node.children.length > 0;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new component\n     */\n    public transform(value: ComponentsPaletteItem, id: string): LayoutComponentDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"_designerDropLists\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toLayoutDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\"\n                 (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\">\n                <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview>\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag, CdkDragStart, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutComponentDragData} from '../../interfaces';\nimport {LAYOUT_MODULE_TYPES_LOADER} from '../../misc/tokens';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Array of available cdk drop lists\n     */\n    protected _designerDropLists: string[] = [];\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _metadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        this._getDesignerDropLists();\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._metadataExtractor.extractMetadata(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    /**\n     * Removes temporary palette item when drag ends\n     * @param key Items group key\n     */\n    protected _onDragEnded(key: string): void\n    {\n        if (!isPresent(key))\n        {\n            return;\n        }\n\n        this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    }\n\n    /**\n     * Generates temporary palette item when drag starts\n     * @param event Drag start event\n     * @param key Items group key\n     * @param item Palette item\n     */\n    protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: ComponentsPaletteItem): void\n    {\n        const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n        if (isPresent(currentIdx))\n        {\n            this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n                ...item,\n                temp: true\n            });\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets and sets designer drop lists\n     */\n    protected _getDesignerDropLists(): void\n    {\n        this._designerDropLists = this._metadataManager.flatTree.map(itm => itm.component.id).reverse();\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number [control]=\"_value\"></input-number> <select-value [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<div>Margin</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div>Padding</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"_visible\" class=\"properties-main\">\n    <div class=\"header\">Properties <span class=\"bold\">{{_metadata?.metaInfo?.name ?? _component?.options?.typeMetadata?.name}} - {{_component?.options?.typeMetadata?.id}}</span></div>\n\n    <div class=\"form-group\">\n        <label class=\"control-label\">Display name</label>\n        <input class=\"form-control\" type=\"text\" [formControl]=\"_displayName\">\n    </div>\n\n    <ng-container *ngFor=\"let props of _propertiesData\">\n        <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n            <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n        </ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {Dictionary, extend, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected _optionsFormSubscription: Subscription|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether are properties visible\n     */\n    protected _visible: boolean = false;\n\n    /**\n     * Instance of selected designer component\n     */\n    protected _component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected _metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected _displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected _propertiesData: PropertiesEditorData[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected _formModelBuilder: FormModelBuilder,\n                protected _changeDetector: ChangeDetectorRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => this._initProperties()));\n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => this._initProperties()));\n\n        this._displayName\n            .valueChanges\n            .subscribe(displayName =>\n            {\n                if(this._component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this._component.options.typeMetadata.displayName = displayName;\n\n                    // eslint-disable-next-line no-self-assign\n                    this._component.options = this._component.options;\n                    this._manager.displayNameUpdated();\n                }\n            });\n\n        this._initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    protected async _initProperties(): Promise<void>\n    {\n        if(isPresent(this._manager.selectedComponent))\n        {\n            this._visible = true;\n            const component = this._manager.getComponent(this._manager.selectedComponent);\n\n            if(component)\n            {\n                this._visible = true;\n                this._component = component;\n\n                await this._getMetadata();\n            }\n            else\n            {\n                this._hide();\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async _getMetadata(): Promise<void>\n    {\n        if(this._component?.options?.typeMetadata)\n        {\n            this._displayName.setValue(this._component.options.typeMetadata.displayName || this._component.options.typeMetadata.id, {emitEvent: false});\n\n            this._metadata = await this._metadataExtractor.extractMetadata(this._component.options?.typeMetadata);\n\n            if(!this._metadata)\n            {\n                this._logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this._component.options?.typeMetadata.package, name: this._component.options?.typeMetadata.name});\n\n                this._hide();\n            }\n\n            this._optionsFormSubscription?.unsubscribe();\n            this._optionsFormSubscription = new Subscription();\n            this._propertiesData = [];\n\n            //properties metadata\n            if(this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this._metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                    const metadata = this._propertyExtractor.extract(props.modelType);\n    \n                    this._optionsFormSubscription.add(form.valueChanges.subscribe(data =>\n                    {\n                        if(this._component?.options?.typeMetadata)\n                        {\n                            extend(true, this._component.options.typeMetadata.options, data);\n    \n                            // eslint-disable-next-line no-self-assign\n                            this._component.options = this._component.options;\n                            this._component.invalidateVisuals();\n                        }\n                    }));\n\n                    this._propertiesData.push(\n                    {\n                        form,\n                        metadata,\n                        controls: props.propertiesControls,\n                    });\n                }\n            }\n\n            if(this._component)\n            {\n                const parent = this._manager.getParent(this._component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this._metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            const form = this._formModelBuilder.build(new props.modelType(this._component?.options?.typeMetadata.options));\n                            const metadata = this._propertyExtractor.extract(props.modelType);\n            \n                            this._optionsFormSubscription.add(form.valueChanges.subscribe(data =>\n                            {\n                                if(this._component?.options?.typeMetadata)\n                                {\n                                    extend(true, this._component.options.typeMetadata.options, data);\n            \n                                    // eslint-disable-next-line no-self-assign\n                                    this._component.options = this._component.options;\n                                    this._component.invalidateVisuals();\n                                }\n                            }));\n        \n                            this._propertiesData.push(\n                            {\n                                form,\n                                metadata,\n                                controls: props.propertiesControls,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this._hide();\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected _hide(): void\n    {\n        this._visible = false;\n        this._component = null;\n        this._metadata = null;\n        this._propertiesData = [];\n        this._optionsFormSubscription?.unsubscribe();\n        this._optionsFormSubscription = null;\n        this._changeDetector.detectChanges();\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nconst DATA = 'LAYOUT_DATA';\n\n/**\n * Service used for obtaining and storing layout data\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutDataService\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    public setData(name: string, data: LayoutComponentMetadata): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(DATA, store);\n    }\n\n    public getData(name: string): LayoutComponentMetadata|null\n    {\n        return (this._storage.get(DATA)?.[name]) ?? null;\n    }\n\n    public removeData(name: string): void\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        delete store[name];\n\n        this._storage.set(DATA, store);\n    }\n\n    public getStored(): string[]\n    {\n        const store: Dictionary<LayoutComponentMetadata> = this._storage.get(DATA) ?? {};\n\n        return Object.keys(store);\n    }\n}","/**\n * Available types of font weight\n */\nexport enum TextFontWeight\n{\n    /**\n     * Font weight light\n     */\n    Light = 200,\n\n    /**\n     * Font weight normal\n     */\n    Normal = 400,\n\n    /**\n     * Font weight semi-bold\n     */\n    SemiBold = 600,\n\n    /**\n     * Font weight bold\n     */\n    Bold = 700,\n}\n\n/**\n * Available types of font size units\n */\nexport enum StyleSizeUnit\n{\n    /**\n     * Style size unit is in pixels\n     */\n    px,\n\n    /**\n     * Style size unit is in points\n     */\n    pt,\n    \n    /**\n     * Style size unit is in em\n     */\n    em,\n}","import {ComponentStylingOptions, LayoutComponentMetadata, TextFontWeight} from '@anglr/dynamic/layout';\nimport {ButtonComponentOptions, GridPanelCellComponentOptions, GridPanelComponentOptions, StackPanelComponentOptions, StackPanelFlexExtensionOptions, TextBlockComponentOptions} from '@anglr/dynamic/basic-components';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\n/**\n * Class storing demo data\n */\nexport class DemoData\n{\n    public static demoLayout: LayoutComponentMetadata =\n    {\n        id: 'gridPanelTest',\n        package: 'basic-components',\n        name: 'gridPanel',\n        options: <GridPanelComponentOptions&ComponentStylingOptions>\n        {\n            columns:\n            [\n                {\n                    width: '1fr'\n                },\n                {\n                    width: '2fr'\n                },\n                {\n                    width: '1fr'\n                },\n                {\n                    width: '100px'\n                },\n            ],\n            rows:\n            [\n                {\n                    height: '300px'\n                },\n            ],\n            cells:\n            [\n                {\n                    id: 'celltest',\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options: <GridPanelCellComponentOptions>\n                    {\n                        gridColumnStart: 2,\n                        gridColumnEnd: 3,\n                        gridRowStart: 1,\n                        gridRowEnd: 2,\n                        component:\n                        {\n                            id: 'stackPanelTest',\n                            package: 'basic-components',\n                            name: 'stackPanel',\n                            options: <StackPanelComponentOptions&ComponentStylingOptions>\n                            {\n                                padding:\n                                {\n                                    top: '20px'\n                                },\n                                children:\n                                [\n                                    {\n                                        id: 'textTest',\n                                        package: 'basic-components',\n                                        name: 'textBlock',\n                                        options: <TextBlockComponentOptions&ComponentStylingOptions&StackPanelFlexExtensionOptions>\n                                        {\n                                            text: 'toto je text',\n                                            margin:\n                                            {\n                                                top: '10px',\n                                                bottom: '6px',\n                                                left: '12px',\n                                                right: '14pt'\n                                            },\n                                            padding:\n                                            {\n                                                top: '8px',\n                                                bottom: '8px',\n                                                left: '12px',\n                                                right: '12px'\n                                            },\n                                            textStyling:\n                                            {\n                                                fontSize: '20px'\n                                            },\n                                            flex: '1'\n                                        }\n                                    },\n                                    {\n                                        id: 'text2Test',\n                                        package: 'basic-components',\n                                        name: 'textBlock',\n                                        options: <TextBlockComponentOptions&ComponentStylingOptions>\n                                        {\n                                            text: 'druhý riadok je toto',\n                                            textStyling:\n                                            {\n                                                fontWeight: TextFontWeight.Bold\n                                            }\n                                        }\n                                    },\n                                    {\n                                        id: 'button-test',\n                                        package: 'basic-components',\n                                        name: 'button',\n                                        options: <ButtonComponentOptions>\n                                        {\n                                            text: 'test btn',\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                },\n                {\n                    id: 'anotherCell',\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options: <GridPanelCellComponentOptions>\n                    {\n                        gridColumnStart: 3,\n                        gridColumnEnd: 4,\n                        gridRowStart: 1,\n                        gridRowEnd: 2,\n                        component:\n                        {\n                            package: 'basic-components',\n                            id: 'textJeTo',\n                            name: 'textBlock',\n                            options: <TextBlockComponentOptions>\n                            {\n                                text: 'nový text',\n                            }\n                        }\n                    }\n                },\n                {\n                    id: 'gridCellxxx',\n                    package: 'basic-components',\n                    name: 'gridPanelCell',\n                    options: <GridPanelCellComponentOptions>\n                    {\n                        gridColumnStart: 4,\n                        gridColumnEnd: 5,\n                        gridRowStart: 1,\n                        gridRowEnd: 2,\n                        component:\n                        {\n                            id: 'stackPanelxxx',\n                            package: 'basic-components',\n                            name: 'stackPanel',\n                            options: <StackPanelComponentOptions>\n                            {\n                                horizontal: true,\n                                children: []\n                            }\n                        }\n                    }\n                },\n            ]\n        }\n    };\n\n    public static relationsDemo: RelationsNodeMetadata[] =\n    [\n        {\n            id: 'sample-source',\n            package: 'basic-components',\n            name: 'sampleSource',\n            relationsOptions: null,\n            outputs:\n            [\n                {\n                    outputName: 'vystup',\n                    inputs:\n                    [\n                        {\n                            id: 'relations-sample-click',\n                            inputName: 'vstup'\n                        }\n                    ]\n                }\n            ],\n            nodeMetadata:\n            {\n                coordinates: \n                {\n                    x: 30,\n                    y: 60\n                },\n                options: null\n            }\n        },\n        {\n            id: 'relations-sample-click',\n            package: 'static-components',\n            name: 'relations-sample-click',\n            relationsOptions: null,\n            outputs:\n            [\n                {\n                    outputName: 'vystup',\n                    inputs:\n                    [\n                        {\n                            id: 'sample-changes',\n                            inputName: 'vstup'\n                        }\n                    ]\n                }\n            ],\n            nodeMetadata:\n            {\n                coordinates: \n                {\n                    x: 230,\n                    y: 80\n                },\n                options: null\n            }\n        },\n        {\n            id: 'sample-changes',\n            package: 'basic-components',\n            name: 'sampleChange',\n            relationsOptions: null,\n            outputs:\n            [\n                {\n                    outputName: 'vystup',\n                    inputs:\n                    [\n                        {\n                            id: 'relations-result',\n                            inputName: 'vstup'\n                        }\n                    ]\n                }\n            ],\n            nodeMetadata:\n            {\n                coordinates: \n                {\n                    x: 430,\n                    y: 100\n                },\n                options: null\n            }\n        },\n        {\n            id: 'relations-result',\n            package: 'static-components',\n            name: 'relations-result',\n            relationsOptions: null,\n            outputs: [],\n            nodeMetadata:\n            {\n                coordinates: \n                {\n                    x: 630,\n                    y: 60\n                },\n                options: null\n            }\n        }\n    ];\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager, LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout-editor';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {LayoutDataService} from '../../../services/layoutData';\nimport {DemoData} from '../../../services/demoData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: LayoutEditorMetadataManager,\n                protected _store: LayoutDataService,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): LayoutComponentMetadata\n    {\n        return this._manager.getMetadata();\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <mat-tab-group>\r\n        <mat-tab label=\"Hierarchy\">\r\n            <components-tree></components-tree>\r\n        </mat-tab>\r\n\r\n        <mat-tab label=\"Palette\">\r\n            <components-palette></components-palette>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n      \r\n    <div class=\"flex-1\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n\r\n    <properties-editor></properties-editor>\r\n</div>","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_metadata\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button class=\"button\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\nimport {FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'formPreview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _fb: FormBuilder,\n                private _injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n\n                //TODO build formGroup from metadata\n                this._formGroup = this._fb.group({\n                    checkbox: true,\n                    datepicker: new Date(),\n                    number: 10,\n                    period: '202201',\n                    radio: null,\n                    select: 'foo',\n                    textarea: 'Text in textarea',\n                    text: 'classic input field'\n                });\n        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    protected _submit()\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<div class=\"flex-row margin-top-big flex-1\">\r\n    <div class=\"flex-1 overflow-vertical-scroll\">\r\n        <ng-container [layoutComponentRenderer]=\"_metadata\"></ng-container>\r\n    </div>\r\n</div>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\n\nimport {LayoutDataService} from '../../../services/layoutData';\n\n/**\n * Layout preview component\n */\n@Component(\n{\n    selector: 'layout-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'preview')\n@ComponentRoute({path: 'preview'})\n@ComponentRoute({path: 'preview/:id'})\nexport class PreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: LayoutDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n}\n","<div>\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"visible = !visible\">\n        <span>click</span>\n    </button>\n</div>\n\n<div *ngIf=\"visible\">\n    <div class=\"bold\">relations sample click</div>\n    <relations-sample-click></relations-sample-click>\n</div>\n\n<div>\n    <div class=\"bold\">relations result</div>\n    <relations-result></relations-result>\n</div>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\n\n/**\n * Page for displaying relations\n */\n@Component(\n{\n    selector: 'relations-view',\n    templateUrl: 'relations.component.html',\n    // styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        RelationsManager,\n        RelationsProcessor,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\nexport class RelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is relations sample click component visible\n     */\n    protected visible: boolean = true;\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        setTimeout(() =>\n        {\n            this._relationsManager.setRelations(\n            [\n                {\n                    id: 'sample-source',\n                    package: 'basic-components',\n                    name: 'sampleSource',\n                    relationsOptions: null,\n                    outputs:\n                    [\n                        {\n                            outputName: 'vystup',\n                            inputs:\n                            [\n                                {\n                                    id: 'relations-sample-click',\n                                    inputName: 'vstup'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    id: 'relations-sample-click',\n                    package: 'static-components',\n                    name: 'relations-sample-click',\n                    relationsOptions: null,\n                    outputs:\n                    [\n                        {\n                            outputName: 'vystup',\n                            inputs:\n                            [\n                                {\n                                    id: 'sample-changes',\n                                    inputName: 'vstup'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    id: 'sample-changes',\n                    package: 'basic-components',\n                    name: 'sampleChange',\n                    relationsOptions: null,\n                    outputs:\n                    [\n                        {\n                            outputName: 'vystup',\n                            inputs:\n                            [\n                                {\n                                    id: 'relations-result',\n                                    inputName: 'vstup'\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    id: 'relations-result',\n                    package: 'static-components',\n                    name: 'relations-result',\n                    relationsOptions: null,\n                    outputs: []\n                }\n            ]);\n        }, 5000);\n    }\n}","import {Inject, Injectable} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nconst DATA = 'RELATIONS_DATA';\n\n/**\n * Service used for obtaining and storing relations data\n */\n@Injectable({providedIn: 'root'})\nexport class RelationsDataService\n{\n    //######################### constructor #########################\n    constructor(@Inject(PERMANENT_STORAGE) private _storage: PermanentStorage,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    public setData(name: string, data: RelationsNodeMetadata[]): void\n    {\n        const store: Dictionary<RelationsNodeMetadata[]> = this._storage.get(DATA) ?? {};\n\n        store[name] = data;\n\n        this._storage.set(DATA, store);\n    }\n\n    public getData(name: string): RelationsNodeMetadata[]|null\n    {\n        return (this._storage.get(DATA)?.[name]) ?? null;\n    }\n\n    public removeData(name: string): void\n    {\n        const store: Dictionary<RelationsNodeMetadata[]> = this._storage.get(DATA) ?? {};\n\n        delete store[name];\n\n        this._storage.set(DATA, store);\n    }\n\n    public getStored(): string[]\n    {\n        const store: Dictionary<RelationsNodeMetadata[]> = this._storage.get(DATA) ?? {};\n\n        return Object.keys(store);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeManager, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {BindThis} from '@jscrpt/common';\n\nimport {RelationsDataService} from '../../../services/relationsData';\nimport {DemoData} from '../../../services/demoData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'relations-editor-view',\n    templateUrl: 'relationsEditor.component.html',\n    providers:\n    [\n        RelationsNodeManager,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations-editor'})\n@ComponentRoute({path: 'relations-editor/:id'})\nexport class RelationsEditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(private _manager: RelationsNodeManager,\n                protected _store: RelationsDataService,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(): RelationsNodeMetadata[]\n    {\n        return this._manager.getMetadata();\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.relationsDemo;\n    }\n}\n","<div class=\"flex-row\">\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relations-editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\"></load-save-new>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\n        <span>demo</span>\n    </button>\n</div>\n\n<div class=\"flex-row flex-1\">\n    <relations-canvas [nodeDefinitions]=\"_metadata\" class=\"flex-1\"></relations-canvas>\n</div>","import {EditorComponent} from './editor/editor.component';\nimport {FormPreviewComponent} from './formPreview/formPreview.component';\nimport {PreviewComponent} from './preview/preview.component';\nimport {RelationsComponent} from './relations/relations.component';\nimport {RelationsEditorComponent} from './relationsEditor/relationsEditor.component';\n\nexport const components =\n[\n    EditorComponent,\n    PreviewComponent,\n    RelationsEditorComponent,\n    RelationsComponent,\n    FormPreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {ComponentsPaletteSAComponent, ComponentsTreeSAComponent, PropertiesEditorSAComponent} from '@anglr/dynamic/layout-editor';\nimport {RelationsCanvasSAComponent} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\nimport {LoadSaveNewSAComponent, RelationsResultComponent, RelationsSampleClickComponent} from './misc/components';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule,\n        LayoutComponentRendererSADirective,\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        RelationsCanvasSAComponent,\n        MatTabsModule,\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n        RelationsSampleClickComponent,\n        RelationsResultComponent,\n    ],\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Component, ChangeDetectionStrategy} from '@angular/core';\n\n/**\n * Component used for displaying layout editor drag placeholder\n */\n@Component(\n{\n    selector: 'layout-editor-drag-placeholder',\n    template: '',\n    styleUrls: ['layoutEditorDragPlaceholder.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPlaceholderSAComponent\n{\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    styleUrls: ['layoutEditorDragPreview.component.css'],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout editor metadata for dragged component\n     */\n    @Input()\n    public editorMetadata?: LayoutEditorMetadataDescriptor|null;\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"semi-bold\">{{editorMetadata?.metaInfo?.name ?? layoutMetadata?.name}}</span><span class=\"margin-left-extra-small small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Directive, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    protected _connectDropListsPrefix: string = '';\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Prefix used for connected droplists group\n     */\n    @Input()\n    public set connectDropListsPrefix(prefix: string)\n    {\n        this._connectDropListsPrefix = prefix;\n        this._setConnectedTo();\n    }\n    public get connectDropListsPrefix(): string\n    {\n        return this._connectDropListsPrefix ?? '';\n    }\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager\n            .flatTree\n            .filter(itm => itm.component.canDrop())\n            .map(itm => this.connectDropListsPrefix + itm.component.id).reverse();\n\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList.id);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","<margin-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></margin-control>\n<padding-control [form]=\"form\" [propertiesMetadata]=\"propertiesMetadata\"></padding-control>","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"form-group\">\n        <label class=\"control-label\">{{propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor(properties: string[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            \n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.splice(parent.children.length, 0, componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, Type, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: Type<DynamicItemExtension>[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector || this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            // const componentManager = injector.get(ComponentManager);\n            // const componentRelationsManager = injector.get(ComponentRelationManager);\n\n            // await componentRelationsManager.initialize();\n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n\n            this.componentChange.next(this._componentRef);\n            \n            if(this.component)\n            {\n                this.component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm()) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm()) ?? [],\n                ]);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component with options {@id}', {id: componentMetadata?.id});\n                await resolvePromiseOr(this.component.initialize?.(componentMetadata.options));\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                this.component?.invalidateVisuals();\n\n                // componentManager.registerComponent(this.componentMetadata.id, this.component);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            // const injector = this.customInjector || this._viewContainerRef.injector;\n            // const componentManager = injector.get(ComponentManager);\n    \n            // if(componentManager.get(this.componentMetadata.id))\n            // {\n            //     componentManager.unregisterComponent(this.componentMetadata.id);\n            // }\n            \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n        }\n    }\n}","import {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', '3px');\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const half = (this.end.y - this.start.y) / 2;\n            \n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + width, this.start.y + half],\n                [this.end.x - width, this.start.y + half],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChange, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n\n                component.zoomLevel = this.zoomLevel;\n                \n                const change: SimpleChange =\n                {\n                    currentValue: zoomChanges.currentValue,\n                    firstChange: false,\n                    previousValue: zoomChanges.previousValue,\n                    isFirstChange: () => false,\n                };\n\n                const chngs: SimpleChanges = {};\n                chngs[nameof<RelationsNode>('zoomLevel')] = change;\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this._logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const layoutComponentType = await this._loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                //TODO: similar handling\n\n                // switch(this._options?.missingTypeBehavior)\n                // {\n                //     default:\n                //     //case MissingTypeBehavior.ShowNotFound:\n                //     {\n                //         this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.Ignore:\n                //     {\n                //         //do nothing\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.ThrowError:\n                //     {\n                //         throw new Error(`RelationsNodeRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                //     }\n                // }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: this._viewContainerRef.injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this._logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                \n                chngs[nameof<RelationsNode>('metadata')] =\n                {\n                    currentValue: this.componentMetadata,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                chngs[nameof<RelationsNode>('zoomLevel')] =\n                {\n                    currentValue: this.zoomLevel,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                node.ngOnChanges(chngs);\n\n                this._logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n\n                this._relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                this.destroy.next(this.component);\n                this._relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + _canvasPosition.x + 'px, ' + _canvasPosition.y + 'px) scale(' + _zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"_zoomLevel\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {select} from 'd3';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * TODO\n * - Zoom to point\n */\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    styleUrls: ['relationsCanvas.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Background pattern size\n     */\n    protected _backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    /**\n     * Last mouse up position\n     */\n    protected _lastMouseUpPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get _backgroundSizeStyle(): string\n    {\n        return `${this._backgroundSize}px ${this._backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this._canvasPosition.x % this._backgroundSize}px ${this._canvasPosition.y % this._backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected _canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected _zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected _isDragging: boolean = false;\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected _relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _relationManager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this._relationsGroup?.nativeElement), this._relationManager, null, null);\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this._lastMouseDownPosition = \n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n            \n            this._isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._canvasPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected _onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this._zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);            \n            \n            this._canvasPosition = \n            {\n                x: (this._canvasPosition.x/this._zoomLevel) * newZoomLevel,\n                y: (this._canvasPosition.y/this._zoomLevel) * newZoomLevel,\n            };\n\n            this._zoomLevel = newZoomLevel;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._canvasPosition.x,\n                y: this._canvasPosition.y\n            };\n\n            this._backgroundSize = DEFAULT_BACKGROUND_SIZE * this._zoomLevel;\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class RelationsNodeManager\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            //TODO: coordinates and nodeMetadata.options\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n}"],"names":["i0","child_r5","ctx_r6","ComponentsTreeItemSAComponent","constructor","_manager","_changeDetector","_initSubscriptions","Subscription","open","_canDrop","this","data","component","canDrop","hasChildren","children","length","ngOnInit","add","layoutChange","subscribe","detectChanges","selectedChange","highlightedChange","displayNameChange","ngOnDestroy","unsubscribe","toggle","expand","nodeId","options","typeMetadata","id","child","_childrenNodes","toArray","expandAll","forEach","collapse","collapseAll","highlight","event","preventDefault","stopPropagation","highlightComponent","_cancelHighlight","cancelHighlightedComponent","ctx_r1","ctx_r3","selectors","viewQuery","ctx","CommonModule","i2","MatButtonModule","i3","DragDropModule","i4","ConnectDropListsSADirective","styles","changeDetection","ComponentsTreeSAComponent","root","rootTreeItem","selectedComponent","hasChild","node","ToLayoutDragDataSAPipe","transform","value","newId","itemSource","name","metadata","displayName","package","extend","metaInfo","defaultOptions","parentId","pure","standalone","ComponentsPaletteSAComponent","_moduleTypesLoader","_metadataExtractor","_metadataManager","_logger","_allItems","_groupedItems","_designerDropLists","_newCompnentId","generateId","_isDragOverPalette","_getDesignerDropLists","packageName","types","loadItem","type","extractMetadata","push","warn","item","group","_a","_generateNewId","_onDragEnded","key","isPresent","filter","datum","temp","_onDragStarted","currentIdx","source","dropContainer","getSortedItems","findIndex","splice","flatTree","map","itm","reverse","LAYOUT_MODULE_TYPES_LOADER","LOGGER","features","decls","vars","consts","template","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","InputNumberComponent","PropertyTypeControlBase","t","InputSizeComponent","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","unit","control","MarginControlComponent","PropertiesControlBase","_margin","form","controls","margin","PaddingControlComponent","_padding","padding","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","ComponentStylingPropertiesControlComponent","DefaultGenericPropertiesControlComponent","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","extract","debug","result","propSymbol","meta","Reflect","get","prototype","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","factory","providedIn","PropertiesControlRendererDirective","_viewContainerRef","_componentRef","propertiesMetadata","ngOnChanges","clear","injector","createComponent","instance","resolvePromiseOr","initialize","invalidateVisuals","destroy","props_r2","inputs","PropertiesEditorSAComponent","_propertyExtractor","_formModelBuilder","_optionsFormSubscription","_visible","_component","_metadata","_displayName","_propertiesData","_initProperties","displayNameUpdated","getComponent","_getMetadata","_hide","emitEvent","error","optionsMetadata","props","build","modelType","propertiesControls","parent","getParent","parentMetadata","childPropertiesMetadata","FormModelBuilder","ReactiveFormsModule","i5","DATA","LayoutDataService","_storage","setData","store","set","getData","removeData","getStored","Object","keys","TextFontWeight","StyleSizeUnit","PERMANENT_STORAGE","DemoData","columns","width","rows","height","cells","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","top","text","bottom","left","right","textStyling","fontSize","flex","fontWeight","Bold","horizontal","relationsOptions","outputs","outputName","inputName","nodeMetadata","coordinates","x","y","EditorComponent","_store","emptyMetadata","getMetadata","_loadDemo","demoLayout","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","LayoutEditorMetadataManager","__decorate","BindThis","ComponentRoute","path","val_r2","FormPreviewComponent","_router","_route","_fb","_injector","_available","_availableNames","params","_formGroup","checkbox","datepicker","Date","number","period","radio","select","textarea","_formInjector","Injector","providers","provide","FORM_COMPONENT_CONTROL","useValue","val","navigate","skipLocationChange","replaceUrl","_submit","console","log","val_r1","ComponentRedirectRoute","Router","ActivatedRoute","FormBuilder","PreviewComponent","RelationsComponent","_relationsManager","visible","setTimeout","setRelations","RelationsManager","RelationsProcessor","RelationsDataService","RelationsEditorComponent","relationsDemo","RelationsNodeManager","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","RelationsCanvasSAComponent","MatTabsModule","LoadSaveNewSAComponent","ModuleRoutes","InjectionToken","editorMetadata","layoutMetadata","_cdkDropList","_connectDropListsPrefix","connectDropListsPrefix","prefix","_setConnectedTo","pipe","debounceTime","connectedTo","exportAs","properties","genericPropertiesControlFor","GenericPropertiesControl","i1","encapsulation","_extractor","_initialized","PropertyTypeControlRendererDirective","_typeControls","values","typeName","Error","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","CastPipesModule","NumberInputModule","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","Subject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","highlightedComponent","isBlank","asObservable","_buildFlatTree","selectComponent","next","unselectComponent","registerLayoutDesignerComponent","componentItem","unregisterLayoutDesignerComponent","index","indexOf","_buildFlatTreeForComponent","concat","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","NotFoundLayoutTypeSAComponent","LayoutComponentRendererSADirective","_loader","_childExtensions","_options","_metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentRef","changes","nameof","customInjector","layoutComponentType","Ignore","ThrowError","usedInjector","LAYOUT_COMPONENT_CHILD_EXTENSIONS","childExtensions","registerExtensions","extensions","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","NodeRelationPath","_parentGroup","_relationManager","start","end","_destroyingSubject","output","input","_path","append","attr","_lineGenerator","line","curve","curveBundle","destroying","remove","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","half","third","RelationsNodeRendererSADirective","_relationsNodeManager","zoomLevel","create","zoomChanges","change","currentValue","firstChange","previousValue","isFirstChange","chngs","registerNode","unregisterNode","RELATIONS_NODES_LOADER","_backgroundSize","_lastMouseDownPosition","_lastMouseUpPosition","_canvasPosition","_zoomLevel","_isDragging","nodeDefinitions","_backgroundSizeStyle","_backgroundPositionStyle","createRelation","_relationsGroup","nativeElement","_onMouseDown","buttons","MouseButton","clientX","clientY","_onMouseMove","_onMouseUp","_onWheel","deltaY","newZoomLevel","clamp","stopImmediatePropagation","ElementRef","_nodes","_waitingInputRelations","_activeInput","Array","isArray","outputNode","relationsNode","relation","startRelation","_b","inputNode","endRelation","waitingInputRelations","waiting","nodeIds","nodeMeta","allOutputs","relations","outputMeta"],"sourceRoot":""}