{"version":3,"file":"6556.chunk.ed0a651df94f608be77b.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.metadata.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.html","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/formGroup.component.ts","webpack://ng-universal-demo/../form/src/dynamicItems/formGroup/type.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Directive, Input, inject} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {DynamicOutput} from '@anglr/dynamic/relations';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\nimport {getControlForType, getFormControl} from '../../misc/utils';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions, TValue = string> extends LayoutComponentBase<TOptions>\n{\n    //######################### private properties #########################\n\n    /**\n     * Indication whether form component is required\n     */\n    private _required: boolean|null|undefined;\n\n    /**\n     * Indication whether form component is disabled\n     */\n    private _disabled: boolean|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Form component control\n     */\n    protected control: AbstractControl = new FormControl();\n\n    /**\n     * Form component control subscriptions\n     */\n    protected controlSubscription: Subscription|null|undefined;\n\n    /**\n     * Instance of parent control\n     */\n    protected parentControl: AbstractControl|undefined|null = inject(FORM_COMPONENT_CONTROL, {optional: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form component value\n     */\n    @Input()\n    public set value(value: TValue|null|undefined)\n    {\n        const oldValue = this.value;\n        this.valueOutput = value;\n\n        if (value !== oldValue)\n        {\n            this.control?.patchValue(value);\n        }\n    }\n    public get value(): TValue|null|undefined\n    {\n        return this.valueOutput;\n    }\n\n    /**\n     * Indication whether form component is required\n     */\n    @Input()\n    public set required(value: boolean|null|undefined)\n    {\n        this._required = value;\n\n        if (value === true)\n        {\n            this.control?.addValidators(Validators.required);\n            return;\n        }\n\n        this.control?.removeValidators(Validators.required);\n    }\n    public get required(): boolean|null|undefined\n    {\n        return this._required;\n    }\n\n    /**\n     * Indication whether form component is disabled\n     */\n    @Input()\n    public set disabled(value: boolean|null|undefined)\n    {\n        this._disabled = value;\n\n        if (value === true)\n        {\n            this.control?.disable();\n            return;\n        }\n\n        this.control?.enable();\n    }\n    public get disabled(): boolean|null|undefined\n    {\n        return this._disabled;\n    }\n\n    //######################### public properties - dynamicOutputs #########################\n\n    /**\n     * Form component value\n     */\n    @DynamicOutput()\n    public valueOutput: TValue|null|undefined;\n\n    //######################### protected methods - _onOptionsSet implementation #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): PromiseOr<void> \n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.controlSubscription?.unsubscribe();\n        this.controlSubscription = null;\n\n        this.control = this._getFormControl(this.options?.controlName, this.parentControl, FormComponentControlType.FormControl, this.value); \n        this._registerValidations();\n        this.controlSubscription = this.control\n            ?.valueChanges\n            ?.subscribe(value => \n            {\n                this.valueOutput = value;\n            });\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Registers component-specific validators\n     */\n    protected _registerValidations(): void\n    {}\n\n    //######################### private methods #########################\n\n    /**\n     * Gets form component control for control name\n     * @param controlName Form component control name\n     * @param parentControl Parent form control\n     * @param defaultControlType Default control type when parent does not exists or not contains control with specified name\n     * @param initValue Initial value for control\n     * @returns Specified type of control\n     */\n    private _getFormControl(controlName: string|undefined|null, parentControl: AbstractControl|undefined|null, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, initValue: TValue|null|undefined): AbstractControl\n    {\n        let control = getFormControl(controlName, parentControl, defaultControlType, initValue);\n\n        if (!control)\n        {\n            this.logger?.warn('FormComponentBase: Unable to find control with name {{@name}}', {name: controlName});\n\n            control = getControlForType(defaultControlType, initValue);\n        }\n\n        if (this.required)\n        {\n            control.addValidators(Validators.required);\n        }\n\n        if (this.disabled)\n        {\n            control.disable();\n        }\n\n        return control;\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {FormGroupComponentOptions} from './formGroup.options';\n\n/**\n * Form group layout metadata loader\n */\nexport const FormGroupLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<FormGroupComponentOptions>> = async () => new (await import('./metadata/formGroup.layoutMetadata')).FormGroupLayoutEditorMetadata();\n","<ng-container *ngFor=\"let type of options?.children\">\n    <ng-container *layoutComponentRenderer=\"type; injector: formInjector\"/>\n</ng-container>","import {Component, ChangeDetectionStrategy, Injector, ValueProvider} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {DescendantsGetter, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {FormGroupLayoutMetadataLoader} from './formGroup.metadata';\nimport {FormGroupComponentOptions} from './formGroup.options';\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentBase} from '../../components';\n\n\n/**\n * Component used for displaying stack panel layout\n */\n@Component(\n{\n    selector: 'form-group',\n    templateUrl: 'formGroup.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@DescendantsGetter<FormGroupComponentOptions>(options => options?.children ?? [])\n@LayoutEditorMetadata(FormGroupLayoutMetadataLoader)\nexport class FormGroupSAComponent extends FormComponentBase<FormGroupComponentOptions> implements LayoutComponent<FormGroupComponentOptions>\n{\n    //######################### protected properties #########################\n\n    protected formInjector?: Injector;\n\n    //######################### protected methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): PromiseOr<void>\n    {\n        this.formInjector = Injector.create(\n        {\n            parent: this.injector,\n            providers:\n            [\n                <ValueProvider>\n                {\n                    provide: FORM_COMPONENT_CONTROL,\n                    useValue: this.options?.controlName ? this.parentControl?.get(this.options.controlName) : null,\n                }\n            ]\n        });\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {FormGroupSAComponent} from './formGroup.component';\n\nexport default FormGroupSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","control","FormControl","parentControl","inject","FORM_COMPONENT_CONTROL","optional","value","oldValue","this","valueOutput","patchValue","required","_required","removeValidators","Validators","addValidators","disabled","_disabled","enable","disable","onOptionsSet","options","controlSubscription","unsubscribe","_getFormControl","controlName","FormComponentControlType","_registerValidations","valueChanges","subscribe","defaultControlType","initValue","getFormControl","logger","warn","name","getControlForType","t","inputs","features","i0","__decorate","DynamicOutput","FormGroupLayoutMetadataLoader","_ref","FormGroupLayoutEditorMetadata","apply","arguments","FormGroupSAComponent_ng_container_0_ng_container_1_Template","type_r1","ctx_r0","formInjector","FormGroupSAComponent","onInit","Injector","create","parent","injector","providers","provide","useValue","get","selectors","standalone","decls","vars","consts","template","rf","ctx","FormGroupSAComponent_ng_container_0_Template","children","CommonModule","i1","LayoutComponentRendererSADirective","encapsulation","changeDetection","DescendantsGetter","LayoutEditorMetadata","extensions","ComponentStylingExtension","InjectionToken","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","LOGGER","optionsSafe","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","_this","_asyncToGenerator","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","id","generateId","viewContainer","ViewContainerRef","renderer","LayoutRenderer","parentRendererDirective","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","metadata","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","DynamicItemExtensionBase","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","initialized","instance"],"sourceRoot":""}