{"version":3,"file":"6249.chunk.e4fa29a6af2751a9e137.js","mappings":"gjBASO,MAAMA,EAA0B,oBAAkF,mBAAY,WAAW,mEAA4CC,2BAAnE,IAAlF,qDAK1BC,EAA6B,oBAA6D,mBAAY,WAAW,mEAA+CC,8BAAtE,IAA7D,qD,qHCU7BC,EAAiB,cAASC,EAAAA,E,kCAe5B,KAAAC,UAAoB,EAQpB,KAAAC,MAAoB,CAAC,CAW/B,CAJsBC,gBAEfC,KAAKH,SAAWG,KAAKC,SAASJ,WAAY,CAC7C,G,6DAjCQF,KAAiBO,GAAjBP,EAAiB,E,qBAAjBA,EAAiBQ,UAAAA,CAAAA,CAAAA,qBAAAC,OAAAA,CAAAP,SAAAA,YAAAQ,YAAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,GAAAC,MAAAA,EAAAC,KAAAA,EAAAC,OAAAA,CAAAA,CAAAA,OAAAA,SAAAA,EAAAA,MAAAA,cAAAA,EAAAA,WAAAA,UAAAC,SAAAA,SAAAA,EAAAA,GAAA,MCxB9BC,EAAAA,GAAAA,EAAAA,SAAAA,GAAoEA,EAAAA,EAAC,SAADA,WAAA,qBAChEA,EAAAA,GAAAA,EAAAA,QAAMA,EAAAA,EAAAA,GAAiBA,EAAAA,IAAAA,I,MADmBA,EAAAA,EAAAA,WAAAA,EAAAA,UACpCA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,M,oED8CNC,EAAAA,EAAAA,IAAAA,EADCC,EAAAA,EAAAA,MACD,2DAvBSlB,GAAiB,UAF7BmB,EAAAA,EAAAA,GAAwBrB,IACxBsB,EAAAA,EAAAA,GAAqBxB,IACTI,GEnBb,UAEaqB,EAAa,CAACC,EAAAA,EAA2BC,EAAAA,E,4DCChD,MAAOD,UAAkCE,EAAAA,EAOxBC,UAEfpB,KAAKqB,eACR,CAKkBC,mBAEftB,KAAKqB,eACR,CAOSA,gBAEN,MAAMpB,EAAUD,KAAKuB,SACfC,EAAQxB,KAAKyB,UAAUC,cAAcF,OAExCG,EAAAA,EAAAA,IAAUH,KAENvB,GAAS2B,UAELD,EAAAA,EAAAA,IAAU1B,EAAQ2B,OAAOC,UAExBL,EAAMM,aAAe7B,EAAQ2B,OAAOC,SAGrCF,EAAAA,EAAAA,IAAU1B,EAAQ2B,OAAOG,SAExBP,EAAMQ,YAAc/B,EAAQ2B,OAAOG,QAGpCJ,EAAAA,EAAAA,IAAU1B,EAAQ2B,OAAOK,OAExBT,EAAMU,UAAYjC,EAAQ2B,OAAOK,MAGlCN,EAAAA,EAAAA,IAAU1B,EAAQ2B,OAAOO,QAExBX,EAAMY,WAAanC,EAAQ2B,OAAOO,OAIvClC,GAASoC,WAELV,EAAAA,EAAAA,IAAU1B,EAAQoC,QAAQR,UAEzBL,EAAMc,cAAgBrC,EAAQoC,QAAQR,SAGvCF,EAAAA,EAAAA,IAAU1B,EAAQoC,QAAQN,SAEzBP,EAAMe,aAAetC,EAAQoC,QAAQN,QAGtCJ,EAAAA,EAAAA,IAAU1B,EAAQoC,QAAQJ,OAEzBT,EAAMgB,WAAavC,EAAQoC,QAAQJ,MAGpCN,EAAAA,EAAAA,IAAU1B,EAAQoC,QAAQF,QAEzBX,EAAMiB,YAAcxC,EAAQoC,QAAQF,OAIzClC,GAASyC,eAELf,EAAAA,EAAAA,IAAU1B,EAAQyC,YAAYC,YAE7BnB,EAAMmB,SAAW1C,EAAQyC,YAAYC,WAGtChB,EAAAA,EAAAA,IAAU1B,EAAQyC,YAAYE,cAE7BpB,EAAMoB,WAAa3C,EAAQyC,YAAYE,WAAWC,aAIjE,E","sources":["webpack://ng-universal-demo/../basic-components/src/button/button.metadata.ts","webpack://ng-universal-demo/../basic-components/src/button/button.component.ts","webpack://ng-universal-demo/../basic-components/src/button/button.component.html","webpack://ng-universal-demo/../basic-components/src/button/type.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\nimport {ButtonComponentOptions} from './button.options';\n\n/**\n * Button layout metadata loader\n */\nexport const ButtonLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<ButtonComponentOptions>> = async () => new (await import('./metadata/button.layoutMetadata')).ButtonLayoutEditorMetadata();\n\n/**\n * Button relations metadata loader\n */\nexport const ButtonRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/button.relationsMetadata')).ButtonRelationsEditorMetadata();\n","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {DynamicOutput, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata, VoidObject} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {ButtonComponentOptions} from './button.options';\nimport {ButtonLayoutMetadataLoader, ButtonRelationsMetadataLoader} from './button.metadata';\n\n/**\n * Component used for displaying button\n */\n@Component(\n{\n    selector: 'button-component',\n    templateUrl: 'button.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@RelationsEditorMetadata(ButtonRelationsMetadataLoader)\n@LayoutEditorMetadata(ButtonLayoutMetadataLoader)\nexport class ButtonSAComponent extends LayoutComponentBase<ButtonComponentOptions> implements LayoutComponent<ButtonComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is button disabled\n     */\n    @Input()\n    public disabled: boolean = false;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Output used for emitting new void object value when clicked\n     */\n    @DynamicOutput()\n    public click: VoidObject = {};\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): PromiseOr<void>\n    {\n        this.disabled = this.options?.disabled ?? false;\n    }\n}","<button type=\"button\" class=\"btn btn-primary\" [disabled]=\"disabled\" (click)=\"click = {}\">\n    <span>{{options?.text}}</span>\n</button>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\nimport {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {ButtonSAComponent} from './button.component';\n\nexport default ButtonSAComponent;\n\nexport const extensions = [ComponentStylingExtension, RelationsRegistrationExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}"],"names":["ButtonLayoutMetadataLoader","ButtonLayoutEditorMetadata","ButtonRelationsMetadataLoader","ButtonRelationsEditorMetadata","ButtonSAComponent","LayoutComponentBase","disabled","click","_onOptionsSet","this","options","t","selectors","inputs","standalone","features","decls","vars","consts","template","i0","__decorate","DynamicOutput","RelationsEditorMetadata","LayoutEditorMetadata","extensions","ComponentStylingExtension","RelationsRegistrationExtension","DynamicItemExtensionBase","_onInit","_applyStyling","_onOptionsChange","_options","style","_element","nativeElement","isPresent","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString"],"sourceRoot":""}