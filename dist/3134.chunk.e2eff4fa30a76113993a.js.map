{"version":3,"file":"3134.chunk.e2eff4fa30a76113993a.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/pipes/toLayoutDragData/toLayoutDragData.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCorePaletteItem/dndCorePaletteItem.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsPalette/componentsPalette.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreTreeItem/dndCoreTreeItem.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/item/componentsTreeItem.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.html","webpack://ng-universal-demo/../layout-editor/src/components/componentsTree/componentsTree.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/modules/propertiesControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/widthResizer/widthResizer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/directives/propertiesControlRenderer/propertiesControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/propertiesEditor/propertiesEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport {ComponentsPaletteItem} from '../../components';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n */\n@Pipe({name: 'toLayoutDragData', standalone: true})\nexport class ToLayoutDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms ComponentsPaletteItem item to LayoutComponentDragData\n     * @param value - Palette item to be transformed\n     */\n    public transform(value: ComponentsPaletteItem): LayoutComponentDragData\n    {\n        return {\n            metadata:\n            {\n                id: '',\n                displayName: '',\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                options: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n            },\n            parentId: null,\n            index: null,\n        };\n    }\n}","import {Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {extend, generateId} from '@jscrpt/common';\nimport {DndService, DragSource} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService} from '../../../../services';\nimport {DndBusService} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from '../dndCoreDesigner/dndCoreDesigner.interface';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout component palette item\n */\n@Directive(\n{\n    selector: '[dndCorePaletteItem]',\n})\nexport class DndCorePaletteItemDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for palette item connection to DOM\n     */\n    protected itemConnection: Subscription|undefined|null;\n\n    /**\n     * Drag source used for dragging palette item\n     */\n    protected drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('METADATA',\n                                                                                       {\n                                                                                           beginDrag: () =>\n                                                                                           {\n                                                                                               this.draggingSvc.setDragging(true);\n                                                                                               const dragData = extend(true, {}, this.dragData);\n\n                                                                                               if(dragData.metadata)\n                                                                                               {\n                                                                                                   const newId = `${dragData.metadata.name}-${generateId(16)}`;\n\n                                                                                                   dragData.metadata.id = newId;\n                                                                                                   dragData.metadata.displayName = newId;\n                                                                                               }\n\n                                                                                               return {\n                                                                                                   dragData,\n                                                                                               };\n                                                                                           },\n                                                                                           endDrag: monitor =>\n                                                                                           {\n                                                                                               //dropped into drop zone\n                                                                                               if(monitor.didDrop())\n                                                                                               {\n                                                                                                   const item = monitor.getItem();\n                                                                                                   const dropResult = monitor.getDropResult();\n\n                                                                                                   if(!item)\n                                                                                                   {\n                                                                                                       return;\n                                                                                                   }\n\n                                                                                                   item.dragData.index = dropResult.index;\n\n                                                                                                   this.bus.setDropData(\n                                                                                                   {\n                                                                                                       data: item.dragData,\n                                                                                                       id: dropResult.id,\n                                                                                                   });\n\n                                                                                                   this.itemDrop.emit();\n                                                                                               }\n\n                                                                                               this.bus.setDropPlaceholderPreview(null);\n                                                                                               this.draggingSvc.setDragging(false);\n                                                                                           },\n                                                                                       },\n                                                                                       this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCorePaletteItem')\n    public dragData!: LayoutComponentDragData;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when item was succesfully dropped\n     */\n    @Output()\n    public itemDrop: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected paletteItemElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected bus: DndBusService,\n                protected zone: NgZone,)\n    {\n        this.connectDragToItem();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.itemConnection?.unsubscribe();\n        this.itemConnection = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Connects palette item element to drag source\n     */\n    protected connectDragToItem(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.itemConnection?.unsubscribe();\n            this.itemConnection = this.drag.connectDragSource(this.paletteItemElement.nativeElement, {dropEffect: 'copy'});\n        });\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 [dndCorePaletteItem]=\"item | toLayoutDragData\"\n                 (itemDrop)=\"refreshPipe = !refreshPipe\">\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\nimport {ComponentsPaletteItem, LayoutModuleTypes} from './componentsPalette.interface';\nimport {ToLayoutDragDataSAPipe} from '../../pipes';\nimport {LAYOUT_MODULE_TYPES_LOADER, REFRESH_PALETTE_OBSERVABLES} from '../../misc/tokens';\nimport {LayoutDndCoreModule} from '../../modules';\n\n/**\n * Component displaying available components palette\n */\n@Component(\n{\n    selector: 'components-palette',\n    templateUrl: 'componentsPalette.component.html',\n    styleUrls: ['componentsPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutDndCoreModule,\n        ToLayoutDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: ComponentsPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(ComponentsPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Used for refreshing pipe value\n     */\n    protected refreshPipe: boolean = false;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_MODULE_TYPES_LOADER) protected moduleTypesLoader: DynamicItemLoader<LayoutModuleTypes>,\n                protected changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.initItems()));\n\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.initItems()));\n            }\n        }\n\n        await this.initItems();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize items in palette\n     */\n    protected async initItems(): Promise<void>\n    {\n        this.groupedItems = {};\n        this.allItems = [];\n\n        for (const packageName of this.packageManager.usedPackages)\n        {\n            const types = (await this.moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this.metadataExtractor.extractMetadata(itemSource);\n\n                if(!metadata)\n                {\n                    this.logger?.warn('ComponentsPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }\n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this.changeDetector.detectChanges();\n    }\n}","import {Directive, ElementRef, EventEmitter, ExistingProvider, forwardRef, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {DragPreviewRegistrator} from '../../interfaces';\nimport {DRAG_PREVIEW_REGISTRATOR} from '../../misc/tokens';\nimport {LayoutDragItem, LayoutDropResult} from '../dndCoreDesigner/dndCoreDesigner.interface';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout component tree item\n */\n@Directive(\n{\n    selector: '[dndCoreTreeItem]',\n    exportAs: 'dndCoreTreeItem',\n    providers:\n    [\n        <ExistingProvider>\n        {\n            provide: DRAG_PREVIEW_REGISTRATOR,\n            useExisting: forwardRef(() => DndCoreTreeItemDirective),\n        }\n    ]\n})\nexport class DndCoreTreeItemDirective implements OnInit, OnDestroy, DragPreviewRegistrator\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreTreeItemDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    public get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['TREE_COMPONENT'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n                                                                                                  \n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['TREE_COMPONENT'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors(this.metadata.id, monitor.getItem()?.dragData.metadata?.id)[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('TREE_COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            this.designerElement.nativeElement.classList.remove('is-dragged');\n\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(monitor.didDrop())\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['TREE_COMPONENT'],\n                                                                                        {\n                                                                                            canDrop: monitor => \n                                                                                            {\n                                                                                                return ((this.canDrop && !this.hasAncestor(this.metadata.id, monitor.getItem()?.dragData.metadata?.id)) || this.canDropAncestors(this.metadata.id, monitor.getItem()?.dragData.metadata?.id)[0]) && monitor.isOver({shallow: true});\n                                                                                            },\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}))\n                                                                                                {\n                                                                                                    this._manager.dragOverComponent(this.metadata.id);\n\n                                                                                                    if (monitor.canDrop())\n                                                                                                    {\n                                                                                                        const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                        if(isBlank(index) || isBlank(parentId))\n                                                                                                        {\n                                                                                                            return;\n                                                                                                        }\n\n                                                                                                        this.bus.setDropPlaceholderPreview(\n                                                                                                        {\n                                                                                                            index,\n                                                                                                            parentId,\n                                                                                                            placeholder:\n                                                                                                            {\n                                                                                                                height: 0,\n                                                                                                                width: 0\n                                                                                                            }\n                                                                                                        });\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Html element that represents children container\n     */\n    @Input()\n    public containerElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreTreeItem')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                protected _manager: LayoutEditorMetadataManager,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.containerElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing container element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => this.dropMetadata.emit(itm.data)));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.placeholderPreviewElement?.remove();\n                                           this.placeholderPreviewElement = null;\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(this.showPlaceholderPreview));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### public methods - implementation of DragPreviewRegistrator #########################\n\n    /**\n     * @inheritdoc\n     */\n    public registerPreviewElement(element: HTMLElement): Subscription\n    {\n        return this.drag.connectDragPreview(element, {offsetX: 0, offsetY: 0});\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors(this.metadata.id, monitor.getItem()?.dragData.metadata?.id);\n        \n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0]?.getBoundingClientRect();\n            const position = rect?.y;\n            const half = rect?.height / 2;\n            \n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n        \n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = offset.y - rect.y;\n        const half = rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string, ancestorId?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent ||\n            isPresent(ancestorId) && this.hasAncestor(component.component.id, ancestorId))\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id, ancestorId);\n        }\n    }\n\n    /**\n     * Checks whether component has ancestor with specified identifier\n     * @param component component to check\n     * @param ancestorId ancestor identifier to find\n     * @returns \n     */\n    protected hasAncestor(id: string, ancestorId?: string): boolean\n    {\n        if (!ancestorId)\n        {\n            return false;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n        if (component?.component?.id === ancestorId)\n        {\n            return true;\n        }\n\n        if (component?.parent)\n        {\n            return this.hasAncestor(component.parent.component?.id, ancestorId);\n        }\n\n        return false;\n    }\n}","<div\n    #dndCoreTree=\"dndCoreTreeItem\"\n    #dropzone\n    [dndCoreTreeItem]=\"{metadata: data, parentId: parentId, index: index}\"\n    [dropzoneElement]=\"dropzone\"\n    [containerElement]=\"childrenContainer\"\n    [dragDisabled]=\"dragDisabled\"\n    [dragSource]=\"dndCoreTree.drag\"\n    (dropMetadata)=\"addDescendant($event)\">\n\n    <div \n        class=\"designer-dropzone\" \n        [dropTarget]=\"dndCoreTree.dropzone\">\n        <div class=\"flex align-items-center\" [ngClass]=\"hasChildren ? 'nested-node-tree' : 'node-tree'\">\n            <button type=\"button\" mat-icon-button [disabled]=\"!hasChildren\" (click)=\"toggle()\"\n                [attr.aria-label]=\"'Toggle'\">\n                <span class=\"fa\" *ngIf=\"hasChildren\" [ngClass]=\"open ? 'fa-chevron-down' : 'fa-chevron-right'\"></span>\n            </button>\n            <div \n                [class.selected]=\"data?.id === _manager.selectedComponent\"\n                [class.highlighted]=\"data?.id === _manager.highlightedComponent\"\n                (mouseover)=\"highlight($event, data?.id)\"\n                (click)=\"_manager.selectComponent(data?.id)\">{{data?.displayName || data?.id}}</div>\n        </div>\n    \n        <div \n            #childrenContainer\n            class=\"node-children\"\n            [class.hidden]=\"!open\">\n            <div \n                *ngFor=\"let child of children; let i = index;\"\n                class=\"node-child\">\n                <components-tree-item \n                    [data]=\"child\"\n                    [parentId]=\"data?.id\"\n                    [index]=\"i\"></components-tree-item>\n            </div>\n        </div>\n    </div>    \n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, HostListener, Input, OnInit, OnDestroy, ViewChildren, QueryList} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DebounceCall, WithSync} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription, timer} from 'rxjs';\n\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataManager} from '../../../services';\nimport {LayoutDndCoreModule} from '../../../modules';\nimport {LayoutComponentDragData} from '../../../interfaces';\nimport {DesignerDropzoneSADirective} from '../../../directives';\n\nconst DRAG_OVER_DELAY = 500;\n\n/**\n * Component displaying components tree item\n */\n@Component(\n{\n    selector: 'components-tree-item',\n    exportAs: 'componentsTreeItem',\n    templateUrl: 'componentsTreeItem.component.html',\n    styleUrls: ['componentsTreeItem.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        DndModule,\n        LayoutDndCoreModule,\n        DesignerDropzoneSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Node children\n     */\n    protected children: LayoutComponentMetadata[] = [];\n\n    /**\n     * Handles drag over events\n     */\n    protected dragOverSubscription?: Subscription|null;\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Indicates whether layout component has children\n     * @param node layout component to check\n     * @returns \n     */\n    protected get hasChildren(): boolean\n    {\n        return !!this.children && this.children.length > 0;\n    }\n\n    /**\n     * Indication whether drag is disabled\n     */\n    protected get dragDisabled(): boolean\n    {\n        return !this.parentId || !this.data || this._manager.getComponent(this.data.id)?.dragDisabled === true;\n    }\n\n    /**\n     * Child tree node components\n     */\n    @ViewChildren(ComponentsTreeItemSAComponent)\n    protected _childrenNodes!: QueryList<ComponentsTreeItemSAComponent>;\n\n    //######################### public properties - inputs and outputs #########################\n\n    /**\n     * Instance component tree item\n     */\n    @Input()\n    public data: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Tree item index\n     */\n    @Input()\n    public index: number = 0;\n\n    /**\n     * Parent identifier\n     */\n    @Input()\n    public parentId: string|undefined|null;\n\n    /**\n     * Indication whether node is open\n     */\n    @Input()\n    public open: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _draggingSvc: DragActiveService,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n    )\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() => \n        {\n            this.initChildren();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.draggedOverComponentChange.subscribe(() => this._handleDragOver()));\n\n        this.initChildren();\n    }\n \n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Toggle children visibility\n     */\n    public toggle(): void\n    {\n        this.open = !this.open;\n    }\n\n    /**\n     * Expands tree node\n     * @param nodeId node identifier to expand\n     * @returns indication whether node or its children were expanded\n     */\n    public expand(nodeId?: string|undefined|null): boolean\n    {\n        if (!nodeId)\n        {\n            this.open = true;\n            return true;\n        }\n\n        if (this.data?.id === nodeId)\n        {\n            return true;\n        }\n\n        if (this.hasChildren)\n        {\n            for (const child of this._childrenNodes?.toArray())\n            {\n                if (child.expand(nodeId))\n                {\n                    this.expand();\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if (this.data)\n        {\n            this._manager.getComponent(this.data.id)?.addDescendant(dragData);\n        }\n    }\n    \n    /**\n     * Expands node and all its children\n     */\n    public expandAll(): void\n    {\n        this._childrenNodes?.forEach((child: ComponentsTreeItemSAComponent) => child.expandAll());\n        this.expand();\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Collapse tree node\n     */\n    public collapse(): void\n    {\n        this.open = false;\n    }\n\n    /**\n     * Collapse node and all its children\n     */\n    public collapseAll(): void\n    {\n        this._childrenNodes?.forEach((child: ComponentsTreeItemSAComponent) => child.collapseAll());\n        this.collapse();\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    @DebounceCall(10)\n    @WithSync()\n    protected async initChildren(): Promise<void>\n    {\n        this.children = [];\n\n        if (this.data)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.data))\n            {\n                this.children.push(child.metadata);\n            }\n        }\n        \n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Highlights component\n     * @param event - Mouse event that occured\n     * @param id - Id of component that is highlighted\n     */\n    protected highlight(event: MouseEvent, id?: string): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.highlightComponent(id);\n    }\n\n    /**\n     * Handle event when user is dragging over this components\n     */\n    protected _handleDragOver(): void\n    {\n        if (this._manager.draggedOverComponent != this.data?.id)\n        {\n            this.dragOverSubscription?.unsubscribe();\n            this.dragOverSubscription = null;\n            return;\n        }\n\n        if (!this.open)\n        {\n            this.dragOverSubscription = timer(DRAG_OVER_DELAY).subscribe(() =>\n            {\n                this.expand();\n                this._changeDetector.detectChanges();\n            });\n        }\n    }\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Cancels highlight of component\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _cancelHighlight(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._manager.cancelHighlightedComponent();\n    }\n}","\n<div class=\"component-tree\" *ngIf=\"root\">\n    <button type=\"button\" mat-icon-button aria-label=\"Collapse all\"  (click)=\"rootTreeItem?.collapseAll()\">\n        <span class=\"fa fa-minus-square\"></span>\n    </button>\n    <button type=\"button\" mat-icon-button aria-label=\"Expand all\" (click)=\"rootTreeItem?.expandAll()\">\n        <span class=\"fa fa-plus-square\"></span>\n    </button>\n    <components-tree-item [data]=\"root\"></components-tree-item>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatButtonModule} from '@angular/material/button';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../services';\nimport {ComponentsTreeItemSAComponent} from './item';\nimport {DndBusService} from '../../modules';\n\n/**\n * Component displaying components tree\n */\n@Component(\n{\n    selector: 'components-tree',\n    templateUrl: 'componentsTree.component.html',\n    styleUrls: ['componentsTree.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        MatButtonModule,\n        ComponentsTreeItemSAComponent,\n    ],\n    providers:\n    [\n        DragActiveService,\n        DndBusService,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentsTreeSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected fields - template bindings #########################\n\n    /**\n     * Instance of root component in tree\n     */\n    protected root: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Root component tree item\n     */\n    @ViewChild(ComponentsTreeItemSAComponent)\n    protected rootTreeItem: ComponentsTreeItemSAComponent|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _manager: LayoutEditorMetadataManager,\n                protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.subscribe(() =>\n        {\n            this.root = this._manager.getMetadata();\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.selectedChange.subscribe(() => \n        {\n            this.rootTreeItem?.expand(this._manager.selectedComponent);\n            this._changeDetector.detectChanges();\n        }));\n        \n        this._initSubscriptions.add(this._manager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._manager.displayNameChange.subscribe(() => this._changeDetector.detectChanges()));\n\n        this.root = this._manager.getMetadata();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CastPipesModule, TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {ComponentStylingPropertiesControlComponent, DefaultGenericPropertiesControlComponent, MarginControlComponent, PaddingControlComponent} from '../components';\nimport {PropertyTypeControlsModule} from '../../propertyTypeControls';\nimport {PropertiesControlRendererDirective} from '../directives';\n\n/**\n * Module for properties controls components\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        TooltipModule,\n        PropertyTypeControlsModule,\n        FormPipesModule,\n        CastPipesModule,\n    ],\n    declarations:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ],\n    exports:\n    [\n        ComponentStylingPropertiesControlComponent,\n        DefaultGenericPropertiesControlComponent,\n        MarginControlComponent,\n        PaddingControlComponent,\n        PropertiesControlRendererDirective,\n    ]\n})\nexport class PropertiesControlsModule\n{\n}","import {Directive, EventEmitter, HostListener, Inject, NgZone, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BindThis, isBlank} from '@jscrpt/common';\n\n/**\n * Directive used for resizing/changing of width\n */\n@Directive(\n{\n    selector: '[widthResizer]',\n    standalone: true,\n})\nexport class WidthResizerSADirective\n{\n    /**\n     * Value of last recorded x coordinate of mouse\n     */\n    protected lastXCoordinate: number|null = null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when size changes, represents difference, positive is that X increases, negative is if x decreases\n     */\n    @Output()\n    public size: EventEmitter<number> = new EventEmitter<number>();\n\n    //######################### constructor #########################\n    constructor(@Inject(DOCUMENT) protected document: Document,\n                protected ngZone: NgZone,)\n    {\n    }\n\n    //######################### protected methods - host #########################\n\n    /**\n     * Handles start of dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected dragStart(event: MouseEvent): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.document.addEventListener('mousemove', this.drag);\n            this.document.addEventListener('mouseup', this.dragEnd);\n        });\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = event.clientX;\n    }\n\n    /**\n     * Handles drag itself\n     * @param event - Mouse event that occured\n     */\n    @BindThis\n    protected drag(event: MouseEvent): void\n    {\n        if(isBlank(this.lastXCoordinate))\n        {\n            return;\n        }\n\n        this.size.emit(event.clientX - this.lastXCoordinate);\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = event.clientX;\n    }\n\n    /**\n     * Handles end of dragging\n     * @param event - Mouse event that occured\n     */\n    @BindThis\n    protected dragEnd(event: MouseEvent): void\n    {\n        this.ngZone.runOutsideAngular(() =>\n        {\n            this.document.removeEventListener('mousemove', this.drag);\n            this.document.removeEventListener('mouseup', this.dragEnd);\n        });\n\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this.lastXCoordinate = null;\n    }\n}","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {LayoutEditorPropertyMetadata} from '../../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../../decorators';\n\n/**\n * Directive used for rendering properties control\n */\n@Directive(\n{\n    selector: '[propertiesControl]'\n})\nexport class PropertiesControlRendererDirective<TComponent extends PropertiesControl<TOptions> = any, TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form group representing whole options\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * Properties metadata that are being rendered\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    /**\n     * Type that will be rendered\n     */\n    @Input('propertiesControl')\n    public type: Type<PropertiesControl>|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        this._logger?.debug('PropertiesControlRendererDirective: rendering properties control {@type}', {type: this.type?.name});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.type)\n        {\n            const injector = this._viewContainerRef.injector;\n\n            this._componentRef = this._viewContainerRef.createComponent(this.type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.propertiesMetadata = this.propertiesMetadata;\n                component.form = this.form;\n\n                await component.initialize();\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertiesControlRendererDirective: destroying properties control {@type}', {type: this.type?.name});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div *ngIf=\"!state.opened\" class=\"properties-toolbar\">\n    <button type=\"button\" class=\"btn-icon props-buttons\" (click)=\"toggleCollapsed()\">\n        <span class=\"text-vertical\">properties</span>\n    </button>\n</div>\n\n<ng-container *ngIf=\"state.opened\">\n    <div class=\"properties-main\" [style.width.px]=\"state.width\">\n        <div class=\"header\">\n            <div class=\"header-title\">properties</div>\n\n            <button type=\"button\" class=\"btn-icon\" (click)=\"toggleCollapsed()\">\n                <span class=\"fas fa-times\"></span>\n            </button>\n        </div>\n\n        <ng-container *ngIf=\"component\">\n            <div class=\"static-properties\">\n                <div class=\"properties-form-group\">\n                    <label class=\"properties-control-label\">type</label>\n                    <div class=\"properties-form-static\">{{metadata?.metaInfo?.name ?? component.options?.typeMetadata?.name}}</div>\n\n                    <label class=\"properties-control-label\">id</label>\n                    <div class=\"properties-form-static\">{{component.options?.typeMetadata?.id}}</div>\n\n                    <label class=\"properties-control-label\">display name</label>\n                    <input class=\"properties-form-control\" type=\"text\" [formControl]=\"displayName\">\n                </div>\n            </div>\n\n\n            <div class=\"thin-scrollbar properties-controls\">\n                <ng-container *ngFor=\"let props of propertiesData\">\n                    <ng-container *ngFor=\"let propertiesCtrl of props.controls\">\n                        <ng-container [propertiesControl]=\"propertiesCtrl\" [form]=\"props.form\" [propertiesMetadata]=\"props.metadata\"></ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n\n    <div class=\"properties-resizer\" widthResizer (size)=\"updateSize($event)\"></div>\n</ng-container>","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, ChangeDetectorRef, Inject, Optional, Type, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormControl, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {Logger, LOGGER, PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {FormModelBuilder} from '@anglr/common/forms';\nimport {addSimpleChange, MetadataHistoryManager} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DebounceCall, Dictionary, extend, isPresent, WithSync} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../../services';\nimport {LayoutDesignerSAComponent} from '../layoutDesigner/layoutDesigner.component';\nimport {LayoutEditorMetadataDescriptor, LayoutEditorPropertiesDefinitionMetadata, LayoutPropertyTypeData} from '../../decorators';\nimport {PropertiesControlsModule} from '../../modules';\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {PropertiesControl} from '../../interfaces';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {WidthResizerSADirective} from '../../directives';\n\nconst PROPERTIES_EDITOR_STATE = 'PROPERTIES_EDITOR_STATE';\n\n/**\n * State of properties editor\n */\ninterface PropertiesEditorState\n{\n    /**\n     * Indication whether is properties editor opened\n     */\n    opened: boolean;\n\n    /**\n     * Current width of properties editor\n     */\n    width: number;\n}\n\n/**\n * Properties editor data\n */\ninterface PropertiesEditorData\n{\n    /**\n     * Properties form\n     */\n    form: FormGroup;\n\n    /**\n     * Properties metadata\n     */\n    metadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null;\n\n    /**\n     * Array of properties controls used for editation of properties/options\n     */\n    controls: Type<PropertiesControl>[];\n}\n\n/**\n * Component that represents editor for components options/properties\n */\n@Component(\n{\n    selector: 'properties-editor',\n    templateUrl: 'propertiesEditor.component.html',\n    styleUrls: ['propertiesEditor.component.css'],\n    providers: [FormModelBuilder],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        PropertiesControlsModule,\n        WidthResizerSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PropertiesEditorSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for options form\n     */\n    protected optionsFormSubscription: Subscription|null = null;\n\n    /**\n     * Id of last component that was used for property editation\n     */\n    protected lastComponentId: string|null = null;\n\n    /**\n     * Instance of last component that was used for property editation\n     */\n    protected lastComponent: LayoutDesignerSAComponent|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of selected designer component\n     */\n    protected component: LayoutDesignerSAComponent|null = null;\n\n    /**\n     * Instance of metadata for selected designed component\n     */\n    protected metadata: LayoutEditorMetadataDescriptor|null = null;\n\n    /**\n     * Control for display name of component\n     */\n    protected displayName: FormControl<string|null> = new FormControl<string|null>(null);\n\n    /**\n     * Properties data for editation\n     */\n    protected propertiesData: PropertiesEditorData[] = [];\n\n    /**\n     * Instance of properties editor state\n     */\n    protected state: PropertiesEditorState = {opened: false, width: 350};\n\n    //######################### constructor #########################\n    constructor(protected manager: LayoutEditorMetadataManager,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected propertyExtractor: LayoutEditorPropertyMetadataExtractor,\n                protected formModelBuilder: FormModelBuilder,\n                protected changeDetector: ChangeDetectorRef,\n                @Inject(PERMANENT_STORAGE) protected storage: PermanentStorage,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        const state = this.storage.get<PropertiesEditorState|null>(PROPERTIES_EDITOR_STATE);\n\n        if(state)\n        {\n            this.state = state;\n        }\n\n        this.initSubscriptions.add(this.manager.layoutChange.subscribe(() => this.initProperties()));\n        this.initSubscriptions.add(this.manager.selectedChange.subscribe(() => this.initProperties()));\n\n        this.displayName\n            .valueChanges\n            .subscribe(async displayName =>\n            {\n                if(this.component?.options?.typeMetadata && isPresent(displayName))\n                {\n                    this.component.options.typeMetadata.displayName = displayName;\n\n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n\n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await this.component.ngOnChanges?.(changes);\n                    this.manager.displayNameUpdated();\n                    this.history.getNewState();\n                }\n            });\n\n        await this.initProperties();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Toggles collapsed state of properties\n     */\n    protected toggleCollapsed(): void\n    {\n        this.state.opened = !this.state.opened;\n\n        this.storage.set(PROPERTIES_EDITOR_STATE, this.state);\n    }\n\n    protected updateSize(size: number): void\n    {\n        this.state.width -= size;\n\n        this.storage.set(PROPERTIES_EDITOR_STATE, this.state);\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize properties for selected component\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async initProperties(): Promise<void>\n    {\n        if(isPresent(this.manager.selectedComponent))\n        {\n            const component = this.manager.getComponent(this.manager.selectedComponent);\n\n            if(this.lastComponent == component && this.lastComponentId == this.manager.selectedComponent)\n            {\n                return;\n            }\n            \n            this.lastComponent = component;\n            this.lastComponentId = this.manager.selectedComponent;\n\n            if(component)\n            {\n                this.component = component;\n\n                await this.getMetadata();\n            }\n            else\n            {\n                this.hide();\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n    }\n\n    /**\n     * Gets metadta for selected component\n     */\n    protected async getMetadata(): Promise<void>\n    {\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = new Subscription();\n        this.propertiesData = [];\n\n        if(this.component?.options?.typeMetadata)\n        {\n            this.displayName.setValue(this.component.options.typeMetadata.displayName || this.component.options.typeMetadata.id, {emitEvent: false});\n\n            this.metadata = await this.metadataExtractor.extractMetadata(this.component.options?.typeMetadata);\n\n            if(!this.metadata)\n            {\n                this.logger?.error('PropertiesEditorSAComponent: unable to get metadata {@source}', {package: this.component.options?.typeMetadata.package, name: this.component.options?.typeMetadata.name});\n\n                this.hide();\n            }\n\n            //properties metadata\n            if(this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata?.length)\n            {\n                for(const props of this.metadata?.metaInfo?.optionsMetadata?.propertiesMetadata)\n                {\n                    this.initDynamicProperty(props);\n                }\n            }\n\n            if(this.component)\n            {\n                const parent = this.manager.getParent(this.component.id);\n\n                //gets parent metadata\n                if(parent?.options?.typeMetadata)\n                {\n                    const parentMetadata = await this.metadataExtractor.extractMetadata(parent.options?.typeMetadata);\n                    \n                    //parent extensions properties metadata\n                    if(parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata?.length)\n                    {\n                        for(const props of parentMetadata?.metaInfo?.optionsMetadata?.childPropertiesMetadata)\n                        {\n                            this.initDynamicProperty(props);\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            this.hide();\n        }\n\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Hides properties\n     */\n    protected hide(): void\n    {\n        this.lastComponent = null;\n        this.lastComponentId = null;\n        this.component = null;\n        this.metadata = null;\n        this.propertiesData = [];\n        this.optionsFormSubscription?.unsubscribe();\n        this.optionsFormSubscription = null;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Initialize dynamic property\n     * @param props - Property to be initialized\n     */\n    protected initDynamicProperty(props: LayoutEditorPropertiesDefinitionMetadata): void\n    {\n        const form = this.formModelBuilder.build(new props.modelType(this.component?.options?.typeMetadata.options));\n        const metadata = this.propertyExtractor.extract(props.modelType);\n\n        if(this.optionsFormSubscription)\n        {\n            this.optionsFormSubscription.add(form.valueChanges.subscribe(async data =>\n            {\n                if(this.component?.options?.typeMetadata)\n                {\n                    extend(true, this.component.options.typeMetadata.options, data);\n    \n                    const changes: SimpleChanges = {};\n                    addSimpleChange<LayoutComponent>(changes, 'options', this.component.options, this.component.options);\n    \n                    // eslint-disable-next-line no-self-assign\n                    this.component.options = this.component.options;\n                    await this.component.ngOnChanges?.(changes);\n                    this.component.invalidateVisuals();\n                    this.history.getNewState();\n                }\n            }));\n    \n            this.propertiesData.push(\n            {\n                form,\n                metadata,\n                controls: props.propertiesControls,\n            });\n        }\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {InjectionToken} from '@angular/core';\n\nimport {DragPreviewRegistrator} from '../interfaces';\n\n/**\n * Injection token used for injecting drag preview registrator instance\n */\nexport const DRAG_PREVIEW_REGISTRATOR: InjectionToken<DragPreviewRegistrator> = new InjectionToken<DragPreviewRegistrator>('DRAG_PREVIEW_REGISTRATOR');\n","import {NgModule} from '@angular/core';\n\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        this._items.push(iteratorItem);\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected extractor: LayoutEditorMetadataExtractor,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const meta = await this.extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get metadata for children iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.extractor, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.extractor, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, isBlank} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected _components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected _rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected _layoutChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    /**\n     * Id of dragged over component\n     */\n    protected _draggedOverComponent: string|null = null;\n\n    /**\n     * Used for emitting dragged over component changes\n     */\n    protected _draggedOverComponentChange: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets id of dragged over component\n     */\n    public get draggedOverComponent(): string|null\n    {\n        return this._draggedOverComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this._layoutChange.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Occurs when dragged over component changes\n     */\n    public get draggedOverComponentChange(): Observable<void>\n    {\n        return this._draggedOverComponentChange.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    \n    /**\n     * Mark component as being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public dragOverComponent(id?: string): void\n    {\n        if (id === this._draggedOverComponent)\n        {\n            return;\n        }\n\n        this._draggedOverComponent = id ?? null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Removes indication of component being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public cancelDragOverComponent(): void\n    {\n        this._draggedOverComponent = null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this._rootComponentId = id;\n        }\n\n        //already exists\n        if(this._components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this._components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this._components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this._components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this._components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this._components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this._components[id];\n        delete this._components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this._rootComponentId)\n        {\n            this._rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this._layoutChange.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this._rootComponentId) || !this._components[this._rootComponentId])\n        {\n            return null;\n        }\n\n        return this._components[this._rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this._rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this._components[this._rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable()\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}"],"names":["ToLayoutDragDataSAPipe","transform","value","metadata","id","displayName","package","itemSource","name","options","extend","metaInfo","defaultOptions","parentId","index","pure","standalone","DndCorePaletteItemDirective","constructor","dnd","paletteItemElement","draggingSvc","bus","zone","initSubscriptions","Subscription","drag","this","dragSource","beginDrag","setDragging","dragData","newId","generateId","endDrag","monitor","didDrop","item","getItem","dropResult","getDropResult","setDropData","data","itemDrop","emit","setDropPlaceholderPreview","EventEmitter","connectDragToItem","ngOnInit","Error","ngOnDestroy","unsubscribe","itemConnection","runOutsideAngular","connectDragSource","nativeElement","dropEffect","i0","selectors","inputs","outputs","ComponentsPaletteSAComponent","moduleTypesLoader","changeDetector","packageManager","metadataExtractor","_refreshObservables","logger","allItems","groupedItems","refreshPipe","add","usedPackagesChange","subscribe","initItems","Array","isArray","obs","packageName","usedPackages","types","loadItem","type","extractMetadata","push","warn","group","_a","detectChanges","LAYOUT_MODULE_TYPES_LOADER","REFRESH_PALETTE_OBSERVABLES","LOGGER","features","decls","vars","consts","template","CommonModule","i3","LayoutDndCoreModule","i4","styles","changeDetection","DndCoreTreeItemDirective","designerElement","manager","injector","_manager","document","placeholderDrop","dropTarget","canDrop","drop","dropPlaceholderPreviewIndex","isPresent","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","getDropCoordinates","isBlank","placeholder","height","width","classList","canDrag","dragDisabled","remove","dropzone","hasAncestor","dragOverComponent","dropMetadata","connectDropToContainer","getComponent","dropzoneElement","containerElement","dropDataChange","pipe","filter","itm","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","showPlaceholderPreview","placeholderConnection","containerConnection","registerPreviewElement","element","connectDragPreview","offsetX","offsetY","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","children","getBoundingClientRect","position","y","offset","getClientOffset","x","length","child","contains","usedIndex","preview","createElement","connectDropToPlaceholder","insertBefore","connectDropTarget","component","getComponentDef","parent","ctx_r4","i_r6","DOCUMENT","exportAs","provide","DRAG_PREVIEW_REGISTRATOR","useExisting","forwardRef","__decorate","BindThis","ComponentsTreeItemSAComponent","_changeDetector","_draggingSvc","iteratorSvc","_initSubscriptions","open","hasChildren","layoutChange","initChildren","selectedChange","highlightedChange","displayNameChange","draggedOverComponentChange","_handleDragOver","toggle","expand","nodeId","_childrenNodes","toArray","addDescendant","expandAll","forEach","collapse","collapseAll","getChildrenIteratorFor","highlight","event","preventDefault","stopPropagation","highlightComponent","draggedOverComponent","dragOverSubscription","timer","_cancelHighlight","cancelHighlightedComponent","viewQuery","ctx","_r1","_r3","_r0","i2","MatButtonModule","DndModule","i5","DesignerDropzoneSADirective","DebounceCall","WithSync","ctx_r1","ctx_r3","ComponentsTreeSAComponent","root","getMetadata","rootTreeItem","selectedComponent","DragActiveService","DndBusService","PropertiesControlsModule","TooltipModule","PropertyTypeControlsModule","FormPipesModule","CastPipesModule","WidthResizerSADirective","ngZone","lastXCoordinate","size","dragStart","addEventListener","dragEnd","stopImmediatePropagation","clientX","removeEventListener","hostBindings","MouseEvent","PropertiesControlRendererDirective","_viewContainerRef","_logger","_componentRef","propertiesMetadata","ngOnChanges","debug","clear","createComponent","instance","form","initialize","invalidateVisuals","destroy","props_r6","PROPERTIES_EDITOR_STATE","PropertiesEditorSAComponent","propertyExtractor","formModelBuilder","storage","history","optionsFormSubscription","lastComponentId","lastComponent","FormControl","propertiesData","state","opened","get","initProperties","valueChanges","typeMetadata","changes","addSimpleChange","displayNameUpdated","getNewState","toggleCollapsed","set","updateSize","hide","setValue","emitEvent","error","optionsMetadata","props","initDynamicProperty","getParent","parentMetadata","childPropertiesMetadata","build","modelType","extract","controls","propertiesControls","PERMANENT_STORAGE","LAYOUT_HISTORY_MANAGER","FormModelBuilder","ReactiveFormsModule","isDropZone","draggingChange","processDragValue","setTimeout","dragging","InjectionToken","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","asObservable","next","factory","NumberInputModule","_dragging","_draggingChange","LayoutComponentsIterator","_layoutMetadata","_extractor","_items","_initialized","_initPromise","Symbol","asyncIterator","initPromise","_getInitPromise","items","done","callback","levelIndex","level","_getComponents","_getComponent","iteratorItem","meta","getDescendants","childrenMeta","LayoutComponentsChildrenIterator","layoutMetadata","extractor","initialized","getInitPromise","getChildren","LayoutComponentsIteratorService","getIteratorFor","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","metadataType","layoutEditorMetadata","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_components","_rootComponentId","_selectedComponent","_highlightedComponent","_layoutChange","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","_draggedOverComponent","_draggedOverComponentChange","highlightedComponent","flatTree","_buildFlatTree","selectComponent","unselectComponent","cancelDragOverComponent","registerLayoutDesignerComponent","componentItem","getIndex","indexOf","unregisterLayoutDesignerComponent","splice","_buildFlatTreeForComponent","result","concat","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","propSymbol","Reflect","prototype","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES"],"sourceRoot":""}