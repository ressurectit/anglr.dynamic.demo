{"version":3,"file":"3002.chunk.90299a527e3409adecd7.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/item/nodesPaletteItem.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {Pipe, PipeTransform, inject} from '@angular/core';\nimport {DefaultsOverride} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\nimport {RELATIONS_DEFAULTS_OVERRIDE} from '../../misc/tokens';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### protected properties #########################\n    \n    /**\n     * Default options override service\n     */\n    protected defaultsOverride: DefaultsOverride|null = inject(RELATIONS_DEFAULTS_OVERRIDE, {optional: true});\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     * @param singleton - Indication whether is new node singleton, can be used only once\n     * @param scope - Current scope that is being used\n     */\n    public transform(value: NodesPaletteItem, id: string, singleton: boolean|undefined, scope: string|undefined): RelationsNodeDragData\n    {\n        const newId = singleton ? value.itemSource.name : `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: singleton ? this.defaultsOverride?.getDisplayName(value.itemSource.package, value.itemSource.name, value.metadata.displayName) || value.metadata.displayName || value.itemSource.name : undefined,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                scope,\n                relationsOptions: extend(true, {}, this.defaultsOverride?.getOptions(value.itemSource.package, value.itemSource.name, value.metadata.metaInfo?.defaultOptions) ?? value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    scopeConfigurable: !singleton ?? false,\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            },\n        };\n    }\n}","<div class=\"editor-component-name\">{{(data.metadata.singleton ? (data.metadata.displayName || data.itemSource.name) : (data.metadata.metaInfo?.name ?? data.itemSource.name))|firstUppercaseLocalize}}</div>\n<div class=\"editor-component-description\" *ngIf=\"data.metadata.metaInfo?.description\">{{data.metadata.metaInfo?.description|firstUppercaseLocalize}}</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input, HostBinding, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDrag} from '@angular/cdk/drag-drop';\nimport {PackageManager} from '@anglr/dynamic';\nimport {FirstUppercaseLocalizeSAPipe, Logger, LOGGER} from '@anglr/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNodeManager} from '../../../services';\nimport {NodesPaletteItem} from '../nodesPalette.interface';\n\n/**\n * Component displaying nodes palette item\n */\n@Component(\n{\n    selector: 'nodes-palette-item',\n    templateUrl: 'nodesPaletteItem.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteItemSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether node is already used\n     */\n    @HostBinding('class.used')\n    protected used: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Nodes palette item\n     */\n    @Input()\n    public data!: NodesPaletteItem;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Optional() protected _cdkDrag: CdkDrag,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        for (const nodeId in this._metadataManager.nodes)\n        {\n            if (this.data?.itemSource?.name === nodeId)\n            {\n                this._setUsed(true);\n                break;\n            }\n        }\n\n        //TODO initsubscription add used change\n        this.initSubscriptions.add(this._metadataManager.nodeRegisterChange.subscribe(registeredNode => \n        {\n            if (registeredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(true);\n            }\n        }));\n        this.initSubscriptions.add(this._metadataManager.nodeUnregisterChange.subscribe(unregisteredNode => \n        {\n            if (unregisteredNode.id === this.data?.itemSource?.name)\n            {\n                this._setUsed(false);\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets used indication for node\n     * @param used \n     */\n    protected _setUsed(used: boolean): void\n    {\n        this.used = used;\n\n        if (this._cdkDrag)\n        {\n            this._cdkDrag.disabled = used;\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Focus to relations node\n     * @param item \n     * @returns \n     */\n    @HostListener('dblclick')\n    protected focusNode(): void\n    {\n        if (!this.used ||\n            !this.data?.metadata?.singleton)\n        {\n            return;\n        }\n\n        this._metadataManager.setActiveNode(this.data?.itemSource?.name);\n    }\n}","<div class=\"dynamic-flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of groupedItems | keyvalue\">\n        <div class=\"dynamic-text-spread dynamic-text-small-caps dynamic-margin-left-extra-small dynamic-margin-horizontal-small dynamic-bold\">{{groupKeyValue.key|firstUppercaseLocalize}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <nodes-palette-item [data]=\"item\"\n                                class=\"editor-component mat-elevation-z2\"\n                                cdkDrag\n                                [cdkDragData]=\"item | toRelationsDragData: newCompnentId: item.metadata.singleton: item.metadata.scope\"\n                                (cdkDragDropped)=\"generateNewId()\"></nodes-palette-item>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input, SimpleChanges} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource, PackageManager} from '@anglr/dynamic';\nimport {FirstUppercaseLocalizeSAPipe, Logger, LOGGER} from '@anglr/common';\nimport {DebounceCall, Dictionary, generateId, nameof, WithSync} from '@jscrpt/common';\nimport {Observable, Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {REFRESH_PALETTE_OBSERVABLES, RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\nimport {NodesPaletteItemSAComponent} from './item/nodesPaletteItem.component';\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n        NodesPaletteItemSAComponent,\n        FirstUppercaseLocalizeSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected allItems: NodesPaletteItem[] = [];\n\n    /**\n     * Gets array of used packages\n     */\n    protected get usedPackages(): string[]\n    {\n        return this.packages ?? this.packageManager.usedPackages;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected isDragOverPalette: boolean = false;\n\n    /**\n     * Array of whitelisted packages\n     */\n    protected whiteListedPackages: string[] = [];\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    /**\n     * Array of packages that should be used, if specified, package manager is ignored\n     */\n    @Input()\n    public packages: string[]|undefined|null;\n\n    /**\n     * Array of dynamic items sources which should be whitelisted, if this is used, package which is whitelisted will override black list and only components from whitelist will be available\n     */\n    @Input()\n    public whiteList: DynamicItemSource[]|undefined|null;\n\n    /**\n     * Array of dynamic items sources which should be blacklisted, components used in this list will not be available, only if overriden by whitelist\n     */\n    @Input()\n    public blackList: DynamicItemSource[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected packageManager: PackageManager,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(REFRESH_PALETTE_OBSERVABLES) @Optional() protected _refreshObservables?: Observable<void>[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._refreshObservables && Array.isArray(this._refreshObservables))\n        {\n            for(const obs of this._refreshObservables)\n            {\n                this.initSubscriptions.add(obs.subscribe(() => this.loadNodes()));\n            }\n        }\n\n        this.initSubscriptions.add(this.packageManager.usedPackagesChange.subscribe(() => this.loadNodes()));\n\n        await this.loadNodes();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        if(nameof<NodesPaletteSAComponent>('whiteList') in changes)\n        {\n            this.whiteListedPackages = [];\n\n            if(Array.isArray(this.whiteList))\n            {\n                for(const source of this.whiteList)\n                {\n                    //package already whitelisted\n                    if(this.whiteListedPackages.find(itm => itm == source.package))\n                    {\n                        continue;\n                    }\n\n                    this.whiteListedPackages.push(source.package);\n                }\n            }\n        }\n\n        if(nameof<NodesPaletteSAComponent>('whiteList') in changes ||\n           nameof<NodesPaletteSAComponent>('blackList') in changes ||\n           nameof<NodesPaletteSAComponent>('packages') in changes)\n        {\n            await this.loadNodes();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    /**\n     * Loads available relations nodes into palette\n     */\n    @DebounceCall(10)\n    @WithSync()\n    protected async loadNodes(): Promise<void>\n    {\n        this.allItems = [];\n        this.groupedItems = {};\n\n        for (const packageName of this.usedPackages)\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                //package is whitelisted\n                if(this.whiteListedPackages.find(itm => packageName == itm))\n                {\n                    //item is not whitelisted\n                    if(!this.whiteList?.find(itm => itm.package == packageName && itm.name == type))\n                    {\n                        continue;\n                    }\n                }\n                //item is blacklisted\n                else if(this.blackList?.find(itm => itm.package == packageName && itm.name == type))\n                {\n                    continue;\n                }\n\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {{@source}}', {source: itemSource});\n                }\n                else\n                {\n                    this.allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this.groupedItems[''] = [];\n\n        //group items\n        for(const item of this.allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this.groupedItems[group] ??= [];\n            this.groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected generateNewId(): void\n    {\n        this.newCompnentId = generateId(16);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnInit, Inject, ChangeDetectorRef, OnChanges, SimpleChanges, ViewChild, Optional} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {DynamicItemSource, EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n        PackageManagerModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent implements OnInit, OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relation canvas\n     */\n    @ViewChild(RelationsCanvasSAComponent)\n    protected relationCanvas: RelationsCanvasSAComponent|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    /**\n     * Array of packages that should be used, if specified, package manager is not displayed\n     */\n    @Input()\n    public packages: string[]|undefined|null;\n\n    /**\n     * Array of dynamic items sources which should be whitelisted, if this is used, package which is whitelisted will override black list and only components from whitelist will be available\n     */\n    @Input()\n    public whiteList: DynamicItemSource[]|undefined|null;\n\n    /**\n     * Array of dynamic items sources which should be blacklisted, components used in this list will not be available, only if overriden by whitelist\n     */\n    @Input()\n    public blackList: DynamicItemSource[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<RelationsEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {        \n        if (event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            const coordinates = this.relationCanvas?.getPositionInCanvas(event.dropPoint);\n\n            if(coordinates)\n            {\n                event.item.data.metadata.nodeMetadata.coordinates.x = coordinates.x;\n                event.item.data.metadata.nodeMetadata.coordinates.y = coordinates.y;\n            }\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n\n        this.history.getNewState();\n    }\n}","<div class=\"dynamic-flex-row dynamic-flex-1\">\n    <div class=\"overflow-vertical-scroll dynamic-thin-scrollbar\">\n        <package-manager></package-manager>\n        <nodes-palette [canvasDropList]=\"dropList\" [packages]=\"packages\" [whiteList]=\"whiteList\" [blackList]=\"blackList\" style=\"width: 250px;\"></nodes-palette>\n    </div>\n\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"dynamic-flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister),\n            ]\n        };\n    }\n}","<div class=\"dynamic-flex-row\">\n    <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"dynamic-flex-row\">\n        <select class=\"dynamic-form-control dynamic-flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"dynamic-flex-row dynamic-align-items-center dynamic-margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"dynamic-flex-1\">{{package}}</div>\n\n        <button type=\"button\" class=\"dynamic-btn-icon dynamic-margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} "],"names":["DemoRelationsPackageManager","PackageManager","constructor","super","factory","ɵfac","ToRelationsDragDataSAPipe","defaultsOverride","inject","RELATIONS_DEFAULTS_OVERRIDE","optional","transform","value","id","singleton","scope","metadata","itemSource","name","displayName","this","getDisplayName","package","undefined","relationsOptions","extend","getOptions","metaInfo","defaultOptions","outputs","nodeMetadata","scopeConfigurable","coordinates","x","y","options","pure","standalone","i0","ctx_r0","data","description","NodesPaletteItemSAComponent","_changeDetector","packageManager","_metadataManager","_cdkDrag","_logger","initSubscriptions","Subscription","used","ngOnInit","_this","nodeId","nodes","_setUsed","add","nodeRegisterChange","subscribe","registeredNode","nodeUnregisterChange","unregisteredNode","ngOnDestroy","unsubscribe","disabled","markForCheck","focusNode","setActiveNode","i1","i2","i3","LOGGER","selectors","hostVars","hostBindings","rf","ctx","NodesPaletteItemSAComponent_div_3_Template","tmp_0_0","CommonModule","i4","FirstUppercaseLocalizeSAPipe","encapsulation","changeDetection","_r5","ctx_r4","generateNewId","ctx_r2","canvasDropList","item_r3","newCompnentId","NodesPaletteSAComponent_ng_container_1_div_4_Template","groupKeyValue_r1","key","NodesPaletteSAComponent","usedPackages","packages","_moduleTypesLoader","_nodesLoader","_refreshObservables","allItems","groupedItems","generateId","isDragOverPalette","whiteListedPackages","_asyncToGenerator","Array","isArray","obs","loadNodes","usedPackagesChange","ngOnChanges","changes","_this2","nameof","whiteList","source","find","itm","push","_this3","packageName","types","loadItem","type","blackList","warn","item","group","_a","detectChanges","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","inputs","features","decls","vars","consts","template","NodesPaletteSAComponent_ng_container_1_Template","DragDropModule","__decorate","DebounceCall","WithSync","RelationsEditorSAComponent","history","changeDetector","hotkeys","init","pop","undo","redo","clean","setInitialState","destroy","addNode","event","relationCanvas","getPositionInCanvas","dropPoint","getNewState","RELATIONS_HISTORY_MANAGER","viewQuery","RelationsCanvasSAComponent","$event","_r0","PackageManagerModule","styles","DynamicRelationsEditorModule","withProviders","ngModule","providers","provideRelationsEditor","withStaticComponents","staticRegister","provideRelationsEditorWithStatic","package_r4","package_r5","_r7","$implicit","ctx_r6","removePackage","PackageManagerComponent_div_5_option_4_Template","_r9","_r1","ctx_r8","addPackage","availablePackages","selectedIndex","PackageManagerComponent_div_5_div_7_Template","PackageManagerComponent","detailVisible","updatedAvailablePackages","setUsedPackages","filter","it","PackageManagerComponent_div_5_Template","ReactiveFormsModule","packagesChange","packagesChangeSubject","asObservable","result","packageSources","_usedPackages","usedPackagesSubject","storageName","Subject","store","PERMANENT_STORAGE","PACKAGE_SOURCES","get","next","set","refresh"],"sourceRoot":""}