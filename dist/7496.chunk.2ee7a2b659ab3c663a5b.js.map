{"version":3,"file":"7496.chunk.2ee7a2b659ab3c663a5b.js","mappings":"wYAMO,MAAMA,EAA2B,e,EAAA,G,EAA6D,mBAAY,WAAW,wFAA6CC,4BAApE,E,+KAA7D,qDCaxC,IAAaC,EAAb,MAkDIC,YAAYC,GATL,KAAAC,QAAe,CAACC,MAAM,GAMtB,KAAAC,MAAa,KAKhBC,KAAKC,KAAOL,EAASM,IAAIC,EAAAA,GACzBH,KAAKI,OAASR,EAASM,IAAIG,EAAAA,GAC9B,CA9BUC,uBAEP,OAAON,KAAKO,iBACf,CACUD,qBAAiBE,GAExBR,KAAKO,kBAAoBC,EAEzBR,KAAKS,YACR,CA4BMC,YAAYC,GAEfX,KAAKY,aACR,CAKMC,oBAEN,CAOSJ,aAEN,GAAGT,KAAKM,kBAEDN,KAAKM,iBAAiBQ,QAAUC,MAAMC,QAAQhB,KAAKM,iBAAiBQ,QAEnE,IAAI,MAAMG,KAASjB,KAAKM,iBAAiBQ,OAElCG,EAAMC,cAAgBD,EAAME,MAE3BC,OAAOC,eAAerB,KACAiB,EAAME,KACN,CACID,cAAc,EACdI,YAAY,EACZC,IAAKf,GAASS,EAAMT,MAAQA,IAOnER,KAAKM,kBAAkBkB,gBAEtBxB,KAAKY,aAEZ,CAKSA,cAEN,IAAIZ,KAAKM,mBACLN,KAAKM,iBAAiBmB,SACtBzB,KAAKM,iBAAiBoB,IAItB,YAFA1B,KAAKI,OAAOuB,KAAK,mEAAoE3B,KAAKM,kBAK9F,IAAIoB,EAAc1B,KAAKM,iBAAiBoB,IAExC,MAAME,EAA0B,GAEhC,GAAG5B,KAAKM,iBAAiBQ,QAAUC,MAAMC,QAAQhB,KAAKM,iBAAiBQ,QAEnE,IAAI,MAAMG,KAASjB,KAAKM,iBAAiBQ,OAI5B,SAFFG,EAAMY,MAILD,EAAWE,KAAKb,GAehC,IAAI,MAAMc,KAAaH,EAEnBF,EAAMA,EAAIM,QAAQ,IAAMD,EAAUZ,KAAO,IAAKY,EAAUvB,OAG5D,MAAMyB,EAA4B,IAAIC,EAAAA,EAAYlC,KAAKM,iBAAiBmB,OACtBC,EACA,KACA,CACIS,gBAAgB,EAChBC,aAAc,SAGpEpC,KAAKC,KAAKgC,QAAQA,GACbI,MAAKC,EAAAA,EAAAA,IAAWvC,IAGbC,KAAKH,QAAU,KACfG,KAAKD,MAAQA,EAENwC,EAAAA,MAEVC,WAAUC,IAEP,GAAGA,EAAOZ,MAAQa,EAAAA,GAAAA,UAEXD,EAAOE,QAAU,KAAOF,EAAOE,QAAU,IAKxC,OAHA3C,KAAKH,QAAU4C,EAAOG,UACtB5C,KAAKD,MAAQ,KAIpB,GAEZ,IA7ID8C,EAAAA,EAAAA,IAAAA,EADCC,EAAAA,EAAAA,MACD,8DAMAD,EAAAA,EAAAA,IAAAA,EADCC,EAAAA,EAAAA,MACD,2DA/CSpD,GAAa,UAFzBqD,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBxD,IACC,6BAkDAyD,EAAAA,KAlDbvD,GCjBb,S,kBCiBM,SAAUwD,EAAyBC,GAIrC,QAFaA,EAECC,sBACjB,CAKK,SAAUL,IAEZ,OAAO,SAAuCM,GAM1C,OAJaA,EAERD,wBAAyB,EAEvBC,CACV,CACJ,C","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/rest/rest.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/rest/rest.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/rest/type.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Rest relations metadata loader\n */\nexport const RestRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/rest.relationsMetadata')).RestRelationsEditorMetadata();\n","import {Injector, SimpleChanges} from '@angular/core';\nimport {HttpClient, HttpEventType, HttpRequest} from '@angular/common/http';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {catchError} from 'rxjs/operators';\nimport {EMPTY} from 'rxjs';\n\nimport {RestRelationsMetadataLoader} from './rest.metadata';\nimport {RestRelationsOptions} from './rest.options';\nimport {RestParam} from './misc/interfaces';\n\n//TODO: maybe improve @anglr/rest and use same functionality here\n\n/**\n * Rest relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(RestRelationsMetadataLoader)\nexport class RestRelations implements RelationsComponent<RestRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Options used in this relations component\n     */\n    protected ɵRelationsOptions: RestRelationsOptions|undefined|null;\n\n    /**\n     * Instance of http client\n     */\n    protected http: HttpClient;\n\n    /**\n     * Instance of logger\n     */\n    protected logger: Logger;\n\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relationsOptions(): RestRelationsOptions|undefined|null\n    {\n        return this.ɵRelationsOptions;\n    }\n    public set relationsOptions(value: RestRelationsOptions|undefined|null)\n    {\n        this.ɵRelationsOptions = value;\n\n        this.initialize();\n    }\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Success output for rest result\n     */\n    @DynamicOutput()\n    public success: any = {test: true};\n\n    /**\n     * Error output for rest result\n     */\n    @DynamicOutput()\n    public error: any = null;\n\n    //######################### constructor #########################\n    constructor(injector: Injector,)\n    {\n        this.http = injector.get(HttpClient);\n        this.logger = injector.get(LOGGER);\n    }\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public ngOnChanges(_changes: SimpleChanges): void\n    {\n        this.makeRequest();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize rest relations\n     */\n    protected initialize(): void\n    {\n        if(this.relationsOptions)\n        {\n            if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n            {\n                for(const param of this.relationsOptions.params)\n                {\n                    if(param.configurable && param.name)\n                    {\n                        Object.defineProperty(this,\n                                              param.name,\n                                              {\n                                                  configurable: true,\n                                                  enumerable: true,\n                                                  set: value => param.value = value\n                                              });\n                    }\n                }\n            }\n        }\n\n        if(this.relationsOptions?.runImmediately)\n        {\n            this.makeRequest();\n        }\n    }\n\n    /**\n     * Make http request\n     */\n    protected makeRequest(): void\n    {\n        if(!this.relationsOptions ||\n           !this.relationsOptions.method ||\n           !this.relationsOptions.url)\n        {\n            this.logger.warn('RestRelations: missing options for craeting http request {@data}', this.relationsOptions);\n\n            return;\n        }   \n\n        let url: string = this.relationsOptions.url;\n        // let body: any = null;\n        const pathParams: RestParam[] = [];\n\n        if(this.relationsOptions.params && Array.isArray(this.relationsOptions.params))\n        {\n            for(const param of this.relationsOptions.params)\n            {\n                switch(param.type)\n                {\n                    case 'PATH':\n                    {\n                        pathParams.push(param);\n\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n\n        //TODO: finish\n\n        //process path params\n        for(const pathParam of pathParams)\n        {\n            url = url.replace('{' + pathParam.name + '}', pathParam.value as string);\n        }\n\n        const request: HttpRequest<any> = new HttpRequest(this.relationsOptions.method,\n                                                          url,\n                                                          null,\n                                                          {\n                                                              reportProgress: false,\n                                                              responseType: 'json',\n                                                          });\n\n        this.http.request(request)\n            .pipe(catchError(error =>\n            {\n                //TODO: proper handling\n                this.success = null;\n                this.error = error;\n\n                return EMPTY;\n            }))\n            .subscribe(result =>\n            {\n                if(result.type == HttpEventType.Response)\n                {\n                    if(result.status >= 200 && result.status <= 300)\n                    {\n                        this.success = result.body;\n                        this.error = null;\n\n                        return;\n                    }\n                }\n            });\n    }\n}","import {RestRelations} from './rest.relations';\n\nexport default RestRelations;","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}"],"names":["RestRelationsMetadataLoader","RestRelationsEditorMetadata","RestRelations","constructor","injector","success","test","error","this","http","get","HttpClient","logger","LOGGER","relationsOptions","ɵRelationsOptions","value","initialize","ngOnChanges","_changes","makeRequest","invalidateVisuals","params","Array","isArray","param","configurable","name","Object","defineProperty","enumerable","set","runImmediately","method","url","warn","pathParams","type","push","pathParam","replace","request","HttpRequest","reportProgress","responseType","pipe","catchError","EMPTY","subscribe","result","HttpEventType","status","body","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata","Injector","isRelationsComponentType","obj","__ɵɵRelationsComponent","target"],"sourceRoot":""}