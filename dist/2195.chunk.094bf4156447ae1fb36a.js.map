{"version":3,"file":"2195.chunk.094bf4156447ae1fb36a.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.model.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.layoutMetadata.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html"],"sourcesContent":["import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\nimport {isPresent} from '@jscrpt/common';\n\nimport {RichTextBlockEditorDialogSAComponent} from '../richTextBlockEditorDialog/richTextBlockEditorDialog.component';\nimport {RichTextBlockComponentOptions} from '../../../richTextBlock.options';\n\n/**\n * Component used for displaying rich text block properties control\n */\n@Component(\n{\n    selector: 'rich-text-block-properties-control',\n    templateUrl: 'richTextBlockPropertiesControl.component.html',\n    styleUrls: ['richTextBlockPropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockPropertiesControlSAComponent extends PropertiesControlBase<RichTextBlockComponentOptions> implements PropertiesControl<RichTextBlockComponentOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text block editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.form?.controls.content.value\n        }).afterClosed()\n            .toPromise();\n\n        if(isPresent(result))\n        {\n            const control = this.form?.controls.content;\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n","<button type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit rich text block</span>\n</button>","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\n\n/**\n * Rich text block model for properties editor\n */\nexport class RichTextBlockModel implements RichTextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: RichTextBlockComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockPropertiesControlSAComponent} from '../misc/components';\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\nimport {RichTextBlockModel} from './richTextBlock.model';\n\n/**\n * Rich text block layout metadata\n */\nexport class RichTextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RichTextBlockComponentOptions> =\n    {\n        name: 'Rich text block',\n        description: 'WYSIWYG editor allowing formatting of multiline text',\n        group: 'Texts',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: RichTextBlockModel,\n                    propertiesControls: \n                    [\n                        RichTextBlockPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"flex-row flex-end\">\n    <button class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>"],"names":["PropertiesControlBase","constructor","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","resolvePromiseOr","_initialize","initialize","invalidateVisuals","this","detectChanges","i0","inputs","form","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","data","layoutEditorMetadata","warn","debug","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","RichTextBlockPropertiesControlSAComponent","changeDetector","metadataExtractor","dialog","super","showCodeEditor","result","open","RichTextBlockEditorDialogSAComponent","title","width","height","controls","content","value","afterClosed","toPromise","isPresent","control","FormControl","setValue","selectors","standalone","features","decls","vars","consts","template","ctx","RichTextBlockModel","mapValuesToThis","RichTextBlockLayoutEditorMetadata","metaInfo","description","group","optionsMetadata","modelType","propertiesControls","TITLED_DIALOG_DATA","_r0","MatDialogModule","i1","EditorModule","i2","encapsulation","changeDetection"],"sourceRoot":""}