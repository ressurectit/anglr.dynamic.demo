{"version":3,"file":"887.chunk.c42ada2ce920115f091f.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerMinHeight/designerMinHeight.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/connectDropLists/connectDropLists.directive.ts","webpack://ng-universal-demo/../../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/type.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, ElementRef, EmbeddedViewRef, OnDestroy, OnInit} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\n/**\n * Applies min height to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinHeight]',\n    standalone: true\n})\nexport class DesignerMinHeightSADirective implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of resize observer\n     */\n    protected _observer?: ResizeObserver;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected _layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._observer = new ResizeObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                //no height, apply min height\n                if(change.contentRect.height <= 0)\n                {\n                    this._element.nativeElement.style.minHeight = '30px';\n                }\n                else\n                {\n                    this._element.nativeElement.style.minHeight = '';\n                }\n            }\n        });\n\n        this._initSubscriptions.add(this._layoutComponentRendererDirective?.componentChange.subscribe(componentRef =>\n        {\n            if(!componentRef)\n            {\n                this._observer?.disconnect();\n\n                return;\n            }\n\n            this._observer?.observe((componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._observer?.disconnect();\n        this._initSubscriptions.unsubscribe();\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, OnDestroy, OnInit} from '@angular/core';\nimport {CdkDropList} from '@angular/cdk/drag-drop';\nimport {Subscription} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\nimport {LayoutEditorMetadataManager} from '../../services';\n\n/**\n * Directive that connects all droplists in tree\n */\n@Directive(\n{\n    selector: '[cdkDropList][connectDropLists]',\n    exportAs: 'connectDropLists',\n    standalone: true,\n})\nexport class ConnectDropListsSADirective implements OnInit, OnDestroy\n{\n    /**\n     * Subscriptions created during initialization\n     */\n    private _initSubscriptions: Subscription = new Subscription();\n\n    //######################### constructor #########################\n    constructor(protected _cdkDropList: CdkDropList,\n                protected _manager: LayoutEditorMetadataManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this._manager.layoutChange.pipe(debounceTime(12)).subscribe(() => this._setConnectedTo()));\n\n        this._setConnectedTo();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets connectedTo to CdkDropList\n     */\n    protected _setConnectedTo(): void\n    {\n        const flatTree = this._manager.flatTree.map(itm => itm.component.designerDropList).reverse();\n        const connectedTo = flatTree.filter(itm => itm != this._cdkDropList);\n\n        this._cdkDropList.connectedTo = connectedTo;\n    }\n}","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter} from '@angular/core';\nimport {nameof, isPresent, isString} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected _placement: PositionPlacement|null|undefined;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected _source!: HTMLElement;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement\n    {\n        return this._source;\n    }\n    public set source(value: HTMLElement)\n    {\n        if(value instanceof ElementRef)\n        {\n            this._source = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this._source = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|null|undefined\n    {\n        return this._placement;\n    }\n    public set placement(value: PositionPlacement|null|undefined)\n    {\n        if(isString(value))\n        {\n            this._placement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this._placement = value;\n    }\n\n    // //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected _target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected _position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected async _applyPosition(): Promise<void>\n    {\n        const options: Partial<PositionOptions> =\n        {\n        };\n\n        if(this._placement)\n        {\n            options.placement = this._placement;\n        }\n\n        const result = await this._position.placeElement(this._target.nativeElement,\n                                                         this._source,\n                                                         options).toPromise();\n\n        applyPositionResult(result);\n\n        if(result.flip)\n        {\n            this.flip.next();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `positionTo` input\n     */\n    public static ngAcceptInputType_positionTo: HTMLElement|ElementRef<HTMLElement>;\n}\n","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n","<div class=\"designer-overlay\" \n     #layoutDesigner\n     cdkDrag\n     cdkDropList\n     designerMinHeight\n     connectDropLists\n     [copyDesignerStyles]=\"_renderedType\"\n     [cdkDragData]=\"{metadata: _renderedType, parentId: _parent?._renderedType?.id}\"\n     [cdkDragDisabled]=\"!_parent || _editorMetadata?.metaInfo?.dragDisabled\"\n     [cdkDropListEnterPredicate]=\"canDrop\"\n     (mouseleave)=\"_hideOverlay($event)\"\n     (mouseover)=\"_showOverlay($event)\"\n     (cdkDropListDropped)=\"_addDescendant($event)\"\n     (click)=\"_selectComponent($event)\"\n     (dblclick)=\"_unselectComponent($event)\">\n    <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n    <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"_editorMetadata\" [layoutMetadata]=\"_renderedType\"></layout-editor-drag-preview>\n    <ng-template [layoutComponentRenderer]=\"_renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n    <ng-container *ngIf=\"highlighted || selected\">\n        <div class=\"designer-overlay-border\"></div>\n\n        <div class=\"designer-overlay-title\"\n             [positionTo]=\"layoutDesigner\"\n             placement=\"TopStart\">{{_editorMetadata?.metaInfo?.name ?? _renderedType?.name}}</div>\n\n        <div *ngIf=\"!!_parent && _parent._editorMetadata?.removeDescendant\" class=\"designer-overlay-remove\" (click)=\"_remove()\">x</div>\n    </ng-container>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDragDrop, CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Func, isPresent} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {ConnectDropListsSADirective, CopyDesignerStylesSADirective, DesignerMinHeightSADirective} from '../../directives';\nimport {LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutComponentDragData, LayoutEditorMetadataDescriptor} from '../../interfaces';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutEditorDragPlaceholderSAComponent} from '../layoutEditorDragPlaceholder/layoutEditorDragPlaceholder.component';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    styleUrls: ['layoutDesigner.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        PositionModule,\n        DragDropModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutEditorDragPlaceholderSAComponent,\n        DesignerMinHeightSADirective,\n        CopyDesignerStylesSADirective,\n        ConnectDropListsSADirective,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Indication whether were metadata read or not\n     */\n    protected _metadataRead: boolean = false;\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    protected _canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    protected _editorMetadata: LayoutEditorMetadataDescriptor<LayoutDesignerComponentOptions>|null = null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this._layoutEditorMetadataManager.selectedComponent === this._options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this._layoutEditorMetadataManager.highlightedComponent === this._options?.typeMetadata.id;\n    }\n\n    /**\n     * Gets predicate that returns indication whether item can be dropped into this list\n     */\n    protected canDrop: Func<boolean> = () => this._canDrop;\n\n    /**\n     * Metadata for rendered type\n     */\n    protected _renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of CdkDrop list that is present in componet\n     */\n    @ViewChild(CdkDropList, {static: true})\n    public designerDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected _getter: DynamicItemLoader,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,\n                protected _layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected _parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, logger);\n\n        //TODO: optimize\n        this._initSubscriptions.add(this._layoutEditorMetadataManager.selectedChange.subscribe(() => this._changeDetector.detectChanges()));\n        this._initSubscriptions.add(this._layoutEditorMetadataManager.highlightedChange.subscribe(() => this._changeDetector.detectChanges()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this._options?.typeMetadata.id});\n\n        this._initSubscriptions.unsubscribe();\n\n        if(this._options)\n        {\n            this._layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this._options.typeMetadata.id);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    protected _removeDescendant(id: string): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        this._logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this._options.typeMetadata.id, child: id});\n\n        this._editorMetadata?.removeDescendant?.(id, this._options.typeMetadata.options);\n        this._canDrop = this._editorMetadata?.canDropMetadata?.(this._options.typeMetadata.options) ?? false;\n        this._renderedType = {...this._options.typeMetadata};\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    protected _addDescendant(dragData: CdkDragDrop<LayoutComponentDragData, LayoutComponentDragData, LayoutComponentDragData>): void\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        const parentId = dragData.item.data.parentId;\n        this._logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.item.data.metadata.id, parent: this._options.typeMetadata.id});\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this._layoutEditorMetadataManager.getComponent(parentId)?._removeDescendant(dragData.item.data.metadata.id);\n        }\n\n        this._editorMetadata?.addDescendant?.(dragData.item.data.metadata, this._options.typeMetadata.options, dragData.currentIndex);\n        this._canDrop = this._editorMetadata?.canDropMetadata?.(this._options.typeMetadata.options) ?? false;\n\n        this._renderedType = {...this._options.typeMetadata};\n    }\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected _showOverlay(event: Event): void\n    {\n        this._logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this._options?.typeMetadata.name, id: this._options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.highlightComponent(this._options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected _hideOverlay(event: Event): void\n    {\n        if(isPresent(this._parent))\n        {\n            return;\n        }\n\n        this._logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this._options?.typeMetadata.name, id: this._options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected _selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this._options)\n        {\n            this._layoutEditorMetadataManager.selectComponent(this._options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected _unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected _remove(): void\n    {\n        if(!this._parent || !this._options)\n        {\n            return;\n        }\n\n        this._parent._removeDescendant(this._options.typeMetadata.id);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _optionsSet(): Promise<void>\n    {\n        if(!this._options)\n        {\n            return;\n        }\n\n        this._renderedType = {...this._options.typeMetadata};\n        this._layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this._options.typeMetadata.id, this._parent?._options?.typeMetadata.id);\n        await this._readMetadata();\n        this._canDrop = this._editorMetadata?.canDropMetadata?.(this._options.typeMetadata.options) ?? false;\n\n        this._changeDetector.detectChanges();\n    }\n\n    /**\n     * Reads metadata stored in object\n     */\n    protected async _readMetadata(): Promise<void>\n    {\n        if(!this._options)\n        {\n            this._metadataRead = false;\n\n            return;\n        }\n\n        if(this._metadataRead)\n        {\n            return;\n        }\n\n        this._editorMetadata = await this._metadataExtractor.extractMetadata(this._options.typeMetadata);\n        this._metadataRead = true;\n    }\n}","import {LayoutDesignerSAComponent} from './layoutDesigner.component';\n\nexport default LayoutDesignerSAComponent;","import {ChangeDetectorRef, Directive, ElementRef, Inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Options used for rendering this component\n     */\n    protected _options: TOptions|undefined|null;\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * Options used for rendering this component\n     */\n    public get options(): TOptions|undefined|null\n    {\n        return this._options;\n    }\n    public set options(value: TOptions|undefined|null)\n    {\n        this._options = value;\n\n        this._optionsSet();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Method that is called when options are set, allows register custom code that is called when options are changing\n     */\n    protected _optionsSet(): void\n    {\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["PositionModule","DesignerMinHeightSADirective","constructor","_element","_initSubscriptions","Subscription","ngOnInit","this","_observer","ResizeObserver","changes","change","contentRect","height","nativeElement","style","minHeight","add","_layoutComponentRendererDirective","componentChange","subscribe","componentRef","observe","hostView","rootNodes","disconnect","ngOnDestroy","unsubscribe","i0","selectors","contentQueries","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","_metadataExtractor","metadata","_metadata","value","_copyDesignerStyles","applyDesignerStyles","extractMetadata","options","inputs","exportAs","standalone","ConnectDropListsSADirective","_cdkDropList","_manager","layoutChange","pipe","debounceTime","_setConnectedTo","connectedTo","flatTree","map","itm","component","designerDropList","reverse","filter","PositionToDirective","_target","_position","flip","EventEmitter","source","_source","ElementRef","placement","_placement","isString","PositionPlacement","ngOnChanges","nameof","isPresent","_applyPosition","result","placeElement","toPromise","Object","assign","target","top","left","transform","x","y","applyPositionResult","next","POSITION","ctx_r2","LayoutDesignerSAComponent","LayoutComponentBase","changeDetector","element","_getter","_layoutEditorMetadataManager","logger","_parent","super","_metadataRead","_canDrop","_editorMetadata","canDrop","selectedChange","_changeDetector","detectChanges","highlightedChange","selected","selectedComponent","_options","typeMetadata","id","highlighted","highlightedComponent","_logger","debug","unregisterLayoutDesignerComponent","_removeDescendant","child","removeDescendant","canDropMetadata","_renderedType","_addDescendant","dragData","parentId","item","data","parent","getComponent","addDescendant","currentIndex","_showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","_hideOverlay","cancelHighlightedComponent","_selectComponent","selectComponent","_unselectComponent","unselectComponent","_remove","_optionsSet","registerLayoutDesignerComponent","_readMetadata","LOGGER","viewQuery","CdkDropList","ctx","CommonModule","i3","i4","DragDropModule","i5","LayoutEditorDragPreviewSAComponent","LayoutEditorDragPlaceholderSAComponent","styles","changeDetection","invalidateVisuals","DragDrop","CdkScrollableModule","resolvePromiseOr","Promise"],"sourceRoot":""}