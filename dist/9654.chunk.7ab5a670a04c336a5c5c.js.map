{"version":3,"file":"9654.chunk.7ab5a670a04c336a5c5c.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/cdk/clipboard/pending-copy.ts","webpack://ng-universal-demo/../../../../src/cdk/clipboard/clipboard.ts","webpack://ng-universal-demo/../../../../material/src/directives/debugDataCopyClick/debugDataCopyClick.directive.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts","webpack://ng-universal-demo/../../../../packages/core/primitives/signals/src/equality.ts","webpack://ng-universal-demo/../../../../packages/core/primitives/signals/src/signal.ts","webpack://ng-universal-demo/../../../../packages/core/src/render3/reactivity/signal.ts","webpack://ng-universal-demo/../../../../src/modules/debugData/components/debugData/debugData.component.ts","webpack://ng-universal-demo/../../../../src/modules/debugData/components/debugData/debugData.component.html","webpack://ng-universal-demo/../../../../src/pipes/isPresent/isPresent.pipe.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement | undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = (this._textarea = this._document.createElement('textarea'));\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n    textarea.readOnly = true;\n    // The element needs to be inserted into the fullscreen container, if the page\n    // is in fullscreen mode, otherwise the browser won't execute the copy command.\n    (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {\n      // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      textarea.remove();\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","import {Directive, HostBinding, HostListener, Input} from '@angular/core';\nimport {Clipboard} from '@angular/cdk/clipboard';\n\n/**\n * Directive that allows to copy data to clipboard on click on debug-data\n */\n@Directive(\n{\n    selector: 'debug-data[copyClick]'\n})\nexport class DebugDataCopyClickDirective\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Data to be copied as serialized json\n     */\n    @Input('copyClick')\n    public data: any;\n\n    //######################### public properties - host #########################\n\n    /**\n     * Adds css class clickable to this element\n     * \n     * @internal\n     */\n    @HostBinding('class.clickable')\n    public clickable: boolean = true;\n\n    //######################### constructor #########################\n    constructor(protected _clipboard: Clipboard)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Copies data to clipboard on click\n     * \n     * @internal\n     */\n    @HostListener('click')\n    public copyData(): void\n    {\n        this._clipboard.copy(JSON.stringify(this.data, null, 4));\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]',\n    standalone: true,\n})\nexport class GoBackSADirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A comparison function which can determine if two values are equal.\n */\nexport type ValueEqualityFn<T> = (a: T, b: T) => boolean;\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nexport function defaultEquals<T>(a: T, b: T) {\n  return Object.is(a, b);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {defaultEquals, ValueEqualityFn} from './equality';\nimport {throwInvalidWriteToSignalError} from './errors';\nimport {producerAccessed, producerIncrementEpoch, producerNotifyConsumers, producerUpdatesAllowed, REACTIVE_NODE, ReactiveNode, SIGNAL} from './graph';\n\n// Required as the signals library is in a separate package, so we need to explicitly ensure the\n// global `ngDevMode` type is defined.\ndeclare const ngDevMode: boolean|undefined;\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn: (() => void)|null = null;\n\nexport interface SignalNode<T> extends ReactiveNode {\n  value: T;\n  equal: ValueEqualityFn<T>;\n  readonly[SIGNAL]: SignalNode<T>;\n}\n\nexport type SignalBaseGetter<T> = (() => T)&{readonly[SIGNAL]: unknown};\n\n// Note: Closure *requires* this to be an `interface` and not a type, which is why the\n// `SignalBaseGetter` type exists to provide the correct shape.\nexport interface SignalGetter<T> extends SignalBaseGetter<T> {\n  readonly[SIGNAL]: SignalNode<T>;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nexport function createSignal<T>(initialValue: T): SignalGetter<T> {\n  const node: SignalNode<T> = Object.create(SIGNAL_NODE);\n  node.value = initialValue;\n  const getter = (() => {\n                   producerAccessed(node);\n                   return node.value;\n                 }) as SignalGetter<T>;\n  (getter as any)[SIGNAL] = node;\n  return getter;\n}\n\nexport function setPostSignalSetFn(fn: (() => void)|null): (() => void)|null {\n  const prev = postSignalSetFn;\n  postSignalSetFn = fn;\n  return prev;\n}\n\nexport function signalGetFn<T>(this: SignalNode<T>): T {\n  producerAccessed(this);\n  return this.value;\n}\n\nexport function signalSetFn<T>(node: SignalNode<T>, newValue: T) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n\n  const value = node.value;\n  if (Object.is(value, newValue)) {\n    if (typeof ngDevMode !== 'undefined' && ngDevMode && !node.equal(value, newValue)) {\n      console.warn(\n          'Signal value equality implementations should always return `true` for' +\n          ' values that are the same according to `Object.is` but returned `false` instead.');\n    }\n  } else if (!node.equal(value, newValue)) {\n    node.value = newValue;\n    signalValueChanged(node);\n  }\n}\n\nexport function signalUpdateFn<T>(node: SignalNode<T>, updater: (value: T) => T): void {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n\n  signalSetFn(node, updater(node.value));\n}\n\nexport function signalMutateFn<T>(node: SignalNode<T>, mutator: (value: T) => void): void {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError();\n  }\n  // Mutate bypasses equality checks as it's by definition changing the value.\n  mutator(node.value);\n  signalValueChanged(node);\n}\n\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst SIGNAL_NODE: object = /* @__PURE__ */ (() => {\n  return {\n    ...REACTIVE_NODE,\n    equal: defaultEquals,\n    value: undefined,\n  };\n})();\n\nfunction signalValueChanged<T>(node: SignalNode<T>): void {\n  node.version++;\n  producerIncrementEpoch();\n  producerNotifyConsumers(node);\n  postSignalSetFn?.();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createSignal, SIGNAL, SignalGetter, signalMutateFn, SignalNode, signalSetFn, signalUpdateFn} from '@angular/core/primitives/signals';\n\nimport {Signal, ValueEqualityFn} from './api';\n\n/**\n * A `Signal` with a value that can be mutated via a setter interface.\n */\nexport interface WritableSignal<T> extends Signal<T> {\n  /**\n   * Directly set the signal to a new value, and notify any dependents.\n   */\n  set(value: T): void;\n\n  /**\n   * Update the value of the signal based on its current value, and\n   * notify any dependents.\n   */\n  update(updateFn: (value: T) => T): void;\n\n  /**\n   * Returns a readonly version of this signal. Readonly signals can be accessed to read their value\n   * but can't be changed using set, update or mutate methods. The readonly signals do _not_ have\n   * any built-in mechanism that would prevent deep-mutation of their value.\n   */\n  asReadonly(): Signal<T>;\n}\n\n/**\n * Options passed to the `signal` creation function.\n */\nexport interface CreateSignalOptions<T> {\n  /**\n   * A comparison function which defines equality for signal values.\n   */\n  equal?: ValueEqualityFn<T>;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nexport function signal<T>(initialValue: T, options?: CreateSignalOptions<T>): WritableSignal<T> {\n  const signalFn = createSignal(initialValue) as SignalGetter<T>& WritableSignal<T>;\n  const node = signalFn[SIGNAL];\n  if (options?.equal) {\n    node.equal = options.equal;\n  }\n\n  signalFn.set = (newValue: T) => signalSetFn(node, newValue);\n  signalFn.update = (updateFn: (value: T) => T) => signalUpdateFn(node, updateFn);\n  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn as any) as () => Signal<T>;\n\n  return signalFn as WritableSignal<T>;\n}\n\nfunction signalAsReadonlyFn<T>(this: SignalGetter<T>): Signal<T> {\n  const node = this[SIGNAL] as SignalNode<T>& {readonlyFn?: Signal<T>};\n  if (node.readonlyFn === undefined) {\n    const readonlyFn = () => this();\n    (readonlyFn as any)[SIGNAL] = node;\n    node.readonlyFn = readonlyFn as Signal<T>;\n  }\n  return node.readonlyFn;\n}\n","import {Component, ChangeDetectionStrategy, OnDestroy, OnInit, ChangeDetectorRef, ElementRef, signal, WritableSignal} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DebugDataEnabledService} from '../../services/debugDataEnabled/debugDataEnabled.service';\n\n/**\n * Name of css class for enabled debug data\n */\nconst ENABLED = 'enabled';\n\n/**\n * Component used for displaying debug data\n */\n@Component(\n{\n    selector: 'debug-data',\n    templateUrl: 'debugData.component.html',\n    styleUrls: ['debugData.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DebugDataComponent implements OnDestroy, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscription for changes of debug data enabled\n     */\n    protected debugDataEnabledChangeSubscription: Subscription|undefined|null;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is debug data enabled\n     *\n     * @internal\n     */\n    protected enabled: WritableSignal<boolean> = signal(false);\n\n    //######################### constructor #########################\n    constructor(protected debugDataEnabledSvc: DebugDataEnabledService,\n                protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.enabled.set(this.debugDataEnabledSvc.enabled);\n        this.setEnabledCssClass();\n\n        this.debugDataEnabledChangeSubscription = this.debugDataEnabledSvc.enabledChange.subscribe(() =>\n        {\n            this.enabled.set(this.debugDataEnabledSvc.enabled);\n            this.setEnabledCssClass();\n\n            this.changeDetector.detectChanges();\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.debugDataEnabledChangeSubscription?.unsubscribe();\n        this.debugDataEnabledChangeSubscription = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Sets enabled css class according enabled state\n     */\n    protected setEnabledCssClass(): void\n    {\n        if(this.enabled())\n        {\n            this.element.nativeElement.classList.add(ENABLED);\n        }\n        else\n        {\n            this.element.nativeElement.classList.remove(ENABLED);\n        }\n    }\n}","<ng-template [ngIf]=\"enabled()\">\r\n    <ng-content></ng-content>\r\n</ng-template>","import {Pipe, PipeTransform} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Returns true if object is different from null or undefined\n */\n@Pipe(\n{\n    name: 'isPresent',\n    standalone: true,\n})\nexport class IsPresentSAPipe implements PipeTransform\n{\n    //######################### public methods #########################\n\n    /**\n     * Checks whether is value different from null or undefined\n     * @param value - Value to be checked\n     */\n    public transform(value: unknown): boolean\n    {\n        return isPresent(value);\n    }\n}"],"names":["PendingCopy","constructor","text","_document","textarea","this","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","fullscreenElement","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","DOCUMENT","factory","ɵfac","providedIn","DebugDataCopyClickDirective","_clipboard","data","clickable","copyData","JSON","stringify","i1","selectors","hostVars","hostBindings","rf","ctx","ComponentRedirectRoute","redirectFrom","redirectTo","pathMatchFull","target","routeDecoratedComponent","isBlank","routeValues","console","warn","isPresent","redirectRouteDecoratedComponent","redirectRouteValues","Object","defineProperty","enumerable","configurable","writable","path","push","pathMatch","GoBackSADirective","_location","goBack","event","preventDefault","stopPropagation","back","$event","standalone","CastPipesModule","defaultEquals","a","b","is","postSignalSetFn","signalSetFn","node","newValue","producerUpdatesAllowed","throwInvalidWriteToSignalError","equal","version","producerIncrementEpoch","producerNotifyConsumers","signalValueChanged","SIGNAL_NODE","REACTIVE_NODE","signal","initialValue","options","signalFn","create","getter","producerAccessed","SIGNAL","createSignal","set","update","updateFn","updater","signalUpdateFn","asReadonly","signalAsReadonlyFn","bind","readonlyFn","DebugDataComponent_ng_template_0_Template","_c0","ENABLED","DebugDataComponent","debugDataEnabledSvc","changeDetector","element","debugDataEnabledChangeSubscription","enabled","ngOnInit","setEnabledCssClass","enabledChange","subscribe","detectChanges","ngOnDestroy","unsubscribe","nativeElement","classList","add","i0","ngContentSelectors","decls","vars","consts","template","dependencies","i2","changeDetection","IsPresentSAPipe","transform","pure"],"sourceRoot":""}