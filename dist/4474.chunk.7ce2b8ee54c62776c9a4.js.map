{"version":3,"file":"4474.chunk.7ce2b8ee54c62776c9a4.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../../../../src/directives/positionTo/positionTo.directive.ts"],"sourcesContent":["import {ContentChild, Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Html element of dynamic component\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Minimal height of element\n     */\n    protected minHeight: string = '';\n\n    /**\n     * Minimal width of element\n     */\n    protected minWidth: string = '';\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    @Input()\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.observer?.disconnect();\n\n                return;\n            }\n\n            this.element = element;\n            this.init();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DesignerMinDimensionSADirective>('editorMetadata') in changes)\n        {\n            this.init();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize watching for children\n     */\n    protected init(): void\n    {\n        if(!this.element || !this.editorMetadata)\n        {\n            return;\n        }\n\n        const element = this.editorMetadata.getChildrenContainer?.(this.element) as HTMLElement ?? this.element;\n\n        this.minHeight = element.style.minHeight;\n        this.minWidth = element.style.minWidth;\n        \n        this.updatedDimensions(element);\n\n        this.observer?.observe(element,\n        {\n            childList: true,\n        });\n    }\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        const nodesArray: ChildNode[] = [];\n        element.childNodes.forEach(node => nodesArray.push(node));\n\n        const contentsLength = nodesArray.filter(itm => itm.nodeName != '#comment').length;\n\n        if((contentsLength && !this.active) ||\n           (!contentsLength && this.active))\n        {\n            return;\n        }\n\n        //deactivate, children are present\n        if(contentsLength)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.minWidth;\n            }\n            else\n            {\n                element.style.minHeight = this.minHeight;\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.canDrop ? '30px' : '10px';\n            }\n            else\n            {\n                element.style.minHeight = this.canDrop ? '30px' : '10px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n//TODO: remove and use one from common\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n        this.document.body.appendChild(this.element);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\nimport {LiveEventService} from '../../services';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>,\n                protected changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(() => this.changeDetector.detectChanges());\n\n        //TODO: make this working, use existing html element\n        this.htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this.htmlElement)\n        {\n            this.observer?.observe(this.htmlElement, {attributeFilter: ['style']});\n        }\n\n        this.initSubscriptions.add(this.liveEvents.enabledChange.subscribe(() => this.toggleLiveEvents()));\n        this.toggleLiveEvents();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Toggles live events for element\n     */\n    protected toggleLiveEvents(): void\n    {\n        if(this.liveEvents.enabled)\n        {\n            this.element.nativeElement.style.pointerEvents = 'none';\n        }\n        else\n        {\n            this.element.nativeElement.style.pointerEvents = 'all';\n        }\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"htmlElement?.style?.borderRight\"></div>","import {ContentChild, Directive, ElementRef, EventEmitter, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output, inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n})\nexport class DndCoreDesignerDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * NgZone instance\n     */\n    protected ngZone: NgZone = inject(NgZone);\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n\n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors()[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    /**\n     * Gets element that represents container that contains children\n     */\n    protected get containerElement(): Element|undefined|null\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        const component = this.manager.getComponent(this.metadata.id);\n\n        if(!component?.editorMetadata?.getChildrenContainer)\n        {\n            return this.componentElement;\n        }\n\n        return component.editorMetadata.getChildrenContainer(this.componentElement) ?? this.componentElement;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(!monitor.didDrop())\n                                                                                            {\n                                                                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                                                            }\n                                                                                            //dropped into drop zone\n                                                                                            else\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                        {\n                                                                                            canDrop: monitor => (this.canDrop || this.canDropAncestors()[0]) && monitor.isOver({shallow: true}),\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                                                                {\n                                                                                                    const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                    if(isBlank(index) || isBlank(parentId))\n                                                                                                    {\n                                                                                                        return;\n                                                                                                    }\n\n                                                                                                    this.bus.setDropPlaceholderPreview(\n                                                                                                    {\n                                                                                                        index,\n                                                                                                        parentId,\n                                                                                                        placeholder:\n                                                                                                        {\n                                                                                                            height: 0,\n                                                                                                            width: 0\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreDesigner')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.componentElement = null;\n\n                return;\n            }\n\n            this.componentElement = element;\n        }));\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => \n                                       {\n                                           this.ngZone.run(() => this.dropMetadata.emit(itm.data));\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.ngZone.run(() =>\n                                           {\n                                               this.placeholderPreviewElement?.remove();\n                                               this.placeholderPreviewElement = null;\n                                           });\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe((preview) =>\n                                       {\n                                           this.ngZone.run(() => this.showPlaceholderPreview(preview));\n                                       }));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors();\n\n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n\n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id);\n        }\n    }\n}","<div class=\"designer-overlay\" \n     #layoutDesigner\n     #dndCore=\"dndCoreDesigner\"\n     [dndCoreDesigner]=\"{metadata: renderedType, parentId: parent?.renderedType?.id, index: index}\"\n     [dropzoneElement]=\"layoutDropzone\"\n     [dragDisabled]=\"dragDisabled\"\n     [dragSource]=\"dndCore.drag\"\n     [noHTML5Preview]=\"true\"\n     (dropMetadata)=\"addDescendant($event)\"\n     [copyDesignerStyles]=\"renderedType\"\n     (mouseleave)=\"hideOverlay($event)\"\n     (mouseover)=\"showOverlay($event)\"\n     (click)=\"selectComponent($event)\"\n     (dblclick)=\"unselectComponent($event)\">\n    <div class=\"designer-dropzone\"\n         #layoutDropzone\n         designerMinWidth\n         [canDrop]=\"canDrop\"\n         [editorMetadata]=\"editorMetadata\"\n         [horizontal]=\"parent?.horizontal ?? false\"\n         [dropTarget]=\"dndCore.dropzone\"\n         [isDropZone]=\"canDrop\">\n        <ng-template #renderer=\"layoutComponentRenderer\" [layoutComponentRenderer]=\"renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n        <ng-container *ngIf=\"highlighted || selected\">\n            <div class=\"designer-overlay-border\"></div>\n            <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"renderer\"></div>\n\n            <div class=\"designer-overlay-title\"\n                 *bodyRender\n                 [positionTo]=\"layoutDesigner\"\n                 placement=\"TopStart\">{{renderedType?.displayName ?? editorMetadata?.metaInfo?.name ?? renderedType?.name}}</div>\n\n            <ng-container *ngIf=\"!!parent && parent.editorMetadata?.removeDescendant\">\n                <div *bodyRender\n                     class=\"designer-overlay-remove\"\n                     [positionTo]=\"layoutDesigner\"\n                     [offset]=\"{mainAxis: -18, alignmentAxis: -6}\"\n                     placement=\"TopEnd\"\n                     (click)=\"remove()\">\n                    <span class=\"fas fa-times\"></span>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Logger, LOGGER, PositionToSADirective} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager, SCOPE_ID} from '@anglr/dynamic';\nimport {extend, isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\nimport {isEqual} from 'lodash-es';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {BodyRenderSADirective, CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        PositionToSADirective,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        LayoutComponentRendererSADirective,\n        DesignerDropzoneSADirective,\n        BodyRenderSADirective,\n        DndModule,\n        LayoutDndCoreModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Last type metadata value from onOptionSet\n     */\n    private _typeMetadata: LayoutComponentMetadata<LayoutDesignerComponentOptions>|null|undefined;\n\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCoreDesigner', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.options?.typeMetadata?.id ?? '';\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    /**\n     * Layout editor metadata\n     */\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Optional() @Inject(SCOPE_ID) protected scopeId?: string,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this.logger?.debug('LayoutDesignerSAComponent: Destroying component {{@data}}', {data: {id: this.options?.typeMetadata.id}});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        const parentId = dragData.parentId;\n        this.logger?.debug('LayoutDesignerSAComponent: Adding descendant {{@data}}', {data: {id: dragData.metadata?.id, parent: this.options.typeMetadata.id}});\n\n        if(!dragData.metadata)\n        {\n            this.logger?.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this.history.disable();\n            this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata?.id);\n            this.history.enable();\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, this.options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    public removeDescendant(id: string): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.logger?.debug('LayoutDesignerSAComponent: Removing descendant {{@data}}', {data: {id: this.options.typeMetadata.id, child: id}});\n\n        this.editorMetadata?.removeDescendant?.(id, this.options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this.logger?.verbose('LayoutDesignerComponent: Showing overlay for {{@type}}', {type: {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id}});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this.logger?.verbose('LayoutDesignerComponent: Hiding overlay for {{@type}}', {type: {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id}});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent || !this.options)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        await super.onInit();\n\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.typeMetadata.scope = this.scopeId;\n\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(this.options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n\n        //TODO: optimize\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.selectedChange.subscribe(() => this.changeDetector.detectChanges()));\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.highlightedChange.subscribe(() => this.changeDetector.detectChanges()));\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(this.options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this.options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.options ||\n           isEqual(this._typeMetadata, this.options.typeMetadata))\n        {\n            return;\n        }\n\n        this.renderedType = {...this.options.typeMetadata};\n        this._typeMetadata = extend(true, {}, this.options.typeMetadata);\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(this.options.typeMetadata.options) ?? false;\n        this.changeDetector.detectChanges();\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {nameof, isPresent, isString, Func1, NoopAction} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions, PositionOffsetString, PositionOffsets, PositionArguments, AutoUpdateOptions} from '../../services/position';\nimport {POSITION} from '../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]',\n    standalone: true,\n})\nexport class PositionToSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected ɵPlacement: PositionPlacement|undefined|null;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected ɵSource: HTMLElement|undefined|null;\n\n    /**\n     * Method used for disposing auto positioning\n     */\n    protected dispose: NoopAction|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement|undefined|null\n    {\n        return this.ɵSource;\n    }\n    public set source(value: HTMLElement|undefined|null)\n    {\n        if(value instanceof ElementRef)\n        {\n            this.ɵSource = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this.ɵSource = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|undefined|null\n    {\n        return this.ɵPlacement;\n    }\n    public set placement(value: PositionPlacement|undefined|null)\n    {\n        if(isString(value))\n        {\n            this.ɵPlacement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this.ɵPlacement = value;\n    }\n\n    /**\n     * Offset which allows moving target element along the cross axis of placement, or any chosed direction\n     */\n    @Input()\n    public offset: PositionOffsetString|number|PositionOffsets|Func1<number|PositionOffsets, PositionArguments> = 'None';\n\n    /**\n     * Indication whether set up 'auto updating' of position\n     */\n    @Input()\n    public autoUpdate: boolean|AutoUpdateOptions = true;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Occurs when element was positioned\n     */\n    @Output()\n    public done: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToSADirective>('source') in changes ||\n            nameof<PositionToSADirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.dispose?.();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected _applyPosition(): void\n    {\n        if(!this.ɵSource)\n        {\n            return;\n        }\n\n        const options: Partial<PositionOptions> =\n        {\n            flip: true,\n            autoUpdate: this.autoUpdate,\n            offset: this.offset,\n        };\n\n        if(this.ɵPlacement)\n        {\n            options.placement = this.ɵPlacement;\n        }\n\n        this.dispose?.();\n\n        this.position.placeElement(this.target.nativeElement,\n                                    this.ɵSource,\n                                    options)\n            .subscribe(result =>\n            {\n                this.dispose = result.dispose;\n\n                applyPositionResult(result);\n\n                if(result.flip)\n                {\n                    this.flip.emit();\n                }\n\n                this.done.emit();\n            });\n    }\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `source` input\n     */\n    public static ngAcceptInputType_source: HTMLElement|ElementRef<HTMLElement>;\n}\n"],"names":["DesignerMinDimensionSADirective","constructor","active","initSubscriptions","Subscription","minHeight","minWidth","horizontal","canDrop","editorMetadata","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","add","layoutComponentRendererDirective","componentElementChange","subscribe","element","init","disconnect","ngOnChanges","nameof","ngOnDestroy","unsubscribe","getChildrenContainer","style","observe","childList","nodesArray","childNodes","forEach","node","push","contentsLength","filter","itm","nodeName","length","children","item","classList","contains","selectors","contentQueries","rf","ctx","dirIndex","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","metadata","_metadata","value","_copyDesignerStyles","_element","_metadataExtractor","_this","extractMetadata","applyDesignerStyles","options","nativeElement","i0","i1","inputs","exportAs","standalone","BodyRenderSADirective","template","viewContainer","document","view","createEmbeddedView","rootNodes","body","appendChild","remove","destroy","DOCUMENT","LayoutDesignerOverlayForSAComponent","changeDetector","liveEvents","detectChanges","htmlElement","componentRef","hostView","attributeFilter","enabledChange","toggleLiveEvents","enabled","pointerEvents","features","attrs","decls","vars","consts","marginTop","marginBottom","marginLeft","marginRight","paddingTop","paddingBottom","paddingLeft","paddingRight","borderTop","borderBottom","borderLeft","borderRight","DndCoreDesignerDirective","dragData","Error","manager","getComponent","id","containerElement","componentElement","component","dnd","designerElement","draggingSvc","bus","zone","injector","ngZone","inject","NgZone","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","isPresent","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","dragDisabled","endDrag","didDrop","dropResult","getDropResult","setDropData","data","dropzone","dropMetadata","EventEmitter","connectDropToContainer","dropzoneElement","dropDataChange","pipe","run","emit","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","preview","showPlaceholderPreview","placeholderConnection","containerConnection","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","offset","getClientOffset","position","child","usedIndex","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","getComponentDef","parent","i2","i3","__decorate","BindThis","_r0","tmp_1_0","ctx_r6","renderedType","displayName","undefined","metaInfo","name","_r10","ctx_r9","_c2","LayoutDesignerSAComponent_ng_container_7_ng_container_4_div_1_Template","LayoutDesignerSAComponent_ng_container_7_div_3_Template","LayoutDesignerSAComponent_ng_container_7_ng_container_4_Template","_r4","ctx_r5","removeDescendant","LayoutDesignerSAComponent","LayoutComponentBase","selected","layoutEditorMetadataManager","selectedComponent","typeMetadata","highlighted","highlightedComponent","extensionsOptions","metadataExtractor","iteratorSvc","history","scopeId","logger","super","debug","unregisterLayoutDesignerComponent","addDescendant","disable","enable","canDropMetadata","markForCheck","getNewState","warn","showOverlay","event","verbose","type","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","onInit","_superprop_getOnInit","call","scope","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","getChildrenIteratorFor","next","done","err","return","selectedChange","highlightedChange","registerLayoutDesignerComponent","onOptionsSet","isEqual","_typeMetadata","extend","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","SCOPE_ID","LOGGER","viewQuery","$event","LayoutDesignerSAComponent_ng_template_5_Template","LayoutDesignerSAComponent_ng_container_7_Template","_c3","_r2","_r1","tmp_8_0","CommonModule","PositionToSADirective","DesignerDropzoneSADirective","DndModule","LayoutDndCoreModule","i4","encapsulation","changeDetection","isDropZone","draggingChange","processDragValue","setTimeout","dragging","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","asObservable","factory","ɵfac","ɵPlacement","ɵSource","dispose","source","ElementRef","placement","isString","PositionPlacement","autoUpdate","flip","_applyPosition","placeElement","result","applyPositionResult","static","POSITION","outputs"],"sourceRoot":""}