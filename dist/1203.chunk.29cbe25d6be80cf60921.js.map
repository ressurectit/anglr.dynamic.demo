{"version":3,"file":"1203.chunk.29cbe25d6be80cf60921.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+layoutEditor/layoutEditor.module.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleItemsProvider/formDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../form/src/services/formDynamicModuleTypesProvider/formDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../form/src/misc/providers.ts","webpack://ng-universal-demo/../form/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.html","webpack://ng-universal-demo/../src/modules/packageManager/components/packageManager/packageManager.component.ts","webpack://ng-universal-demo/../src/modules/packageManager/modules/packageManager.module.ts","webpack://ng-universal-demo/../src/services/metadataHistoryManager/metadataHistoryManager.service.ts","webpack://ng-universal-demo/../src/services/packageManager/packageManager.service.ts","webpack://ng-universal-demo/../form/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object"],"sourcesContent":["import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {LAYOUT_HISTORY_MANAGER} from '@anglr/dynamic/layout-editor';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'layout-editor-view',\n    templateUrl: 'editor.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\n@ComponentRoute({path: 'editor/:id'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected store: StoreDataService,\n        \n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n    {\n        return metadata;\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoLayout;\n    }\n}\n","<div class=\"flex-row\">\r\n    <load-save-new [store]=\"store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/layout/editor\" (metadataChange)=\"_metadata = ($any($event) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"_loadDemo()\">\r\n        <span>demo</span>\r\n    </button>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {EditorComponent} from './editor/editor.component';\n\nexport const components =\n[\n    EditorComponent,\n];","import {ClassProvider, FactoryProvider, NgModule} from '@angular/core';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicLayoutEditorModule} from '@anglr/dynamic/layout-editor';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\n\nimport {components} from './layoutEditor.routes';\nimport {LoadSaveNewSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {DemoLayoutPackageManager} from '../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\nimport {StoreDataService} from '../../services/storeData';\n\n/**\n * Module for layout editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        DynamicLayoutEditorModule.withProviders(),\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        provideFormLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ]\n})\n@ModuleRoutes(components)\nexport class LayoutEditorModule\n{\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","export enum FormComponentControlType\n{\n    FormControl = 'FormControl',\n    FormArray = 'FormArray',\n    FormGroup = 'FormGroup',\n}\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for form module items\n */\n@Injectable()\nexport class FormDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'form-components':\n            {\n                try\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/form/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('FormDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for form types\n */\n@Injectable()\nexport class FormDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'form-components':\n                    return await import('@anglr/dynamic/form/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('FormDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {FormDynamicModuleItemsProvider, FormDynamicModuleTypesProvider} from '../services';\n\n\n/**\n * Provider for form components providers\n */\nexport const FORM_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: FormDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const FORM_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: FormDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {FORM_COMPONENTS_PROVIDER, FORM_MODULE_TYPES_PROVIDER} from './providers';\nimport {FormComponentControlType} from './enums';\n\n/**\n * Providers for layout form subpackage\n */\nexport function provideFormLayout(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Default providers for form subpackage\n */\nexport function provideFormLayoutEditor(): Provider[]\n{\n    return [\n        FORM_COMPONENTS_PROVIDER,\n        FORM_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('form-components'),\n    ];\n}\n\nexport function getFormControl<TValue = string>(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl, defaultValue: TValue): AbstractControl\n{\n    if (!parentControl ||\n        !controlName)\n    {\n        return getControlForType(defaultControlType, defaultValue);\n    }\n\n    const control = parentControl.get(controlName);\n\n\n\n    return control ?? getControlForType(defaultControlType, defaultValue);\n}\n\nexport function getControlForType<TValue = string>(type: FormComponentControlType, defaultValue: TValue): FormControl|FormArray|FormGroup\n{\n    //TODO fix default value for form array\n    switch (type)\n    {\n        case FormComponentControlType.FormArray:\n            return new FormArray<any>([]);\n        case FormComponentControlType.FormGroup:\n            return new FormGroup(defaultValue ?? {});\n        default:\n            return new FormControl(defaultValue);\n    }\n}","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef, Optional} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndBusService} from '../../modules';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    styleUrls: ['layoutEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        DndBusService,\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutComponentRendererSADirective,\n        PackageManagerModule,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n}","<div class=\"flex-row margin-top-big flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <package-manager></package-manager>\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n      \n    <div class=\"flex-1 layout-content thin-scrollbar\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true, packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LayoutComponentsIteratorService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     * @param designerLayout - Indication whether provide extractor for layout designer types\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(designerLayout: boolean = true,\n                                packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(designerLayout, packages),\n            ]\n        };\n    }\n}","<div class=\"flex-row\">\n    <button class=\"btn-icon margin-right-extra-small\" (click)=\"detailVisible = !detailVisible\">\n        <span class=\"fas\" [class.fa-plus]=\"!detailVisible\" [class.fa-minus]=\"detailVisible\"></span>\n    </button>\n\n    <div class=\"pm-header\">packages</div>\n</div>\n\n<div *ngIf=\"detailVisible\">\n    <div class=\"flex-row\">\n        <select class=\"form-control flex-1\" #avPkgs>\n            <option *ngFor=\"let package of availablePackages\" [value]=\"package\">{{package}}</option>\n        </select>\n\n        <button type=\"button\" class=\"btn-icon margin-left-extra-small\" (click)=\"addPackage(availablePackages[avPkgs.selectedIndex])\">\n            <span class=\"fas fa-plus\"></span>\n        </button>\n    </div>\n\n    <div class=\"flex-row align-items-center margin-top-small\" *ngFor=\"let package of usedPackages\">\n        <div class=\"flex-1\">{{package}}</div>\n\n        <button class=\"btn-icon margin-left-extra-small\" (click)=\"removePackage(package)\">\n            <span class=\"fas fa-times\"></span>\n        </button>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, OnInit} from '@angular/core';\n\nimport {PackageManager} from '../../../../services';\n\n//TODO: animations\n\n/**\n * Component used as package manager of dynamic packages/modules\n */\n@Component(\n{\n    selector: 'package-manager',\n    templateUrl: 'packageManager.component.html',\n    styleUrls: ['packageManager.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PackageManagerComponent implements OnInit\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is detail visible\n     */\n    protected detailVisible: boolean = false;\n\n    /**\n     * Array of used packages\n     */\n    protected usedPackages: string[] = [];\n\n    /**\n     * Array of available packages\n     */\n    protected availablePackages: readonly string[] = [];\n\n    //######################### constructor #########################\n    constructor(protected packageManager: PackageManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.usedPackages = this.packageManager.usedPackages;\n        this.updatedAvailablePackages();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds package to used packages\n     * @param packageName - Name of package to be added\n     */\n    protected addPackage(packageName: string|null): void\n    {\n        if(!packageName)\n        {\n            return;\n        }\n\n        this.usedPackages = [...this.usedPackages, packageName];\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    /**\n     * Removes package from used packages\n     * @param packageName - Name of package to be removed\n     */\n    protected removePackage(packageName: string): void\n    {\n        this.usedPackages = this.usedPackages.filter(itm => itm != packageName);\n        this.updatedAvailablePackages();\n        this.packageManager.setUsedPackages(this.usedPackages);\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Updates available packages using used packages\n     */\n    protected updatedAvailablePackages(): void\n    {\n        this.availablePackages = this.packageManager.packages.filter(itm => !this.usedPackages.find(it => it == itm));\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\nimport {PackageManagerComponent} from '../components';\n\n/**\n * Module for package manager components, directives and pipes\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n    ],\n    declarations:\n    [\n        PackageManagerComponent,\n    ],\n    exports:\n    [\n        PackageManagerComponent,\n    ]\n})\nexport class PackageManagerModule\n{\n}","import {Inject, Injectable} from '@angular/core';\nimport {isBlank, isPresent} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {MetadataStateManager} from '../../interfaces';\nimport {METADATA_STATE_MANAGER} from '../../misc/tokens';\n\n/**\n * Maximum number of items in history\n */\nconst MAX_ITEMS = 200;\n\n//TODO: maybe store state as string and compare with it to correctly display saved, discuss with vinci\n\n/**\n * Service used for managing state of metadata\n */\n@Injectable()\nexport class MetadataHistoryManager<TMetadata = any>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current index which is active currently\n     */\n    protected activeIndex: number|null = null;\n\n    /**\n     * Index of state which is saved\n     */\n    protected saveIndex: number|null = null;\n\n    /**\n     * All stored states\n     */\n    protected states: string[] = [];\n\n    /**\n     * Indication whether is manager enabled\n     */\n    protected enabled: boolean = true;\n\n    /**\n     * Used for emitting pop event\n     */\n    protected popSubject: Subject<TMetadata> = new Subject<TMetadata>();\n\n    /**\n     * Used for emitting history change event\n     */\n    protected historyChangeSubject: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Information whether user can undo\n     */\n    public get canUndo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex > 0;\n    }\n\n    /**\n     * Information whether user can redo\n     */\n    public get canRedo(): boolean\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return false;\n        }\n\n        return this.activeIndex + 1 < this.states.length;\n    }\n\n    /**\n     * Indication whether current state is saved state\n     */\n    public get saved(): boolean\n    {\n        return this.activeIndex === this.saveIndex;\n    }\n\n    /**\n     * Occurs when user pops new state, using undo, or redo\n     */\n    public get pop(): Observable<TMetadata>\n    {\n        return this.popSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new state appears in history\n     */\n    public get historyChange(): Observable<void>\n    {\n        return this.historyChangeSubject.asObservable();\n    }\n\n    /**\n     * Current state of metadata\n     */\n    public get state(): TMetadata|null\n    {\n        if(isBlank(this.activeIndex))\n        {\n            return null;\n        }\n\n        return JSON.parse(this.states[this.activeIndex]);\n    }\n\n    //######################### constructor #########################\n    constructor(@Inject(METADATA_STATE_MANAGER) protected metadataState: MetadataStateManager<TMetadata>,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Undo last change in metadata\n     */\n    public undo(): void\n    {\n        if(!this.canUndo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex--;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Redo last change in metadata\n     */\n    public redo(): void\n    {\n        if(!this.canRedo || isBlank(this.activeIndex))\n        {\n            return;\n        }\n\n        this.activeIndex++;\n        this.popSubject.next(JSON.parse(this.states[this.activeIndex]));\n    }\n\n    /**\n     * Indicates that new change in state has been done and should be retrieved\n     */\n    public getNewState(): void\n    {\n        if(!this.enabled)\n        {\n            return;\n        }\n\n        //max number of states reached\n        if(this.states.length >= MAX_ITEMS)\n        {\n            this.states.shift();\n        }\n\n        //getting new state, where current index is not at the end, rewriting history for redo\n        if(isPresent(this.activeIndex) && this.activeIndex + 1 < this.states.length)\n        {\n            this.states.splice(this.activeIndex + 1, this.states.length - (this.activeIndex + 1));\n        }\n\n        const state = this.metadataState.getMetadata();\n\n        //only for existing state\n        if(state)\n        {\n            this.states.push(JSON.stringify(state));\n            this.activeIndex = this.states.length - 1;\n            this.historyChangeSubject.next();\n        }\n    }\n\n    /**\n     * Sets current state as saved state\n     */\n    public save(): void\n    {\n        this.saveIndex = this.activeIndex;\n    }\n\n    public setInitialState(metadata: TMetadata): void\n    {\n        this.states.push(JSON.stringify(metadata));\n        this.activeIndex = this.states.length - 1;\n        this.save();\n    }\n\n    /**\n     * Cleans history of metadata states\n     */\n    public clean(): void\n    {\n        this.activeIndex = null;\n        this.saveIndex = null;\n        this.states = [];\n    }\n\n    /**\n     * Enable metadata history manager, changes in metadata are stored\n     */\n    public enable(): void\n    {\n        this.enabled = true;\n    }\n\n    /**\n     * Disables metadata history manager, changes in metadata history are not stored\n     */\n    public disable(): void\n    {\n        this.enabled = false;\n    }\n}","import {inject} from '@angular/core';\nimport {PermanentStorage, PERMANENT_STORAGE} from '@anglr/common';\nimport {PromiseOr} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport {PackageSource} from '../../interfaces';\nimport {PACKAGE_SOURCES} from '../../misc/tokens';\n\n/**\n * Service used for obtaining available and used packages\n */\nexport class PackageManager\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current usedPackages value\n     */\n    private _usedPackages: string[] = [];\n\n    //######################### protected properties #########################\n    \n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Used for emitting usedPackages changes\n     */\n    protected usedPackagesSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting packages changes\n     */\n    protected packagesChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Permanent storage storing selected packages\n     */\n    protected store: PermanentStorage = inject(PERMANENT_STORAGE);\n\n    /**\n     * Array of package source\n     */\n    protected packageSources: PackageSource[] = inject(PACKAGE_SOURCES);\n\n    //######################### public properties #########################\n\n    /**\n     * Occurs when available packages changes\n     */\n    public get packagesChange(): Observable<void>\n    {\n        return this.packagesChangeSubject.asObservable();\n    }\n\n    /**\n     * Gets available packages\n     */\n    public get packages(): readonly string[]\n    {\n        const result: string[] = [];\n\n        for(const source of this.packageSources)\n        {\n            result.push(...source.packages);\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets current usedPackages value\n     */\n    public get usedPackages(): string[]\n    {\n        return this._usedPackages;\n    }\n    protected set usedPackages(value: string[])\n    {\n        this._usedPackages = value;\n    }\n    \n    /**\n     * Occurs when usedPackages changes\n     */\n    public get usedPackagesChange(): Observable<void>\n    {\n        return this.usedPackagesSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected storageName: string,)\n    {\n        this.usedPackages = this.store.get<string[]|null>(storageName) ?? [];\n\n        for(const source of this.packageSources)\n        {\n            this.initSubscriptions.add(source.packagesChange.subscribe(() =>this.packagesChangeSubject.next()));\n        }\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets usedPackages new value\n     * @param usedPackages - Value of usedPackages that changed\n     */\n    public setUsedPackages(usedPackages: string[]): void\n    {\n        if(this._usedPackages == usedPackages)\n        {\n            return;\n        }\n    \n        this._usedPackages = usedPackages;\n        this.store.set(this.storageName, usedPackages);\n        this.usedPackagesSubject.next();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Refresh available packages with current data\n     */\n    public refresh(): PromiseOr<void>\n    {\n        for(const source of this.packageSources)\n        {\n            source.refresh();\n        }\n    }\n\n    /**\n     * Destroys service and all its resources\n     */\n    public destroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n} ","var map = {\n\t\"./formGroup/type\": [\n\t\t70613,\n\t\t613\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 54384;\nmodule.exports = webpackAsyncContext;"],"names":["EditorComponent","constructor","store","history","_metadata","emptyMetadata","id","generateId","displayName","package","name","options","children","_getMetadata","metadata","_loadDemo","this","DemoData","i0","LAYOUT_HISTORY_MANAGER","selectors","decls","vars","consts","template","ctx","__decorate","BindThis","ComponentRoute","path","StoreDataService","MetadataHistoryManager","components","LayoutEditorModule","provide","LAYOUT_METADATA_STORAGE","useFactory","MetadataStorage","getData","deps","createStoreDataServiceFactory","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","provideFormLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","imports","DynamicLayoutEditorModule","LoadSaveNewSAComponent","ModuleRoutes","super","factory","FormComponentControlType","FormDynamicModuleItemsProvider","_logger","tryToGet","source","debug","e","LOGGER","FormDynamicModuleTypesProvider","moduleName","FORM_COMPONENTS_PROVIDER","LAYOUT_COMPONENTS_MODULE_PROVIDERS","multi","FORM_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideFormLayout","provideStaticPackageSource","getFormControl","controlName","parentControl","defaultControlType","defaultValue","get","getControlForType","type","FormArray","FormGroup","FormControl","LayoutEditorSAComponent","changeDetector","hotkeys","initSubscriptions","Subscription","init","ngOnInit","add","pop","subscribe","detectChanges","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","ngOnDestroy","unsubscribe","destroy","inputs","standalone","features","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","DndBusService","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutComponentRendererSADirective","PackageManagerModule","i2","MatTabsModule","i3","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","warn","DefaultDynamicModuleTypesProvider","layoutDesignerTypeExtractor","module","logger","def","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","data","layoutEditorDesignerType","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","DynamicModuleDataExtractor","Optional","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENT_TRANSFORM","useValue","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","Symbol","provideLayoutEditor","designerLayout","packages","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LayoutComponentsIteratorService","map","pkg","isBlank","Array","isArray","ngModule","providers","DynamicLayoutModule","PackageManagerComponent","packageManager","detailVisible","usedPackages","availablePackages","updatedAvailablePackages","addPackage","packageName","setUsedPackages","removePackage","filter","itm","find","it","CommonModule","ReactiveFormsModule","metadataState","activeIndex","saveIndex","states","enabled","popSubject","Subject","historyChangeSubject","canUndo","canRedo","length","saved","asObservable","historyChange","state","JSON","parse","next","getNewState","shift","isPresent","splice","getMetadata","push","stringify","save","enable","disable","storageName","_usedPackages","usedPackagesSubject","packagesChangeSubject","PERMANENT_STORAGE","packageSources","PACKAGE_SOURCES","packagesChange","result","value","usedPackagesChange","set","refresh","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","keys","Object","exports"],"sourceRoot":""}