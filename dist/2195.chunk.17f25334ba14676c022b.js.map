{"version":3,"file":"2195.chunk.17f25334ba14676c022b.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockPropertiesControl/richTextBlockPropertiesControl.component.html","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.model.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/metadata/richTextBlock.layoutMetadata.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.ts","webpack://ng-universal-demo/../tinymce-components/src/dynamicItems/richTextBlock/misc/components/richTextBlockEditorDialog/richTextBlockEditorDialog.component.html","webpack://ng-universal-demo/../../../src/internal/lastValueFrom.ts","webpack://ng-universal-demo/../../../../src/material/dialog/dialog-content-directives.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {Dictionary, PromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|null = null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await this._initialize();\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await this.ngOnInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {LayoutEditorMetadataExtractor, PropertiesControl, PropertiesControlBase} from '@anglr/dynamic/layout-editor';\nimport {isPresent} from '@jscrpt/common';\nimport {lastValueFrom} from 'rxjs';\n\nimport {RichTextBlockEditorDialogSAComponent} from '../richTextBlockEditorDialog/richTextBlockEditorDialog.component';\nimport {RichTextBlockComponentOptions} from '../../../richTextBlock.options';\n\n/**\n * Component used for displaying rich text block properties control\n */\n@Component(\n{\n    selector: 'rich-text-block-properties-control',\n    templateUrl: 'richTextBlockPropertiesControl.component.html',\n    styleUrls: ['richTextBlockPropertiesControl.component.css'],\n    standalone: true,\n    imports:\n    [\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockPropertiesControlSAComponent extends PropertiesControlBase<RichTextBlockComponentOptions> implements PropertiesControl<RichTextBlockComponentOptions>\n{\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                metadataExtractor: LayoutEditorMetadataExtractor,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, metadataExtractor);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<RichTextBlockEditorDialogSAComponent, string, string|null>(RichTextBlockEditorDialogSAComponent,\n        {\n            title: 'Rich text block editor',\n            width: '75vw',\n            height: '75vh',\n            data: this.form?.controls.content.value\n        }).afterClosed());\n\n        if(isPresent(result))\n        {\n            const control = this.form?.controls.content;\n\n            if(control instanceof FormControl)\n            {\n                control.setValue(result);\n            }\n        }\n    }\n}\n","<button type=\"button\" class=\"btn btn-primary margin-vertical-small\" (click)=\"showCodeEditor()\">\n    <span>Edit rich text block</span>\n</button>","import {mapValuesToThis} from '@jscrpt/common';\n\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\n\n/**\n * Rich text block model for properties editor\n */\nexport class RichTextBlockModel implements RichTextBlockComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public content: string|undefined|null = '';\n    \n    //######################### constructor #########################\n    constructor(value: RichTextBlockComponentOptions|undefined|null)\n    {\n        mapValuesToThis.bind(this)(value);\n    }\n}","import {LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\n\nimport {RichTextBlockPropertiesControlSAComponent} from '../misc/components';\nimport {RichTextBlockComponentOptions} from '../richTextBlock.options';\nimport {RichTextBlockModel} from './richTextBlock.model';\n\n/**\n * Rich text block layout metadata\n */\nexport class RichTextBlockLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<RichTextBlockComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo<RichTextBlockComponentOptions> =\n    {\n        name: 'Rich text block',\n        description: 'WYSIWYG editor allowing formatting of multiline text',\n        group: 'Texts',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: RichTextBlockModel,\n                    propertiesControls: \n                    [\n                        RichTextBlockPropertiesControlSAComponent,\n                    ],\n                },\n            ]\n        },\n    };\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogModule, MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\nimport {EditorModule} from '@tinymce/tinymce-angular';\n\n/**\n * Component used as dialog displaying rich text block editor\n */\n@Component(\n{\n    selector: 'rich-text-block-editor-dialog',\n    templateUrl: 'richTextBlockEditorDialog.component.html',\n    // styleUrls: ['codeEditorDialog.component.scss'],\n    standalone: true,\n    imports:\n    [\n        MatDialogModule,\n        EditorModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RichTextBlockEditorDialogSAComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of editor\n     */\n    protected content: string|null = null;\n\n    //######################### protected properties - children #########################\n\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: string,\n                protected dialog: MatDialogRef<RichTextBlockEditorDialogSAComponent, string|null>,)\n    {\n        this.content = data;\n    }\n}","<editor #editor [initialValue]=\"content ?? ''\"></editor>\n\n<div class=\"flex-row flex-end\">\n    <button type=\"button\" class=\"btn btn-info\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"btn btn-primary\" type=\"button\" (click)=\"content = editor.editor.getContent(); dialog.close(content)\">\n        <span>ok</span>\n    </button>\n</div>",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef, _closeDialogVia} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screen reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog,\n  ) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'},\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-dialog-actions',\n    '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end' = 'start';\n}\n\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n"],"names":["PropertiesControlBase","constructor","_changeDetector","_extractor","_initialized","propertiesMetadata","ngOnInit","_initialize","initialize","invalidateVisuals","this","detectChanges","i0","inputs","form","LayoutEditorMetadataExtractor","_loader","_logger","_cache","extractMetadata","metadata","cacheId","package","name","type","loadItem","metadataType","data","layoutEditorMetadata","warn","debug","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LOGGER","factory","RichTextBlockPropertiesControlSAComponent","changeDetector","metadataExtractor","dialog","super","showCodeEditor","result","lastValueFrom","open","RichTextBlockEditorDialogSAComponent","title","width","height","controls","content","value","afterClosed","isPresent","control","FormControl","setValue","selectors","standalone","features","decls","vars","consts","template","ctx","RichTextBlockModel","mapValuesToThis","RichTextBlockLayoutEditorMetadata","metaInfo","description","group","optionsMetadata","modelType","propertiesControls","TITLED_DIALOG_DATA","_r0","MatDialogModule","i1","EditorModule","i2","encapsulation","changeDetection","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","subscribe","next","error","complete","defaultValue","EmptyError","dialogElementUid","MatDialogClose","dialogRef","_elementRef","_dialog","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","_closeDialogVia","screenX","screenY","MatDialogTitle","_dialogRef","id","then","container","_containerInstance","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find"],"sourceRoot":""}