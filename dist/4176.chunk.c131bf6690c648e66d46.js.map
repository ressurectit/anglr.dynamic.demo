{"version":3,"file":"4176.chunk.c131bf6690c648e66d46.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/dragActive/dragActive.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponents.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsChildren.iterator.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutComponentsIterator/layoutComponentsIterator.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataManager/layoutEditorMetadataManager.service.ts"],"sourcesContent":["import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/**\n * Service that holds information whether is currently drag active\n */\n@Injectable()\nexport class DragActiveService\n{\n    //######################### private fields #########################\n    \n    /**\n     * Current dragging value\n     */\n    private _dragging: boolean = false;\n    \n    /**\n     * Used for emitting dragging changes\n     */\n    private _draggingChange: Subject<void> = new Subject<void>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Gets current dragging value\n     */\n    public get dragging(): boolean\n    {\n        return this._dragging;\n    }\n    \n    /**\n     * Occurs when dragging changes\n     */\n    public get draggingChange(): Observable<void>\n    {\n        return this._draggingChange.asObservable();\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets dragging new value\n     * @param dragging - Value of dragging that changed\n     */\n    public setDragging(dragging: boolean): void\n    {\n        if(this._dragging == dragging)\n        {\n            return;\n        }\n    \n        this._dragging = dragging;\n        this._draggingChange.next();\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Action} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsIteratorItem} from './layoutComponentsIterator.interface';\n\n//TODO: make action commented type\n\n/**\n * Iterator for layout components metadata\n */\nexport class LayoutComponentsIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator items, flattened layout structure\n     */\n    protected _items: LayoutComponentsIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected _initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this._initPromise ??= this._getInitPromise();\n        const items = this._items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Calls callback for each component in tree\n     * @param callback - Callback called for each layout component metadata\n     */\n    public async forEach(callback: Action<[LayoutComponentMetadata, LayoutComponentsIteratorItem|undefined|null, number, number]>): Promise<void>\n    {\n        await (this._initPromise ??= this._getInitPromise());\n\n        for(const item of this._items)\n        {\n            callback(item.metadata, item.parent, item.levelIndex, item.level);\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets components in layout components metadata hierarchy\n     */\n    protected async _getComponents(): Promise<void>\n    {\n        await this._getComponent(this._layoutMetadata, null, 0, 0);\n    }\n\n    /**\n     * Gets metadata for single layout component metadata and its children\n     * @param metadata - Metadata for layout component\n     * @param parentMetadata - parent layout component iterator item\n     * @param levelIndex - Index of layout component in current level\n     * @param level - Current level of nexted components, 0 is root component\n     */\n    protected async _getComponent(metadata: LayoutComponentMetadata<TOptions>, parent: LayoutComponentsIteratorItem|undefined|null, levelIndex: number, level: number): Promise<void>\n    {\n        const iteratorItem : LayoutComponentsIteratorItem = {\n            metadata,\n            parent,\n            levelIndex,\n            level\n        };\n        this._items.push(iteratorItem);\n\n        const meta = await this._extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this._logger?.debug('LayoutComponentsIterator: failed to get metadata for iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            await this._getComponent(childrenMeta[x], iteratorItem, x, level + 1);\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async _getInitPromise(): Promise<void>\n    {\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            await this._getComponents();\n        }\n    }\n}","import {Logger} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIteratorItem} from './layoutComponentsIterator.interface';\n\n/**\n * Iterator for layout components children metadata\n */\nexport class LayoutComponentsChildrenIterator<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of layout component iterator children items\n     */\n    protected items: LayoutComponentsChildrenIteratorItem[] = [];\n\n    /**\n     * Indication whether was iterator initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Initialization promise\n     */\n    protected initPromise: Promise<void>|null = null;\n\n    //######################### public properties #########################\n\n    /**\n     * Async iterator for layout components children metadata\n     */\n    public [Symbol.asyncIterator](): AsyncIterator<LayoutComponentsChildrenIteratorItem>\n    {\n        let x = 0;\n        const initPromise = this.initPromise ??= this.getInitPromise();\n        const items = this.items;\n\n        return {\n            async next() \n            {\n                await initPromise;\n                \n                if (x < items.length) \n                {\n                    return {\n                        value: items[x++],\n                        done: false\n                    };\n                }\n        \n                return {\n                    value: items[x - 1],\n                    done: true \n                };\n            }\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected layoutMetadata: LayoutComponentMetadata<TOptions>,\n                protected extractor: LayoutEditorMetadataExtractor,\n                protected logger?: Logger,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets children in layout components metadata hierarchy\n     */\n    protected async getChildren(): Promise<void>\n    {\n        await this.getComponent(this.layoutMetadata);\n    }\n\n    /**\n     * Gets children metadata for single layout component metadata\n     * @param metadata - Metadata for layout component\n     */\n    protected async getComponent(metadata: LayoutComponentMetadata<TOptions>): Promise<void>\n    {\n        const meta = await this.extractor.extractMetadata(metadata) as LayoutEditorMetadataDescriptor<TOptions>;\n\n        if(!meta)\n        {\n            this.logger?.debug('LayoutComponentsChildrenIterator: failed to get metadata for children iterator! {@data}', {package: metadata.package, name: metadata.name});\n\n            return;\n        }\n\n        //component does not have children\n        if(!meta.getDescendants)\n        {\n            return;\n        }\n\n        const childrenMeta = meta.getDescendants(metadata.options);\n\n        for(let x = 0; x < childrenMeta.length; x++)\n        {\n            this.items.push(\n            {\n                index: x,\n                metadata: childrenMeta[x]\n            });\n        }\n    }\n\n    /**\n     * Gets initialization promise\n     */\n    protected async getInitPromise(): Promise<void>\n    {\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            await this.getChildren();\n        }\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {LayoutComponentsIterator} from './layoutComponents.iterator';\nimport {LayoutEditorMetadataExtractor} from '../layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service';\nimport {LayoutComponentsChildrenIterator} from './layoutComponentsChildren.iterator';\n\n/**\n * Service used for creating LayoutComponentsIterator\n */\n@Injectable()\nexport class LayoutComponentsIteratorService\n{\n    //######################### constructor #########################\n    constructor(protected extractor: LayoutEditorMetadataExtractor,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be iterator created\n     */\n    public getIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsIterator\n    {\n        return new LayoutComponentsIterator(layoutMetadata, this.extractor, this.logger);\n    }\n    \n    /**\n     * Gets children iterator for specified layout metadata\n     * @param layoutMetadata - Metadata for which will be children iterator created\n     */\n    public getChildrenIteratorFor(layoutMetadata: LayoutComponentMetadata): LayoutComponentsChildrenIterator\n    {\n        return new LayoutComponentsChildrenIterator(layoutMetadata, this.extractor, this.logger);\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LayoutComponentDef, LAYOUT_COMPONENTS_LOADER} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.data as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = await metadataType.layoutEditorMetadata;\n        Object.freeze(metadataData);\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {EditorHotkeys, MetadataStateManager} from '@anglr/dynamic';\nimport {Dictionary, extend, generateId, isBlank} from '@jscrpt/common';\nimport {Observable, Subject, Subscription} from 'rxjs';\n\nimport type {LayoutDesignerSAComponent} from '../../components';\nimport {LayoutEditorMetadataManagerComponent} from './layoutEditorMetadataManager.interface';\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class LayoutEditorMetadataManager implements MetadataStateManager<LayoutComponentMetadata>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Clipboard for layout metadata copy/paste/cut operations\n     */\n    protected metadataClipboard: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Array of all registered layout designer components\n     */\n    protected components: Dictionary<LayoutEditorMetadataManagerComponent> = {};\n\n    /**\n     * Id of root component\n     */\n    protected rootComponentId: string|null = null;\n\n    /**\n     * Id of selected component\n     */\n    protected _selectedComponent: string|null = null;\n\n    /**\n     * Id of highlighted component\n     */\n    protected _highlightedComponent: string|null = null;\n\n    /**\n     * Used for emitting layout changes\n     */\n    protected layoutChangeSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting selected component changes\n     */\n    protected _selectedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting highlighted component changes\n     */\n    protected _highlightedChange: Subject<void> = new Subject<void>();\n\n    /**\n     * Used for emitting changes in components display name\n     */\n    protected _displayNameChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Flattened tree of components tree\n     */\n    protected _flatTree: LayoutEditorMetadataManagerComponent[]|null = null;\n\n    /**\n     * Id of dragged over component\n     */\n    protected _draggedOverComponent: string|null = null;\n\n    /**\n     * Used for emitting dragged over component changes\n     */\n    protected _draggedOverComponentChange: Subject<void> = new Subject<void>();\n\n    //######################### public properties #########################\n\n    /**\n     * Gets id of selected component\n     */\n    public get selectedComponent(): string|null\n    {\n        return this._selectedComponent;\n    }\n\n    /**\n     * Gets id of highlighted component\n     */\n    public get highlightedComponent(): string|null\n    {\n        return this._highlightedComponent;\n    }\n\n    /**\n     * Gets id of dragged over component\n     */\n    public get draggedOverComponent(): string|null\n    {\n        return this._draggedOverComponent;\n    }\n\n    /**\n     * Gets tree root for component tree\n     */\n    public get root(): LayoutEditorMetadataManagerComponent|undefined|null\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId];\n    }\n\n    /**\n     * Occurs when layout changes\n     */\n    public get layoutChange(): Observable<void>\n    {\n        return this.layoutChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when selected component changes\n     */\n    public get selectedChange(): Observable<void>\n    {\n        return this._selectedChange.asObservable();\n    }\n\n    /**\n     * Occurs when highlighted component changes\n     */\n    public get highlightedChange(): Observable<void>\n    {\n        return this._highlightedChange.asObservable();\n    }\n\n    /**\n     * Occurs when display name of component changes\n     */\n    public get displayNameChange(): Observable<void>\n    {\n        return this._displayNameChanges.asObservable();\n    }\n\n    /**\n     * Occurs when dragged over component changes\n     */\n    public get draggedOverComponentChange(): Observable<void>\n    {\n        return this._draggedOverComponentChange.asObservable();\n    }\n\n    /**\n     * Gets flattened tree of components tree\n     */\n    public get flatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        return (this._flatTree ??= this._buildFlatTree());\n    }\n\n    //######################### constructor #########################\n    constructor(protected _editorHotkeys: EditorHotkeys,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        this.initSubscriptions.add(this._editorHotkeys.delete.subscribe(() => \n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.copy.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            this.metadataClipboard = component.component.options?.typeMetadata;\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.cut.subscribe(() =>\n        {\n            if(!this.selectedComponent)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n\n            if(!component?.parent)\n            {\n                return;\n            }\n\n            this.metadataClipboard = component.component.options?.typeMetadata;\n            component.parent.component.removeDescendant(this.selectedComponent);\n            component.parent.component.invalidateVisuals();\n        }));\n\n        this.initSubscriptions.add(this._editorHotkeys.paste.subscribe(() =>\n        {\n            if(!this.selectedComponent || !this.metadataClipboard)\n            {\n                return;\n            }\n\n            const component = this.components[this.selectedComponent];\n            const newId = `${this.metadataClipboard.name}-${generateId(12)}`;\n\n            if(component.component.canDrop)\n            {\n                component.component.addDescendant(\n                {\n                    index: 0,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n            else if(component.parent?.component.canDrop)\n            {\n                component.parent.component.addDescendant(\n                {\n                    index: component.component.index + 1,\n                    metadata: extend({}, this.metadataClipboard, \n                    {\n                        id: newId,\n                        displayName: newId,\n                    }),\n                    parentId: null,\n                });\n            }\n        }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Marks component as selected\n     * @param id - Id of component that will be marked as selected\n     */\n    public selectComponent(id?: string): void\n    {\n        this._selectedComponent = id ?? null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Removes selection of component\n     */\n    public unselectComponent(): void\n    {\n        this._selectedComponent = null;\n        this._selectedChange.next();\n    }\n\n    /**\n     * Marks component as highlighted\n     * @param id - Id of component that will be marked as selected\n     */\n    public highlightComponent(id?: string): void\n    {\n        this._highlightedComponent = id ?? null;\n        this._highlightedChange.next();\n    }\n\n    /**\n     * Removes highlight of component\n     */\n    public cancelHighlightedComponent(): void\n    {\n        this._highlightedComponent = null;\n        this._highlightedChange.next();\n    }\n\n    \n    /**\n     * Mark component as being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public dragOverComponent(id?: string): void\n    {\n        if (id === this._draggedOverComponent)\n        {\n            return;\n        }\n\n        this._draggedOverComponent = id ?? null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Removes indication of component being dragged over\n     * @param id - Id of component that will be marked\n     */\n    public cancelDragOverComponent(): void\n    {\n        this._draggedOverComponent = null;\n        this._draggedOverComponentChange.next();\n    }\n\n    /**\n     * Registers layout designer component and returns true if component was registered successfuly, otherwise false\n     * @param component - Component instance that is being registered\n     * @param id - Id of registered component\n     * @param parentId - Id of parent that holds this component\n     */\n    public registerLayoutDesignerComponent(component: LayoutDesignerSAComponent, id: string, parentId: string|undefined): boolean\n    {\n        if(isBlank(parentId))\n        {\n            this.rootComponentId = id;\n        }\n\n        //already exists\n        if(this.components[id])\n        {\n            this._logger?.error(`LayoutEditorMetadataManager: Component with id ${id} is already registered!`);\n\n            return false;\n        }\n\n        const parent = parentId ? this.components[parentId] : null;\n        const componentItem: LayoutEditorMetadataManagerComponent = \n        {\n            component,\n            parent,\n            children: []\n        };\n\n        this.components[id] = componentItem;\n        \n        //insert into parent at the end\n        if(parent)\n        {\n            parent.children.push(componentItem);\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Registering component {@id}', id);\n\n        return true;\n    }\n\n    /**\n     * Gets component from designer component tree\n     * @param id - Id of component to be get\n     */\n    public getComponent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.component ?? null;\n    }\n\n    /**\n     * Gets parent of component by id\n     * @param id - Id of component which parent will be get\n     */\n    public getParent(id: string): LayoutDesignerSAComponent|null\n    {\n        return this.components[id]?.parent?.component ?? null;\n    }\n\n    /**\n     * Gets index of componet in its parent, if not parent or id not found null is returned\n     * @param id - Id of component which index from parent will be obtained\n     */\n    public getIndex(id: string): number|null\n    {\n        const item = this.components[id];\n\n        if(!item || !item.parent)\n        {\n            return null;\n        }\n\n        return item.parent.children.indexOf(item);\n    }\n\n    /**\n     * Gets component definition with information about component tree\n     * @param id - Id of component definition \n     */\n    public getComponentDef(id: string): LayoutEditorMetadataManagerComponent|null\n    {\n        return this.components[id] ?? null;\n    }\n\n    /**\n     * Unregisters layout designer component\n     * @param id - Id of component that will be unregistered\n     */\n    public unregisterLayoutDesignerComponent(id: string): void\n    {\n        const componentItem = this.components[id];\n        delete this.components[id];\n        \n        //unregister from parent\n        if(componentItem?.parent)\n        {\n            const index = componentItem.parent.children.indexOf(componentItem);\n            componentItem.parent.children.splice(index, 1);\n        }\n\n        if(id === this.rootComponentId)\n        {\n            this.rootComponentId = null;\n        }\n\n        this._flatTree = null;\n        this.layoutChangeSubject.next();\n\n        this._logger?.debug('LayoutEditorMetadataManager: Unregistering component {@id}', id);\n    }\n\n    /**\n     * Fires event indicating that display name of any component has changed\n     */\n    public displayNameUpdated(): void\n    {\n        this._displayNameChanges.next();\n    }\n\n    /**\n     * Gets layout component metadata which is using this service\n     */\n    public getMetadata(): LayoutComponentMetadata|null\n    {\n        if(isBlank(this.rootComponentId) || !this.components[this.rootComponentId])\n        {\n            return null;\n        }\n\n        return this.components[this.rootComponentId].component.options?.typeMetadata ?? null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Builds flattened tree of components tree\n     */\n    protected _buildFlatTree(): LayoutEditorMetadataManagerComponent[]\n    {\n        if(isBlank(this.rootComponentId))\n        {\n            return [];\n        }\n\n        const component = this.components[this.rootComponentId];\n\n        if(!component)\n        {\n            return [];\n        }\n\n        return this._buildFlatTreeForComponent(component);\n    }\n\n    /**\n     * Builds flattened tree of components tree\n     * @param component - Component which tree should be flattened\n     */\n    protected _buildFlatTreeForComponent(component: LayoutEditorMetadataManagerComponent): LayoutEditorMetadataManagerComponent[]\n    {\n        let result: LayoutEditorMetadataManagerComponent[] = [component];\n\n        for(const child of component.children)\n        {\n            result = result.concat(this._buildFlatTreeForComponent(child));\n        }\n\n        return result;\n    }\n}"],"names":["DesignerDropzoneSADirective","constructor","draggingSvc","element","initSubscriptions","Subscription","isDropZone","ngOnInit","this","add","draggingChange","subscribe","processDragValue","ngOnDestroy","unsubscribe","setTimeout","dragging","nativeElement","classList","remove","i0","selectors","inputs","standalone","LayoutDndCoreModule","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","dropDataChange","asObservable","newDropPlaceholderPreviewChange","oldDropPlaceholderPreviewChange","dropPlaceholderPreviewIndex","index","setDropData","data","next","setDropPlaceholderPreview","parentId","factory","DragActiveService","_dragging","_draggingChange","setDragging","LayoutComponentsIterator","_layoutMetadata","_extractor","_logger","_items","_initialized","_initPromise","Symbol","asyncIterator","x","initPromise","_getInitPromise","items","length","value","done","forEach","callback","item","metadata","parent","levelIndex","level","_getComponents","_getComponent","iteratorItem","push","meta","extractMetadata","debug","package","name","getDescendants","childrenMeta","options","LayoutComponentsChildrenIterator","layoutMetadata","extractor","logger","initialized","getInitPromise","getChildren","getComponent","LayoutComponentsIteratorService","getIteratorFor","getChildrenIteratorFor","LOGGER","LayoutEditorMetadataExtractor","_loader","_cache","cacheId","type","loadItem","metadataType","layoutEditorMetadata","warn","metadataData","Object","freeze","LAYOUT_COMPONENTS_LOADER","LayoutEditorMetadataManager","_editorHotkeys","components","rootComponentId","_selectedComponent","_highlightedComponent","layoutChangeSubject","_selectedChange","_highlightedChange","_displayNameChanges","_flatTree","_draggedOverComponent","_draggedOverComponentChange","delete","selectedComponent","component","removeDescendant","invalidateVisuals","copy","metadataClipboard","typeMetadata","cut","paste","newId","generateId","canDrop","addDescendant","extend","id","displayName","highlightedComponent","draggedOverComponent","root","isBlank","layoutChange","selectedChange","highlightedChange","displayNameChange","draggedOverComponentChange","flatTree","_buildFlatTree","selectComponent","unselectComponent","highlightComponent","cancelHighlightedComponent","dragOverComponent","cancelDragOverComponent","registerLayoutDesignerComponent","error","componentItem","children","getParent","getIndex","indexOf","getComponentDef","unregisterLayoutDesignerComponent","splice","displayNameUpdated","getMetadata","_buildFlatTreeForComponent","result","child","concat"],"sourceRoot":""}