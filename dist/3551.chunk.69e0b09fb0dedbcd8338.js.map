{"version":3,"file":"3551.chunk.69e0b09fb0dedbcd8338.js","mappings":"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","sources":["webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../relations-editor/src/services/relationsNodeManager/relationsNodeManager.service.ts"],"sourcesContent":["import {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', '3px');\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const half = (this.end.y - this.start.y) / 2;\n            \n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + width, this.start.y + half],\n                [this.end.x - width, this.start.y + half],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points = \n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChange, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected _loader: DynamicItemLoader<RelationsNodeDef>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n\n                component.zoomLevel = this.zoomLevel;\n                \n                const change: SimpleChange =\n                {\n                    currentValue: zoomChanges.currentValue,\n                    firstChange: false,\n                    previousValue: zoomChanges.previousValue,\n                    isFirstChange: () => false,\n                };\n\n                const chngs: SimpleChanges = {};\n                chngs[nameof<RelationsNode>('zoomLevel')] = change;\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this._logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const layoutComponentType = await this._loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                //TODO: similar handling\n\n                // switch(this._options?.missingTypeBehavior)\n                // {\n                //     default:\n                //     //case MissingTypeBehavior.ShowNotFound:\n                //     {\n                //         this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.Ignore:\n                //     {\n                //         //do nothing\n\n                //         break;\n                //     }\n                //     case MissingTypeBehavior.ThrowError:\n                //     {\n                //         throw new Error(`RelationsNodeRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                //     }\n                // }\n\n                return;\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: this._viewContainerRef.injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this._logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                \n                chngs[nameof<RelationsNode>('metadata')] =\n                {\n                    currentValue: this.componentMetadata,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                chngs[nameof<RelationsNode>('zoomLevel')] =\n                {\n                    currentValue: this.zoomLevel,\n                    previousValue: null,\n                    firstChange: true,\n                    isFirstChange: () => true\n                };\n\n                node.ngOnChanges(chngs);\n\n                this._logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n\n                this._relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                this.destroy.next(this.component);\n                this._relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + _canvasPosition.x + 'px, ' + _canvasPosition.y + 'px) scale(' + _zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"_zoomLevel\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {select} from 'd3';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * TODO\n * - Zoom to point\n */\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    styleUrls: ['relationsCanvas.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent\n{\n    //######################### protected properties #########################\n\n    /**\n     * Background pattern size\n     */\n    protected _backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    /**\n     * Last mouse up position\n     */\n    protected _lastMouseUpPosition: Coordinates = \n    {\n        x: 0, \n        y: 0\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get _backgroundSizeStyle(): string\n    {\n        return `${this._backgroundSize}px ${this._backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this._canvasPosition.x % this._backgroundSize}px ${this._canvasPosition.y % this._backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected _canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected _zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected _isDragging: boolean = false;\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected _relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _relationManager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this._relationsGroup?.nativeElement), this._relationManager, null, null);\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this._lastMouseDownPosition = \n            {\n                x: event.clientX,\n                y: event.clientY\n            };\n            \n            this._isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._canvasPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._lastMouseUpPosition.x + event.clientX - this._lastMouseDownPosition.x,\n                y: this._lastMouseUpPosition.y + event.clientY - this._lastMouseDownPosition.y,\n            };\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected _onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this._zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);            \n            \n            this._canvasPosition = \n            {\n                x: (this._canvasPosition.x/this._zoomLevel) * newZoomLevel,\n                y: (this._canvasPosition.y/this._zoomLevel) * newZoomLevel,\n            };\n\n            this._zoomLevel = newZoomLevel;\n\n            this._lastMouseUpPosition = \n            {\n                x: this._canvasPosition.x,\n                y: this._canvasPosition.y\n            };\n\n            this._backgroundSize = DEFAULT_BACKGROUND_SIZE * this._zoomLevel;\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected _lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected _nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected _allOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected _inputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected _outputs: Dictionary<RelationsOutput> = {};\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected _inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected _outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this._allOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this._inputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this._outputs;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,)\n    {\n        this._updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this._nodePosition = this.metadata.nodeMetadata.coordinates;\n                this._updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n\n        if(!this._initialized)\n        {\n            this._initialized = true;\n\n            this._initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._lastMouseDownNodePosition =\n        {\n            x: this._nodePosition.x,\n            y: this._nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._nodePosition =\n            {\n                x: this._lastMouseDownNodePosition.x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this._lastMouseDownNodePosition.y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this._updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected _initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this._inputs = {};\n\n            this._inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this._inputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this._inputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this._allOutputs = this._outputsChildren.toArray();\n            this._outputs = {};\n\n            this._outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this._outputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this._outputs);\n        };\n\n        this._inputsChildren?.changes.subscribe(() => updateInputs());\n        this._outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected _updateRelations(): void\n    {\n        this._inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this._outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected _updatePosition(): void\n    {\n        this._element.nativeElement.style.left = `${this._nodePosition.x}px`;\n        this._element.nativeElement.style.top = `${this._nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this._nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this._nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected abstract metadataSet(): void;\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","import {Component, ChangeDetectionStrategy, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {Injectable} from '@angular/core';\nimport {RelationOutputMetadata} from '@anglr/dynamic/relations';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsInput, RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {WaitingInputRelation} from './relationsNodeManager.interface';\n\n//TODO: logging\n\n/**\n * Class used for handling layout metadata\n */\n@Injectable()\nexport class RelationsNodeManager\n{\n    //######################### protected properties #########################\n\n    /**\n     * Active relation point input\n     */\n    protected _activeInput: RelationsInput|null|undefined;\n\n    /**\n     * Registered relations nodes\n     */\n    protected _nodes: Dictionary<RelationsNode> = {};\n\n    /**\n     * Waiting input relations to be processed when node is created\n     */\n    protected _waitingInputRelations: Dictionary<WaitingInputRelation[]> = {};\n\n    //######################### public methods #########################\n\n    /**\n     * Sets active relation input\n     * @param input - Component that represents input\n     */\n    public setActiveInput(input: RelationsInput|null|undefined): void\n    {\n        this._activeInput = input;\n    }\n\n    /**\n     * Gets active relation input\n     */\n    public getActiveInput(): RelationsInput|null|undefined\n    {\n        return this._activeInput;\n    }\n\n    /**\n     * Registers node into manager\n     * @param node - Node to be registered\n     */\n    public registerNode(node: RelationsNode): void\n    {\n        this._nodes[node.id] = node;\n\n        //iterate over all outputs\n        if(node.metadata?.outputs && Array.isArray(node.metadata?.outputs))\n        {\n            for(const output of node.metadata?.outputs)\n            {\n                //no inputs\n                if(!output.inputs || !Array.isArray(output.inputs))\n                {\n                    continue;\n                }\n\n                const outputNode = node.outputs[output.outputName];\n\n                //no output node\n                if(!outputNode)\n                {\n                    continue;\n                }\n\n                for(const input of output.inputs)\n                {\n                    const relationsNode = this._nodes[input.id];\n                    const relation = outputNode.startRelation();\n\n                    //input node does not exists yet\n                    if(!relationsNode)\n                    {\n                        this._waitingInputRelations[input.id] ??= [];\n                        this._waitingInputRelations[input.id].push(\n                        {\n                            inputName: input.inputName,\n                            relation: relation,\n                        });\n\n                        continue;\n                    }\n\n                    const inputNode = relationsNode.inputs[input.inputName];\n\n                    if(!inputNode)\n                    {\n                        continue;\n                    }\n\n                    inputNode.endRelation(relation);\n                }\n            }\n        }\n        \n        //finalize waiting inputs\n        if(this._waitingInputRelations[node.id])\n        {\n            const waitingInputRelations = this._waitingInputRelations[node.id];\n            const inputNode = this._nodes[node.id];\n\n            if(!inputNode)\n            {\n                return;\n            }\n\n            for(const waiting of waitingInputRelations)\n            {\n                const input = inputNode.inputs[waiting.inputName];\n\n                if(!input)\n                {\n                    continue;\n                }\n\n                input.endRelation(waiting.relation);\n            }\n        }\n    }\n\n    /**\n     * Unregisters node from manager\n     * @param node - Node to be unregistered\n     */\n    public unregisterNode(node: RelationsNode): void\n    {\n        delete this._nodes[node.id];\n    }\n\n    /**\n     * Gets current metadata\n     */\n    public getMetadata(): RelationsNodeMetadata[]\n    {\n        const result: RelationsNodeMetadata[] = [];\n        const nodeIds = Object.keys(this._nodes);\n        \n        for(const id of nodeIds)\n        {\n            const node = this._nodes[id];\n\n            if(!node.metadata)\n            {\n                continue;\n            }\n\n            //TODO: coordinates and nodeMetadata.options\n\n            const nodeMeta: RelationsNodeMetadata =\n            {\n                id,\n                name: node.metadata.name,\n                package: node.metadata.package,\n                displayName: node.metadata.displayName,\n                relationsOptions: node.metadata.relationsOptions,\n                nodeMetadata: node.metadata.nodeMetadata,\n                outputs: []\n            };\n\n\n            if(!node.allOutputs)\n            {\n                continue;\n            }\n\n            for(const output of node.allOutputs)\n            {\n                if(!output.relations)\n                {\n                    continue;\n                }\n\n                if(!output.name)\n                {\n                    continue;\n                }\n\n                const outputMeta: RelationOutputMetadata =\n                {\n                    outputName: output.name,\n                    inputs: []\n                };\n\n                for(const relation of output.relations)\n                {\n                    if(!relation.input?.name)\n                    {\n                        continue;\n                    }\n\n                    outputMeta.inputs.push(\n                    {\n                        id: relation.input.parentId,\n                        inputName: relation.input.name\n                    });\n                }\n\n                nodeMeta.outputs?.push(outputMeta);\n            }\n\n            result.push(nodeMeta);\n        }\n\n        return result;\n    }\n}"],"names":["NodeRelationPath","constructor","_parentGroup","_relationManager","start","end","_destroyingSubject","Subject","output","input","this","_path","append","attr","_lineGenerator","line","curve","curveBundle","destroying","asObservable","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","x","width","half","y","third","RelationsNodeRendererSADirective","_viewContainerRef","_relationsNodeManager","_loader","_logger","_componentRef","componentMetadata","zoomLevel","create","EventEmitter","component","instance","ngOnChanges","changes","nameof","isPresent","zoomChanges","change","currentValue","firstChange","previousValue","isFirstChange","chngs","debug","id","ngOnDestroy","clear","layoutComponentType","loadItem","warn","name","package","createComponent","data","injector","node","metadata","registerNode","unregisterNode","i0","RELATIONS_NODES_LOADER","LOGGER","selectors","inputs","outputs","exportAs","standalone","features","ctx_r1","RelationsCanvasSAComponent","_backgroundSize","_lastMouseDownPosition","_lastMouseUpPosition","_canvasPosition","_zoomLevel","_isDragging","nodeDefinitions","_backgroundSizeStyle","_backgroundPositionStyle","createRelation","select","_relationsGroup","nativeElement","_onMouseDown","event","buttons","MouseButton","clientX","clientY","_onMouseMove","_onMouseUp","_onWheel","deltaY","newZoomLevel","clamp","preventDefault","stopImmediatePropagation","viewQuery","ElementRef","ctx","CommonModule","i2","styles","changeDetection","RelationsNodeBase","_changeDetector","_element","_initialized","_lastMouseDownNodePosition","_nodePosition","_allOutputs","_inputs","_outputs","_updatePosition","allOutputs","nodeMetadata","coordinates","metadataSet","detectChanges","_initEndpoints","_updateRelations","updateInputs","_inputsChildren","forEach","Object","freeze","updateOutputs","_outputsChildren","toArray","subscribe","updateRelation","style","left","top","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","RelationNodeEndpointBase","_canvas","parentCoordiantes","parentId","parent","ngOnInit","Error","offsetLeft","offsetWidth","offsetTop","offsetHeight","relation","_relation","endRelation","_onMouseEnter","_onMouseLeave","_tempRelation","t","hostBindings","_relations","relations","startRelation","index","indexOf","splice","push","RelationsNodeManager","_nodes","_waitingInputRelations","_activeInput","Array","isArray","outputNode","outputName","relationsNode","_b","_a","inputName","inputNode","waitingInputRelations","waiting","getMetadata","result","nodeIds","keys","nodeMeta","displayName","relationsOptions","outputMeta","factory"],"sourceRoot":""}