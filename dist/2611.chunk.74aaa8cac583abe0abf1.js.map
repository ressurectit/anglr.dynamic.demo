{"version":3,"file":"2611.chunk.74aaa8cac583abe0abf1.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relationsWithEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relationsWithEditor.module.ts","webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/modules/dynamicRelations.module.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts"],"sourcesContent":["import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\n\n/**\n * Static components register for demo app\n */\n@Injectable()\nexport class StaticComponentsRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[RelationsResultSAComponent.relationsId] = RelationsResultSAComponent;\n        result[RelationsSampleClickSAComponent.relationsId] = RelationsSampleClickSAComponent;\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, ExistingProvider} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {provideRelationsEditorWithStatic, RelationsNodeManager, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {provideTinyMceRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {MetadataStorage, PackageManager} from '@anglr/dynamic';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StaticComponentsRegister} from '../../../services/staticComponentsRegister/staticComponentsRegister.service';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: () => new MetadataStorage<RelationsNodeMetadata[]>(() => []),\n        },\n        <ExistingProvider>\n        {\n            provide: MetadataStorage,\n            useExisting: RELATIONS_METADATA_STORAGE,\n        },\n        provideRelationsEditorWithStatic(StaticComponentsRegister),\n        provideTinyMceRelationsEditor(),\n        provideHandlebarsRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected metadata: RelationsNodeMetadata[] = DemoData.relationsStaticWithEditorDemo;\n\n    //######################### constructor #########################\n    constructor(private _manager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected save(): void\n    {\n        DemoData.relationsStaticWithEditorDemo = this._manager.getMetadata();\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-left-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"save()\">\n        <span>save</span>\n    </button>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {provideRelations, RelationsManager} from '@anglr/dynamic/relations';\nimport {provideTinyMceRelations} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsRelations} from '@anglr/dynamic/handlebars-components';\n\nimport {DemoData} from '../../../services/demoData';\n\n//TODO: check why relations does not work after returning from editor\n\n/**\n * Page for displaying relations\n */\n@Component(\n{\n    selector: 'relations-view',\n    templateUrl: 'relations.component.html',\n    // styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        provideRelations(),\n        provideTinyMceRelations(),\n        provideHandlebarsRelations(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\nexport class RelationsComponent\n{\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._relationsManager.setRelations(DemoData.relationsStaticWithEditorDemo);\n    }\n}","<div class=\"margin-bottom-big\">\n    <a routerLink=\"/relationsWithEditor/editor\">editor</a>\n</div>\n\n<div>\n    <div class=\"bold\">relations sample click</div>\n    <relations-sample-click></relations-sample-click>\n</div>\n\n<div>\n    <div class=\"bold\">relations result</div>\n    <relations-result></relations-result>\n</div>","import {EditorComponent} from './editor/editor.component';\nimport {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    RelationsComponent,\n    EditorComponent,\n];","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsModule} from '@anglr/dynamic/relations';\nimport {DynamicRelationsEditorModule} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './relationsWithEditor.routes';\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\n\n/**\n * Module for relations with editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        RouterModule,\n        GoBackModule,\n        DynamicRelationsModule,\n        DynamicRelationsEditorModule,\n        RelationsSampleClickSAComponent,\n        RelationsResultSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('RELATIONS_TMP'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsWithEditorModule\n{\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {provideRelations} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic relations rendering\n */\n@NgModule(\n{\n})\nexport class DynamicRelationsModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsModule>\n    {\n        return {\n            ngModule: DynamicRelationsModule,\n            providers:\n            [\n                provideRelations(),\n            ]\n        };\n    }\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n"],"names":["StaticComponentsRegister","Register","getDefinedTypes","result","RelationsResultSAComponent","RelationsSampleClickSAComponent","t","factory","EditorComponent","constructor","_manager","metadata","DemoData","save","this","getMetadata","i0","selectors","features","provide","RELATIONS_METADATA_STORAGE","useFactory","MetadataStorage","useExisting","provideRelationsEditorWithStatic","provideTinyMceRelationsEditor","provideHandlebarsRelationsEditor","PackageManager","useClass","DemoRelationsPackageManager","decls","vars","consts","template","ctx","ComponentRoute","path","RelationsNodeManager","RelationsComponent","_relationsManager","ngOnInit","setRelations","provideRelations","provideTinyMceRelations","provideHandlebarsRelations","RelationsManager","components","RelationsWithEditorModule","createStoreDataServiceFactory","imports","RouterModule","GoBackModule","DynamicRelationsModule","DynamicRelationsEditorModule","ModuleRoutes","super","packages","ngModule","providers","provideRelationsEditor","staticRegister","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DefaultDynamicModuleItemsProvider","multi","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","deps","Optional","LOGGER","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","undefined","data","isBlank","isType","RelationsComponentManager","RelationsProcessor","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1"],"sourceRoot":""}