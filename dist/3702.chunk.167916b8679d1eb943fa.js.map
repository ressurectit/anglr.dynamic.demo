{"version":3,"file":"3702.chunk.167916b8679d1eb943fa.js","mappings":"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","sources":["webpack://ng-universal-demo/../form/src/components/formComponentBase/formComponentBase.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../form/src/misc/enums.ts","webpack://ng-universal-demo/../form/src/pipes/control/control.pipe.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../material-components/src/textarea/textarea.metadata.ts","webpack://ng-universal-demo/../../../../src/cdk/text-field/autosize.ts","webpack://ng-universal-demo/../material-components/src/textarea/textarea.component.ts","webpack://ng-universal-demo/../material-components/src/textarea/textarea.component.html","webpack://ng-universal-demo/../material-components/src/textarea/type.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, Optional} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\nimport {LayoutComponentBase} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FORM_COMPONENT_CONTROL} from '../../misc/tokens';\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\n\n/**\n * Base component for form component\n */\n@Directive()\nexport abstract class FormComponentBase<TOptions extends FormComponentOptions> extends LayoutComponentBase<TOptions>\n{\n    constructor(_changeDetector: ChangeDetectorRef,\n                _element: ElementRef<HTMLElement>,\n                _injector: Injector,\n                @Inject(FORM_COMPONENT_CONTROL) @Optional() protected _control?: AbstractControl,\n                @Inject(LOGGER) @Optional() _logger?: Logger,)\n    {\n        super(_changeDetector, _element, _injector, _logger);\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","export enum FormComponentControlType\n{\n    FormControl,\n    FormArray,\n    FormGroup,\n}\n","import {Inject, Pipe, PipeTransform} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {FormComponentControlType} from '../../misc/enums';\n\n/**\n * Transforms control name to FormControl|FormArray|FormGroup\n */\n@Pipe({name: 'formComponentControl', standalone: true})\nexport class FormComponentControlSAPipe implements PipeTransform\n{\n    constructor(@Inject(LOGGER) protected _logger: Logger,)\n    {}\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms control name to FormControl|FormArray|FormGroup\n     */\n    public transform(controlName: string|null|undefined, parentControl: AbstractControl|undefined, defaultControlType: FormComponentControlType = FormComponentControlType.FormControl): AbstractControl\n    {\n        if (!parentControl ||\n            !controlName)\n        {\n            return this._getControlForType(defaultControlType);\n        }\n\n        const control = parentControl.get(controlName);\n\n        if (!control)\n        {\n            this._logger?.warn('FormComponentControlSAPipe: Unable to find control with name {@name}', {name: controlName});\n        }\n\n        return control ?? this._getControlForType(defaultControlType);\n    }\n\n    //######################### private methods ########################\n\n    /**\n     * Generate dummy abstract control of specified type\n     * @param type \n     * @returns \n     */\n    private _getControlForType(type: FormComponentControlType): FormControl|FormArray|FormGroup\n    {\n        switch (type)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray<any>([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await resolvePromiseOr(this._onInit());\n        await resolvePromiseOr(this._onOptionsSet());\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await resolvePromiseOr(extension.initialize(this._injector, this.element, this));\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await resolvePromiseOr(this._onOptionsSet());\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await resolvePromiseOr(extension.optionsChange(extensionsOptions));\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await resolvePromiseOr(this._onOptionsChange());\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onInit(): void\n    {\n        this._applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsChange(): void\n    {\n        this._applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected _applyStyling(): void\n    {\n        const options = this._options;\n        const style = this._element?.nativeElement.style;\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                if(isPresent(options.margin.bottom))\n                {\n                    style.marginBottom = options.margin.bottom;\n                }\n\n                if(isPresent(options.margin.right))\n                {\n                    style.marginRight = options.margin.right;\n                }\n\n                if(isPresent(options.margin.top))\n                {\n                    style.marginTop = options.margin.top;\n                }\n\n                if(isPresent(options.margin.left))\n                {\n                    style.marginLeft = options.margin.left;\n                }\n            }\n\n            if(options?.padding)\n            {\n                if(isPresent(options.padding.bottom))\n                {\n                    style.paddingBottom = options.padding.bottom;\n                }\n\n                if(isPresent(options.padding.right))\n                {\n                    style.paddingRight = options.padding.right;\n                }\n\n                if(isPresent(options.padding.top))\n                {\n                    style.paddingTop = options.padding.top;\n                }\n\n                if(isPresent(options.padding.left))\n                {\n                    style.paddingLeft = options.padding.left;\n                }\n            }\n\n            if(options?.textStyling)\n            {\n                if(isPresent(options.textStyling.fontSize))\n                {\n                    style.fontSize = options.textStyling.fontSize;\n                }\n\n                if(isPresent(options.textStyling.fontWeight))\n                {\n                    style.fontWeight = options.textStyling.fontWeight.toString();\n                }\n            }\n        }\n    }\n}","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {MaterialTextareaComponentOptions} from './textarea.options';\n\n/**\n * Material textarea layout metadata loader\n */\nexport const MaterialTextareaLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<MaterialTextareaComponentOptions>> = async () => new (await import('./metadata/textarea.layoutMetadata')).MaterialTextareaLayoutEditorMetadata();","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number {\n    return this._minRows;\n  }\n  set minRows(value: NumberInput) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number {\n    return this._maxRows;\n  }\n  set maxRows(value: NumberInput) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: BooleanInput) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  @Input()\n  get placeholder(): string {\n    return this._textareaElement.placeholder;\n  }\n  set placeholder(value: string) {\n    this._cachedPlaceholderHeight = undefined;\n\n    if (value) {\n      this._textareaElement.setAttribute('placeholder', value);\n    } else {\n      this._textareaElement.removeAttribute('placeholder');\n    }\n\n    this._cacheTextareaPlaceholderHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n  /** Cached height of a textarea with only the placeholder. */\n  private _cachedPlaceholderHeight?: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  private _hasFocus: boolean;\n\n  private _isViewInited = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _platform: Platform,\n    private _ngZone: NgZone,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document?: any,\n  ) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight =\n      this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight =\n      this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n\n        this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n      });\n\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n\n  ngOnDestroy() {\n    this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n    this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textareaClone.remove();\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  private _measureScrollHeight(): number {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox\n      ? 'cdk-textarea-autosize-measuring-firefox'\n      : 'cdk-textarea-autosize-measuring';\n\n    // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    element.classList.add(measuringClass);\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n\n    return scrollHeight;\n  }\n\n  private _cacheTextareaPlaceholderHeight(): void {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n\n    const value = this._textareaElement.value;\n\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n\n  /** Handles `focus` and `blur` events. */\n  private _handleFocusEvent = (event: FocusEvent) => {\n    this._hasFocus = event.type === 'focus';\n  };\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n    this._cacheTextareaPlaceholderHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const scrollHeight = this._measureScrollHeight();\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {CastPipesModule, HostDisplayBlockStyle} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\nimport {FormComponent, FormComponentBase, FormComponentControlSAPipe} from '@anglr/dynamic/form';\n\nimport {MaterialTextareaLayoutMetadataLoader} from './textarea.metadata';\nimport {MaterialTextareaComponentOptions} from './textarea.options';\n\n/**\n * Component used for displaying material text field\n */\n@Component(\n{\n    selector: 'material-textarea',\n    templateUrl: 'textarea.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports:\n    [\n        FormPipesModule,\n        CastPipesModule,\n        FormComponentControlSAPipe,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        TextFieldModule,\n    ]\n})\n@LayoutEditorMetadata(MaterialTextareaLayoutMetadataLoader)\nexport class MaterialTextareaSAComponent extends FormComponentBase<MaterialTextareaComponentOptions> implements FormComponent<MaterialTextareaComponentOptions>\n{}","<mat-form-field [appearance]=\"options?.appearance|asRequired\">\n    <mat-label>{{options?.label}}</mat-label>\n    <textarea \n        matInput \n        cdkTextareaAutosize\n        [attr.placeholder]=\"options?.placeholder\"\n        [formControl]=\"options?.controlName|formComponentControl:_control|asFormControl|asRequired\"></textarea>\n    <mat-hint>{{options?.hint}}</mat-hint>\n</mat-form-field>","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {MaterialTextareaSAComponent} from './textarea.component';\n\n\nexport default MaterialTextareaSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await resolvePromiseOr(this._onInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await resolvePromiseOr(this._onOptionsChange());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}"],"names":["FormComponentBase","LayoutComponentBase","constructor","_changeDetector","_element","_injector","_control","_logger","super","i0","FORM_COMPONENT_CONTROL","LOGGER","features","InjectionToken","FormComponentControlType","FormComponentControlSAPipe","transform","controlName","parentControl","defaultControlType","FormControl","this","_getControlForType","control","get","warn","name","type","FormArray","FormGroup","pure","standalone","LayoutEditorMetadata","metadataLoader","DynamicClassMetadata","_extensions","_initialized","element","extensionsOptions","options","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","resolvePromiseOr","_onInit","_onOptionsSet","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","extensions","invalidateVisuals","detectChanges","ComponentStylingExtension","DynamicItemExtensionBase","_applyStyling","_options","style","nativeElement","isPresent","margin","bottom","marginBottom","right","marginRight","top","marginTop","left","marginLeft","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","MaterialTextareaLayoutMetadataLoader","MaterialTextareaLayoutEditorMetadata","CdkTextareaAutosize","_elementRef","_platform","_ngZone","document","_destroyed","Subject","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","event","_hasFocus","_document","_textareaElement","minRows","_minRows","value","coerceNumberProperty","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","coerceBooleanProperty","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","minHeight","_cachedLineHeight","maxHeight","ngAfterViewInit","isBrowser","_initialHeight","height","runOutsideAngular","window","_getWindow","fromEvent","pipe","auditTime","takeUntil","subscribe","addEventListener","removeEventListener","next","complete","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","overflow","parentNode","appendChild","clientHeight","remove","_measureScrollHeight","previousMargin","isFirefox","FIREFOX","needsMarginFiller","measuringClass","classList","add","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","DOCUMENT","MaterialTextareaSAComponent","t","selectors","decls","vars","consts","template","FormPipesModule","i1","CastPipesModule","i2","ReactiveFormsModule","i3","MatFormFieldModule","i4","MatInputModule","i5","TextFieldModule","styles","changeDetection","_metadata","injector","instance","_instance"],"sourceRoot":""}