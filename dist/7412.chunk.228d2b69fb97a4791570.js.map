{"version":3,"file":"7412.chunk.228d2b69fb97a4791570.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.metadata.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.ts","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/styleBlock.component.html","webpack://ng-universal-demo/../css-components/src/dynamicItems/styleBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts"],"sourcesContent":["import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\n\n/**\n * Style block layout metadata loader\n */\nexport const StyleBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<StyleBlockComponentOptions>> = async () => new (await import('./metadata/styleBlock.layoutMetadata')).StyleBlockLayoutEditorMetadata();\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Injector, Inject, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {HostDisplayBlockStyle, Logger, LOGGER} from '@anglr/common';\nimport {generateId} from '@jscrpt/common';\nimport prefixer  from 'postcss-prefix-selector';\nimport postcss, {Processor, Root} from 'postcss';\n\nimport {StyleBlockComponentOptions} from './styleBlock.options';\nimport {StyleBlockLayoutMetadataLoader} from './styleBlock.metadata';\n\n//TODO: optimize, debug, dual call of options set\n\n/**\n * Component used for displaying style block\n */\n@Component(\n{\n    selector: 'style-block',\n    templateUrl: 'styleBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    host:\n    {\n        '[attr.id]': 'id'\n    },\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorMetadata(StyleBlockLayoutMetadataLoader)\nexport class StyleBlockSAComponent extends LayoutComponentBase<StyleBlockComponentOptions> implements LayoutComponent<StyleBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Unique ID for this instance of style block\n     */\n    protected id: string = generateId(10);\n\n    /**\n     * Instance of created style element by this style block\n     */\n    protected style: HTMLStyleElement|undefined|null;\n\n    /**\n     * Instance of css processor that applies changes\n     */\n    protected cssProcessor: Processor|undefined|null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,\n                @Inject(LOGGER) @Optional() logger?: Logger,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.cssProcessor = postcss()\n            .use((root: Root) =>\n            {\n                prefixer(\n                {\n                    prefix: `style-block#${this.id}`,\n                })(root);\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(this.options?.style && this.cssProcessor)\n        {\n            const css = this.cssProcessor.process(this.options.style).css;\n\n            this.style = this.document.createElement('style');\n            this.style.innerText = css;\n\n            this.document.head.append(this.style);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onDestroy(): void\n    {\n        this.style?.remove();\n        this.style = null;\n    }\n}","<ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>","import {StyleBlockSAComponent} from './styleBlock.component';\n\nexport default StyleBlockSAComponent;","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected componentElement: ElementRef<HTMLElement>,\n                protected injector: Injector,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this.initialized)\n        {\n            return;\n        }\n\n        this.initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this.onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this.initialized)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param _changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["StyleBlockLayoutMetadataLoader","StyleBlockLayoutEditorMetadata","StyleBlockSAComponent","LayoutComponentBase","constructor","changeDetector","element","injector","document","logger","super","id","generateId","onInit","this","cssProcessor","postcss","use","root","prefixer","prefix","onOptionsSet","options","style","css","process","createElement","innerText","head","append","onDestroy","remove","i0","DOCUMENT","LOGGER","selectors","hostVars","hostBindings","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorMetadata","ChangeDetectorRef","ElementRef","Injector","Document","Object","metadataLoader","DynamicClassMetadata","componentElement","extensions","initialized","destroyed","extensionsOptions","ngOnDestroy","ext","destroy","ngOnInit","extension","initialize","afterInit","ngOnChanges","changes","nameof","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","features"],"sourceRoot":""}