{"version":3,"file":"8520.chunk.3675f9ff9f8a9ebe769a.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.html","webpack://ng-universal-demo/./app/pages/+default/formPreview/formPreview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+default/default.routes.ts","webpack://ng-universal-demo/./app/pages/+default/default.module.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts","webpack://ng-universal-demo/../relations-editor/src/pipes/toRelationsDragData/toRelationsDragData.pipe.ts","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.html","webpack://ng-universal-demo/../relations-editor/src/components/nodesPalette/nodesPalette.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsEditor/relationsEditor.component.html","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/validatorFactories.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/utils.ts","webpack://ng-universal-demo/../../../../forms/src/services/formModelBuilder/formModelBuilder.service.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-module.ts","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["<div>\r\n    <ng-select [formControl]=\"_available\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_metadata\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll\">\r\n            <ng-container [layoutComponentRenderer]=\"_metadata\" [layoutComponentRendererInjector]=\"_formInjector\"></ng-container>\r\n        </div>\r\n    </div>\r\n    \r\n    <button class=\"button\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataManager} from '@anglr/dynamic/layout-editor';\nimport {FORM_COMPONENT_CONTROL} from '@anglr/dynamic/form';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {createStoreDataServiceFactory} from '../../../misc/factories';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'formPreview.component.html',\n    providers:\n    [\n        LayoutEditorMetadataManager,\n        createStoreDataServiceFactory('LAYOUT_DATA'),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _fb: FormBuilder,\n                private _injector: Injector,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                this._metadata = this._store.getData(id);\n\n                //TODO build formGroup from metadata\n                this._formGroup = this._fb.group({\n                    checkbox: true,\n                    datepicker: new Date(),\n                    number: 10,\n                    period: '202201',\n                    radio: null,\n                    select: 'foo',\n                    textarea: 'Text in textarea',\n                    text: 'classic input field'\n                });\n        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    protected _submit()\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {FormPreviewComponent} from './formPreview/formPreview.component';\n\nexport const components =\n[\n    FormPreviewComponent,\n];","import {NgModule} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {ComponentsPaletteSAComponent, ComponentsTreeSAComponent, PropertiesEditorSAComponent} from '@anglr/dynamic/layout-editor';\nimport {NodesPaletteSAComponent, RelationsCanvasSAComponent, RelationsEditorSAComponent} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './default.routes';\nimport {DebuggingFeatureModule, DisplayingFeatureModule, FormsFeatureModule} from '../../modules';\nimport {LoadSaveNewSAComponent} from '../../components';\n\n/**\n * Module for Default application pages\n */\n@NgModule(\n{\n    imports:\n    [\n        DisplayingFeatureModule,\n        FormsFeatureModule,\n        DebuggingFeatureModule,\n        LayoutComponentRendererSADirective,\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        RelationsCanvasSAComponent,\n        MatTabsModule,\n        LoadSaveNewSAComponent,\n        NodesPaletteSAComponent,\n        DragDropModule,\n        RelationsEditorSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n})\n@ModuleRoutes(components)\nexport class DefaultModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');","import {Pipe, PipeTransform} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\nimport type {NodesPaletteItem} from '../../components';\nimport {RelationsNodeDragData} from '../../interfaces';\n\n/**\n * Transforms NodesPaletteItem item to RelationsNodeDragData\n */\n@Pipe({name: 'toRelationsDragData', standalone: true})\nexport class ToRelationsDragDataSAPipe implements PipeTransform\n{\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Transforms NodesPaletteItem item to RelationsNodeDragData\n     * @param value - Palette item to be transformed\n     * @param id - Unique id to be used for new node\n     */\n    public transform(value: NodesPaletteItem, id: string): RelationsNodeDragData\n    {\n        const newId = `${value.itemSource.name}-${id}`;\n\n        return {\n            metadata:\n            {\n                id: newId,\n                displayName: newId,\n                package: value.itemSource.package,\n                name: value.itemSource.name,\n                relationsOptions: extend(true, {}, value.metadata.metaInfo?.defaultOptions),\n                outputs: [],\n                nodeMetadata:\n                {\n                    coordinates:\n                    {\n                        x: 0,\n                        y: 0\n                    },\n                    options: null,\n                }\n            }\n        };\n    }\n}","<div class=\"flex-column\">\n    <ng-container *ngFor=\"let groupKeyValue of _groupedItems | keyvalue\">\n        <div class=\"text-spread text-small-caps margin-left-extra-small margin-horizontal-small bold\">{{groupKeyValue.key}}&nbsp;</div>\n\n        <div *ngFor=\"let item of groupKeyValue.value\"\n             cdkDropList\n             cdkDropListSortingDisabled\n             [cdkDropListConnectedTo]=\"canvasDropList\"\n             class=\"palette-droplist\">\n            <div class=\"editor-component mat-elevation-z2\"\n                 cdkDrag\n                 [cdkDragData]=\"item | toRelationsDragData: _newCompnentId\"\n                 (cdkDragDropped)=\"_generateNewId()\">\n                 <!-- (cdkDragEnded)=\"_onDragEnded(groupKeyValue.key)\"\n                 (cdkDragStarted)=\"_onDragStarted($event, groupKeyValue.key, item)\"> -->\n                <!-- <layout-editor-drag-placeholder class=\"mat-elevation-z6\" *cdkDragPlaceholder></layout-editor-drag-placeholder>\n                <layout-editor-drag-preview class=\"mat-elevation-z4\" *cdkDragPreview [editorMetadata]=\"item.metadata\" [layoutMetadata]=\"(item | toLayoutDragData: _newCompnentId).metadata\"></layout-editor-drag-preview> -->\n                <div class=\"editor-component-name\">{{item.metadata.singleton ? item.itemSource.name : item.metadata.metaInfo?.name ?? item.itemSource.name}}</div>\n                <div class=\"editor-component-description\" *ngIf=\"item.metadata.metaInfo?.description\">{{item.metadata.metaInfo?.description}}</div>\n            </div>\n        </div>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, OnInit, Inject, Optional, OnDestroy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CdkDropList, DragDropModule} from '@angular/cdk/drag-drop';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, generateId} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {NodesPaletteItem} from './nodesPalette.interface';\nimport {RELATIONS_MODULE_TYPES_LOADER, RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsModuleTypes, RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {ToRelationsDragDataSAPipe} from '../../pipes';\n\n//TODO: add new provider for refresh required of palette items\n\n/**\n * Component displaying available nodes palette\n */\n@Component(\n{\n    selector: 'nodes-palette',\n    templateUrl: 'nodesPalette.component.html',\n    styleUrls: ['nodesPalette.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        DragDropModule,\n        // LayoutEditorDragPreviewSAComponent,\n        // LayoutEditorDragPlaceholderSAComponent,\n        ToRelationsDragDataSAPipe,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NodesPaletteSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Array of all available items in palette\n     */\n    protected _allItems: NodesPaletteItem[] = [];\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Available items grouped by group name\n     */\n    protected _groupedItems: Dictionary<(NodesPaletteItem & {temp?: boolean})[]> = {};\n\n    /**\n     * Generated component id, that is used for new component\n     */\n    protected _newCompnentId: string = generateId(16);\n\n    /**\n     * Indication whether drag element is over palette\n     */\n    protected _isDragOverPalette: boolean = false;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of canvas drop list\n     */\n    @Input()\n    public canvasDropList!: CdkDropList;\n\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_MODULE_TYPES_LOADER) protected _moduleTypesLoader: DynamicItemLoader<RelationsModuleTypes>,\n                @Inject(RELATIONS_NODES_LOADER) protected _nodesLoader: DynamicItemLoader<RelationsNodeDef>,\n                protected _changeDetector: ChangeDetectorRef,\n                protected _metadataManager: RelationsNodeManager,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        // this._initSubscriptions.add(this._metadataManager.layoutChange.subscribe(() => this._getDesignerDropLists()));\n\n        // this._getDesignerDropLists();\n\n        //TODO make it dynamic\n        for (const packageName of ['basic-components', 'material-components', 'static-components', 'layout-components'])\n        {\n            const types = (await this._moduleTypesLoader.loadItem({package: packageName, name: 'types'}))?.data ?? [];\n\n            for(const type of types)\n            {\n                const itemSource: DynamicItemSource = {package: packageName, name: type};\n                const metadata = await this._nodesLoader.loadItem(itemSource);\n    \n                if(!metadata)\n                {\n                    this._logger?.warn('NodesPaletteSAComponent: Failed to obtain layout editor metadata {@source}', itemSource);\n                }\n                else\n                {\n                    this._allItems.push(\n                    {\n                        itemSource,\n                        metadata\n                    });\n                }\n            }\n        }        \n\n        this._groupedItems[''] = [];\n\n        //group items\n        for(const item of this._allItems)\n        {\n            const group = item.metadata.metaInfo?.group ?? '';\n            this._groupedItems[group] ??= [];\n            this._groupedItems[group].push(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Generates new component id\n     */\n    protected _generateNewId(): void\n    {\n        this._newCompnentId = generateId(16);\n    }\n\n    // /**\n    //  * Removes temporary palette item when drag ends\n    //  * @param key Items group key\n    //  */\n    // protected _onDragEnded(key: string): void\n    // {\n    //     if (!isPresent(key))\n    //     {\n    //         return;\n    //     }\n\n    //     this._groupedItems[key] = [...this._groupedItems[key].filter(datum => !datum.temp)];\n    // }\n\n    // /**\n    //  * Generates temporary palette item when drag starts\n    //  * @param event Drag start event\n    //  * @param key Items group key\n    //  * @param item Palette item\n    //  */\n    // protected _onDragStarted(event: CdkDragStart<LayoutComponentDragData>, key: string, item: NodesPaletteItem): void\n    // {\n    //     const currentIdx = event.source.dropContainer.getSortedItems().findIndex((datum: CdkDrag<LayoutComponentDragData>) => datum.data?.metadata?.id === event.source.data?.metadata?.id);\n\n    //     if (isPresent(currentIdx))\n    //     {\n    //         this._groupedItems[key]?.splice(currentIdx + 1, 0, {\n    //             ...item,\n    //             temp: true\n    //         });\n    //     }\n    // }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CdkDragDrop, DragDropModule} from '@angular/cdk/drag-drop';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {NodesPaletteSAComponent} from '../nodesPalette/nodesPalette.component';\nimport {RelationsCanvasSAComponent} from '../relationsCanvas/relationsCanvas.component';\nimport {RelationsNodeDragData, RelationsNodeMetadata} from '../../interfaces';\n\n/**\n * Component that represents relations editor with palette and canvas\n */\n@Component(\n{\n    selector: 'relations-editor',\n    templateUrl: 'relationsEditor.component.html',\n    // styleUrls: ['relationsEditor.component.css'],\n    styles: [HostDisplayFlexStyle],\n    standalone: true,\n    imports:\n    [\n        NodesPaletteSAComponent,\n        RelationsCanvasSAComponent,\n        DragDropModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsEditorSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata used for rendering relations in canvas\n     */\n    @Input()\n    public metadata: RelationsNodeMetadata[] = [];\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Adds new node into canvas and metadata\n     * @param event - Drop event that occured\n     */\n    protected addNode(event: CdkDragDrop<RelationsNodeDragData, RelationsNodeDragData, RelationsNodeDragData>): void\n    {\n        //TODO: apply transform of canvas\n\n        const canvasRect = event.container.element.nativeElement.getBoundingClientRect();\n\n        if(event.item.data.metadata.nodeMetadata?.coordinates)\n        {\n            event.item.data.metadata.nodeMetadata.coordinates.x = event.dropPoint.x - canvasRect.x;\n            event.item.data.metadata.nodeMetadata.coordinates.y = event.dropPoint.y - canvasRect.y;\n        }\n\n        this.metadata =\n        [\n            ...this.metadata,\n            event.item.data.metadata,\n        ];\n    }\n}","<div class=\"flex-row flex-1\">\n    <nodes-palette [canvasDropList]=\"dropList\" style=\"width: 250px;\"></nodes-palette>\n    <relations-canvas #dropList=\"cdkDropList\" [nodeDefinitions]=\"metadata\" class=\"flex-1\" cdkDropList (cdkDropListDropped)=\"addNode($event)\"></relations-canvas>\n</div>","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {AsyncValidatorFnFactoryFn, ValidatorFnFactoryFn} from '../interfaces/validator.interface';\n\n/**\n * Class that represents ValidatorFn factory\n */\nexport class ValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of ValidatorFnFactory\n     * @param _factoryFn - Function used for creating ValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: ValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets validator function factory function\n     */\n    public valueOf(): ValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): ValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}\n\n/**\n * Class that represents AsyncValidatorFn factory\n */\nexport class AsyncValidatorFnFactory<TArg extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n    /**\n     * Creates instance of AsyncValidatorFnFactory\n     * @param _factoryFn - Function used for creating AsyncValidatorFn\n     * @param _args - Static arguments/parameters that can be passed to validator\n     */\n    constructor(private _factoryFn?: AsyncValidatorFnFactoryFn<TArg>,\n                private _args?: TArg,)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets async validator function factory function\n     */\n    public valueOf(): AsyncValidatorFnFactoryFn<TArg>\n    {\n        if(this._args)\n        {\n            return (args: TArg): AsyncValidatorFn =>\n            {\n                args = \n                {\n                    ...this._args,\n                    args\n                };\n\n                return this._factoryFn(args);\n            };\n        }\n\n        return this._factoryFn;\n    }\n}","import {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {FormModelGroup} from '../../types';\nimport {FormModelBuilderDefaultArgs} from '../interfaces/formModelBuilder.interface';\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from './defaults';\nimport {AsyncValidatorFnFactory, ValidatorFnFactory} from './validatorFactories';\n\n/**\n * Builds form group from decorated model\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nfunction buildFormGroup<TModel, TArgs extends Dictionary<any> = any>(model: ModelDecoratorMetadata<TModel> & Dictionary<any>, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    if(!model)\n    {\n        return new FormGroup<FormModelGroup<TModel>>({} as any);\n    }\n\n    const modelMetadata: Dictionary<any> = model.ɵControlsMetadata ?? {};\n    const groupValidators = model.ɵValidators ?? [];\n    const groupAsyncValidators = model.ɵAsyncValidators ?? [];\n    const groupArgs: Dictionary<any> = model.ɵArgs ?? {};\n    const properties = Object.keys(model);\n    const formGroup: FormGroup = new FormGroup({},\n                                               {\n                                                   validators: groupValidators?.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm),\n                                                   asyncValidators: groupAsyncValidators?.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...groupArgs, ...args}) : validator).filter(itm => !!itm)\n                                               });\n\n    for(const propertyName of properties)\n    {\n        const metadata: ModelPropertyDecoratorMetadata = modelMetadata[propertyName] ?? ɵDefaultPropertyMetadata;\n        const defaultValue = model[propertyName];\n\n        //Skip control creation if value is undefined\n        if(defaultValue === undefined)\n        {\n            continue;\n        }\n\n        const validators = metadata.validators.map(validator => validator instanceof ValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n        const asyncValidators = metadata.asyncValidators.map(validator => validator instanceof AsyncValidatorFnFactory ? validator.valueOf()({...metadata.args, ...args}) : validator).filter(itm => !!itm);\n\n        let control: AbstractControl;\n\n        switch(metadata.type)\n        {\n            case FormGroup:\n            {\n                control = buildFormGroup(defaultValue, args);\n\n                //TODO: think of setting metadata from property to model\n\n                break;\n            }\n            case FormArray:\n            {\n                //TODO - enhance FormArray child definition and finish it\n                control = new FormArray([],\n                                        {\n                                            validators: validators,\n                                            asyncValidators: asyncValidators,\n                                            ...metadata.controlOptions\n                                        });\n\n                if(defaultValue && Array.isArray(defaultValue))\n                {\n                    const formArray = control as FormArray;\n\n                    for(const val of defaultValue)\n                    {\n                        switch(metadata.childType)\n                        {\n                            case FormGroup:\n                            {\n                                formArray.push(buildFormGroup(val, args));\n\n                                break;\n                            }\n                            case FormArray:\n                            {\n                                break;\n                            }\n                            default:\n                            //case FormControl:\n                            {\n                                formArray.push(new FormControl(val,\n                                                               {\n                                                                   validators: validators,\n                                                                   asyncValidators: asyncValidators,\n                                                                   ...metadata.controlOptions\n                                                               }));\n\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                break;\n            }\n            default:\n            //case FormControl:\n            {\n                control = new FormControl(defaultValue,\n                                          {\n                                              validators: validators,\n                                              asyncValidators: asyncValidators,\n                                              ...metadata.controlOptions\n                                          });\n\n                break;\n            }\n        }\n\n        if(metadata.disabled)\n        {\n            control.disable();\n        }\n\n        formGroup.addControl(propertyName, control);\n    }\n\n    return formGroup;\n}\n\n/**\n * Builds form from decorated model, only for properties with non `undefined` value\n * @param model - Model that can be decorated for enhancing created form group with validation and so on\n * @param args - Object storing arguments from owning component for customization\n * @returns\n */\nexport function buildFormModel<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs&FormModelBuilderDefaultArgs): FormGroup<FormModelGroup<TModel>>\n{\n    return buildFormGroup(model as any, args);\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {buildFormModel} from '../../misc/formModel';\nimport {FormModelGroup} from '../../misc/types';\n\n/**\n * Instance of form model builder, that creates `FormGroup` from form model, automatically providing `Injector`\n */\n@Injectable()\nexport class FormModelBuilder\n{\n    //######################### constructor #########################\n    constructor(protected _injector: Injector)\n    {\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Builds form from decorated model, only for properties with non `undefined` value\n     * @param model - Model that can be decorated for enhancing created form group with validation and so on\n     * @param args - Object storing arguments from owning component for customization\n     */\n    public build<TModel, TArgs extends Dictionary<any> = any>(model: TModel, args?: TArgs): FormGroup<FormModelGroup<TModel>>\n    {\n        return buildFormModel<TModel, TArgs>(model,\n                                             {\n                                                 ...args,\n                                                 injector: this._injector,\n                                             });\n    }\n}","import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav, MatTabNavPanel} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["i0","val_r2","ctx_r1","FormPreviewComponent","constructor","_store","_router","_route","_fb","_injector","_available","FormControl","_metadata","_availableNames","ngOnInit","this","getStored","params","subscribe","id","setValue","getData","_formGroup","group","checkbox","datepicker","Date","number","period","radio","select","textarea","text","_formInjector","Injector","parent","providers","provide","FORM_COMPONENT_CONTROL","useValue","valueChanges","val","navigate","skipLocationChange","replaceUrl","ngOnDestroy","_submit","console","log","value","redirectTo","pathMatchFull","selectors","features","LayoutEditorMetadataManager","createStoreDataServiceFactory","decls","vars","consts","template","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","Object","defineProperty","enumerable","configurable","writable","path","push","pathMatch","ComponentRoute","StoreDataService","Router","ActivatedRoute","FormBuilder","components","DefaultModule","DisplayingFeatureModule","FormsFeatureModule","DebuggingFeatureModule","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","RelationsCanvasSAComponent","MatTabsModule","LoadSaveNewSAComponent","NodesPaletteSAComponent","DragDropModule","RelationsEditorSAComponent","ModuleRoutes","InjectionToken","ToRelationsDragDataSAPipe","transform","newId","itemSource","name","metadata","displayName","package","relationsOptions","extend","metaInfo","defaultOptions","outputs","nodeMetadata","coordinates","x","y","options","pure","standalone","_moduleTypesLoader","_nodesLoader","_changeDetector","_metadataManager","_logger","_initSubscriptions","Subscription","_allItems","_groupedItems","_newCompnentId","generateId","_isDragOverPalette","packageName","types","loadItem","data","type","item","_a","detectChanges","unsubscribe","_generateNewId","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_LOADER","LOGGER","inputs","canvasDropList","CommonModule","i2","i3","styles","changeDetection","addNode","event","canvasRect","container","element","nativeElement","getBoundingClientRect","dropPoint","ctx","i1","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","ɵDefaultPropertyMetadata","asyncValidators","validators","disabled","childType","args","ValidatorFnFactory","_factoryFn","_args","valueOf","AsyncValidatorFnFactory","buildFormGroup","model","FormGroup","modelMetadata","ɵControlsMetadata","groupValidators","ɵValidators","groupAsyncValidators","ɵAsyncValidators","groupArgs","ɵArgs","properties","keys","formGroup","map","validator","filter","itm","propertyName","defaultValue","undefined","control","FormArray","controlOptions","Array","isArray","formArray","disable","addControl","buildFormModel","FormModelBuilder","build","injector","route","rt","component","AsRequiredTypePipe","_valueHash","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","key","currentValue","sort","keyValueA","keyValueB","a","b","aString","String","bString","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","resolvePromiseOr","Promise"],"sourceRoot":""}