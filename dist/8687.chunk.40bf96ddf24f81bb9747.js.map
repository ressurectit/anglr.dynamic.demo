{"version":3,"file":"8687.chunk.40bf96ddf24f81bb9747.js","mappings":"uSAiBIA,EAHcC,OAAOC,UAGQF,e,yHCX1B,MAAMG,EAA4B,e,EAAAC,G,EAA6D,mBAAY,WAAW,8EAA8CC,6BAA8B,E,+KAAA,kBAAhK,OAAAD,EAAAE,MAAA,KAAAC,UAAA,KCOlC,IAAMC,EAAN,MAAAC,WAAAA,GAsBI,KAAAC,QAAiC,CAqB5C,CAdWC,gBAAAA,CAAiBC,IAEjBC,EAAAA,EAAAA,IAAuB,WAAYD,IAElCE,KAAKJ,OFMjB,SAAiBK,GACf,GAAa,MAATA,EACF,OAAO,EAET,IAAIC,EAAAA,EAAAA,GAAYD,MACXE,EAAAA,EAAAA,GAAQF,IAA0B,iBAATA,GAA4C,mBAAhBA,EAAMG,SAC1DC,EAAAA,EAAAA,GAASJ,KAAUK,EAAAA,EAAAA,GAAaL,KAAUM,EAAAA,EAAAA,GAAYN,IAC1D,OAAQA,EAAMO,OAEhB,IAAIC,GAAMC,EAAAA,EAAAA,GAAOT,GACjB,GApDW,gBAoDPQ,GAnDO,gBAmDUA,EACnB,OAAQR,EAAMU,KAEhB,IAAIC,EAAAA,EAAAA,GAAYX,GACd,QAAQY,EAAAA,EAAAA,GAASZ,GAAOO,OAE1B,IAAK,IAAIM,KAAOb,EACd,GAAIf,EAAe6B,KAAKd,EAAOa,GAC7B,OAAO,EAGX,OAAO,CACT,CE5B0BE,CAAQhB,KAAKC,OAEnC,CAKOgB,iBAAAA,GAEP,IApBOC,EAAAA,EAAAA,IAAA,EADNC,EAAAA,EAAAA,MAAe,6DArBPzB,GAAcwB,EAAAA,EAAAA,IAAA,EAF1BE,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAwBhC,IACZK,GCXb,S","sources":["webpack://ng-universal-demo/../node_modules/lodash-es/isEmpty.js","webpack://ng-universal-demo/../basic-components/src/dynamicItems/empty/empty.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/empty/empty.relations.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/empty/type.ts"],"sourcesContent":["import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\n\n/**\n * Empty relations metadata loader\n */\nexport const EmptyRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/empty.relationsMetadata')).EmptyRelationsEditorMetadata();\n","import {SimpleChanges} from '@angular/core';\nimport {DynamicOutput, PureRelationsComponent, RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {nameof} from '@jscrpt/common';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport {EmptyRelationsMetadataLoader} from './empty.metadata';\n\n/**\n * Empty relations component\n */\n@PureRelationsComponent()\n@RelationsEditorMetadata(EmptyRelationsMetadataLoader)\nexport class EmptyRelations implements RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n    \n    /**\n     * Input value to be checked\n     */\n    public value: unknown;\n\n    //######################### public properties - dynamic outputs #########################\n\n    /**\n     * Indication whether input value is empty\n     */\n    @DynamicOutput()\n    public result: boolean|undefined|null = true;\n\n    //######################### public methods - implementation of RelationsComponent #########################\n    \n    /**\n     * @inheritdoc\n     */\n    public dynamicOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<EmptyRelations>('value') in changes)\n        {\n            this.result = isEmpty(this.value);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n    }\n}","import {EmptyRelations} from './empty.relations';\n\nexport default EmptyRelations;"],"names":["hasOwnProperty","Object","prototype","EmptyRelationsMetadataLoader","_ref","EmptyRelationsEditorMetadata","apply","arguments","EmptyRelations","constructor","result","dynamicOnChanges","changes","nameof","this","value","isArrayLike","isArray","splice","isBuffer","isTypedArray","isArguments","length","tag","getTag","size","isPrototype","baseKeys","key","call","isEmpty","invalidateVisuals","__decorate","DynamicOutput","PureRelationsComponent","RelationsEditorMetadata"],"sourceRoot":""}