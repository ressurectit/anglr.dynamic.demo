{"version":3,"file":"7961.chunk.a700be63e3785a328814.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.metadata.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/misc/pipes/containerMetadata/containerMetadata.pipe.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/placeholder.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/placeholder/type.ts","webpack://ng-universal-demo/../layout-relations/src/misc/extensions/placeholderData.extension.ts","webpack://ng-universal-demo/../layout-relations/src/services/placeholderHandler/placeholderHandler.service.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\n\n/**\n * Placeholder layout metadata loader\n */\nexport const PlaceholderLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<PlaceholderComponentOptions>> = async () => new (await import('./metadata/placeholder.layoutMetadata')).PlaceholderLayoutEditorMetadata();\n\n/**\n * Placeholder layout designer type loader\n */\nexport const PlaceholderLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/placeholderDesigner.component')).PlaceholderDesignerSAComponent;\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {PlaceholderHandler} from '../../../../../services';\n\n/**\n * Gets container metadata that are displayed in placeholder\n */\n@Pipe({name: 'containerMetadata', standalone: true,})\nexport class ContainerMetadataSAPipe<TOptions = unknown> implements PipeTransform\n{\n    //######################### constructor #########################\n    constructor(protected placeholderHandler: PlaceholderHandler<TOptions>,)\n    {\n    }\n\n    //######################### public methods - implementation of ContainerMetadataSAPipe #########################\n\n    /**\n     * Gets container metadata that are displayed in placeholder\n     * @param value - Id of container\n     */\n    public transform(value: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this.placeholderHandler.getOptions(value);\n    }\n}","<ng-container *layoutComponentRenderer=\"id | containerMetadata\"/>","import {Component, ChangeDetectionStrategy, inject, FactoryProvider} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PlaceholderComponentOptions} from './placeholder.options';\nimport {PlaceholderLayoutDesignerTypeLoader, PlaceholderLayoutMetadataLoader} from './placeholder.metadata';\nimport {ComponentWithId} from '../../interfaces';\nimport {PlaceholderHandler} from '../../services';\nimport {PlaceholderContainerComponentOptions} from '../placeholderContainer';\nimport {ContainerMetadataSAPipe} from './misc/pipes';\n\n/**\n * Component used for displaying placeholder\n */\n@Component(\n{\n    selector: 'placeholder',\n    templateUrl: 'placeholder.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n        ContainerMetadataSAPipe,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: RelationsComponentManager,\n            useFactory: () => inject(PlaceholderHandler).relationsComponentManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsManager,\n            useFactory: () => inject(PlaceholderHandler).relationsManager,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsProcessor,\n            useFactory: () => inject(PlaceholderHandler).relationsProcessor,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsChangeDetector,\n            useFactory: () => inject(PlaceholderHandler).relationsChangeDetector,\n        },\n        <FactoryProvider>\n        {\n            provide: RelationsDebugger,\n            useFactory: () => inject(PlaceholderHandler).relationsDebugger,\n        },\n        <FactoryProvider>\n        {\n            provide: PlaceholderHandler,\n            useFactory: () =>\n            {\n                return new PlaceholderHandler(PlaceholderSAComponent);\n            }\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(PlaceholderLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(PlaceholderLayoutMetadataLoader)\nexport class PlaceholderSAComponent extends LayoutComponentBase<PlaceholderComponentOptions> implements LayoutComponent<PlaceholderComponentOptions>, ComponentWithId\n{\n    //######################### protected properties #########################\n\n    /**\n     * Handler used for working with placeholder\n     */\n    protected placeholderHandler: PlaceholderHandler<PlaceholderContainerComponentOptions> = inject(PlaceholderHandler);\n\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    public id: string = '';\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public setId(id: string): void\n    {\n        this.id = id;\n    }\n}","import {IdSetterExtension} from '../../misc/extensions';\nimport {PlaceholderSAComponent} from './placeholder.component';\n\nexport default PlaceholderSAComponent;\n\nexport const extensions = [IdSetterExtension];","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Extension that sets id of component to instance of component\n */\nexport class IdSetterExtension extends DynamicItemExtensionBase<unknown, ComponentWithId> implements DynamicItemExtension<unknown, ComponentWithId>\n{\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        if(this.instance)\n        {\n            this.instance.setId(this.metadata.id);\n        }\n    }\n}","import {inject, Injector, Type} from '@angular/core';\nimport {LayoutComponentMetadata, LayoutRenderer} from '@anglr/dynamic/layout';\nimport {LayoutEditorRenderer} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsDebugger, RelationsManager, RelationsProcessor} from '@anglr/dynamic/relations';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport type {CustomComponentSAComponent} from '../../dynamicItems/customComponent/customComponent.component';\nimport {ComponentWithId} from '../../interfaces';\n\n/**\n * Service that handles storing, obtaining of placeholder configuration, also correct rendering of placeholder or placeholder container\n */\nexport class PlaceholderHandler<TOptions = unknown>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is this handler attached to placeholder or custom component\n     */\n    protected ɵisPlaceholder: boolean;\n\n    /**\n     * Indication whether is attached component in design mode\n     */\n    protected ɵdesignMode: boolean|undefined|null;\n\n    /**\n     * Id of attached component\n     */\n    protected ɵid: string|undefined|null;\n\n    /**\n     * Instance of parent placeholder handler\n     */\n    protected ɵparent: PlaceholderHandler<TOptions>|undefined|null = inject(PlaceholderHandler, {optional: true, skipSelf: true,});\n\n    /**\n     * Injector that is assigned with placeholder handler\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for logging\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Gets id of attached component\n     */\n    protected get id(): string\n    {\n        return (this.ɵid ??= this.injector.get(this.componentWithIdType).id);\n    }\n\n    /**\n     * Gets indication whether is this handler attached to custom component\n     */\n    protected get isCustomComponent(): boolean\n    {\n        return !this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets indication whether is this handler attached to placeholder\n     */\n    protected get isPlaceholder(): boolean\n    {\n        return this.ɵisPlaceholder;\n    }\n\n    /**\n     * Gets nearest handler for custom component\n     */\n    protected get nearestCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets nearest handler for custom component that is in design mode\n     */\n    protected get nearestDesignCustomComponent(): PlaceholderHandler|undefined|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler|undefined|null = this;\n\n        do\n        {\n            if(handler.isCustomComponent && handler.designMode)\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets instance of parent placeholder handler\n     */\n    public get parent(): PlaceholderHandler<TOptions>|undefined|null\n    {\n        return this.ɵparent;\n    }\n\n    /**\n     * Gets indication whether is attached component in design mode\n     */\n    public get designMode(): boolean\n    {\n        return (this.ɵdesignMode ??= this.ɵisPlaceholder ? \n            this.injector.get(LayoutRenderer) instanceof LayoutEditorRenderer :\n            this.injector.get(LayoutRenderer, null, {skipSelf: true}) instanceof LayoutEditorRenderer);\n    }\n\n    /**\n     * Gets indication whether display placeholder container or just placeholder\n     */\n    public get placeholderContainer(): boolean\n    {\n        return !(!this.parent || (this.parent.isPlaceholder && this.parent.designMode));\n    }\n\n    /**\n     * Gets layout renderer\n     */\n    public get layoutRenderer(): LayoutRenderer|null\n    {\n        //current renderer\n        let transform = this.injector.get(LayoutRenderer, null, {skipSelf: true});\n\n        if(!(transform instanceof LayoutEditorRenderer))\n        {\n            transform = null;\n        }\n\n        //current or parent layout renderer\n        const result = transform ??\n            this.findRelatedCustomComponentHandler()?.injector?.get(LayoutRenderer, null, {skipSelf: true}) ??\n            null;\n\n        return result;\n    }\n\n    /**\n     * Relations component manager instance that is used for placeholders\n     */\n    public get relationsComponentManager(): RelationsComponentManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsComponentManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations processor instance that is used for placeholders\n     */\n    public get relationsProcessor(): RelationsProcessor|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsProcessor, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations change detector instance that is used for placeholders\n     */\n    public get relationsChangeDetector(): RelationsChangeDetector|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsChangeDetector, undefined, {skipSelf: true}) ?? null;\n    }\n\n    /**\n     * Relations debugger instance that is used for placeholders\n     */\n    public get relationsDebugger(): RelationsDebugger|null\n    {\n        //TODO: fix this optional if needed\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsDebugger, undefined, {skipSelf: true, optional: true}) ?? null;\n    }\n\n    /**\n     * Relations manager instance that is used for placeholders\n     */\n    public get relationsManager(): RelationsManager|null\n    {\n        return this.getParentCustomComponentHandler()?.injector.get(RelationsManager, undefined, {skipSelf: true}) ?? null;\n    }\n\n    //######################### constructor #########################\n    constructor(protected componentWithIdType: Type<ComponentWithId>,\n                protected customComponent?: CustomComponentSAComponent,)\n    {\n        this.ɵisPlaceholder = !this.customComponent;\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Gets options for placeholder using its id\n     * @param id - Id of placeholder for which are options obtained\n     */\n    public getOptions(id: string): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        //is placeholder\n        if(this.isPlaceholder)\n        {\n            if(!this.parent)\n            {\n                return null;\n            }\n\n            return this.parent.getOptions(id);\n        }\n\n        if(this.isCustomComponent && this.customComponent?.options?.placeholderContainers?.[id])\n        {\n            return this.customComponent.options.placeholderContainers[id];\n        }\n\n        if(!this.parent)\n        {\n            return null;\n        }\n\n        return this.parent.getOptions(id);\n    }\n\n    /**\n     * Initialize options for placeholder container\n     */\n    public initOptions(): void\n    {\n        const custom = this.nearestDesignCustomComponent;\n\n        if(!custom?.designMode || !custom.customComponent)\n        {\n            this.logger.error('PlaceholderHandler: closes parent custom component should be in editation mode!');\n\n            return;\n        }\n\n        if(!custom.customComponent.options)\n        {\n            this.logger.error('PlaceholderHandler: missing custom component options!');\n\n            return;\n        }\n\n        //if options does not exists create new one\n        if(!custom.customComponent.options.placeholderContainers?.[this.id])\n        {\n            const containerId = `placeholderContainer-${custom.id}-${this.id}`;\n\n            custom.customComponent.options.placeholderContainers ??= {};\n            custom.customComponent.options.placeholderContainers[this.id] =\n            {\n                id: containerId,\n                name: 'placeholderContainer',\n                package: 'custom-components',\n                displayName: containerId,\n                options: {},\n            };\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Finds if there is any related handler with attached custom component\n     */\n    protected findRelatedCustomComponentHandler(): PlaceholderHandler|undefined|null\n    {\n        let placeholders = 0;\n        let customComponents = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler = this;\n\n        if(!handler.parent)\n        {\n            return null;\n        }\n\n        do\n        {\n            if(handler.parent.isCustomComponent && handler.parent.designMode)\n            {\n                if(placeholders == customComponents)\n                {\n                    return handler.parent;\n                }\n\n                return null;\n            }\n\n            if(handler.parent.isCustomComponent)\n            {\n                customComponents++;\n            }\n            else\n            {\n                placeholders++;\n            }\n        }\n        while((handler = handler.parent));\n\n        return null;\n    }\n\n    /**\n     * Gets handler, which is attached to custom component which owns this placeholder container\n     */\n    protected getParentCustomComponentHandler(): PlaceholderHandler<TOptions>|null\n    {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let handler: PlaceholderHandler<TOptions> = this;\n\n        if(!handler.parent)\n        {\n            throw new Error('PlaceholderHandler: parent must be present to work with relations!');\n        }\n\n        do\n        {\n            //skip placeholder\n            if(handler.isPlaceholder)\n            {\n                continue;\n            }\n\n            if(handler.customComponent?.options?.placeholderContainers?.[this.id])\n            {\n                return handler;\n            }\n        }\n        while((handler = handler.parent));\n\n        this.logger.error('PlaceholderHandler: unable to find owning custom component for {{@id}}', {id: this.id});\n\n        return null;\n    }\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["LayoutEditorDesignerType","metadataLoader","DynamicClassMetadata","LayoutEditorMetadata","PlaceholderLayoutMetadataLoader","_ref","_asyncToGenerator","PlaceholderLayoutEditorMetadata","apply","arguments","PlaceholderLayoutDesignerTypeLoader","_ref2","PlaceholderDesignerSAComponent","ContainerMetadataSAPipe","constructor","placeholderHandler","transform","value","this","getOptions","i0","i1","pure","standalone","PlaceholderSAComponent","LayoutComponentBase","inject","PlaceholderHandler","id","setId","t","selectors","features","provide","RelationsComponentManager","useFactory","relationsComponentManager","RelationsManager","relationsManager","RelationsProcessor","relationsProcessor","RelationsChangeDetector","relationsChangeDetector","RelationsDebugger","relationsDebugger","decls","vars","consts","template","rf","ctx","PlaceholderSAComponent_ng_container_0_Template","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","extensions","IdSetterExtension","DynamicItemExtensionBase","onInit","_this","instance","metadata","ɵid","injector","get","componentWithIdType","isCustomComponent","ɵisPlaceholder","isPlaceholder","nearestCustomComponent","handler","parent","nearestDesignCustomComponent","designMode","ɵparent","ɵdesignMode","LayoutRenderer","LayoutEditorRenderer","skipSelf","placeholderContainer","layoutRenderer","findRelatedCustomComponentHandler","getParentCustomComponentHandler","undefined","optional","customComponent","Injector","logger","LOGGER","options","placeholderContainers","initOptions","custom","containerId","_a","name","package","displayName","error","placeholders","customComponents","Error","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","optionsSafe","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onOptionsSet","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","generateId","viewContainer","ViewContainerRef","renderer","parentRendererDirective","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","useValue","initialized"],"sourceRoot":""}