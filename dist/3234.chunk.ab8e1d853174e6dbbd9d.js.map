{"version":3,"file":"3234.chunk.ab8e1d853174e6dbbd9d.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/ifBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/ifBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/extensions/relationsRegistration/relationsRegistration.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {RelationsEditorMetadataDescriptor} from '@anglr/dynamic/relations-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\n\n/**\n * If block layout metadata loader\n */\nexport const IfBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<IfBlockComponentOptions>> = async () => new (await import('./metadata/ifBlock.layoutMetadata')).IfBlockLayoutEditorMetadata();\n\n/**\n * If block relations metadata loader\n */\nexport const IfBlockRelationsMetadataLoader: DynamicMetadataLoader<RelationsEditorMetadataDescriptor> = async () => new (await import('./metadata/ifBlock.relationsMetadata')).IfBlockRelationsEditorMetadata();\n\n/**\n * If block layout designer type loader\n */\nexport const IfBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/ifBlockDesigner.component')).IfBlockDesignerSAComponent;\n","<ng-container *ngIf=\"condition\">\n    <ng-template [layoutComponentRenderer]=\"options?.content\"></ng-template>\n</ng-container>","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsComponent} from '@anglr/dynamic/relations';\nimport {RelationsEditorMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {IfBlockComponentOptions} from './ifBlock.options';\nimport {IfBlockLayoutDesignerTypeLoader, IfBlockLayoutMetadataLoader, IfBlockRelationsMetadataLoader} from './ifBlock.metadata';\n\n/**\n * Component used for displaying if block\n */\n@Component(\n{\n    selector: 'if-block',\n    templateUrl: 'ifBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        LayoutComponentRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(IfBlockLayoutDesignerTypeLoader)\n@RelationsEditorMetadata(IfBlockRelationsMetadataLoader)\n@LayoutEditorMetadata(IfBlockLayoutMetadataLoader)\nexport class IfBlockSAComponent extends LayoutComponentBase<IfBlockComponentOptions> implements LayoutComponent<IfBlockComponentOptions>, RelationsComponent\n{\n    //######################### public properties - implementation of RelationsComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public relationsOptions: any;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Condition used for displaying content of if block\n     */\n    @Input()\n    public condition: boolean = true;\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onOptionsSet(): void\n    {\n        this.condition = this.options?.condition ?? false;\n    }\n}","import {RelationsRegistrationExtension} from '@anglr/dynamic/relations';\n\nimport {IfBlockSAComponent} from './ifBlock.component';\n\nexport default IfBlockSAComponent;\n\nexport const extensions = [RelationsRegistrationExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Inject, Injector, OnDestroy, Optional, SimpleChanges} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected _extensions: DynamicItemExtension<TOptions>[] = [];\n\n    /**\n     * Indication whether initialization was already done\n     */\n    protected _initialized: boolean = false;\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this._element;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>,\n                protected _injector: Injector,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this._extensions)\n        {\n            ext.destroy();\n        }\n\n        this._onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this._onInit();\n        await this._onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this._extensions)\n            {\n                await extension.initialize(this._injector, this.element, this);\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            await this._onOptionsSet();\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this._extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(!this._initialized)\n            {\n                return;\n            }\n\n            await this._onOptionsChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this._extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and later\n     */\n    protected _onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this._componentRef)\n        {\n            return null;\n        }\n\n        return this._componentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this._componentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected _loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected _childExtensions?: DynamicItemExtensionType[]|null,\n                @Optional() protected _options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected _metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n        if(!this._options || !(this._options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this._options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this._logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this._viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n\n            if(this._metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this._metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this._loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this._logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this._options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this._viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this._componentRef = this._viewContainerRef.createComponent(layoutComponentType.data,\n                                                                        {\n                                                                            injector: usedInjector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            this._logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this._childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this._logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this._logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this._logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this._componentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this._componentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this._componentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemExtensionType, DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider, MetadataStorage} from '@anglr/dynamic';\n\nimport {LayoutComponentTransform} from '../interfaces';\nimport {LayoutComponentDef} from './types';\n\n/**\n * Injection token for layout component metadata transformation function\n */\nexport const LAYOUT_COMPONENT_TRANSFORM: InjectionToken<LayoutComponentTransform> = new InjectionToken<LayoutComponentTransform>('LAYOUT_COMPONENT_TRANSFORM');\n\n/**\n * Injection token for layout component child extension types\n */\nexport const LAYOUT_COMPONENT_CHILD_EXTENSIONS: InjectionToken<DynamicItemExtensionType[]> = new InjectionToken<DynamicItemExtensionType[]>('LAYOUT_COMPONENT_CHILD_EXTENSIONS');\n\n/**\n * Injection token for layout components module data extractors\n */\nexport const LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS');\n\n/**\n * Injection token for layout components module providers\n */\nexport const LAYOUT_COMPONENTS_MODULE_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('LAYOUT_COMPONENTS_MODULE_PROVIDERS');\n\n/**\n * Injection token for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER: InjectionToken<DynamicItemLoader<LayoutComponentDef>> = new InjectionToken<DynamicItemLoader<LayoutComponentDef>>('LAYOUT_COMPONENTS_LOADER');\n\n/**\n * Injection token for metadata storage set up for layout\n */\nexport const LAYOUT_METADATA_STORAGE: InjectionToken<MetadataStorage> = new InjectionToken<MetadataStorage>('LAYOUT_METADATA_STORAGE');\n","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\n\nimport {RelationsComponent} from '../../interfaces';\nimport {RelationsComponentManager, RelationsProcessor} from '../../services';\n\n/**\n * Extension that allows registration of component for relations\n */\nexport class RelationsRegistrationExtension extends DynamicItemExtensionBase<unknown, RelationsComponent> implements DynamicItemExtension<unknown, RelationsComponent>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of relations processor\n     */\n    protected relationsProcessor: RelationsProcessor|null = null;\n\n    /**\n     * Instance of component manager\n     */\n    protected componentManager: RelationsComponentManager|null = null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async _onInit(): Promise<void>\n    {\n        if(!this._injector || !this._metadata || !this._instance)\n        {\n            return;\n        }\n\n        this.relationsProcessor ??= this._injector.get(RelationsProcessor, null);\n        this.componentManager ??= this._injector.get(RelationsComponentManager, null);\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.componentManager.registerComponent(this._metadata.id, this._instance);\n        await this.relationsProcessor.initialized;\n        this.relationsProcessor.updateRelations(this._metadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _onDestroy(): void\n    {\n        if(!this._injector || !this._metadata)\n        {\n            return;\n        }\n\n        if(!this.relationsProcessor || !this.componentManager)\n        {\n            return;\n        }\n\n        this.relationsProcessor.destroyComponent(this._metadata.id);\n        this.componentManager.unregisterComponent(this._metadata.id);\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected _injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected _element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected _options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected _instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected _metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this._initialized = true;\n\n        this._injector = injector;\n        this._element = element;\n        this._instance = instance;\n\n        await this._onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this._options = options;\n\n        if(!this._initialized)\n        {\n            return;\n        }\n\n        await this._onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this._onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected _onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected _onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected _onDestroy(): void\n    {\n    }\n}","import {Provider, SimpleChange, SimpleChanges, ValueProvider} from '@angular/core';\nimport {NEVER} from 'rxjs';\n\nimport {PackageSource} from '../interfaces';\nimport {PACKAGE_SOURCES} from './tokens';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}\n\n/**\n * Gets provider for static package source\n * @param packageName - Name of package for which will be provider created\n */\nexport function provideStaticPackageSource(packageName: string): Provider\n{\n    return <ValueProvider>\n    {\n        provide: PACKAGE_SOURCES,\n        useValue: <PackageSource>\n        {\n            packages: [packageName],\n            packagesChange: NEVER,\n            refresh()\n            {\n            }\n        },\n        multi: true,\n    };\n}"],"names":["IfBlockLayoutMetadataLoader","IfBlockLayoutEditorMetadata","IfBlockRelationsMetadataLoader","IfBlockRelationsEditorMetadata","IfBlockLayoutDesignerTypeLoader","IfBlockDesignerSAComponent","i0","IfBlockSAComponent","LayoutComponentBase","condition","_onOptionsSet","this","options","t","selectors","inputs","standalone","features","decls","vars","consts","template","CommonModule","i1","LayoutComponentRendererSADirective","styles","changeDetection","LayoutEditorDesignerType","RelationsEditorMetadata","LayoutEditorMetadata","extensions","RelationsRegistrationExtension","metadataLoader","DynamicClassMetadata","constructor","_changeDetector","_element","_injector","_logger","_extensions","_initialized","destroyed","element","extensionsOptions","ngOnDestroy","ext","destroy","_onDestroy","ngOnInit","_onInit","extension","initialize","ngOnChanges","changes","nameof","optionsChange","_onOptionsChange","registerExtensions","invalidateVisuals","detectChanges","LOGGER","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","_viewContainerRef","_loader","_childExtensions","_options","_metadataTransformer","_componentRef","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","instance","componentRef","debug","id","clear","injector","customInjector","layoutComponentType","loadItem","warn","name","package","createComponent","Ignore","ThrowError","Error","usedInjector","Injector","parent","providers","provide","LAYOUT_COMPONENT_CHILD_EXTENSIONS","useValue","childExtensions","data","map","itm","addSimpleChange","changeDetectorRef","markForCheck","next","hostView","rootNodes","designer","LAYOUT_COMPONENTS_LOADER","LAYOUT_COMPONENT_TRANSFORM","outputs","exportAs","InjectionToken","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","LAYOUT_COMPONENTS_MODULE_PROVIDERS","LAYOUT_METADATA_STORAGE","DynamicItemExtensionBase","relationsProcessor","componentManager","_metadata","_instance","get","RelationsProcessor","RelationsComponentManager","registerComponent","initialized","updateRelations","destroyComponent","unregisterComponent","key","currentValue","previousValue","firstChange","isFirstChange","provideStaticPackageSource","packageName","PACKAGE_SOURCES","packages","packagesChange","NEVER","refresh","multi","Observable","noop"],"sourceRoot":""}