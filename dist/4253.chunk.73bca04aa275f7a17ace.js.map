{"version":3,"file":"4253.chunk.73bca04aa275f7a17ace.js","mappings":"6kBAkDO,IAAMA,EAAN,MAMH,iBAAcC,GAEV,MAAO,CACHC,GAAI,eAAcC,EAAAA,EAAAA,IAAW,MAC7BC,YAAa,OACbC,QAAS,mBACTC,KAAM,aACNC,QACA,CACIC,SAAU,IAGtB,CAGAC,WAAAA,CAAsBC,EACgCC,GADhC,KAAAD,OAAAA,EACgC,KAAAC,QAAAA,EAlB5C,KAAAC,UAA0C,IAoBpD,CAKUC,YAAAA,CAAaC,GAEnB,MAAO,CACHC,OAAQD,EAEhB,G,iCAlCSd,GAAmBgB,EAAAA,EAAAC,EAAAA,GAAAD,EAAAA,EAsBRE,EAAAA,IAAsB,E,kBAtBjClB,EAAmBmB,UAAA,8BAAAC,SAAA,CAAAJ,EAAAA,EAzB5B,CACIK,EAAAA,EAEA,CACIC,QAASC,EAAAA,GACTC,WAAaC,GAAqD,IAAIC,EAAAA,GAAyCxB,GAAMuB,EAAME,QAAQzB,IAAKa,SACxIa,KAAM,CAACC,EAAAA,KAEXC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MAEA,CACId,QAASe,EAAAA,EACTC,SAAUC,EAAAA,MAEjBC,MAAA,EAAAC,KAAA,EAAAC,OAAA,+QAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IC7CL5B,EAAAA,GAAA,UAAAA,CAAsB,aAAtBA,CAAsB,UAERA,EAAAA,EAAA,aAAOA,EAAAA,IAAAA,GAGjBA,EAAAA,GAAA,qBAA6GA,EAAAA,EAAC,kBAAD,SAAA8B,GAAA,IAAAC,EAAA,OAAAF,EAAAjC,UAAA,QAAAmC,EAAA,MAAAD,EAAA,KAAAA,EAAA/B,cAAAiC,IAAAD,EAAAA,EAAAF,EAAA5C,aAAA,IAA2Fe,EAAAA,KAExMA,EAAAA,GAAA,iBAAAA,CAAoC,WAAqCA,EAAAA,EAAA,cAAQA,EAAAA,IAAAA,KAGrFA,EAAAA,GAAA,sB,MALmBA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,QAAA6B,EAAAnC,OAAAM,CAAgB,sBAAA6B,EAAAhC,aAAhBG,CAAgB,UAAA6B,EAAAlC,SAEnBK,EAAAA,EAAA,GAAAA,EAAAA,EAAA,YAAA6B,EAAAjC,WAGcI,EAAAA,EAAA,GAAAA,EAAAA,EAAA,WAAA6B,EAAAjC,W,0EDqEhBqC,EAAAA,EAAAA,IAAA,CADTC,EAAAA,IAAQ,8IA5BAlD,GAAmBiD,EAAAA,EAAAA,IAAA,EAF/BE,EAAAA,EAAAA,GAAe,CAACC,KAAM,YACtBD,EAAAA,EAAAA,GAAe,CAACC,KAAM,gBAAc,6BAsBHvB,EAAAA,EACiCwB,EAAAA,KAtBtDrD,G,szBEzCP,MAAOsD,GAIT7C,WAAAA,CAAoB8C,GAAA,KAAAA,cAAAA,CACnB,CASYC,KAAAA,CAAMC,GAAuC,I,EAAAC,EAAA,Y,EAAA,YAEtD,MAAMC,EAAY,IAAIC,EAAAA,GAAU,CAAC,GACjC,IAAIC,EAA8BF,EAAU,IAAAG,EAAAC,GAAA,EAAAC,GAAA,MAC5C,QAAkFC,EAAlFC,E,sRAAAC,CAAiCT,EAAKH,cAAca,eAAeX,IAAeM,IAAAE,QAAAC,EAAAG,QAAAC,KAAAP,GAAA,EAClF,OADiBQ,EAAYN,EAAAO,MAAA,CAEzB,MAAMC,EAAcf,EAAKgB,gBAAgBH,EAAazD,UACtD,GAAI2D,EACJ,CACI,MAAME,EAAUjB,EAAKkB,uBAAuBL,EAAazD,UACzD4C,EAAKmB,gBAAgBN,EAAaO,OAAQjB,GAAakB,WAAWN,EAAaE,GAE3EA,aAAmBf,EAAAA,KAEnBC,EAAcc,E,CAErB,C,CACJ,OAAAK,GAAAhB,GAAA,EAAAF,EAAAkB,CAAA,aAAAjB,GAAA,MAAAG,EAAAe,eAAAf,EAAAe,SAAA,YAAAjB,EAAA,MAAAF,CAAA,EACD,OAAOH,CAAU,E,kLACrB,CAUQkB,eAAAA,CAAgBK,EAA6DC,GAGjF,IAAKA,EAAML,SACNI,EAED,OAAOC,EAGX,MAAMC,EAAoBC,KAAKX,gBAAgBQ,EAAepE,UAG9D,OAAIsE,EAGID,EAAML,OAAOQ,IAAIF,GAEVD,EAKAE,KAAKR,gBAAgBK,EAAgBC,EAAML,QAGhDI,EAAeJ,OAMlBO,KAAKR,gBAAgBK,EAAeJ,OAAQK,GAJxCE,KAAKR,gBAAgBK,EAAeJ,OAAQK,EAAMI,KAKjE,CAOQb,eAAAA,CAAgB5D,GAEpB,OAAKA,EAKyBA,EAASP,SAAUkE,YAHtC,IAIf,CAOQG,sBAAAA,CAAuB9D,GAE3B,OAA+BA,GAAUP,SAAUiF,aAE/C,KAAKC,EAAAA,EAAyBC,UAC1B,OAAO,IAAIA,EAAAA,GAAU,IACzB,KAAKD,EAAAA,EAAyB7B,UAC1B,OAAO,IAAIA,EAAAA,GAAU,CAAC,GAC1B,QACI,OAAO,IAAI+B,EAAAA,GAEvB,E,kCA5GSrC,IAA2BtC,EAAAA,GAAAC,EAAAA,GAAA,E,qBAA3BqC,GAA2BsC,QAA3BtC,GAA2BuC,O,kZCJhC7E,EAAAA,GAAA,iB,yBAA+CA,EAAAA,EAAA,QAAA8E,EAAA9E,CAAa,OAAA8E,E,wBASxD9E,GAAAA,GAAA,E,yCAHZA,EAAAA,GAAA,YAA+BA,EAAAA,EAAC,YAAD,WAAAA,GAAAA,GAAA+E,GAAA,MAAAC,EAAAhF,GAAAA,IAAA,OAAYA,GAAAA,GAAAgF,EAAAC,UAAS,IAChDjF,EAAAA,GAAA,UAAAA,CAA4C,YAEpCA,GAAAA,EAAA,EAAAkF,GAAA,uBACJlF,EAAAA,IAAAA,GAGJA,EAAAA,GAAA,eAAsBA,EAAAA,EAAA,YAAMA,EAAAA,IAAAA,E,wBAP1BA,EAAAA,EAAA,YAAAmF,EAAAC,YAGqBpF,EAAAA,EAAA,GAAAA,EAAAA,EAAA,0BAAAmF,EAAAvF,UAAAI,CAAoC,kCAAAmF,EAAAE,c,2FCuBxD,IAAMC,GAAN,MAiBH7F,WAAAA,CAAoB8F,EACA7F,EACA8F,EACAC,EACAC,EACAC,EACAC,GANA,KAAAL,kBAAAA,EACA,KAAA7F,OAAAA,EACA,KAAA8F,QAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,UAAAA,EACA,KAAAC,6BAAAA,EACA,KAAAC,gBAAAA,EAnBV,KAAAC,iBAAiD,KAIjD,KAAAC,WAA0B,IAAInB,EAAAA,GAAY,IAE1C,KAAA/E,UAAqC,KAIrC,KAAAmG,gBAA4B,EAWtC,CAOOC,QAAAA,GAAQ,IAAAtD,EAAA,KAEX2B,KAAK0B,gBAAkB1B,KAAK3E,OAAOuG,YAEnC5B,KAAKoB,OAAOS,OAAOC,UAAS,e,EAAAC,G,EAAC,WAAO,GAAClH,IAEjC,GAAGA,EACH,CACIwD,EAAKoD,WAAWO,SAASnH,GACzB,MAAMoH,EAAO5D,EAAKmD,iBAAmBnD,EAAKhD,OAAOiB,QAAQzB,GACzDwD,EAAK9C,UAAY0G,GAAMvG,OACvB2C,EAAK6C,kBAAkBgB,aAAaD,EAAKE,WAAa,IAEtD9D,EAAK0C,iBAAmB1C,EAAKiD,6BAA6BnD,MAAME,EAAK9C,WACrE8C,EAAK2C,cAAgBoB,EAAAA,EAASC,OAC1B,CACI5C,OAAQpB,EAAKgD,UACbiB,UACA,CAEI,CACIrG,QAASsG,EAAAA,EACTC,SAAUnE,EAAK0C,eAK/B1C,EAAKkD,gBAAgBkB,e,MAIrBpE,EAAKmD,iBAAmB,KACxBnD,EAAK6C,kBAAkBgB,aAAa,IAGxC7D,EAAKoD,WAAWiB,aAAaZ,WAAUa,IAEnCtE,EAAK8C,QAAQyB,SAAS,CAAC,uBAAwB,eAAgBD,GAAM,CAACE,oBAAoB,EAAOC,YAAY,GAAM,GAE3H,E,iLAAC,gBAAAC,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAA,EAnC2B,GAoChC,CAOOC,WAAAA,GAEP,CAOUtC,OAAAA,GAENuC,QAAQC,IAAIpD,KAAKe,WAAW5B,MAChC,GCzGE,IAAuDkE,GAAqBC,G,kCDcrErC,IAAoBtF,EAAAA,EAAAC,GAAAA,GAAAD,EAAAA,EAAA4H,EAAAA,GAAA5H,EAAAA,EAAA6H,EAAAA,IAAA7H,EAAAA,EAAA6H,EAAAA,IAAA7H,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAA8H,IAAA9H,EAAAA,EAAAA,EAAAA,GAAA,E,mBAApBsF,GAAoBnF,UAAA,wBAAAC,SAAA,CAAAJ,EAAAA,EAd7B,CACIsC,GACAyF,EAAAA,EACAC,GAAAA,GACAC,EAAAA,GAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,SACH5G,MAAA,GAAAC,KAAA,GAAAC,OAAA,sbAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ID/BL5B,EAAAA,GAAA,UAAAA,CAAsB,SACkFA,EAAAA,EAAA,YAAMA,EAAAA,KAC1GA,EAAAA,GAAA,SAAuGA,EAAAA,EAAA,eAASA,EAAAA,KAEhHA,EAAAA,GAAA,iBACIA,GAAAA,EAAA,EAAAqI,GAAA,mBACJrI,EAAAA,KAEAA,EAAAA,GAAA,iBAAAA,CAA2C,WAAqCA,EAAAA,EAAA,GAAoBA,EAAAA,IAAAA,KAGxGA,GAAAA,EAAA,GAAAsI,GAAA,e,MAVuCtI,EAAAA,EAAA,GAAAA,EAAAA,EAAA,aAAAA,GAAAA,GAAA,EAAAuI,GAAA1G,EAAAiE,WAAAtC,QACAxD,EAAAA,EAAA,GAAAA,EAAAA,EAAA,aAAAA,GAAAA,GAAA,EAAAwI,GAAA3G,EAAAiE,WAAAtC,QAExBxD,EAAAA,EAAA,GAAAA,EAAAA,EAAA,cAAA6B,EAAAiE,YACoB9F,EAAAA,EAAA,GAAAA,EAAAA,EAAA,UAAA6B,EAAAkE,iBAGnB/F,EAAAA,EAAA,GAAAA,EAAAA,EAAA,YAAA6B,EAAAgE,kBAAoE7F,EAAAA,EAAA,GAAAA,GAAAA,GAAA6B,EAAAiE,WAAAtC,OAG7BxD,EAAAA,EAAA,GAAAA,EAAAA,EAAA,OAAA6B,EAAAuD,Y,4HC0B1CE,IAAoBrD,EAAAA,EAAAA,IAAA,EAHT,GCXqCyF,GDWjC,eCTjB,SAAuCe,GAE1C,MAAMC,EAAwDD,EAE9D,IAAGE,EAAAA,EAAAA,IAAQD,EAAwBE,eAAgBD,EAAAA,EAAAA,IAAQjB,IAIvD,OAFAF,QAAQqB,KAAK,wGAENJ,EAGX,IAAGE,EAAAA,EAAAA,IAAQjB,MAAeoB,EAAAA,EAAAA,IAAUJ,EAAwBE,cAAgBF,EAAwBE,YAAYG,OAAS,EAIrH,OAFAvB,QAAQqB,KAAK,2DAENJ,EAGX,MAAMO,EAAwEP,EA+B9E,OA7BGE,EAAAA,EAAAA,IAAQK,EAAgCC,sBAEvCC,OAAOC,eAAeV,EACA,sBACA,CACIW,YAAY,EACZC,cAAc,EACdC,UAAU,EACV9F,MAAO,MAIlCmF,EAAAA,EAAAA,IAAQhB,MAEPA,IAAgB,IAGjBgB,EAAAA,EAAAA,IAAQjB,MAEPA,GAAagB,EAAwBE,YAAY,GAAGxG,MAGxD4G,EAAgCC,oBAAoBM,KACpD,CACInH,KDnCY,GCoCZsF,WAAYA,GACZ8B,UAAW7B,GAAgB,OAAS,WAGjCc,CACX,IDxCHtG,EAAAA,EAAAA,GAAe,CAACC,KAAM,kBACtBD,EAAAA,EAAAA,GAAe,CAACC,KAAM,sBAAoB,6BAkBAqH,GAAAA,EACX5I,EAAAA,EACC6I,EAAAA,GACDC,EAAAA,GACGlD,EAAAA,EACmBnE,GACbsH,EAAAA,KAvB5BtE,I,4EEeN,IAAMuE,GAAN,MAMH,iBAAc5K,GAEV,MAAO,EACX,CAGAQ,WAAAA,CAAsBC,EACmCC,EACnCmK,GAFA,KAAApK,OAAAA,EACmC,KAAAC,QAAAA,EACnC,KAAAmK,eAAAA,EAVZ,KAAAlK,UAAqC,EAY/C,CAKUC,YAAAA,CAAaC,GAEnB,MAAO,CACH0G,UAAW1G,EAEnB,CAEUiK,SAAAA,GAEN1F,KAAKzE,UAAYoK,GAAAA,EAASC,6BAC9B,CAEUC,aAAAA,GAEN7F,KAAKzE,UAAYoK,GAAAA,EAASG,wBAC9B,CAEUC,aAAAA,GAEN/F,KAAKzE,UAAYoK,GAAAA,EAASK,wBAC9B,CAEUC,WAAAA,CAAYxK,GAElBuE,KAAKzE,UAAYE,GAAU0G,WAAanC,KAAKpF,cAC7CoF,KAAKyF,eAAeS,UAAUzK,GAAUC,OAC5C,G,kCA/CS8J,IAAsB7J,EAAAA,EAAAC,EAAAA,GAAAD,EAAAA,EAaXwK,GAAAA,IAAyBxK,EAAAA,EAAA4H,GAAAA,GAAA,E,mBAbpCiC,GAAsB1J,UAAA,iCAAAC,SAAA,CAAAJ,EAAAA,EAzB/B,CACIK,EAAAA,EAEA,CACIC,QAASmK,GAAAA,GACTjK,WAAaC,GAAqD,IAAIC,EAAAA,GAAyCxB,GAAMuB,EAAME,QAAQzB,IAAKsH,YACxI5F,KAAM,CAACC,EAAAA,KAEX6J,EAAAA,GAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MAEA,CACI1K,QAASe,EAAAA,EACTC,SAAU2J,GAAAA,MAEjBzJ,MAAA,EAAAC,KAAA,EAAAC,OAAA,qPAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IC/CL5B,EAAAA,GAAA,UAAAA,CAAsB,aAAtBA,CAAsB,UAERA,EAAAA,EAAA,aAAOA,EAAAA,IAAAA,GAGjBA,EAAAA,GAAA,qBAAyIA,EAAAA,EAAC,kBAAD,SAAA8B,GAAA,OAAkBD,EAAAyI,YAAAxI,EAAmB,IAAsB9B,EAAAA,IAAAA,GAGxMA,EAAAA,GAAA,yB,MAHmBA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,QAAA6B,EAAAnC,OAAAM,CAAgB,sBAAA6B,EAAAhC,aAAhBG,CAAgB,oBAAhBA,CAAgB,UAAA6B,EAAAlC,SAGFK,EAAAA,EAAA,GAAAA,EAAAA,EAAA,WAAA6B,EAAAjC,W,mEDiEnBqC,EAAAA,EAAAA,IAAA,CADTC,EAAAA,IAAQ,8IApBA2H,IAAsB5H,EAAAA,EAAAA,IAAA,EAFlCE,EAAAA,EAAAA,GAAe,CAACC,KAAM,eACtBD,EAAAA,EAAAA,GAAe,CAACC,KAAM,mBAAiB,6BAaNvB,EAAAA,EACoCwB,EAAAA,EAC5B6I,GAAAA,KAd7BrB,IEhDN,MAAMsB,GACb,CACI7F,GACAtG,EACA6K,I,4BC0CG,IAAMuB,GAAN,Q,kCAAMA,GAAyB,E,mBAAzBA,K,wBAXT,CAEI,CACI9K,QAASC,EAAAA,GACTC,WAAaC,GAAqD,IAAIC,EAAAA,GAAyCxB,GAAMuB,EAAME,QAAQzB,KACnI0B,KAAM,CAACC,EAAAA,KAEXwK,EAAAA,GAAAA,GAA8B,+BACjCC,QAAA,CAvBGC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EAEAC,EAAAA,GAEAC,EAAAA,EACAC,EAAAA,EACAC,GAAAA,MAkBKT,IAAyBnJ,EAAAA,EAAAA,IAAA,EADrC6J,EAAAA,EAAAA,GAAaX,KACDC,G,mCC5CN,MAAMxE,EAA2D,I,SAAImF,GAAgC,yB","sources":["webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/layout/layout.component.html","webpack://ng-universal-demo/../form/src/services/formComponentControlBuilder/formComponentControlBuilder.service.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/preview/preview.component.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRedirectRoute.decorator.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsLayoutForm/relationsLayoutForm.module.ts","webpack://ng-universal-demo/../form/src/misc/tokens.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {LayoutComponentMetadata, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {LAYOUT_HISTORY_MANAGER, provideLayoutEditor} from '@anglr/dynamic/layout-editor';\nimport {provideBasicLayoutEditor, StackPanelComponentOptions} from '@anglr/dynamic/basic-components';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {provideCssLayoutEditor} from '@anglr/dynamic/css-components';\nimport {provideTinyMceLayoutEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideFormLayoutEditor} from '@anglr/dynamic/form';\nimport {provideMaterialLayoutEditor} from '@anglr/dynamic/material-components';\nimport {BindThis, generateId} from '@jscrpt/common';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoLayoutPackageManager} from '../../../services/demoLayoutPackageManager/demoLayoutPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-layout-editor-view',\n    templateUrl: 'layout.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)?.layout),\n            deps: [StoreDataService]\n        },\n        provideLayoutEditor(),\n        provideBasicLayoutEditor(),\n        provideMaterialLayoutEditor(),\n        provideFormLayoutEditor(),\n        provideCssLayoutEditor(),\n        provideTinyMceLayoutEditor(),\n        provideHandlebarsLayoutEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoLayoutPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'layout'})\n@ComponentRoute({path: 'layout/:id'})\nexport class FormLayoutComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: LayoutComponentMetadata|null = null;\n\n    protected get emptyMetadata(): LayoutComponentMetadata\n    {\n        return {\n            id: `stackPanel-${generateId(10)}`,\n            displayName: 'root',\n            package: 'basic-components',\n            name: 'stackPanel',\n            options: <StackPanelComponentOptions>\n            {\n                children: [],\n            },\n        };\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: LayoutComponentMetadata): LayoutRelationsMetadata\n    {\n        return {\n            layout: metadata\n        };\n    }\n}\n","<div class=\"flex-row\">\r\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\r\n        <span>go back</span>\r\n    </button>\r\n\r\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" routePath=\"/relationsLayoutForm/layout\" (metadataChange)=\"_metadata = ($any($event?.layout) ?? emptyMetadata)\" [history]=\"history\"></load-save-new>\r\n\r\n    <debug-data [copyClick]=\"_metadata\"><div class=\"margin-horizontal-small\">metadata</div></debug-data>\r\n</div>\r\n\r\n<layout-editor class=\"flex-1\" [metadata]=\"_metadata\"></layout-editor>","import {Injectable} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from '@angular/forms';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorItem, LayoutComponentsIteratorService} from '@anglr/dynamic/layout-editor';\n\nimport {FormComponentOptions} from '../../misc/formComponentBase.options';\nimport {FormComponentControlType} from '../../misc/enums';\n\n@Injectable()\nexport class FormComponentControlBuilder\n{\n    //######################### constructor #########################\n\n    constructor(private _iteratorsSvc: LayoutComponentsIteratorService)\n    {}\n\n    //######################### public methods #########################\n\n    /**\n     * Build form group from layout metadata\n     * @param layoutMetadata \n     * @returns \n     */\n    public async build(layoutMetadata: LayoutComponentMetadata): Promise<FormGroup>\n    {\n        const formGroup = new FormGroup({});\n        let activeGroup: FormGroup|null = formGroup;\n        for await (const iteratorItem of this._iteratorsSvc.getIteratorFor(layoutMetadata))\n        {\n            const controlName = this._getControlName(iteratorItem.metadata);\n            if (controlName)\n            {\n                const control = this._getControlForMetadata(iteratorItem.metadata);\n                this._getActiveGroup(iteratorItem.parent, activeGroup).addControl(controlName, control);\n\n                if (control instanceof FormGroup)\n                {\n                    activeGroup = control;\n                }\n            }\n        }\n        return formGroup;\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Get active form group for specific layout component\n     * @param parentIterator parent layout component iterator item\n     * @param group active form group\n     * @returns \n     */\n    private _getActiveGroup(parentIterator: LayoutComponentsIteratorItem|null|undefined, group: FormGroup): FormGroup\n    {\n        //Already on root FormGroup\n        if (!group.parent ||\n            !parentIterator)\n        {\n            return group;\n        }\n\n        const parentControlName = this._getControlName(parentIterator.metadata);\n\n        //Parent component is of Form Component control type\n        if (parentControlName)\n        {\n            //Current group is parent component\n            if (group.parent.get(parentControlName))\n            {\n                return group;\n            }\n            //We have to find parent form group\n            else\n            {\n                return this._getActiveGroup(parentIterator, group.parent as FormGroup);\n            }\n        } \n        else if (!parentIterator.parent)\n        {\n            return this._getActiveGroup(parentIterator.parent, group.root as FormGroup);\n        }\n\n        //Parent component is not of Form Component control type\n        return this._getActiveGroup(parentIterator.parent, group);\n    }\n\n    /**\n     * Gets component control name\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlName(metadata: LayoutComponentMetadata)\n    {\n        if (!metadata)\n        {\n            return null;\n        }\n\n        return (<FormComponentOptions>metadata.options)?.controlName;\n    }\n\n    /**\n     * Gets specific control for layout component\n     * @param metadata component metadata\n     * @returns \n     */\n    private _getControlForMetadata(metadata: LayoutComponentMetadata): AbstractControl\n    {\n        switch ((<FormComponentOptions>metadata?.options)?.controlType)\n        {\n            case FormComponentControlType.FormArray:\n                return new FormArray([]);\n            case FormComponentControlType.FormGroup:\n                return new FormGroup({});\n            default:\n                return new FormControl();\n        }\n    }\n}","<div class=\"flex-row\">\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/layout', _available.value]\">layout</a>\r\n    <a class=\"margin-horizontal-small\" [routerLink]=\"['/relationsLayoutForm/relations', _available.value]\">relations</a>\r\n\r\n    <ng-select [formControl]=\"_available\" class=\"flex-1\">\r\n        <ng-option *ngFor=\"let val of _availableNames\" [value]=\"val\" [text]=\"val\"></ng-option>\r\n    </ng-select>\r\n\r\n    <debug-data [copyClick]=\"selectedMetadata\"><div class=\"margin-horizontal-small\">{{_available.value}}</div></debug-data>\r\n</div>\r\n\r\n<form [formGroup]=\"_formGroup\" (ngSubmit)=\"_submit()\" *ngIf=\"_formGroup\">\r\n    <div class=\"flex-row margin-top-big flex-1\">\r\n        <div class=\"flex-1 overflow-vertical-scroll thin-scrollbar\">\r\n            <ng-container *layoutComponentRenderer=\"_metadata; injector: _formInjector\"/>\r\n        </div>\r\n    </div>\r\n    \r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n","import {Component, ChangeDetectionStrategy, OnInit, OnDestroy, Injector, ValueProvider, ChangeDetectorRef} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {ComponentRoute, ComponentRedirectRoute} from '@anglr/common/router';\nimport {FormComponentControlBuilder, FORM_COMPONENT_CONTROL, provideFormLayout} from '@anglr/dynamic/form';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor} from '@anglr/dynamic/layout-editor';\nimport {provideLayoutRelations} from '@anglr/dynamic/layout-relations';\nimport {RelationsManager} from '@anglr/dynamic/relations';\nimport {provideBasicLayout} from '@anglr/dynamic/basic-components';\nimport {provideMaterialLayout} from '@anglr/dynamic/material-components';\n\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\n\n/**\n * Form preview component\n */\n@Component(\n{\n    selector: 'form-preview-view',\n    templateUrl: 'preview.component.html',\n    providers:\n    [\n        FormComponentControlBuilder,\n        LayoutComponentsIteratorService,\n        LayoutEditorMetadataExtractor,\n        provideLayoutRelations(),\n        provideBasicLayout(),\n        provideMaterialLayout(),\n        provideFormLayout(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRedirectRoute('', 'form-preview')\n@ComponentRoute({path: 'form-preview'})\n@ComponentRoute({path: 'form-preview/:id'})\nexport class FormPreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties - template bindings #########################\n    \n    protected selectedMetadata: LayoutRelationsMetadata|null = null;\n\n    protected _formInjector: Injector;\n\n    protected _available: FormControl = new FormControl('');\n\n    protected _metadata: LayoutComponentMetadata = null;\n\n    protected _formGroup: FormGroup;\n\n    protected _availableNames: string[] = [];\n\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,\n                private _store: StoreDataService,\n                private _router: Router,\n                private _route: ActivatedRoute,\n                private _injector: Injector,\n                private _formComponentControlBuilder: FormComponentControlBuilder,\n                private _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._availableNames = this._store.getStored();\n\n        this._route.params.subscribe(async ({id}) =>\n        {\n            if(id)\n            {\n                this._available.setValue(id);\n                const meta = this.selectedMetadata = this._store.getData(id);\n                this._metadata = meta?.layout;\n                this._relationsManager.setRelations(meta.relations ?? []);\n\n                this._formGroup = await this._formComponentControlBuilder.build(this._metadata);        \n                this._formInjector = Injector.create(\n                    {\n                        parent: this._injector,\n                        providers:\n                        [\n                            <ValueProvider>\n                            {\n                                provide: FORM_COMPONENT_CONTROL,\n                                useValue: this._formGroup,\n                            }\n                        ]\n                    }\n                );\n                this._changeDetector.detectChanges();\n            }\n            else\n            {\n                this.selectedMetadata = null;\n                this._relationsManager.setRelations([]);\n            }\n\n            this._available.valueChanges.subscribe(val =>\n            {\n                this._router.navigate(['/relationsLayoutForm', 'form-preview', val], {skipLocationChange: false, replaceUrl: true});\n            });\n        });\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Form submission\n     */\n    protected _submit(): void\n    {\n        console.log(this._formGroup.value);\n    }\n}\n","import {Route} from '@angular/router';\nimport {isBlank, isPresent} from '@jscrpt/common';\n\nimport {RouteDecoratedComponent} from './componentRoute.decorator';\n\n/**\n * Extended type with redirect route definition\n */\nexport interface RedirectRouteDecoratedComponent\n{\n    /**\n     * Definition of redirection routes that are assigned to this type\n     */\n    redirectRouteValues: Route[];\n}\n\n/**\n * Defines redirection route to component's route on which is this decorator applied\n * @param redirectFrom - Path from which should redirection occur\n * @param redirectTo - Path to which should be redirect performed, if not specified and only one route is defined, its path will be used\n * @param pathMatchFull - Indication that full path match should be used, default is true\n * @returns ClassDecorator\n */\nexport function ComponentRedirectRoute(redirectFrom: string, redirectTo?: string, pathMatchFull?: boolean): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues) && isBlank(redirectTo))\n        {\n            console.warn('Missing \\'ComponentRoute\\' or wrong order of decorators \\'ComponentRoute\\' and \\'ComponentRedirectRoute\\'!');\n\n            return target;\n        }\n\n        if(isBlank(redirectTo) && isPresent(routeDecoratedComponent.routeValues) && routeDecoratedComponent.routeValues.length > 1)\n        {\n            console.warn('Multiple routes defined. Unable to set proper redirect!');\n\n            return target;\n        }\n\n        const redirectRouteDecoratedComponent: RedirectRouteDecoratedComponent = <any>target;\n\n        if(isBlank(redirectRouteDecoratedComponent.redirectRouteValues))\n        {\n            Object.defineProperty(target,\n                                  'redirectRouteValues',\n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        if(isBlank(pathMatchFull))\n        {\n            pathMatchFull = true;\n        }\n\n        if(isBlank(redirectTo))\n        {\n            redirectTo = routeDecoratedComponent.routeValues[0].path;\n        }\n\n        redirectRouteDecoratedComponent.redirectRouteValues.push(\n        {\n            path: redirectFrom,\n            redirectTo: redirectTo,\n            pathMatch: pathMatchFull ? 'full' : 'prefix'\n        });\n\n        return target;\n    };\n}\n","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider, Inject} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {RelationsNodeMetadata, RELATIONS_HISTORY_MANAGER} from '@anglr/dynamic/relations-editor';\nimport {LayoutManager, provideLayoutRelationsEditor} from '@anglr/dynamic/layout-relations';\nimport {provideTinyMceLayoutRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsLayoutRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {provideCssLayoutRelationsEditor} from '@anglr/dynamic/css-components';\nimport {provideFormLayoutRelationsEditor} from '@anglr/dynamic/form';\nimport {EditorHotkeys, MetadataHistoryManager, MetadataStorage, PackageManager} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {provideMaterialLayoutRelationsEditor} from '@anglr/dynamic/material-components';\nimport {provideBasicLayoutRelationsEditor} from '@anglr/dynamic/basic-components';\nimport {BindThis} from '@jscrpt/common';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StoreDataService} from '../../../services/storeData';\nimport {LayoutRelationsMetadata} from '../../../misc/interfaces';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'form-relations-editor-view',\n    templateUrl: 'relations.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutRelationsMetadata>) => new MetadataStorage<RelationsNodeMetadata[]>(id => store.getData(id)?.relations),\n            deps: [StoreDataService]\n        },\n        provideLayoutRelationsEditor(),\n        provideBasicLayoutRelationsEditor(),\n        provideMaterialLayoutRelationsEditor(),\n        provideHandlebarsLayoutRelationsEditor(),\n        provideTinyMceLayoutRelationsEditor(),\n        provideCssLayoutRelationsEditor(),\n        provideFormLayoutRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'relations'})\n@ComponentRoute({path: 'relations/:id'})\nexport class FormRelationsComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected _metadata: RelationsNodeMetadata[] = [];\n\n    protected get emptyMetadata(): RelationsNodeMetadata[]\n    {\n        return [];\n    }\n\n    //######################### constructor #########################\n    constructor(protected _store: StoreDataService<LayoutRelationsMetadata>,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager,\n                protected _layoutManager: LayoutManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    @BindThis\n    protected _getMetadata(metadata: RelationsNodeMetadata[]): LayoutRelationsMetadata\n    {\n        return {\n            relations: metadata\n        };\n    }\n\n    protected _loadDemo(): void\n    {\n        this._metadata = DemoData.demoRelationsComplexRelations;\n    }\n\n    protected _loadRestDemo(): void\n    {\n        this._metadata = DemoData.complexDemoRestRelations;\n    }\n\n    protected _loadFullDemo(): void\n    {\n        this._metadata = DemoData.complexDemoFullRelations;\n    }\n\n    protected setMetadata(metadata: LayoutRelationsMetadata): void\n    {\n        this._metadata = metadata?.relations ?? this.emptyMetadata;\n        this._layoutManager.setLayout(metadata?.layout);\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-right-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <load-save-new [store]=\"_store\" [getMetadataCallback]=\"_getMetadata\" [layoutControls]=\"false\" routePath=\"/relationsLayoutForm/relations\" (metadataChange)=\"setMetadata($event)\" [history]=\"history\"></load-save-new>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"_metadata\"></relations-editor>","import {FormLayoutComponent} from './layout/layout.component';\nimport {FormPreviewComponent} from './preview/preview.component';\nimport {FormRelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    FormPreviewComponent,\n    FormLayoutComponent,\n    FormRelationsComponent,\n];","import {FactoryProvider, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {GoBackSADirective} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {DebugDataCopyClickModule} from '@anglr/common/material';\nimport {NgSelectModule} from '@anglr/select';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE} from '@anglr/dynamic/layout';\nimport {DynamicLayoutRelationsEditorModule} from '@anglr/dynamic/layout-relations';\n\nimport {components} from './relationsLayoutForm.routes';\nimport {StoreDataService} from '../../services/storeData';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\nimport {LoadSaveNewSAComponent} from '../../components';\n\n/**\n * Module for relations layout form samples\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        NgSelectModule,\n        LayoutComponentRendererSADirective,\n        RouterModule,\n        GoBackSADirective,\n        DynamicLayoutRelationsEditorModule,\n        DebugDataCopyClickModule,\n        LoadSaveNewSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        <FactoryProvider>\n        {\n            provide: LAYOUT_METADATA_STORAGE,\n            useFactory: (store: StoreDataService<LayoutComponentMetadata>) => new MetadataStorage<LayoutComponentMetadata>(id => store.getData(id)),\n            deps: [StoreDataService]\n        },\n        createStoreDataServiceFactory('LAYOUT_RELATIONS_FORM_DATA'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsLayoutFormModule\n{\n}","import {InjectionToken} from '@angular/core';\nimport {AbstractControl} from '@angular/forms';\n\n/**\n * Injection token for form component control\n */\nexport const FORM_COMPONENT_CONTROL : InjectionToken<AbstractControl> = new InjectionToken<AbstractControl>('FORM_COMPONENT_CONTROL');"],"names":["FormLayoutComponent","emptyMetadata","id","generateId","displayName","package","name","options","children","constructor","_store","history","_metadata","_getMetadata","metadata","layout","i0","i1","LAYOUT_HISTORY_MANAGER","selectors","features","EditorHotkeys","provide","LAYOUT_METADATA_STORAGE","useFactory","store","MetadataStorage","getData","deps","StoreDataService","provideLayoutEditor","provideBasicLayoutEditor","provideMaterialLayoutEditor","provideFormLayoutEditor","provideCssLayoutEditor","provideTinyMceLayoutEditor","provideHandlebarsLayoutEditor","PackageManager","useClass","DemoLayoutPackageManager","decls","vars","consts","template","rf","ctx","$event","tmp_b_0","undefined","__decorate","BindThis","ComponentRoute","path","MetadataHistoryManager","FormComponentControlBuilder","_iteratorsSvc","build","layoutMetadata","_this","formGroup","FormGroup","activeGroup","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","getIteratorFor","next","done","iteratorItem","value","controlName","_getControlName","control","_getControlForMetadata","_getActiveGroup","parent","addControl","err","return","parentIterator","group","parentControlName","this","get","root","controlType","FormComponentControlType","FormArray","FormControl","factory","ɵfac","val_r2","_r5","ctx_r4","_submit","FormPreviewComponent_form_10_ng_container_3_Template","ctx_r1","_formGroup","_formInjector","FormPreviewComponent","_relationsManager","_router","_route","_injector","_formComponentControlBuilder","_changeDetector","selectedMetadata","_available","_availableNames","ngOnInit","getStored","params","subscribe","_ref","setValue","meta","setRelations","relations","Injector","create","providers","FORM_COMPONENT_CONTROL","useValue","detectChanges","valueChanges","val","navigate","skipLocationChange","replaceUrl","_x","apply","arguments","ngOnDestroy","console","log","redirectTo","pathMatchFull","i2","i3","i4","LayoutComponentsIteratorService","LayoutEditorMetadataExtractor","provideLayoutRelations","provideBasicLayout","provideMaterialLayout","provideFormLayout","FormPreviewComponent_ng_option_6_Template","FormPreviewComponent_form_10_Template","_c0","_c1","target","routeDecoratedComponent","isBlank","routeValues","warn","isPresent","length","redirectRouteDecoratedComponent","redirectRouteValues","Object","defineProperty","enumerable","configurable","writable","push","pathMatch","RelationsManager","Router","ActivatedRoute","ChangeDetectorRef","FormRelationsComponent","_layoutManager","_loadDemo","DemoData","demoRelationsComplexRelations","_loadRestDemo","complexDemoRestRelations","_loadFullDemo","complexDemoFullRelations","setMetadata","setLayout","RELATIONS_HISTORY_MANAGER","RELATIONS_METADATA_STORAGE","provideLayoutRelationsEditor","provideBasicLayoutRelationsEditor","provideMaterialLayoutRelationsEditor","provideHandlebarsLayoutRelationsEditor","provideTinyMceLayoutRelationsEditor","provideCssLayoutRelationsEditor","provideFormLayoutRelationsEditor","DemoRelationsPackageManager","LayoutManager","components","RelationsLayoutFormModule","createStoreDataServiceFactory","imports","CommonModule","ReactiveFormsModule","NgSelectModule","RouterModule","DynamicLayoutRelationsEditorModule","DebugDataCopyClickModule","LoadSaveNewSAComponent","ModuleRoutes","InjectionToken"],"sourceRoot":""}