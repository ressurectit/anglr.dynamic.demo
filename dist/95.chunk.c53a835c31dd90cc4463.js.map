{"version":3,"file":"95.chunk.c53a835c31dd90cc4463.js","mappings":"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","sources":["webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyDescription/propertyDescription.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyName/propertyName.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyType/propertyType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutPropertyObject/propertyObject.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/margin.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/padding.model.ts","webpack://ng-universal-demo/../layout-editor/src/misc/models/componentStyling.model.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputString/inputString.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputBoolean/inputBoolean.component.html","webpack://ng-universal-demo/../layout-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputNumber/inputNumber.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/selectValue/selectValue.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/inputSize/inputSize.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/marginControl/marginControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/paddingControl/paddingControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/componentStylingPropertiesControl/componentStylingPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/directives/propertyTypeControlRenderer/propertyTypeControlRenderer.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/genericPropertiesControl/genericPropertiesControl.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorPropertyMetadataExtractor/layoutEditorPropertyMetadataExtractor.service.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertiesControls/components/propertiesControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/components/propertyTypeControlBase.ts","webpack://ng-universal-demo/../layout-editor/src/modules/propertyTypeControls/modules/propertyTypeControls.module.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutEditorMetadataExtractor/layoutEditorMetadataExtractor.service.ts","webpack://ng-universal-demo/../src/decorators/classMixin/classMixin.decorator.ts","webpack://ng-universal-demo/../src/decorators/dynamicMetadata/dynamicPropertyMetadata.decorator.ts"],"sourcesContent":["import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyDescriptionData} from './propertyDescription.interface';\n\n/**\n * Adds description to component property for designer\n * @param description - Description of property\n */\nexport function LayoutPropertyDescription(description: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyDescriptionData>({description}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyNameData} from './propertyName.interface';\n\n/**\n * Adds display name to component property for designer\n * @param name - Display name of property\n */\nexport function LayoutPropertyName(name: string): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyNameData>({name}, LayoutPropertyMetadata);\n}","import {DynamicPropertyMetadata} from '@anglr/dynamic';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyTypeData} from './propertyType.interface';\n\n/**\n * Adds type to component property for designer\n * @param type - Type of property\n */\nexport function LayoutPropertyType<TType extends string>(type: TType): PropertyDecorator\n{\n    return DynamicPropertyMetadata<LayoutPropertyTypeData>({type}, LayoutPropertyMetadata);\n}","import {Type} from '@angular/core';\nimport {DynamicPropertyMetadata} from '@anglr/dynamic';\nimport {extend} from '@jscrpt/common';\n\nimport {LayoutPropertyMetadata} from '../../misc/types';\nimport {LayoutPropertyObjectData} from './propertyObject.interface';\n\n/**\n * Adds object metadata to component property for designer\n * @param type - Type containing metadata for nested object\n * @param metadataSymbols - Array of symbols that are storing metadata\n */\nexport function LayoutPropertyObject(type: Type<any>, metadataSymbols: symbol[]): PropertyDecorator\n{\n    const objMetadata = {};\n\n    for(const metaSymbol of metadataSymbols)\n    {\n        const typeMetadata = Reflect.get(type.prototype, metaSymbol);\n\n        extend(true, objMetadata, typeMetadata);\n    }\n\n    return DynamicPropertyMetadata<LayoutPropertyObjectData>({object: objMetadata}, LayoutPropertyMetadata);\n}","import {Margin} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Margin model for properties editor\n */\nexport class MarginModel implements Margin\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin top')\n    @LayoutPropertyDescription('Top margin of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin right')\n    @LayoutPropertyDescription('Right margin of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin bottom')\n    @LayoutPropertyDescription('Bottom margin of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin left')\n    @LayoutPropertyDescription('Left margin of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Margin|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {Padding} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName} from '../../decorators';\n\n/**\n * Padding model for properties editor\n */\nexport class PaddingModel implements Padding\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding top')\n    @LayoutPropertyDescription('Top padding of component')\n    top: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding right')\n    @LayoutPropertyDescription('Right padding of component')\n    right: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding bottom')\n    @LayoutPropertyDescription('Bottom padding of component')\n    bottom: string|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding left')\n    @LayoutPropertyDescription('Left padding of component')\n    left: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: Padding|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {FormGroupProperty} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin, Padding, TextStyling} from '@anglr/dynamic/layout';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyObject} from '../../decorators';\nimport {LayoutPropertyMetadata} from '../types';\nimport {MarginModel} from './margin.model';\nimport {PaddingModel} from './padding.model';\n\n/**\n * Component styling model for properties editor\n */\nexport class ComponentStylingModel implements ComponentStylingOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Margin')\n    @LayoutPropertyDescription('Margin of component')\n    @LayoutPropertyObject(MarginModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    margin: Margin|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Padding')\n    @LayoutPropertyDescription('Padding of component')\n    @LayoutPropertyObject(PaddingModel, [LayoutPropertyMetadata])\n    @FormGroupProperty()\n    padding: Padding|undefined|null = null;\n\n    /**\n     * @inheritdoc\n     */\n    textStyling: TextStyling|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: ComponentStylingOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n\n        this.margin = new MarginModel(value?.margin);\n        this.padding = new PaddingModel(value?.padding);\n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type string\n */\n@Component(\n{\n    selector: 'input-string',\n    templateUrl: 'inputString.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputString.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputStringComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n}","<input class=\"form-control\" type=\"text\" [formControl]=\"_control | asRequired\">","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type boolean\n */\n@Component(\n{\n    selector: 'input-boolean',\n    templateUrl: 'inputBoolean.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputBoolean.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputBooleanComponent extends PropertyTypeControlBase<boolean> implements PropertyTypeControl<boolean>\n{\n}","<input class=\"form-control\" type=\"checkbox\" [formControl]=\"_control | asRequired\">","import {InjectionToken, Type} from '@angular/core';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../interfaces';\nimport {InputBooleanComponent, InputStringComponent} from '../modules/propertyTypeControls';\nimport {LayoutPropertyMetadata} from './types';\n\n/**\n * Injection token containing symbols to properties storing layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES: InjectionToken<symbol[]> = new InjectionToken<symbol[]>('LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES', {providedIn: 'root', factory: () => [LayoutPropertyMetadata]});\n\n/**\n * Injection token containing available property type controls\n */\nexport const LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS: InjectionToken<Dictionary<Type<PropertyTypeControl>>> = new InjectionToken<Dictionary<Type<PropertyTypeControl>>>('LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS',\n                                                                                                                                                                     {\n                                                                                                                                                                         providedIn: 'root',\n                                                                                                                                                                         factory: () =>\n                                                                                                                                                                         {\n                                                                                                                                                                             return {\n                                                                                                                                                                                 'inputString': InputStringComponent,\n                                                                                                                                                                                 'inputBoolean': InputBooleanComponent,\n                                                                                                                                                                             };\n                                                                                                                                                                         }});","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type number\n */\n@Component(\n{\n    selector: 'input-number',\n    templateUrl: 'inputNumber.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['inputNumber.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputNumberComponent extends PropertyTypeControlBase<number> implements PropertyTypeControl<number>\n{\n}","<input class=\"form-control\" type=\"text\" number [formControl]=\"_control | asRequired\">","<select [formControl]=\"_control | asRequired\">\n    <option *ngFor=\"let val of values\" [value]=\"val\" [text]=\"val\"></option>\n</select>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying options and their selection\n */\n@Component(\n{\n    selector: 'select-value',\n    templateUrl: 'selectValue.component.html',\n    styles: [HostDisplayBlockStyle],\n    // styleUrls: ['selectValue.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectValueComponent<TValue = any> extends PropertyTypeControlBase<TValue> implements PropertyTypeControl<TValue>\n{\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {HostDisplayFlexStyle} from '@anglr/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {PropertyTypeControlBase} from '../propertyTypeControlBase';\n\n/**\n * Component used for displaying input of type size string\n */\n@Component(\n{\n    selector: 'input-size',\n    templateUrl: 'inputSize.component.html',\n    styles: [HostDisplayFlexStyle],\n    // styleUrls: ['inputSize.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InputSizeComponent extends PropertyTypeControlBase<string> implements PropertyTypeControl<string>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Control for numeric value of size\n     */\n    protected _value: FormControl<number|null> = new FormControl<number|null>(null);\n\n    /**\n     * Control for unit value of size\n     */\n    protected _unit: FormControl<string> = new FormControl<string>('px', {nonNullable: true});\n\n    //######################### protected - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override _controlSet(): void\n    {\n        const value = this._control?.value;\n\n        if(value)\n        {\n            const matches = /^(\\d*\\.?\\d+)\\s*([^0-9.]+$)/.exec(value);\n\n            if(matches)\n            {\n                this._value.setValue(+matches[1]);\n                this._unit.setValue(matches[2]);\n\n                return;\n            }\n        }\n\n        this._unit.setValue('px');\n        this._value.setValue(null);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override _initialize(): void\n    {\n        this._value.valueChanges.subscribe(value =>\n        {\n            const unit = this._unit.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n\n        this._unit.valueChanges.subscribe(unit =>\n        {\n            const value = this._value.value;\n\n            //use empty value for size\n            if(!value || !unit)\n            {\n                this._control?.setValue(null);\n\n                return;\n            }\n\n            this.control?.setValue(`${value}${unit}`);\n        });\n    }\n}","<input-number [control]=\"_value\"></input-number> <select-value [control]=\"_unit\" [values]=\"['px', 'pt', 'em', '%']\"></select-value>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Margin} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of margin\n */\n@Component(\n{\n    selector: 'margin-control',\n    templateUrl: 'marginControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MarginControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Margin form group\n     */\n    protected get _margin(): FormGroup<FormModelGroup<Margin>>|undefined|null\n    {\n        return this.form?.controls.margin as AsFormGroup<Margin>;\n    }\n}\n","<div>Margin</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_margin?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_margin?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {AsFormGroup, FormModelGroup} from '@anglr/common/forms';\nimport {ComponentStylingOptions, Padding} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of padding\n */\n@Component(\n{\n    selector: 'padding-control',\n    templateUrl: 'paddingControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaddingControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Padding form group\n     */\n    protected get _padding(): FormGroup<FormModelGroup<Padding>>|undefined|null\n    {\n        return this.form?.controls.padding as AsFormGroup<Padding>;\n    }\n}\n","<div>Padding</div>\n\n<div class=\"flex-column\">\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.top | asFormControl\"></input-size>\n\n    <div class=\"flex-row\">\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.left | asFormControl\"></input-size>\n        </div>\n\n        <div style=\"width: 20px; height: 20px; border: 1px solid #aaa;\"></div>\n\n        <div class=\"flex-1\">\n            <input-size [control]=\"_padding?.controls?.right | asFormControl\"></input-size>\n        </div>\n    </div>\n\n    <input-size class=\"align-self-center\" [control]=\"_padding?.controls?.bottom | asFormControl\"></input-size>\n</div>","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {ComponentStylingOptions} from '@anglr/dynamic/layout';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\n\n/**\n * Component used for displaying editation of component styling\n */\n@Component(\n{\n    selector: 'component-styling',\n    templateUrl: 'componentStylingPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ComponentStylingPropertiesControlComponent extends PropertiesControlBase<ComponentStylingOptions> implements PropertiesControl<ComponentStylingOptions>\n{\n}\n","<margin-control [form]=\"form\" [itemSource]=\"itemSource\"></margin-control>\n<padding-control [form]=\"form\" [itemSource]=\"itemSource\"></padding-control>","import {ComponentRef, Directive, Inject, Input, Optional, Type, ViewContainerRef} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../../interfaces';\nimport {LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS} from '../../../../misc/tokens';\n\n/**\n * Directive used for rendering property type control\n */\n@Directive(\n{\n    selector: '[propertyTypeControl]'\n})\nexport class PropertyTypeControlRendererDirective<TComponent extends PropertyTypeControl<TValue> = any, TValue = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Created component reference\n     */\n    protected _componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Form control that will handle value of property\n     */\n    @Input()\n    public control: FormControl<TValue>|undefined;\n\n    /**\n     * Metadata for displaying property control\n     */\n    @Input('propertyTypeControl')\n    public typeName: string|undefined;\n\n    /**\n     * Array of available values\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS) protected _typeControls: Dictionary<Type<PropertyTypeControl>>,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(): Promise<void>\n    {\n        const typeName = this.typeName ?? 'inputString';\n        this._logger?.debug('PropertyTypeControlRendererDirective: rendering property type control {@type}', {type: typeName});\n\n        this.ngOnDestroy();\n        this._viewContainerRef.clear();\n\n        // metadata are present\n        if(this.typeName)\n        {\n            const injector = this._viewContainerRef.injector;\n            const type = this._typeControls[typeName];\n\n            if(!type)\n            {\n                this._logger?.error('PropertyTypeControlRendererDirective: unable to find property type control {@type}', {type: typeName});\n\n                throw new Error(`unable to find property type control ${typeName}`);\n            }\n\n            this._componentRef = this._viewContainerRef.createComponent(type,\n                                                                        {\n                                                                            injector,\n                                                                        }) as ComponentRef<TComponent>;\n\n            if(this._componentRef)\n            {\n                const component = this._componentRef.instance;\n                component.control = this.control;\n                component.values = this.values;\n\n                await resolvePromiseOr(component.initialize());\n                component.invalidateVisuals();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._componentRef)\n        {\n            this._logger?.debug('PropertyTypeControlRendererDirective: destroying property type control {@type}', {type: this.typeName ?? 'inputString'});\n    \n            this._componentRef?.destroy();\n            this._componentRef = null;\n        }\n    }\n}","<ng-container *ngFor=\"let property of properties\">\n    <!-- TODO pipe for control.control -->\n    <div class=\"form-group\">\n        <label class=\"control-label\">{{_propertiesMetadata?.[property]?.name ?? property}} <span *ngIf=\"_propertiesMetadata?.[property]?.description\" class=\"fas fa-info-circle\" [tooltip]=\"_propertiesMetadata?.[property]?.description\"></span></label>\n        <ng-container [propertyTypeControl]=\"_propertiesMetadata?.[property]?.type\" [control]=\"$any(form?.get(property) | asFormControl)\" [values]=\"_propertiesMetadata?.[property]?.values ?? []\"></ng-container>\n    </div>\n</ng-container>","import {ChangeDetectionStrategy, Component, Input, Type} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TooltipModule} from '@anglr/common';\nimport {FormPipesModule} from '@anglr/common/forms';\n\nimport {PropertiesControl} from '../../../../interfaces';\nimport {PropertiesControlBase} from '../propertiesControlBase';\nimport {PropertyTypeControlsModule} from '../../../propertyTypeControls';\n\n/**\n * Component used for displaying default generic properties control, displaying specified properties\n */\n@Component(\n{\n    selector: 'default-generic-properties-control',\n    templateUrl: 'genericPropertiesControl.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultGenericPropertiesControlComponent<TOptions = any> extends PropertiesControlBase<TOptions> implements PropertiesControl<TOptions>\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Array of properties that should be displayed by this component\n     */\n    @Input()\n    public properties: string[] = [];\n}\n\n/**\n * Gets generic properties control component for specific properties\n * @param properties - Array of properties which will be displayed in generic properties control\n */\nexport function genericPropertiesControlFor(properties: string[]): Type<PropertiesControl>\n{\n    @Component(\n    {\n        selector: 'generic-properties-control',\n        templateUrl: 'genericPropertiesControl.component.html',\n        standalone: true,\n        imports:\n        [\n            CommonModule,\n            TooltipModule,\n            PropertyTypeControlsModule,\n            FormPipesModule,\n            \n        ],\n        changeDetection: ChangeDetectionStrategy.OnPush\n    })\n    class GenericPropertiesControl<TOptions = any> extends DefaultGenericPropertiesControlComponent implements PropertiesControl<TOptions>\n    {\n        /**\n         * @inheritdoc\n         */\n        @Input()\n        public override properties: string[] = properties;\n    }\n\n    return GenericPropertiesControl;\n}","import {Inject, Injectable, Optional, Type} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {Dictionary, extend} from '@jscrpt/common';\n\nimport {LayoutEditorPropertyMetadata} from '../../misc/types';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES} from '../../misc/tokens';\n\n/**\n * Service used for extracting property metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorPropertyMetadataExtractor\n{\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES) protected _layoutPropertiesSymbols: symbol[],\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods #########################\n    \n    /**\n     * Extracts properties metadata from type\n     * @param type - Type to be examined\n     */\n    public extract<TMetadata extends LayoutEditorPropertyMetadata = LayoutEditorPropertyMetadata>(type?: Type<any>): Dictionary<TMetadata>|null\n    {\n        if(!type)\n        {\n            return null;\n        }\n\n        this._logger?.debug(`LayoutEditorPropertyMetadataExtractor: Trying to extract properties metadata '${type.name}'`);\n\n        const result = {};\n\n        for(const propSymbol of this._layoutPropertiesSymbols)\n        {\n            const meta = Reflect.get(type.prototype, propSymbol);\n\n            extend(true, result, meta);\n        }\n\n        return result;\n    }\n}","import {ChangeDetectorRef, Directive, Input} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormModelGroup} from '@anglr/common/forms';\nimport {DynamicItemSource} from '@anglr/dynamic';\nimport {Dictionary, PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertiesControl} from '../../../interfaces';\nimport {LayoutEditorMetadataExtractor, LayoutEditorPropertyMetadataExtractor} from '../../../services';\nimport {LayoutEditorPropertyMetadata} from '../../../misc/types';\nimport {LayoutPropertyTypeData} from '../../../decorators';\n\n/**\n * Base class for properties control\n */\n@Directive()\nexport abstract class PropertiesControlBase<TOptions = any> implements PropertiesControl<TOptions>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Indication whether was component initialized or not\n     */\n    protected _initialized: boolean = false;\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Obtained properties metadata\n     */\n    protected _propertiesMetadata: Dictionary<LayoutEditorPropertyMetadata&LayoutPropertyTypeData>|undefined;\n\n    //######################### public properties - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public form: FormGroup<FormModelGroup<TOptions>>|undefined;\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public itemSource: DynamicItemSource|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _extractor: LayoutEditorMetadataExtractor,\n                protected _propertyExtractor: LayoutEditorPropertyMetadataExtractor,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        if(!this.itemSource)\n        {\n            return;\n        }\n\n        const type = await this._extractor.extractMetadata(this.itemSource);\n\n        if(!type)\n        {\n            return;\n        }\n\n        const properties = await this._propertyExtractor.extract(type.metaInfo?.optionsMetadata?.modelType);\n\n        if(!properties)\n        {\n            return;\n        }\n\n        this._propertiesMetadata = properties;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertiesControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n}","import {ChangeDetectorRef, Directive, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {PromiseOr, resolvePromiseOr} from '@jscrpt/common';\n\nimport {PropertyTypeControl} from '../../../interfaces';\n\n/**\n * Base class for property type control\n */\n@Directive()\nexport abstract class PropertyTypeControlBase<TValue = any> implements PropertyTypeControl<TValue>, OnInit\n{\n    //######################### protected fields #########################\n\n    /**\n     * Backing field for control\n     */\n    protected _control: FormControl<TValue|undefined|null>|undefined|null;\n\n    /**\n     * Indication whether was component already initialized\n     */\n    protected _initialized: boolean = false;\n\n    //######################### public properties - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public get control(): FormControl<TValue|undefined|null>|undefined|null\n    {\n        return this._control;\n    }\n    public set control(value: FormControl<TValue|undefined|null>|undefined|null)\n    {\n        this._control = value;\n\n        this._controlSet();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public values: TValue[] = [];\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public async ngOnInit(): Promise<void>\n    {\n        if(this._initialized)\n        {\n            return;\n        }\n\n        this._initialized = true;\n\n        await resolvePromiseOr(this._initialize());\n    }\n\n    //######################### public methods - implementation of PropertyTypeControl #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(): Promise<void>\n    {\n        await resolvePromiseOr(this.ngOnInit());\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Use this method for initialization of component\n     */\n    protected _initialize(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * When overriden allows to react to change of control\n     */\n    protected _controlSet(): void\n    {\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CastPipesModule} from '@anglr/common';\nimport {NumberInputModule} from '@anglr/common/forms';\n\nimport {InputBooleanComponent, InputNumberComponent, InputSizeComponent, InputStringComponent, SelectValueComponent} from '../components';\nimport {PropertyTypeControlRendererDirective} from '../directives';\n\n/**\n * Module containing built-in property type controls\n */\n@NgModule(\n{\n    imports:\n    [\n        CommonModule,\n        ReactiveFormsModule,\n        CastPipesModule,\n        NumberInputModule,\n    ],\n    declarations:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n    exports:\n    [\n        InputStringComponent,\n        InputBooleanComponent,\n        InputNumberComponent,\n        InputSizeComponent,\n        SelectValueComponent,\n        PropertyTypeControlRendererDirective,\n    ],\n})\nexport class PropertyTypeControlsModule\n{\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemLoader, DynamicItemSource} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\nimport {LayoutEditorMetadataData} from '../../misc/types';\n\n/**\n * Class used for extracting layout editor metadata\n */\n@Injectable({providedIn: 'root'})\nexport class LayoutEditorMetadataExtractor\n{\n    //######################### protected fields #########################\n\n    /**\n     * Cache for layout editor metadata\n     */\n    protected _cache: Dictionary<LayoutEditorMetadataDescriptor> = {};\n\n    //######################### constructor #########################\n    constructor(protected _loader: DynamicItemLoader,\n                @Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n    \n    //######################### public methods #########################\n\n    /**\n     * Extracts layout editor metadata from layout metadata\n     * @param metadata - Metadata describing type that contains metadata\n     */\n    public async extractMetadata(metadata: DynamicItemSource): Promise<LayoutEditorMetadataDescriptor|null>\n    {\n        const cacheId = `${metadata.package}-${metadata.name}`;\n\n        if(this._cache[cacheId])\n        {\n            return this._cache[cacheId];\n        }\n\n        const type = await this._loader.loadItem(metadata);\n\n        if(!type)\n        {\n            return null;\n        }\n\n        const metadataType = type.type as unknown as LayoutEditorMetadataType;\n\n        if(!metadataType.layoutEditorMetadata)\n        {\n            this._logger?.warn('LayoutEditorMetadataExtractor: Missing metadata! ', {package: metadata.package, name: metadata.name});\n\n            return null;\n        }\n\n        this._logger?.debug('LayoutEditorMetadataExtractor: Reading metadata! ', {package: metadata.package, name: metadata.name});\n\n        const metadataData = new LayoutEditorMetadataData(metadataType.layoutEditorMetadata);\n        await metadataData.initialize();\n\n        this._cache[cacheId] = metadataData;\n\n        return metadataData;\n    }\n}","import {Type} from '@angular/core';\nimport {extend} from '@jscrpt/common';\n\n/**\n * Copies properties and metadata from class definition to applied class\n * @param classDefinition - Class containing definition of metadata\n * @param metadataSymbols - Symbols that are storing metadata and are copied\n */\nexport function MetadataClassMixin(classDefinition: Type<any>, metadataSymbols: Array<symbol|string>): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        // save a reference to the original constructor\n        const original = target as unknown as Type<any>;\n\n        // the new constructor behaviour\n        const classMixin = function(...args: any[])\n        {\n            const instance = new original(...args);\n            extend(true, instance, Reflect.construct(classDefinition, args));\n\n            return instance;\n        };\n\n        for(const metaSymbol of metadataSymbols)\n        {\n            const targetMetadata = Reflect.get(target.prototype, metaSymbol);\n            const sourceMetadata = Reflect.get(classDefinition.prototype, metaSymbol);\n\n            if(!targetMetadata)\n            {\n                Reflect.set(target.prototype, metaSymbol, sourceMetadata);\n            }\n            else\n            {\n                extend(true, targetMetadata, sourceMetadata);\n            }\n        }\n\n        // copy prototype so intanceof operator still works\n        classMixin.prototype = original.prototype;\n\n        return classMixin as any;\n    };\n}","import {Dictionary, extend, noop} from '@jscrpt/common';\n\ndeclare let ngDesignerMetadata: boolean;\n\n/**\n * Sets dynamic metadata to for property\n * @param value - Object with metadata to be stored\n * @param property - Property definition symbol\n */\nexport function DynamicPropertyMetadata<TValue = Dictionary>(value: TValue, property: symbol): PropertyDecorator\n{\n    if(ngDesignerMetadata)\n    {\n        return function (target: Object, propertyKey: string | symbol): void\n        {\n            const metadata = Reflect.get(target, property) as Dictionary<Dictionary> ?? {};\n            const propertyMetadata = metadata[propertyKey as string] ??= {};\n            \n            extend(true, propertyMetadata, value);\n\n            if(!Reflect.has(target, property))\n            {\n                Reflect.defineProperty(target,\n                                       property,\n                                       {\n                                           value: metadata\n                                       });\n            }\n        };\n    }\n\n    return noop;\n}"],"names":["LayoutPropertyDescription","description","DynamicPropertyMetadata","LayoutPropertyMetadata","LayoutPropertyName","name","LayoutPropertyType","type","LayoutPropertyObject","metadataSymbols","objMetadata","metaSymbol","typeMetadata","Reflect","get","prototype","extend","object","MarginModel","constructor","value","top","right","bottom","left","mapValuesToThis","this","__decorate","PaddingModel","ComponentStylingModel","margin","padding","textStyling","FormGroupProperty","InputStringComponent","PropertyTypeControlBase","t","selectors","features","decls","vars","consts","template","i0","InputBooleanComponent","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","InjectionToken","providedIn","factory","LAYOUT_EDITOR_PROPERTY_TYPE_CONTROLS","InputNumberComponent","val_r1","SelectValueComponent","InputSizeComponent","_value","FormControl","_unit","nonNullable","_controlSet","_control","matches","exec","setValue","_initialize","valueChanges","subscribe","unit","control","MarginControlComponent","PropertiesControlBase","_margin","form","controls","PaddingControlComponent","_padding","ComponentStylingPropertiesControlComponent","ctx","PropertyTypeControlRendererDirective","_viewContainerRef","_typeControls","_logger","_componentRef","values","ngOnChanges","typeName","debug","ngOnDestroy","clear","injector","error","Error","createComponent","component","instance","resolvePromiseOr","initialize","invalidateVisuals","destroy","LOGGER","inputs","DefaultGenericPropertiesControlComponent","properties","genericPropertiesControlFor","GenericPropertiesControl","standalone","CommonModule","i1","TooltipModule","i2","PropertyTypeControlsModule","i3","FormPipesModule","i4","encapsulation","changeDetection","LayoutEditorPropertyMetadataExtractor","_layoutPropertiesSymbols","extract","result","propSymbol","meta","_changeDetector","_extractor","_propertyExtractor","_initialized","ngOnInit","itemSource","extractMetadata","metaInfo","optionsMetadata","modelType","_propertiesMetadata","detectChanges","ReactiveFormsModule","CastPipesModule","NumberInputModule","LayoutEditorMetadataExtractor","_loader","_cache","metadata","cacheId","package","loadItem","metadataType","layoutEditorMetadata","warn","metadataData","LayoutEditorMetadataData","MetadataClassMixin","classDefinition","target","original","classMixin","args","construct","targetMetadata","sourceMetadata","set","property","ngDesignerMetadata","propertyKey","propertyMetadata","has","defineProperty","noop"],"sourceRoot":""}