{"version":3,"file":"692.chunk.c988b687cac8e22f007b.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.metadata.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/templateBlock.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/templateBlock/type.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorDesignerType/layoutEditorDesignerType.decorator.ts","webpack://ng-universal-demo/../layout-editor/src/decorators/layoutEditorMetadata/layoutEditorMetadata.decorator.ts","webpack://ng-universal-demo/../layout/src/components/layoutComponentBase/layoutComponentBase.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/extensions/componentStyling/componentStyling.extension.ts","webpack://ng-universal-demo/../src/misc/dynamicItemExtensionBase.ts"],"sourcesContent":["import {Type} from '@angular/core';\nimport {DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutEditorMetadataDescriptor} from '@anglr/dynamic/layout-editor';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\n\n/**\n * Template block layout metadata loader\n */\nexport const TemplateBlockLayoutMetadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor<TemplateBlockComponentOptions>> = async () => new (await import('./metadata/templateBlock.layoutMetadata')).TemplateBlockLayoutEditorMetadata();\n\n/**\n * Template block layout designer type loader\n */\nexport const TemplateBlockLayoutDesignerTypeLoader: DynamicMetadataLoader<Type<LayoutComponent>> = async () => (await import('./designer/templateBlockDesigner.component')).TemplateBlockDesignerSAComponent;","<ng-container *layoutComponentRenderer=\"metadata\"/>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {LayoutComponent, LayoutComponentBase, LayoutComponentMetadata, LayoutComponentRendererSADirective, LAYOUT_METADATA_STORAGE, LayoutRenderer} from '@anglr/dynamic/layout';\nimport {LayoutEditorDesignerType, LayoutEditorMetadata} from '@anglr/dynamic/layout-editor';\nimport {RelationsChangeDetector, RelationsComponentManager, RelationsManager, RelationsProcessor, RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {HostDisplayBlockStyle} from '@anglr/common';\nimport {MetadataStorage} from '@anglr/dynamic';\n\nimport {TemplateBlockComponentOptions} from './templateBlock.options';\nimport {TemplateBlockLayoutDesignerTypeLoader, TemplateBlockLayoutMetadataLoader} from './templateBlock.metadata';\n\n/**\n * Component used for displaying template block\n */\n@Component(\n{\n    selector: 'template-block',\n    templateUrl: 'templateBlock.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    providers:\n    [\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n        RelationsChangeDetector,\n        LayoutRenderer,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@LayoutEditorDesignerType(TemplateBlockLayoutDesignerTypeLoader)\n@LayoutEditorMetadata(TemplateBlockLayoutMetadataLoader)\nexport class TemplateBlockSAComponent extends LayoutComponentBase<TemplateBlockComponentOptions> implements LayoutComponent<TemplateBlockComponentOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for layout metadata\n     */\n    protected layoutMetadataStorage: MetadataStorage<LayoutComponentMetadata> = inject(LAYOUT_METADATA_STORAGE);\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]>|null = inject(RELATIONS_METADATA_STORAGE, {optional: true});\n\n    /**\n     * Instance of relations manager\n     */\n    protected relationsManager: RelationsManager|null = inject(RelationsManager, {optional: true});\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of metadata to be displayed\n     */\n    protected metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onOptionsSet(): Promise<void>\n    {\n        //TODO: check if required\n        // if(!this.initialized)\n        // {\n        //     return;\n        // }\n\n        const id = this.options?.layoutId;\n\n        if(!id)\n        {\n            return;\n        }\n\n        this.metadata = await this.layoutMetadataStorage.getMetadata(id);\n\n        if(this.relationsManager && this.relationsMetadataStorage)\n        {\n            const relations = await this.relationsMetadataStorage.getMetadata(id);\n\n            this.relationsManager.setRelations(relations ?? []);\n        }\n    }\n}","import {ComponentStylingExtension} from '@anglr/dynamic/layout';\n\nimport {TemplateBlockSAComponent} from './templateBlock.component';\n\nexport default TemplateBlockSAComponent;\n\nexport const extensions = [ComponentStylingExtension];","import {Type} from '@angular/core';\nimport {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\nimport {LayoutComponent} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Sets layout editor designer type for class on which is this decorator applied\n * @param metadataLoader - Layout editor designer type loader function used for obtaining designer type\n */\nexport function LayoutEditorDesignerType(metadataLoader: DynamicMetadataLoader<Type<LayoutComponent>>): ClassDecorator\n{\n    return DynamicClassMetadata<Type<LayoutComponent>, LayoutEditorDesignerTypeType>(metadataLoader, 'layoutEditorDesignerType');\n}","import {DynamicClassMetadata, DynamicMetadataLoader} from '@anglr/dynamic';\n\nimport {LayoutEditorMetadataDescriptor, LayoutEditorMetadataType} from '../../decorators';\n\n/**\n * Sets layout editor metadata to class on which is this decorator applied\n * @param metadataLoader - Layout editor metadata loader function used for obtaining metadata\n */\nexport function LayoutEditorMetadata(metadataLoader: DynamicMetadataLoader<LayoutEditorMetadataDescriptor>): ClassDecorator\n{\n    return DynamicClassMetadata<LayoutEditorMetadataDescriptor, LayoutEditorMetadataType>(metadataLoader, 'layoutEditorMetadata');\n}","import {ChangeDetectorRef, Directive, ElementRef, Injector, OnDestroy, SimpleChanges, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtension} from '@anglr/dynamic';\nimport {isEmptyObject, nameof, PromiseOr} from '@jscrpt/common';\n\nimport {LayoutComponent} from '../../interfaces';\n\n/**\n * Base component for layout component\n */\n@Directive()\nexport abstract class LayoutComponentBase<TOptions> implements LayoutComponent<TOptions>, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Array of extensions that are registered for component\n     */\n    protected extensions: DynamicItemExtension<TOptions>[] = [];\n\n    //TODO: check whether this is necessary\n\n    /**\n     * Indication whether was component destroyed\n     */\n    protected destroyed: boolean = false;\n\n    /**\n     * Gets options safely\n     */\n    protected get optionsSafe(): TOptions\n    {\n        if(!this.options)\n        {\n            throw new Error('LayoutComponentBase: missing options');\n        }\n\n        return this.options;\n    }\n\n    //######################### protected properties #########################\n\n    /**\n     * Gets element that is used within extension\n     */\n    protected get element(): ElementRef<HTMLElement>\n    {\n        return this.componentElement;\n    }\n\n    /**\n     * Gets options that are used within extension\n     */\n    protected get extensionsOptions(): any|undefined|null\n    {\n        return this.options;\n    }\n\n    /**\n     * Instance of change detector for running explicit change detection\n     */\n    protected changeDetector: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n    /**\n     * Instance of components element\n     */\n    protected componentElement: ElementRef<HTMLElement> = inject(ElementRef<HTMLElement>);\n\n    /**\n     * Injector used for obtaining dependencies\n     */\n    protected injector: Injector = inject(Injector);\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    //######################### public properties - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public options: TOptions|undefined|null;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        //TODO: maybe fix this with relationsOnDestroy()\n        this.logger.debug('LayoutComponentBase: destroying component, isDestroyed {{destroyed}}', {destroyed: this.destroyed});\n\n        if(this.destroyed)\n        {\n            return;\n        }\n\n        this.destroyed = true;\n\n        for(const ext of this.extensions)\n        {\n            ext.destroy();\n        }\n\n        this.onDestroy();\n    }\n\n    //######################### public methods - implementation of LayoutComponent #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnInit(): Promise<void>\n    {\n        const extensionsOptions = this.extensionsOptions;\n        \n        await this.onInit();\n        await this.onOptionsSet();\n\n        if(extensionsOptions)\n        {\n            for(const extension of this.extensions)\n            {\n                await extension.initialize(this.injector, this.element, this);\n            }\n        }\n\n        await this.afterInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async dynamicOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //options has changed\n        if(nameof<LayoutComponentBase<TOptions>>('options') in changes)\n        {\n            //called only when options has changed\n            if(!changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                await this.onOptionsSet();\n            }\n\n            const extensionsOptions = this.extensionsOptions;\n\n            //set options in extensions\n            if(extensionsOptions)\n            {\n                for(const extension of this.extensions)\n                {\n                    await extension.optionsChange(extensionsOptions);\n                }\n            }\n\n            if(changes[nameof<LayoutComponentBase<TOptions>>('options')].firstChange)\n            {\n                return;\n            }\n\n            await this.onOptionsChange();\n        }\n\n        delete changes[nameof<LayoutComponentBase<TOptions>>('options')];\n\n        if(!isEmptyObject(changes))\n        {\n            this.onChanges(changes);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public registerExtensions(extensions: DynamicItemExtension[]): void\n    {\n        this.extensions = extensions;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialzation of component, options are already set\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called right after initialization finished, including extesions\n     */\n    protected afterInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options, after initialization\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Occurs when some property changes on component\n     * @param changes - Changes that occured on component\n     */\n    protected onChanges(_changes: SimpleChanges): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called everytime options are set, after initialization and after each change (not initial change)\n     */\n    protected onOptionsSet(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called when component is being destroyed\n     */\n    protected onDestroy(): void\n    {\n    }\n}","import {Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges, ValueProvider, ViewContainerRef, inject} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemExtensionType, SCOPE_ID} from '@anglr/dynamic';\nimport {Action1, generateId, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {LayoutComponentMetadata} from '../../interfaces';\nimport {LAYOUT_COMPONENT_CHILD_EXTENSIONS} from '../../misc/tokens';\nimport {LayoutRenderer} from '../../services';\n\n/**\n * Renders layout component from metadata using LayoutRenderer\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        },\n        \n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Id of this renderer directive\n     */\n    protected id: string = generateId(15);\n\n    /**\n     * Instance of view container used for rendering dynamic component at location of this directive\n     */\n    protected viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n    /**\n     * Instance of layout renderer that will perform rendering of component\n     */\n    protected renderer: LayoutRenderer = inject(LayoutRenderer);\n\n    /**\n     * Instance of parent directive or null if this is root directive\n     */\n    protected parentRendererDirective = inject(LayoutComponentRendererSADirective, {optional: true, skipSelf: true});\n\n    /**\n     * Instance of logger used for creating logs\n     */\n    protected logger: Logger = inject(LOGGER);\n\n    /**\n     * Id of scope for current component\n     */\n    protected scopeId: string|undefined|null = inject(SCOPE_ID, {optional: true});\n\n    /**\n     * Array of child extensions that can be applied to component from its parent\n     */\n    protected childExtensions: DynamicItemExtensionType[]|undefined|null = inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS, {optional: true, skipSelf: true});\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata|undefined|null;\n\n    /**\n     * Callback method called when component has been rendered\n     */\n    @Input('layoutComponentRendererCallback')\n    public renderedCallback: Action1<unknown>|undefined|null;\n\n    /**\n     * Custom injector that will be used as parent of dynamic component\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutComponentRendererSADirective>('componentMetadata') in changes)\n        {\n            const change = changes[nameof<LayoutComponentRendererSADirective>('componentMetadata')];\n\n            //component added to renderer\n            if(isPresent(change.currentValue) && isBlank(change.previousValue))\n            {\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component changed\n            else if(isPresent(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n\n                const metadata = change.currentValue as LayoutComponentMetadata;\n\n                this.logger.debug('LayoutComponentRendererSADirective: registering component for rendering \"{{id}}\" inside renderer \"{{rendererId}}\" with parent renderer \"{{parentRenderer}}\" and parent component \"{{parentComponent}}\"',\n                {\n                    id: metadata.id,\n                    rendererId: this.id,\n                    parentRenderer: this.parentRendererDirective?.id,\n                    parentComponent: this.parentRendererDirective?.componentMetadata?.id,\n                });\n    \n                //registers renderer and component\n                this.renderer.registerRenderer(this.id,\n                                               this.parentRendererDirective?.id,\n                                               this.viewContainer,\n                                               metadata,\n                                               this.parentRendererDirective?.componentMetadata,\n                                               this.scopeId,\n                                               this.childExtensions,\n                                               this.renderedCallback,\n                                               this.customInjector,);\n            }\n            //component removed from renderer, unregister renderer\n            else if(isBlank(change.currentValue) && isPresent(change.previousValue))\n            {\n                this.logger.debug('LayoutComponentRendererSADirective: unregistering component from rendering \"{{id}}\"', {id: this.id});\n\n                this.renderer.unregisterRenderer(this.id);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.logger.debug('LayoutComponentRendererSADirective: destroying renderer \"{{id}}\" with component \"{{componentId}}\"',\n        {\n            id: this.id,\n            componentId: this.componentMetadata?.id,\n        });\n\n        this.renderer.destroyRenderer(this.id);\n    }\n}","import {DynamicItemExtension, DynamicItemExtensionBase} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\n\nimport {ComponentStylingOptions} from '../../interfaces';\n\n/**\n * Extension that applies common component styling to component\n */\nexport class ComponentStylingExtension extends DynamicItemExtensionBase<ComponentStylingOptions> implements DynamicItemExtension<ComponentStylingOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Value of last css class\n     */\n    protected lastCssClass: string|undefined|null;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override onInit(): void\n    {\n        this.applyStyling();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsChange(): void\n    {\n        this.applyStyling();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies component styling to element\n     */\n    protected applyStyling(): void\n    {\n        const options = this.options;\n        const style = this.element?.nativeElement.style;\n\n        if(this.element)\n        {\n            if(isPresent(this.lastCssClass))\n            {\n                for(const cssClass of this.lastCssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element.nativeElement.classList.remove(cssClass);\n                    }\n                }\n            }\n\n            this.lastCssClass = options?.cssClass;\n\n            if(options?.cssClass)\n            {\n                for(const cssClass of options.cssClass.split(' '))\n                {\n                    if(cssClass)\n                    {\n                        this.element?.nativeElement.classList.add(cssClass);\n                    }\n                }\n            }\n        }\n\n        if(isPresent(style))\n        {\n            if(options?.margin)\n            {\n                style.marginBottom = options.margin.bottom ?? '';\n                style.marginRight = options.margin.right ?? '';\n                style.marginTop = options.margin.top ?? '';\n                style.marginLeft = options.margin.left ?? '';\n            }\n\n            if(options?.padding)\n            {\n                style.paddingBottom = options.padding.bottom ?? '';\n                style.paddingRight = options.padding.right ?? '';\n                style.paddingTop = options.padding.top ?? '';\n                style.paddingLeft = options.padding.left ?? '';\n            }\n\n            if(options?.textStyling)\n            {\n                style.fontSize = options.textStyling.fontSize ?? '';\n                style.fontWeight = options.textStyling.fontWeight?.toString() ?? '';\n            }\n        }\n    }\n}","import {ElementRef, Injector} from '@angular/core';\nimport {PromiseOr} from '@jscrpt/common';\n\nimport {DynamicItem, DynamicItemExtension, DynamicItemMetadata} from '../interfaces';\n\n/**\n * Dynamic item extension base class\n */\nexport abstract class DynamicItemExtensionBase<TOptions = unknown, TInstance extends DynamicItem = any> implements DynamicItemExtension<TOptions, TInstance>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Injector from extended component\n     */\n    protected injector?: Injector;\n\n    /**\n     * Element that could be extended\n     */\n    protected element?: ElementRef<HTMLElement>;\n\n    /**\n     * Options that stores extension and component data\n     */\n    protected options?: TOptions;\n\n    /**\n     * Instance of dynamic item that is being extended\n     */\n    protected instance?: TInstance;\n\n    /**\n     * Indication whether was extension initialized\n     */\n    protected initialized: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected metadata: DynamicItemMetadata)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemExtension #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async initialize(injector: Injector, element: ElementRef<HTMLElement>, instance: TInstance): Promise<void>\n    {\n        this.initialized = true;\n\n        this.injector = injector;\n        this.element = element;\n        this.instance = instance;\n\n        await this.onInit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public async optionsChange(options: TOptions): Promise<void>\n    {\n        this.options = options;\n\n        if(!this.initialized)\n        {\n            return;\n        }\n\n        await this.onOptionsChange();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public destroy(): void\n    {\n        this.onDestroy();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Called on initialization of component\n     */\n    protected onInit(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on change of options of component\n     */\n    protected onOptionsChange(): PromiseOr<void>\n    {\n    }\n\n    /**\n     * Called on destruction of component\n     */\n    protected onDestroy(): void\n    {\n    }\n}"],"names":["TemplateBlockLayoutMetadataLoader","_ref","_asyncToGenerator","TemplateBlockLayoutEditorMetadata","apply","arguments","TemplateBlockLayoutDesignerTypeLoader","_ref2","TemplateBlockDesignerSAComponent","i0","TemplateBlockSAComponent","LayoutComponentBase","constructor","layoutMetadataStorage","inject","LAYOUT_METADATA_STORAGE","relationsMetadataStorage","RELATIONS_METADATA_STORAGE","optional","relationsManager","RelationsManager","metadata","onOptionsSet","_this","id","options","layoutId","getMetadata","relations","setRelations","t","selectors","standalone","features","RelationsComponentManager","RelationsProcessor","RelationsChangeDetector","LayoutRenderer","decls","vars","consts","template","rf","ctx","TemplateBlockSAComponent_ng_container_0_Template","LayoutComponentRendererSADirective","styles","changeDetection","__decorate","LayoutEditorDesignerType","LayoutEditorMetadata","extensions","ComponentStylingExtension","metadataLoader","DynamicClassMetadata","destroyed","changeDetector","ChangeDetectorRef","componentElement","ElementRef","injector","Injector","logger","LOGGER","optionsSafe","this","Error","element","extensionsOptions","ngOnDestroy","debug","ext","destroy","onDestroy","dynamicOnInit","onInit","extension","initialize","afterInit","dynamicOnChanges","changes","_this2","nameof","firstChange","optionsChange","onOptionsChange","isEmptyObject","onChanges","registerExtensions","invalidateVisuals","detectChanges","_changes","generateId","viewContainer","ViewContainerRef","renderer","parentRendererDirective","skipSelf","scopeId","SCOPE_ID","childExtensions","LAYOUT_COMPONENT_CHILD_EXTENSIONS","ngOnChanges","change","isPresent","currentValue","isBlank","previousValue","rendererId","parentRenderer","parentComponent","componentMetadata","registerRenderer","renderedCallback","customInjector","unregisterRenderer","componentId","destroyRenderer","inputs","provide","useValue","DynamicItemExtensionBase","applyStyling","style","nativeElement","lastCssClass","cssClass","split","classList","remove","add","margin","marginBottom","bottom","marginRight","right","marginTop","top","marginLeft","left","padding","paddingBottom","paddingRight","paddingTop","paddingLeft","textStyling","fontSize","fontWeight","toString","initialized","instance"],"sourceRoot":""}