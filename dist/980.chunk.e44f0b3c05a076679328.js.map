{"version":3,"file":"980.chunk.e44f0b3c05a076679328.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/node/transformDataNode.component.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/transformData.interface.ts","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/node/transformDataNode.component.html","webpack://ng-universal-demo/../basic-components/src/dynamicItems/transformData/metadata/transformData.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/misc/nodeRelationPath.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.types.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.options.ts","webpack://ng-universal-demo/../relations-editor/src/directives/relationsNodeRenderer/relationsNodeRenderer.directive.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsCanvas/relationsCanvas.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/constants.ts","webpack://ng-universal-demo/../relations-editor/src/misc/enums.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/monaco.init.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditor/codeEditor.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.ts","webpack://ng-universal-demo/../src/modules/codeEditor/components/codeEditorDialog/codeEditorDialog.component.html","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/languageModel.ts","webpack://ng-universal-demo/../src/modules/codeEditor/misc/types/languageModels/typescriptLanguageModel.ts"],"sourcesContent":["import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef} from '@angular/core';\nimport {CodeEditorContent, CodeEditorDialogComponent, CodeEditorDialogData, TypescriptLanguageModel} from '@anglr/dynamic';\nimport {RelationsNode, RelationsNodeBase, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeInputSAComponent} from '@anglr/dynamic/relations-editor';\nimport {TitledDialogService} from '@anglr/common/material';\nimport {generateId} from '@jscrpt/common';\nimport typings from '!!raw-loader?esModule!@anglr/dynamic/typings/transformData';\nimport {languages} from 'monaco-editor';\nimport {lastValueFrom} from 'rxjs';\n\nimport {TransformDataRelationsEditorOptions, TransformDataRelationsOptions} from '../transformData.options';\n\nlanguages.typescript.typescriptDefaults.addExtraLib(typings, 'file:///node_modules/@types/transformData/index.d.ts');\n\n/**\n * Relations node component for transform data\n */\n@Component(\n{\n    selector: 'transform-data-node',\n    templateUrl: 'transformDataNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TransformDataNodeSAComponent extends RelationsNodeBase<TransformDataRelationsOptions, TransformDataRelationsEditorOptions> implements RelationsNode<TransformDataRelationsOptions, TransformDataRelationsEditorOptions>\n{\n//######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                protected dialog: TitledDialogService,)\n    {\n        super(changeDetector, element);\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows code editor\n     */\n    protected async showCodeEditor(): Promise<void>\n    {\n        const result = await lastValueFrom(this.dialog.open<CodeEditorDialogComponent, CodeEditorDialogData, CodeEditorContent|null>(CodeEditorDialogComponent,\n        {\n            title: 'Code editor',\n            width: '75vw',\n            height: '75vh',\n            data: \n            {\n                content: this.metadata?.nodeMetadata?.options?.content ?? '',\n                languageModel: TypescriptLanguageModel(\n`import {TransformData} from 'transformData';\n\n/**\n * Transformer function that performs transformation\n */\nconst transformer: TransformData<any, any> = data =>\n{\n    return data;\n};\n \nexport default transformer;\n`),\n            }\n        }).afterClosed());\n\n        if(!this.metadata?.relationsOptions || !result || !this.metadata.nodeMetadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions.code = result.code;\n        this.metadata.nodeMetadata.options ??= {content: ''};\n        this.metadata.nodeMetadata.options.content = result.content;\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override metadataSet(): void\n    {\n        if(this.metadata?.relationsOptions)\n        {\n            this.metadata.relationsOptions.id ??= generateId(12);\n        }\n    }\n}","export default \"/**\\n * Transforms data to another form of data\\n * @param data - Data to be transformed\\n */\\nexport type TransformData<TData = any, TResult = any> = (data: TData) => TResult;\";","<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"transform data\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"data\" [parent]=\"this\"></relation-node-input>\n                <div>data</div>\n            </div>\n        </div>\n\n        <div class=\"outputs\">\n            <div class=\"output\">\n                <div>transformed data</div>\n                <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"transformedData\" [parent]=\"this\"></relation-node-output>\n            </div>\n        </div>\n    </div>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" (click)=\"showCodeEditor()\">\n        <span>code</span>\n    </button>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {TransformDataNodeSAComponent} from '../node/transformDataNode.component';\n\n/**\n * Transform data relations metadata\n */\nexport class TransformDataRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Transform data',\n        description: 'Code that allows data tranformation',\n        group: 'Data',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = TransformDataNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {MetadataHistoryManager} from '@anglr/dynamic';\nimport {Selection, BaseType, Line, line, curveBundle} from 'd3';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationsNodeManager} from '../services';\nimport {INVALIDATE_DROP} from './constants';\n\nconst STROKE_WIDTH = '3px';\nconst HIGHLIGHT_STROKE_WIDTH = '5px';\n\n/**\n * Class that represents node relation path\n */\nexport class NodeRelationPath\n{\n    //######################### protected fields #########################\n\n    /**\n     * Subject used for emitting destroying event\n     */\n    protected _destroyingSubject: Subject<void> = new Subject<void>();\n\n    /**\n     * Object that represents rendered path\n     */\n    protected _path: Selection<SVGPathElement, {}, null, undefined>;\n\n    /**\n     * Line generator for generating lines\n     */\n    protected _lineGenerator: Line<[number, number]>;\n\n    //######################### public properties #########################\n\n    /**\n     * Output from which relation start\n     */\n    public output: RelationsOutput|undefined|null = null;\n\n    /**\n     * Input where relation ends\n     */\n    public input: RelationsInput|undefined|null = null;\n\n    /**\n     * Occurs when this relation is being destroyed\n     */\n    public get destroying(): Observable<void>\n    {\n        return this._destroyingSubject.asObservable();\n    }\n\n    //######################### constructor #########################\n\n    constructor(protected _parentGroup: Selection<BaseType, {}, null, undefined>,\n                protected _relationManager: RelationsNodeManager,\n                protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,\n                public start: Coordinates|null,\n                public end: Coordinates|null)\n    {\n        this._path = this._parentGroup.append('path')\n            .attr('fill', 'transparent')\n            .attr('stroke', '#48B8B8')\n            .attr('stroke-width', STROKE_WIDTH)\n            .on('mouseover', () =>\n            {\n                this.highlight();\n            })\n            .on('mouseout', () =>\n            {\n                this.cancelHighlight();\n            });\n\n        this._lineGenerator = line()\n            .curve(curveBundle.beta(0.75));\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Method used for destroying this relation node\n     */\n    public destroy(): void\n    {\n        this._path?.remove();\n        this._destroyingSubject.next();\n    }\n\n    /**\n     * Highlights relation path and its input/output\n     */\n    public highlight(): void\n    {\n        this._path.attr('stroke-width', HIGHLIGHT_STROKE_WIDTH);\n        this.input?.highlight();\n        this.output?.highlight();\n    }\n\n    /**\n     * Cancel hight for relation path\n     */\n    public cancelHighlight(): void\n    {\n        this._path.attr('stroke-width', STROKE_WIDTH);\n        this.input?.cancelHighlight();\n        this.output?.cancelHighlight();\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     * @param propertyName - Name of property that has changed\n     */\n    public invalidateVisuals(propertyName?: string): void\n    {\n        if(propertyName == INVALIDATE_DROP)\n        {\n            const activeInput = this._relationManager.getActiveInput();\n            this._relationManager.setActiveInput(null);\n\n            //drop not on input\n            if(!activeInput)\n            {\n                this.destroy();\n                this.start = null;\n                this.end = null;\n                this.input = null;\n                this.output = null;\n            }\n            //drop on input peer\n            else\n            {\n                if (activeInput.addRelation(this))\n                {\n                    this.end = activeInput.getCoordinates();\n                    this.input = activeInput;\n                    this.history.getNewState();\n                }\n                else\n                {\n                    this.destroy();\n                    this.start = null;\n                    this.end = null;\n                    this.input = null;\n                    this.output = null;\n                    this.history.getNewState();\n                }\n            }\n        }\n\n        if(!this.start || !this.end)\n        {\n            return;\n        }\n\n        let points: [number,number][];\n\n        //path from right to left\n        if(this.end.x <= this.start.x)\n        {\n            let width = this.start.x - this.end.x;\n            const tenth = (this.end.y - this.start.y) / 10;\n\n            if(width < 12)\n            {\n                width = 12;\n            }\n\n            width *= 1.3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + 40, this.start.y],\n                [this.start.x + width, this.start.y + tenth],\n                [this.end.x - width, this.start.y + (9 * tenth)],\n                [this.end.x - 40, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n        //path from left to right\n        else\n        {\n            const width = this.end.x - this.start.x;\n            const third = width / 3;\n\n            points =\n            [\n                [this.start.x, this.start.y],\n                [this.start.x + third, this.start.y],\n                [this.end.x - third, this.end.y],\n                [this.end.x, this.end.y]\n            ];\n        }\n\n        this._path.attr('d', this._lineGenerator(points));\n    }\n}","/**\n * Defines behavior what should happen if rendered node type was not found\n */\nexport enum MissingNodeBehavior\n{\n    /**\n     * Shows special not found node as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing node, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing node error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Options for RelationsNodeRendererDirective\n */\nexport class RelationsNodeRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if relations node type described in metadata was not found\n     */\n    public missingNodeBehavior: MissingNodeBehavior = MissingNodeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingNodeBehavior?: MissingNodeBehavior)\n    {\n        if(isPresent(missingNodeBehavior))\n        {\n            this.missingNodeBehavior = missingNodeBehavior;\n        } \n    }\n}","import {ComponentRef, Directive, EventEmitter, Inject, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemLoader} from '@anglr/dynamic';\nimport {isPresent, nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {RelationsNode, RelationsNodeMetadata} from '../../interfaces';\nimport {RELATIONS_NODES_LOADER} from '../../misc/tokens';\nimport {RelationsNodeDef} from '../../misc/types';\nimport {RelationsNodeManager} from '../../services';\nimport {RelationsNodeRendererDirectiveOptions} from './relationsNodeRenderer.options';\nimport {MissingNodeBehavior} from './relationsNodeRenderer.types';\n\n/**\n * Renderer for dynamic relations node\n */\n@Directive(\n{\n    selector: '[relationsNodeRenderer]',\n    standalone: true,\n    exportAs: 'relationsNodeRenderer'\n})\nexport class RelationsNodeRendererSADirective<TComponent extends RelationsNode = any, TOptions = any, TEditorOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Destroy subscription\n     */\n    protected destroySubscription: Subscription|null = null;\n\n    /**\n     * Created component reference\n     */\n    protected componentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('relationsNodeRenderer')\n    public componentMetadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null = null;\n\n    /**\n     * Editor zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered node is created\n     */\n    @Output()\n    public create: EventEmitter<TComponent> = new EventEmitter<TComponent>();\n\n    /**\n     * Occurs when rendered node is destroyed\n     */\n    @Output()\n    public destroy: EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>> = new EventEmitter<RelationsNodeMetadata<TOptions, TEditorOptions>>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.componentRef)\n        {\n            return null;\n        }\n\n        return this.componentRef.instance;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                protected relationsNodeManager: RelationsNodeManager,\n                @Inject(RELATIONS_NODES_LOADER) protected loader: DynamicItemLoader<RelationsNodeDef>,\n                @Optional() protected options?: RelationsNodeRendererDirectiveOptions,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof RelationsNodeRendererDirectiveOptions))\n        {\n            this.options = new RelationsNodeRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        //only zoom level changed\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel') in changes && isPresent(this.zoomLevel) &&\n           !(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes))\n        {\n            const component = this.component;\n\n            //component is created\n            if(component)\n            {\n                const zoomChanges = changes[nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('zoomLevel')];\n                component.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', zoomChanges, zoomChanges.previousValue);\n\n                component.ngOnChanges(chngs);\n                component.invalidateVisuals();\n            }\n\n            return;\n        }\n\n        this.logger?.debug('RelationsNodeRendererSADirective: rendering node {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<RelationsNodeRendererSADirective<TComponent, TOptions, TEditorOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            let layoutComponentType = await this.loader.loadItem(this.componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('RelationsNodeRendererSADirective: Unable to find relations node type {@type}', {name: this.componentMetadata.name, package: this.componentMetadata.package});\n\n                switch(this.options?.missingNodeBehavior)\n                {\n                    default:\n                    //case MissingNodeBehavior.ShowNotFound:\n                    {\n                        layoutComponentType = await this.loader.loadItem(\n                        {\n                            package: 'basic-components',\n                            name: 'notFound',\n                        });\n\n                        if(!layoutComponentType)\n                        {\n                            this.logger?.error('RelationsNodeRendererSADirective: Unable to find not found node!');\n\n                            return;\n                        }\n\n                        break;\n                    }\n                    case MissingNodeBehavior.Ignore:\n                    {\n                        //do nothing\n                        return;\n                    }\n                    case MissingNodeBehavior.ThrowError:\n                    {\n                        throw new Error(`RelationsNodeRendererSADirective: Unable to find relations node type Name: ${this.componentMetadata.name} Package: ${this.componentMetadata.package}`);\n                    }\n                }\n            }\n\n            this.componentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                      {\n                                                                          injector: this.viewContainerRef.injector,\n                                                                      }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('RelationsNodeRendererSADirective: node rendered {@id}', {id: this.componentMetadata?.id});\n\n            if(this.component)\n            {\n                const node = this.component;\n\n                this.destroySubscription = node.destroy.subscribe(() => this.ngOnDestroy());\n\n                this.logger?.debug('RelationsNodeRendererSADirective: initializing node with metadata {@id}', {id: this.componentMetadata?.id});\n                node.metadata = this.componentMetadata;\n                node.zoomLevel = this.zoomLevel;\n\n                const chngs: SimpleChanges = {};\n\n                addSimpleChange<RelationsNode>(chngs, 'metadata', this.componentMetadata, null, true);\n                addSimpleChange<RelationsNode>(chngs, 'zoomLevel', this.zoomLevel, null, true);\n                \n                node.ngOnChanges(chngs);\n                await node.initialize();\n\n                this.logger?.debug('RelationsNodeRendererSADirective: invalidating node visuals {@id}', {id: this.componentMetadata?.id});\n                node.invalidateVisuals();\n                this.componentRef.changeDetectorRef.markForCheck();\n\n                this.relationsNodeManager.registerNode(this.component);\n                this.create.next(node);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.destroySubscription?.unsubscribe();\n        this.destroySubscription = null;\n\n        if(this.componentRef)\n        {\n            this.logger?.debug('RelationsNodeRendererSADirective: destroying node {@id}', {id: this.componentMetadata?.id});\n    \n            if(this.component)\n            {\n                if(this.componentMetadata)\n                {\n                    this.destroy.next(this.componentMetadata);\n                }\n                \n                this.relationsNodeManager.unregisterNode(this.component);\n            }\n\n            this.componentRef?.destroy();\n            this.componentRef = null;\n        }\n    }\n}","<div class=\"flow-area\" [style.transform]=\"'translate(' + canvasPosition.x + 'px, ' + canvasPosition.y + 'px) scale(' + zoomLevel + ')'\">\n    <svg class=\"relations-wrapper\">\n        <g #relationsGroup></g>\n    </svg>\n    \n    <ng-container *ngFor=\"let nodeDefinition of nodeDefinitions\">\n        <ng-container [relationsNodeRenderer]=\"nodeDefinition\" [zoomLevel]=\"zoomLevel\" (destroy)=\"destroyNode($event)\"></ng-container>\n    </ng-container>\n</div>","import {Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, ElementRef, Input, Inject, OnInit, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MetadataHistoryManager} from '@anglr/dynamic';\nimport {select} from 'd3';\nimport {Subscription} from 'rxjs';\n\nimport {Coordinates, RelationsNodeMetadata} from '../../interfaces';\nimport {RelationsNodeManager} from '../../services';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {clamp} from '../../misc/utils';\nimport {RelationsNodeRendererSADirective} from '../../directives';\nimport {RELATIONS_HISTORY_MANAGER} from '../../misc/tokens';\n\n/**\n * Default background size in pixels\n */\nconst DEFAULT_BACKGROUND_SIZE = 16;\n\n/**\n * Minimum scale factor\n */\nconst SCALE_FACTOR_MIN = 0.2;\n\n/**\n * Maximum sclae factor\n */\nconst SCALE_FACTOR_MAX = 2;\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'relations-canvas',\n    templateUrl: 'relationsCanvas.component.html',\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n        RelationsNodeRendererSADirective,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsCanvasSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected _initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Background pattern size\n     */\n    protected backgroundSize: number = DEFAULT_BACKGROUND_SIZE;\n\n    /**\n     * Drag start position coordinates\n     */\n    protected dragStartPosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    //######################### protected properties - host bindings #########################\n\n    /**\n     * Background size css styles\n     */\n    @HostBinding('style.backgroundSize')\n    protected get backgroundSizeStyle(): string\n    {\n        return `${this.backgroundSize}px ${this.backgroundSize}px`;\n    }\n\n    /**\n     * Background position css styles\n     */\n    @HostBinding('style.backgroundPosition')\n    protected get _backgroundPositionStyle(): string\n    {\n        return `${this.canvasPosition.x % this.backgroundSize}px ${this.canvasPosition.y % this.backgroundSize}px`;\n    }\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Canvas position\n     */\n    protected canvasPosition: Coordinates = {x: 0, y: 0};\n\n    /**\n     * Zoom level\n     */\n    protected zoomLevel = 1;\n\n    /**\n     * Indication whether canvas is being dragged\n     */\n    protected isDragging: boolean = false;\n\n    \n    //######################### protected properties - getters and setters #########################\n\n    /**\n     * Canvas bounding box\n     */\n    protected get boundingBox(): DOMRect\n    {\n        return this.element.nativeElement.getBoundingClientRect();\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Node relations svg group\n     */\n    @ViewChild('relationsGroup', {read: ElementRef})\n    protected relationsGroup: ElementRef|null|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Sample data to render\n     */\n    @Input()\n    public nodeDefinitions: RelationsNodeMetadata[] = [];\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef,\n                protected relationManager: RelationsNodeManager,\n                private _changeDetector: ChangeDetectorRef,\n                @Inject(RELATIONS_HISTORY_MANAGER) protected history: MetadataHistoryManager<RelationsNodeMetadata[]>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._initSubscriptions.add(this.relationManager.activeNodeChange.subscribe(() => this.focusNode(this.relationManager.activeNode)));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this._initSubscriptions.unsubscribe();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Focuses canvas to selected node\n     * @param id Relations node identifier\n     * @returns \n     */\n    public focusNode(id?: string|null): void\n    {\n        if (!id)\n        {\n            return;\n        }\n\n        const node = this.nodeDefinitions?.find(node => node.id === id);\n\n        if (node?.nodeMetadata?.coordinates)\n        {\n            // this._setZoomLevel(1);\n            this.canvasPosition = \n            {\n                x: (-node?.nodeMetadata?.coordinates.x) * this.zoomLevel  + this.boundingBox.width/2,\n                y: (-node?.nodeMetadata?.coordinates.y) * this.zoomLevel  + this.boundingBox.height/2,\n            };\n            \n            this._changeDetector.detectChanges();\n        }\n    }\n\n    /**\n     * Creates node relation path\n     */\n    public createRelation(): NodeRelationPath\n    {\n        return new NodeRelationPath(select(this.relationsGroup?.nativeElement), this.relationManager, this.history, null, null);\n    }\n\n    public getPositionInCanvas(point: {x: number, y: number}): Coordinates\n    {\n        return {\n            x: (point.x - this.boundingBox.left - this.canvasPosition.x)/this.zoomLevel,\n            y: (point.y - this.boundingBox.top - this.canvasPosition.y)/this.zoomLevel\n        };\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        if (event.buttons == MouseButton.LEFT)\n        {\n            this.dragStartPosition =\n            {\n                x: event.clientX - this.canvasPosition.x,\n                y: event.clientY - this.canvasPosition.y\n            };\n            \n            this.isDragging = true;\n        }\n    }\n\n    /**\n     * Mouse move event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.canvasPosition =\n            {\n                x: event.clientX - this.dragStartPosition.x,\n                y: event.clientY - this.dragStartPosition.y\n            };\n        }\n    }\n\n    /**\n     * Mouse up event, handles moving of canvas\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(_: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n        }\n    }\n\n    /**\n     * Wheel event, used for zooming\n     * @param event - Wheel event that occured\n     */\n    @HostListener('wheel', ['$event'])\n    protected onWheel(event: WheelEvent): void\n    {\n        if (event.deltaY)\n        {\n            const newZoomLevel = clamp(this.zoomLevel + (event.deltaY > 1 ? -1 : 1) * 0.05, SCALE_FACTOR_MIN, SCALE_FACTOR_MAX);    \n            \n            const posX = (event.clientX - this.canvasPosition.x - this.boundingBox.left) / this.zoomLevel;\n            const posY = (event.clientY - this.canvasPosition.y - this.boundingBox.top) / this.zoomLevel;\n\n            this.canvasPosition.x = event.clientX - this.boundingBox.left - posX*newZoomLevel;\n            this.canvasPosition.y = event.clientY - this.boundingBox.top - posY*newZoomLevel;\n\n            this._setZoomLevel(newZoomLevel);\n        }\n        \n        event.preventDefault();\n        event.stopImmediatePropagation();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Destroys node\n     * @param node - Definition of node to be destroyed\n     */\n    protected destroyNode(node: RelationsNodeMetadata): void\n    {\n        const index = this.nodeDefinitions.indexOf(node);\n\n        if(index < 0)\n        {\n            return;\n        }\n\n        this.nodeDefinitions.splice(index, 1);\n\n        this.history.getNewState();\n    }\n\n    //######################### private methods #########################\n\n    /**\n     * Sets zoom level\n     * @param newZoomLevel new zoom level\n     */\n    private _setZoomLevel(newZoomLevel: number): void\n    {\n        this.zoomLevel = newZoomLevel;\n        this.backgroundSize = DEFAULT_BACKGROUND_SIZE * this.zoomLevel;\n    }\n}","/**\n * Constant represents name of invalidation for svg drop relation\n */\nexport const INVALIDATE_DROP: string = 'drop';\n","/**\n * Available mouse buttons enum\n */\nexport enum MouseButton\n{\n    /**\n     * Left mouse button\n     */\n    LEFT = 1,\n}","import {globalDefine, isBlank} from '@jscrpt/common';\nimport {languages} from 'monaco-editor';\n\ndeclare let ngDynamicMonacoPath: string;\n\nglobalDefine(global =>\n{\n    if(isBlank(global.ngDynamicMonacoPath))\n    {\n        global.ngDynamicMonacoPath = 'dist';\n    }\n});\n\n(self as any).MonacoEnvironment = \n{\n    getWorkerUrl: function(_: string, label: string)\n    {\n        if (label === 'json')\n        {\n            return `${ngDynamicMonacoPath}/json.worker.js`;\n        }\n        \n        if (label === 'css' || label === 'scss' || label === 'less')\n        {\n            return `${ngDynamicMonacoPath}/css.worker.js`;\n        }\n\n        if (label === 'html' || label == 'handlebars')\n        {\n            return `${ngDynamicMonacoPath}/html.worker.js`;\n        }\n\n        if (label === 'typescript' || label === 'javascript')\n        {\n            return `${ngDynamicMonacoPath}/ts.worker.js`;\n        }\n\n        return `${ngDynamicMonacoPath}/editor.worker.js`;\n    }\n};\n\nconst options: languages.typescript.CompilerOptions =\n{\n    target: languages.typescript.ScriptTarget.ES2020,\n    module: languages.typescript.ModuleKind.CommonJS,\n    moduleResolution: languages.typescript.ModuleResolutionKind.NodeJs,\n    allowNonTsExtensions: true,\n    removeComments: true,\n    noEmitOnError: true,\n    noImplicitAny: true,\n    noImplicitReturns: true,\n    noImplicitOverride: true,\n    noImplicitThis: true,\n    noUnusedLocals: true,\n    noUnusedParameters: true,\n    strict: true,\n    strictNullChecks: true,\n    esModuleInterop: true,\n    newLine: languages.typescript.NewLineKind.LineFeed,\n    typeRoots: ['node_modules/@types']\n};\n\nlanguages.typescript.typescriptDefaults.setDiagnosticsOptions(\n{\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n});\n\nlanguages.typescript.typescriptDefaults.setCompilerOptions(options);\n\n/**\n * Indication that monaco init code was called\n */\nexport const monacoInit: boolean = true;","import {Component, ChangeDetectionStrategy, ElementRef, OnDestroy, AfterViewInit, Input, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\nimport {isBlank, isPresent, nameof} from '@jscrpt/common';\nimport {editor, IDisposable, KeyCode, KeyMod, Uri} from 'monaco-editor';\n\nimport {LanguageModel} from '../../misc/types';\nimport {CodeEditorContent} from './codeEditor.interface';\nimport {monacoInit} from './monaco.init';\n\n/**\n * Component used for editing code\n */\n@Component(\n{\n    selector: 'code-editor',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorComponent implements OnDestroy, AfterViewInit, OnChanges\n{\n    //######################### public static properties #########################\n\n    /**\n     * Indication whether was monaco init called\n     */\n    public static monacoInit: boolean = monacoInit;\n\n    //######################### protected fields #########################\n\n    /**\n     * Instance of code editor\n     */\n    protected codeEditor: editor.IStandaloneCodeEditor|null = null;\n\n    /**\n     * Opened file in editor\n     */\n    protected openedFile: editor.ITextModel|null = null;\n\n    /**\n     * Handler for event of change of model\n     */\n    protected changeEvent: IDisposable|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Content that is being displayed\n     */\n    @Input()\n    public content: string|undefined|null;\n\n    /**\n     * Language model used for selecting proper language\n     */\n    @Input()\n    public languageModel: LanguageModel|undefined|null;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when content of editor is saved\n     */\n    @Output()\n    public save: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    /**\n     * Occurs when content of editor changes, new value passed down\n     */\n    @Output()\n    public contentChange: EventEmitter<CodeEditorContent> = new EventEmitter<CodeEditorContent>();\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<CodeEditorComponent>('languageModel') in changes && this.languageModel &&\n           nameof<CodeEditorComponent>('content') in changes && isPresent(this.content))\n        {\n            this.updateContent();\n        }\n    }\n\n    //######################### public methods - implementation of AfterViewInit #########################\n    \n    /**\n     * Called when view was initialized\n     */\n    public ngAfterViewInit(): void\n    {\n        this.createEditor();\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Saves currently opened document\n     */\n    public async saveContent(): Promise<void>\n    {\n        if(this.openedFile && this.codeEditor && this.languageModel)\n        {\n            this.save.emit(\n            {\n                content: this.openedFile.getValue(),\n                code: await this.languageModel.compiledCode(this.codeEditor)\n            });\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.changeEvent?.dispose();\n        this.changeEvent = null;\n\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        this.codeEditor?.dispose();\n        this.codeEditor = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Creates editor\n     */\n    protected createEditor(): void\n    {\n        this.codeEditor = editor.create(this.element.nativeElement,\n        {\n            theme: 'vs-dark',\n            model: this.openedFile,\n            lightbulb:\n            {\n                enabled: true\n            },\n            bracketPairColorization: \n            {\n                enabled: true,\n            },\n            minimap:\n            {\n                enabled: true\n            },\n        });\n\n        this.codeEditor.addCommand(KeyMod.CtrlCmd | KeyCode.KeyS, () =>\n        {\n            this.saveContent();\n        });\n\n        this.changeEvent = this.codeEditor.onDidChangeModelContent(async () =>\n        {\n            if(this.openedFile && this.languageModel && this.codeEditor)\n            {\n                this.contentChange.emit(\n                {\n                    content: this.openedFile.getValue(),\n                    code: await this.languageModel.compiledCode(this.codeEditor)\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates content of code editor\n     */\n    protected updateContent(): void\n    {\n        this.openedFile?.dispose();\n        this.openedFile = null;\n\n        if(!this.languageModel || isBlank(this.content))\n        {\n            return;\n        }\n\n        this.openedFile = editor.createModel((this.content || this.languageModel.initialData) ?? '', this.languageModel.language, Uri.file(`file:///index.${this.languageModel.extension}`));\n        this.codeEditor?.setModel(this.openedFile);\n    }\n}","import {Component, ChangeDetectionStrategy, Inject} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {TITLED_DIALOG_DATA} from '@anglr/common/material';\n\nimport {CodeEditorDialogData} from './codeEditorDialog.interface';\nimport {CodeEditorContent} from '../codeEditor/codeEditor.interface';\nimport {CodeEditorComponent} from '../codeEditor/codeEditor.component';\n\n/**\n * Component used as dialog displaying code editor\n */\n@Component(\n{\n    selector: 'code-editor-dialog',\n    templateUrl: 'codeEditorDialog.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CodeEditorDialogComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Current content of code editor\n     */\n    protected editorContent: CodeEditorContent|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(TITLED_DIALOG_DATA) protected data: CodeEditorDialogData,\n                protected dialog: MatDialogRef<CodeEditorDialogComponent, CodeEditorContent|null>,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Saves content of code editor and closes dialog\n     * @param editor - Instance of code editor\n     */\n    protected async saveAndClose(editor: CodeEditorComponent): Promise<void>\n    {\n        await editor.saveContent();\n        this.dialog.close(this.editorContent);\n    }\n}","<code-editor #editor style=\"height: calc(70vh - 46px); width: calc(75vw - 20px);\" [content]=\"data.content\" [languageModel]=\"data.languageModel\" (save)=\"editorContent = $event\"></code-editor>\n\n<div class=\"dynamic-flex-row dynamic-flex-end dynamic-margin-top-extra-small\">\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-info dynamic-margin-right-extra-small\" type=\"button\" [mat-dialog-close]=\"null\">\n        <span>cancel</span>\n    </button>\n\n    <button type=\"button\" class=\"dynamic-btn dynamic-btn-primary\" type=\"button\" (click)=\"saveAndClose(editor)\">\n        <span>ok</span>\n    </button>\n</div>","import {Func1, PromiseOr} from '@jscrpt/common';\nimport {editor} from 'monaco-editor';\n\n/**\n * Class that represents language model for code editor\n */\nexport class LanguageModel\n{\n    //######################### constructor #########################\n    constructor(public language: string,\n                public extension: string,\n                public compiledCode: Func1<PromiseOr<string>, editor.IStandaloneCodeEditor>,\n                public initialData?: string,)\n    {\n    }\n}","import {languages} from 'monaco-editor';\n\nimport {LanguageModel} from './languageModel';\n\n/**\n * Typescript language model for code editor\n * @param initialValue - Initial value to be used as initial code\n */\nexport const TypescriptLanguageModel = (initialValue: string): LanguageModel => new LanguageModel('typescript',\n                                                                                                  'ts',\n                                                                                                  async editor =>\n                                                                                                  {\n                                                                                                      const uri = editor.getModel()?.uri;\n                                                                                                  \n                                                                                                      if(!uri)\n                                                                                                      {\n                                                                                                          return '';\n                                                                                                      }\n                                                                                                  \n                                                                                                      const worker = await languages.typescript.getTypeScriptWorker();\n                                                                                                      const client = await worker(uri);\n                                                                                                      const result = await client.getEmitOutput(uri.toString());\n                                                                                                  \n                                                                                                      return result.outputFiles[0].text;\n                                                                                                  },\n                                                                                                  initialValue);\n"],"names":["languages","TransformDataNodeSAComponent","RelationsNodeBase","constructor","changeDetector","element","dialog","super","showCodeEditor","result","lastValueFrom","open","CodeEditorDialogComponent","title","width","height","data","content","metadata","nodeMetadata","options","languageModel","TypescriptLanguageModel","afterClosed","relationsOptions","code","history","getNewState","metadataSet","this","id","generateId","selectors","standalone","features","decls","vars","consts","template","i0","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","TransformDataRelationsEditorMetadata","metaInfo","name","description","group","nodeDefinition","Object","freeze","NodeRelationPath","destroying","_destroyingSubject","asObservable","_parentGroup","_relationManager","start","end","Subject","output","input","_path","append","attr","on","highlight","cancelHighlight","_lineGenerator","line","curve","curveBundle","destroy","remove","next","invalidateVisuals","propertyName","INVALIDATE_DROP","activeInput","getActiveInput","setActiveInput","addRelation","getCoordinates","points","x","tenth","y","third","MissingNodeBehavior","RelationsNodeRendererDirectiveOptions","missingNodeBehavior","ShowNotFound","isPresent","RelationsNodeRendererSADirective","component","componentRef","instance","viewContainerRef","relationsNodeManager","loader","logger","destroySubscription","componentMetadata","zoomLevel","create","EventEmitter","ngOnChanges","changes","nameof","zoomChanges","chngs","addSimpleChange","previousValue","debug","ngOnDestroy","clear","layoutComponentType","loadItem","warn","package","error","Ignore","ThrowError","Error","createComponent","injector","node","subscribe","initialize","changeDetectorRef","markForCheck","registerNode","unsubscribe","unregisterNode","RELATIONS_NODES_LOADER","LOGGER","inputs","outputs","exportAs","RelationsCanvasSAComponent","backgroundSizeStyle","backgroundSize","_backgroundPositionStyle","canvasPosition","boundingBox","nativeElement","getBoundingClientRect","relationManager","_changeDetector","_initSubscriptions","Subscription","dragStartPosition","isDragging","nodeDefinitions","ngOnInit","add","activeNodeChange","focusNode","activeNode","find","coordinates","detectChanges","createRelation","select","relationsGroup","getPositionInCanvas","point","left","top","onMouseDown","event","buttons","MouseButton","clientX","clientY","onMouseMove","onMouseUp","_","onWheel","deltaY","newZoomLevel","clamp","posX","posY","_setZoomLevel","preventDefault","stopImmediatePropagation","destroyNode","index","indexOf","splice","RELATIONS_HISTORY_MANAGER","viewQuery","ElementRef","CommonModule","globalDefine","global","isBlank","ngDynamicMonacoPath","self","MonacoEnvironment","getWorkerUrl","label","target","module","moduleResolution","allowNonTsExtensions","removeComments","noEmitOnError","noImplicitAny","noImplicitReturns","noImplicitOverride","noImplicitThis","noUnusedLocals","noUnusedParameters","strict","strictNullChecks","esModuleInterop","newLine","typeRoots","noSemanticValidation","noSyntaxValidation","CodeEditorComponent","codeEditor","openedFile","changeEvent","save","contentChange","updateContent","ngAfterViewInit","createEditor","saveContent","emit","getValue","compiledCode","dispose","editor","theme","model","lightbulb","enabled","bracketPairColorization","minimap","addCommand","KeyMod","KeyCode","onDidChangeModelContent","initialData","language","Uri","extension","setModel","editorContent","saveAndClose","close","TITLED_DIALOG_DATA","LanguageModel","initialValue","uri","getModel","worker","client","getEmitOutput","toString","outputFiles","text"],"sourceRoot":""}