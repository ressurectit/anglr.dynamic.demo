{"version":3,"file":"6973.chunk.45943cb2b4af6424db0f.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/modules/castPipes.module.ts","webpack://ng-universal-demo/../../../../src/pipes/isPresent/isPresent.pipe.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/list-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/module.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-config.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tabs-animations.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-body.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-body.html","webpack://ng-universal-demo/../../../../src/material/tabs/ink-bar.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label-wrapper.ts","webpack://ng-universal-demo/../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","webpack://ng-universal-demo/../../../../src/material/tabs/paginated-tab-header.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-header.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.ts","webpack://ng-universal-demo/../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-group.html","webpack://ng-universal-demo/../../../../src/material/tabs/tab-content.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab-label.ts","webpack://ng-universal-demo/../../../../src/material/tabs/tab.ts","webpack://ng-universal-demo/../../src/material/tabs/tab.html"],"sourcesContent":["import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {NgModule} from '@angular/core';\n\nimport {AsHtmlElementPipe, AsNgClassRequiredPipe, AsRequiredTypePipe, CastTypePipe} from '../pipes';\n\n/**\n * Module that holds cast pipes\n */\n@NgModule(\n{\n    declarations:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ],\n    exports:\n    [\n        AsHtmlElementPipe,\n        AsNgClassRequiredPipe,\n        AsRequiredTypePipe,\n        CastTypePipe,\n    ]\n})\nexport class CastPipesModule\n{\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {isPresent} from '@jscrpt/common';\n\n/**\n * Returns true if object is different from null or undefined\n */\n@Pipe(\n{\n    name: 'isPresent'\n})\nexport class IsPresentPipe implements PipeTransform\n{\n    //######################### public methods #########################\n\n    /**\n     * Checks whether is value different from null or undefined\n     * @param value - Value to be checked\n     */\n    public transform(value: any): boolean\n    {\n        return isPresent(value);\n    }\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n  PAGE_UP,\n  PAGE_DOWN,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._pressedLetters = [];\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabNav, MatTabNavPanel, MatTabLink} from './tab-nav-bar/tab-nav-bar';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatTabContent,\n    MatTabLabel,\n    MatTab,\n    MatTabGroup,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabContent,\n    MatTabLabel,\n    MatTab,\n    MatTabGroup,\n    MatTabNav,\n    MatTabNavPanel,\n    MatTabLink,\n\n    // Private directives, should not be exported.\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabLabelWrapper,\n    MatTabHeader,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state(\n      'left',\n      style({\n        transform: 'translate3d(-100%, 0, 0)',\n        minHeight: '1px',\n\n        // Normally this is redundant since we detach the content from the DOM, but if the user\n        // opted into keeping the content in the DOM, we have to hide it so it isn't focusable.\n        visibility: 'hidden',\n      }),\n    ),\n    state(\n      'right',\n      style({\n        transform: 'translate3d(100%, 0, 0)',\n        minHeight: '1px',\n        visibility: 'hidden',\n      }),\n    ),\n\n    transition(\n      '* => left, * => right, left => center, right => center',\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n    ]),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentFactoryResolver,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, startWith} from 'rxjs/operators';\nimport {AnimationEvent} from '@angular/animations';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]',\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    super(componentFactoryResolver, viewContainerRef, _document);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * pseudo-prior state.\n */\nexport type MatTabBodyPositionState =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'left-origin-center'\n  | 'right-origin-center';\n\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabBodyBase implements OnInit, OnDestroy {\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  readonly _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  abstract _portalHost: CdkPortalOutlet;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number | null;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() private _dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        // If the transition to the center is complete, emit an event.\n        if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n          this._onCentered.emit();\n        }\n\n        if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n          this._afterLeavingCenter.emit();\n        }\n      });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin(this.origin);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState | string): boolean {\n    return (\n      position == 'center' || position == 'left-origin-center' || position == 'right-origin-center'\n    );\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(origin: number): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-mdc-tab-body',\n  },\n})\nexport class MatTabBody extends _MatTabBodyBase {\n  @ViewChild(CdkPortalOutlet) _portalHost: CdkPortalOutlet;\n\n  constructor(\n    elementRef: ElementRef<HTMLElement>,\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n  ) {\n    super(elementRef, dir, changeDetectorRef);\n  }\n}\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n",null,"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ElementRef, InjectionToken, OnDestroy, OnInit, QueryList} from '@angular/core';\n\n/**\n * Item inside a tab header relative to which the ink bar can be aligned.\n * @docs-private\n */\nexport interface MatInkBarItem extends OnInit, OnDestroy {\n  elementRef: ElementRef<HTMLElement>;\n  activateInkBar(previousIndicatorClientRect?: ClientRect): void;\n  deactivateInkBar(): void;\n  fitInkBarToContent: boolean;\n}\n\n/** Class that is applied when a tab indicator is active. */\nconst ACTIVE_CLASS = 'mdc-tab-indicator--active';\n\n/** Class that is applied when the tab indicator should not transition. */\nconst NO_TRANSITION_CLASS = 'mdc-tab-indicator--no-transition';\n\n/**\n * Abstraction around the MDC tab indicator that acts as the tab header's ink bar.\n * @docs-private\n */\nexport class MatInkBar {\n  /** Item to which the ink bar is aligned currently. */\n  private _currentItem: MatInkBarItem | undefined;\n\n  constructor(private _items: QueryList<MatInkBarItem>) {}\n\n  /** Hides the ink bar. */\n  hide() {\n    this._items.forEach(item => item.deactivateInkBar());\n  }\n\n  /** Aligns the ink bar to a DOM node. */\n  alignToElement(element: HTMLElement) {\n    const correspondingItem = this._items.find(item => item.elementRef.nativeElement === element);\n    const currentItem = this._currentItem;\n\n    currentItem?.deactivateInkBar();\n\n    if (correspondingItem) {\n      const clientRect = currentItem?.elementRef.nativeElement.getBoundingClientRect?.();\n\n      // The ink bar won't animate unless we give it the `ClientRect` of the previous item.\n      correspondingItem.activateInkBar(clientRect);\n      this._currentItem = correspondingItem;\n    }\n  }\n}\n\n/**\n * Mixin that can be used to apply the `MatInkBarItem` behavior to a class.\n * Base on MDC's `MDCSlidingTabIndicatorFoundation`:\n * https://github.com/material-components/material-components-web/blob/c0a11ef0d000a098fd0c372be8f12d6a99302855/packages/mdc-tab-indicator/sliding-foundation.ts\n * @docs-private\n */\nexport function mixinInkBarItem<\n  T extends new (...args: any[]) => {elementRef: ElementRef<HTMLElement>},\n>(base: T): T & (new (...args: any[]) => MatInkBarItem) {\n  return class extends base {\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    private _inkBarElement: HTMLElement | null;\n    private _inkBarContentElement: HTMLElement | null;\n    private _fitToContent = false;\n\n    /** Whether the ink bar should fit to the entire tab or just its content. */\n    get fitInkBarToContent(): boolean {\n      return this._fitToContent;\n    }\n    set fitInkBarToContent(v: BooleanInput) {\n      const newValue = coerceBooleanProperty(v);\n\n      if (this._fitToContent !== newValue) {\n        this._fitToContent = newValue;\n\n        if (this._inkBarElement) {\n          this._appendInkBarElement();\n        }\n      }\n    }\n\n    /** Aligns the ink bar to the current item. */\n    activateInkBar(previousIndicatorClientRect?: ClientRect) {\n      const element = this.elementRef.nativeElement;\n\n      // Early exit if no indicator is present to handle cases where an indicator\n      // may be activated without a prior indicator state\n      if (\n        !previousIndicatorClientRect ||\n        !element.getBoundingClientRect ||\n        !this._inkBarContentElement\n      ) {\n        element.classList.add(ACTIVE_CLASS);\n        return;\n      }\n\n      // This animation uses the FLIP approach. You can read more about it at the link below:\n      // https://aerotwist.com/blog/flip-your-animations/\n\n      // Calculate the dimensions based on the dimensions of the previous indicator\n      const currentClientRect = element.getBoundingClientRect();\n      const widthDelta = previousIndicatorClientRect.width / currentClientRect.width;\n      const xPosition = previousIndicatorClientRect.left - currentClientRect.left;\n      element.classList.add(NO_TRANSITION_CLASS);\n      this._inkBarContentElement.style.setProperty(\n        'transform',\n        `translateX(${xPosition}px) scaleX(${widthDelta})`,\n      );\n\n      // Force repaint before updating classes and transform to ensure the transform properly takes effect\n      element.getBoundingClientRect();\n\n      element.classList.remove(NO_TRANSITION_CLASS);\n      element.classList.add(ACTIVE_CLASS);\n      this._inkBarContentElement.style.setProperty('transform', '');\n    }\n\n    /** Removes the ink bar from the current item. */\n    deactivateInkBar() {\n      this.elementRef.nativeElement.classList.remove(ACTIVE_CLASS);\n    }\n\n    /** Initializes the foundation. */\n    ngOnInit() {\n      this._createInkBarElement();\n    }\n\n    /** Destroys the foundation. */\n    ngOnDestroy() {\n      this._inkBarElement?.remove();\n      this._inkBarElement = this._inkBarContentElement = null!;\n    }\n\n    /** Creates and appends the ink bar element. */\n    private _createInkBarElement() {\n      const documentNode = this.elementRef.nativeElement.ownerDocument || document;\n      this._inkBarElement = documentNode.createElement('span');\n      this._inkBarContentElement = documentNode.createElement('span');\n\n      this._inkBarElement.className = 'mdc-tab-indicator';\n      this._inkBarContentElement.className =\n        'mdc-tab-indicator__content mdc-tab-indicator__content--underline';\n\n      this._inkBarElement.appendChild(this._inkBarContentElement);\n      this._appendInkBarElement();\n    }\n\n    /**\n     * Appends the ink bar to the tab host element or content, depending on whether\n     * the ink bar should fit to content.\n     */\n    private _appendInkBarElement() {\n      if (!this._inkBarElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Ink bar element has not been created and cannot be appended');\n      }\n\n      const parentElement = this._fitToContent\n        ? this.elementRef.nativeElement.querySelector('.mdc-tab__content')\n        : this.elementRef.nativeElement;\n\n      if (!parentElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Missing element to host the ink bar');\n      }\n\n      parentElement!.appendChild(this._inkBarElement!);\n    }\n  };\n}\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {MatInkBarItem, mixinInkBarItem} from './ink-bar';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(class {});\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive()\nexport class _MatTabLabelWrapperBase extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n\nconst _MatTabLabelWrapperBaseWithInkBarItem = mixinInkBarItem(_MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled', 'fitInkBarToContent'],\n  host: {\n    '[class.mat-mdc-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper\n  extends _MatTabLabelWrapperBaseWithInkBarItem\n  implements MatInkBarItem {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n  Directive,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  merge,\n  of as observableOf,\n  Subject,\n  EMPTY,\n  Observer,\n  Observable,\n  timer,\n  fromEvent,\n} from 'rxjs';\nimport {take, switchMap, startWith, skip, takeUntil, filter} from 'rxjs/operators';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n  private _disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: NumberInput) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() private _dir: Directionality,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap()\n      // Allow focus to land on disabled tabs, as per https://w3c.github.io/aria-practices/#kbd_disabled_controls\n      .skipPredicate(() => false);\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n    // can hold up tests that are in a background tab.\n    this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<ResizeObserverEntry[]> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<ResizeObserverEntry[]>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(entries => observer.next(entries));\n              tabItems.forEach(item => resizeObserver.observe(item.elementRef.nativeElement));\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n      // Skip emissions where all the elements are invisible since we don't want\n      // the header to try and re-render with invalid measurements. See #25574.\n      filter(entries => entries.some(e => e.contentRect.width > 0 && e.contentRect.height > 0)),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          const item = this._items.get(this.focusIndex);\n\n          if (item && !item.disabled) {\n            this.selectFocusedIndex.emit(this.focusIndex);\n            this._itemSelected(event);\n          }\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    return this._items ? !!this._items.toArray()[index] : true;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const isEnabled =\n        this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatInkBar} from './ink-bar';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabHeaderBase\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n\n  set disableRipple(value: BooleanInput) {\n    this._disableRipple = coerceBooleanProperty(value);\n  }\n\n  private _disableRipple: boolean = false;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-mdc-tab-header',\n    '[class.mat-mdc-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-mdc-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderBase implements AfterContentInit {\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n  _inkBar: MatInkBar;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    viewportRuler: ViewportRuler,\n    @Optional() dir: Directionality,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  override ngAfterContentInit() {\n    this._inkBar = new MatInkBar(this._items);\n    super.ngAfterContentInit();\n  }\n}\n",null,"<!-- TODO: this also had `mat-elevation-z4`. Figure out what we should do with it. -->\n<button class=\"mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-before\"\n     #previousPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     tabindex=\"-1\"\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-mdc-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     [disabled]=\"_disableScrollBefore || null\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-mdc-tab-header-pagination-chevron\"></div>\n</button>\n\n<div\n  class=\"mat-mdc-tab-label-container\"\n  #tabListContainer\n  (keydown)=\"_handleKeydown($event)\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\">\n  <div\n    #tabList\n    class=\"mat-mdc-tab-list\"\n    role=\"tablist\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-mdc-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n\n<!-- TODO: this also had `mat-elevation-z4`. Figure out what we should do with it. -->\n<button class=\"mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after\"\n     #nextPaginator\n     aria-hidden=\"true\"\n     type=\"button\"\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-mdc-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     [disabled]=\"_disableScrollAfter || null\"\n     tabindex=\"-1\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-mdc-tab-header-pagination-chevron\"></div>\n</button>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\nimport {startWith} from 'rxjs/operators';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef) {}\n    },\n  ),\n  'primary',\n);\n\n/** @docs-private */\nexport interface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatTabGroupBase\n  extends _MatTabGroupMixinBase\n  implements AfterContentInit, AfterContentChecked, OnDestroy, CanColor, CanDisableRipple\n{\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  abstract _allTabs: QueryList<MatTab>;\n  abstract _tabBodyWrapper: ElementRef;\n  abstract _tabHeader: MatTabGroupBaseHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean {\n    return this._dynamicHeight;\n  }\n\n  set dynamicHeight(value: BooleanInput) {\n    this._dynamicHeight = coerceBooleanProperty(value);\n  }\n\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n\n  set selectedIndex(value: NumberInput) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n\n  set animationDuration(value: NumberInput) {\n    this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : (value as string);\n  }\n\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input()\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n\n  set contentTabIndex(value: NumberInput) {\n    this._contentTabIndex = coerceNumberProperty(value, null);\n  }\n\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input()\n  get disablePagination(): boolean {\n    return this._disablePagination;\n  }\n\n  set disablePagination(value: BooleanInput) {\n    this._disablePagination = coerceBooleanProperty(value);\n  }\n\n  private _disablePagination: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input()\n  get preserveContent(): boolean {\n    return this._preserveContent;\n  }\n\n  set preserveContent(value: BooleanInput) {\n    this._preserveContent = coerceBooleanProperty(value);\n  }\n\n  private _preserveContent: boolean = false;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value: ThemePalette) {\n    const classList: DOMTokenList = this._elementRef.nativeElement.classList;\n\n    classList.remove('mat-tabs-with-background', `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add('mat-tabs-with-background', `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(\n    elementRef: ElementRef,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n  ) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    this.contentTabIndex = defaultConfig?.contentTabIndex ?? null;\n    this.preserveContent = !!defaultConfig?.preserveContent;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    tabHeader.focusIndex = index;\n\n    if (!tab.disabled) {\n      this.selectedIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(index: number): number {\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n}\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  inputs: ['color', 'disableRipple'],\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-mdc-tab-group',\n    '[class.mat-mdc-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-mdc-tab-group-inverted-header]': 'headerPosition === \"below\"',\n    '[class.mat-mdc-tab-group-stretch-tabs]': 'stretchTabs',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupBase {\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** Whether the ink bar should fit its width to the size of the tab label content. */\n  @Input()\n  get fitInkBarToContent(): boolean {\n    return this._fitInkBarToContent;\n  }\n  set fitInkBarToContent(v: BooleanInput) {\n    this._fitInkBarToContent = coerceBooleanProperty(v);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _fitInkBarToContent = false;\n\n  /** Whether tabs should be stretched to fill the header. */\n  @Input('mat-stretch-tabs')\n  get stretchTabs(): boolean {\n    return this._stretchTabs;\n  }\n  set stretchTabs(v: BooleanInput) {\n    this._stretchTabs = coerceBooleanProperty(v);\n  }\n  private _stretchTabs = true;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n    this.fitInkBarToContent =\n      defaultConfig && defaultConfig.fitInkBarToContent != null\n        ? defaultConfig.fitInkBarToContent\n        : false;\n  }\n}\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n",null,"<mat-tab-header #tabHeader\n                [selectedIndex]=\"selectedIndex || 0\"\n                [disableRipple]=\"disableRipple\"\n                (indexFocused)=\"_focusChanged($event)\"\n                (selectFocusedIndex)=\"selectedIndex = $event\">\n\n  <div class=\"mdc-tab mat-mdc-tab mat-mdc-focus-indicator\"\n       #tabNode\n       role=\"tab\"\n       matTabLabelWrapper\n       cdkMonitorElementFocus\n       *ngFor=\"let tab of _tabs; let i = index\"\n       [id]=\"_getTabLabelId(i)\"\n       [attr.tabIndex]=\"_getTabIndex(i)\"\n       [attr.aria-posinset]=\"i + 1\"\n       [attr.aria-setsize]=\"_tabs.length\"\n       [attr.aria-controls]=\"_getTabContentId(i)\"\n       [attr.aria-selected]=\"selectedIndex === i\"\n       [attr.aria-label]=\"tab.ariaLabel || null\"\n       [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n       [class.mdc-tab--active]=\"selectedIndex === i\"\n       [ngClass]=\"tab.labelClass\"\n       [disabled]=\"tab.disabled\"\n       [fitInkBarToContent]=\"fitInkBarToContent\"\n       (click)=\"_handleClick(tab, tabHeader, i)\"\n       (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n    <span class=\"mdc-tab__ripple\"></span>\n\n    <!-- Needs to be a separate element, because we can't put\n         `overflow: hidden` on tab due to the ink bar. -->\n    <div\n      class=\"mat-mdc-tab-ripple\"\n      mat-ripple\n      [matRippleTrigger]=\"tabNode\"\n      [matRippleDisabled]=\"tab.disabled || disableRipple\"></div>\n\n    <span class=\"mdc-tab__content\">\n      <span class=\"mdc-tab__text-label\">\n        <!-- If there is a label template, use it. -->\n        <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n          <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n        </ng-template>\n\n        <!-- If there is not a label template, fall back to the text label. -->\n        <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\n      </span>\n    </span>\n  </div>\n</mat-tab-header>\n\n<div\n  class=\"mat-mdc-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  <mat-tab-body role=\"tabpanel\"\n               *ngFor=\"let tab of _tabs; let i = index\"\n               [id]=\"_getTabContentId(i)\"\n               [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\"\n               [attr.aria-labelledby]=\"_getTabLabelId(i)\"\n               [class.mat-mdc-tab-body-active]=\"selectedIndex === i\"\n               [ngClass]=\"tab.bodyClass\"\n               [content]=\"tab.content!\"\n               [position]=\"tab.position!\"\n               [origin]=\"tab.origin\"\n               [animationDuration]=\"animationDuration\"\n               [preserveContent]=\"preserveContent\"\n               (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n               (_onCentering)=\"_setTabBodyWrapperHeight($event)\">\n  </mat-tab-body>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, TemplateRef} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  constructor(/** Content for the tab. */ public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(\n    templateRef: TemplateRef<any>,\n    viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB) @Optional() public _closestTab: any,\n  ) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Directive,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatTabContent} from './tab-content';\nimport {MAT_TAB, MatTabLabel} from './tab-label';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs';\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabMixinBase = mixinDisabled(class {});\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n/** @docs-private */\n@Directive()\nexport class _MatTabBase\n  extends _MatTabMixinBase\n  implements CanDisable, OnInit, OnChanges, OnDestroy\n{\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  protected _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /**\n   * Classes to be passed to the tab label inside the mat-tab-header container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() labelClass: string | string[];\n\n  /**\n   * Classes to be passed to the tab mat-tab-body container.\n   * Supports string and string array values, same as `ngClass`.\n   */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(MAT_TAB_GROUP) @Optional() public _closestTabGroup: any,\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n\n@Component({\n  selector: 'mat-tab',\n\n  // Note that usually we'd go through a bit more trouble and set up another class so that\n  // the inlined template of `MatTab` isn't duplicated, however the template is small enough\n  // that creating the extra class will generate more code than just duplicating the template.\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n})\nexport class MatTab extends _MatTabBase {\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  override _explicitContent: TemplateRef<any>;\n\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n}\n"],"names":["ComponentRoute","route","target","rt","component","routeDecoratedComponent","isBlank","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push","CastPipesModule","IsPresentPipe","transform","isPresent","ListKeyManager","constructor","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","Subject","_typeaheadSubscription","Subscription","_vertical","_allowedModifierKeys","_homeAndEnd","_pageUpAndDown","enabled","delta","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","QueryList","this","_itemChangesSubscription","changes","subscribe","newItems","newIndex","toArray","indexOf","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","unsubscribe","pipe","tap","letter","debounceTime","filter","length","map","join","inputString","items","_getItemsArray","i","index","getLabel","toUpperCase","trim","setActiveItem","cancelTypeahead","withHomeAndEnd","withPageUpDown","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","isModifierAllowed","every","modifier","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","targetIndex","_setActiveItemByIndex","PAGE_DOWN","itemsLength","hasModifierKey","key","toLocaleUpperCase","A","Z","ZERO","NINE","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByDelta","itemArray","destroy","complete","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","MatTabsModule","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MAT_TABS_CONFIG","InjectionToken","matTabsAnimations","translateTab","trigger","state","style","minHeight","visibility","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_document","super","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","preserveContent","detach","ngOnDestroy","forwardRef","MatTabBody","DOCUMENT","_MatTabBodyBase","position","_positionIndex","_computePositionAnimationState","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","markForCheck","distinctUntilChanged","x","y","fromState","toState","emit","origin","_computePositionFromOrigin","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","elementRef","ACTIVE_CLASS","NO_TRANSITION_CLASS","MatInkBar","hide","forEach","deactivateInkBar","alignToElement","element","correspondingItem","find","currentItem","_currentItem","clientRect","getBoundingClientRect","activateInkBar","providedIn","factory","left","offsetLeft","width","offsetWidth","_MatTabLabelWrapperMixinBase","mixinDisabled","_MatTabLabelWrapperBase","focus","getOffsetLeft","getOffsetWidth","_MatTabLabelWrapperBaseWithInkBarItem","base","args","_fitToContent","fitInkBarToContent","v","newValue","coerceBooleanProperty","_inkBarElement","_appendInkBarElement","previousIndicatorClientRect","_inkBarContentElement","classList","add","currentClientRect","widthDelta","xPosition","setProperty","remove","_createInkBarElement","documentNode","ownerDocument","document","createElement","className","appendChild","querySelector","MatTabLabelWrapper","FocusKeyManager","_origin","setFocusOrigin","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","disablePagination","_disablePagination","selectedIndex","_selectedIndex","coerceNumberProperty","_selectedIndexChanged","_keyManager","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_animationMode","_scrollDistance","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","observableOf","resize","realign","updatePagination","_alignInkBarToSelectedTab","onStable","take","merge","_itemsResized","run","Promise","resolve","then","Math","max","min","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ResizeObserver","EMPTY","switchMap","tabItems","Observable","observer","resizeObserver","entries","observe","disconnect","skip","some","e","contentRect","height","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","ENTER","SPACE","focusIndex","get","_itemSelected","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","ANIMATION_MODULE_TYPE","_MatTabHeaderBase","disableRipple","_disableRipple","viewportRuler","ngZone","platform","animationMode","MatTabHeader","i4","nextId","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","_MatTabGroupBase","dynamicHeight","_dynamicHeight","_indexToSelect","_animationDuration","test","contentTabIndex","_contentTabIndex","_preserveContent","backgroundColor","_backgroundColor","defaultConfig","_tabs","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","tab","isActive","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","_closestTabGroup","notifyOnChanges","realignInkBar","_tabHeader","focusTab","header","_focusChanged","MatTabChangeEvent","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","_tabFocusChanged","focusOrigin","MatTabGroup","_fitInkBarToContent","stretchTabs","_stretchTabs","MatTab","provide","MAT_TAB_GROUP","useExisting","i1","MAT_TAB_CONTENT","MatTabContent","template","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","templateRef","_closestTab","_MatTabMixinBase","_MatTabBase","content","_contentPortal","_viewContainerRef","textLabel","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","_setTemplateLabelInput","_templateLabel","TemplateRef","templateLabel"],"sourceRoot":""}