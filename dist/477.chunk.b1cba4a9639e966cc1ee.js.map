{"version":3,"file":"477.chunk.b1cba4a9639e966cc1ee.js","mappings":"6gBAOgBA,EAAAA,GAAA,WACIA,EAAAA,GAAA,2BACAA,EAAAA,GAAA,SAAKA,EAAAA,EAAA,GAAkBA,EAAAA,IAAAA,I,iCADFA,EAAAA,EAAA,GAAAA,EAAAA,EAAA,oBAAAC,EAAAC,aAAAF,CAAkC,YAAAC,EAAAE,UAAlCH,CAAkC,OAAAI,EAAAC,KAAlCL,CAAkC,SAAAC,GAClDD,EAAAA,EAAA,GAAAA,EAAAA,GAAAI,EAAAC,K,2BAQTL,EAAAA,GAAA,UAAAA,CAAoB,SACXA,EAAAA,EAAA,GAAmBA,EAAAA,KACxBA,EAAAA,GAAA,4BACJA,EAAAA,M,iCAFSA,EAAAA,EAAA,GAAAA,EAAAA,GAAAM,EAAAD,MACiBL,EAAAA,EAAA,GAAAA,EAAAA,EAAA,oBAAAO,EAAAL,aAAAF,CAAkC,YAAAO,EAAAJ,UAAlCH,CAAkC,OAAAM,EAAAD,KAAlCL,CAAkC,SAAAO,E,ECOtE,MAAOC,UAAsCC,EAAAA,EAbnDC,WAAAA,G,oBAoBc,KAAAC,0BAAqEC,EAAAA,EAAAA,IAAOC,EAAAA,G,CAmBhEC,UAAAA,GAAU,I,EAAAC,EAAA,Y,EAAC,YAE7B,IAAIA,EAAKC,SAEL,OAGJD,EAAKC,SAASC,iBACd,CACIZ,KAAMU,EAAKC,SAASX,KACpBa,GAAIH,EAAKC,SAASE,IAGtB,MAAMC,SAAkBJ,EAAKJ,0BAA0BS,YAAYL,EAAKC,SAASX,QAAS,GAE1FU,EAAKM,YAAaC,EAAAA,EAAAA,GAAUH,GAC5BJ,EAAKQ,aAAcC,EAAAA,EAAAA,GAAWL,EAAW,E,gLAC7C,E,wDA3CSX,KAA6BiB,GAA7BjB,EAA6B,G,qBAA7BA,EAA6BkB,UAAA,2BAAAC,YAAA,EAAAC,SAAA,CAAA5B,EAAAA,EAAAA,EAAAA,GAAA6B,MAAA,EAAAC,KAAA,EAAAC,OAAA,qOAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ID1B1CjC,EAAAA,GAAA,6BAEAA,EAAAA,GAAA,UAAAA,CAA0B,UAA1BA,CAA0B,WAGdA,EAAAA,GAAA,EAAAmC,EAAA,YAAAnC,EAAAA,IAOJA,EAAAA,KAEAA,EAAAA,GAAA,WACIA,EAAAA,GAAA,EAAAoC,EAAA,YAAApC,EAAAA,IAOJA,EAAAA,IAAAA,M,MAtBeA,EAAAA,EAAA,SAAAkC,EAAAlC,CAAe,iBAAAkC,EAAAG,gBAK1BrC,EAAAA,EAAA,GAAAA,EAAAA,GAAA,MAAAkC,EAAAb,YAAA,MAAAa,EAAAb,WAAAJ,iBAAA,KAAAiB,EAAAb,WAAAJ,iBAAAqB,QAUAtC,EAAAA,EAAA,GAAAA,EAAAA,GAAA,MAAAkC,EAAAX,aAAA,MAAAW,EAAAX,YAAAN,iBAAA,KAAAiB,EAAAX,YAAAN,iBAAAsB,S,gBCKJC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAA6BC,cAAA,EAAAC,gBAAA,ICd/B,MAAOC,EAkBTnC,WAAAA,GAXO,KAAAoC,SACP,CACIC,MAAO,aAMJ,KAAAC,eAAsCxC,EAKzCyC,OAAOC,OAAOC,KAClB,E","sources":["webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/node/customRelationNode.component.html","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/node/customRelationNode.component.ts","webpack://ng-universal-demo/../layout-relations/src/dynamicItems/customRelation/metadata/customRelation.relationsMetadata.ts"],"sourcesContent":["<relations-node-header [parent]=\"this\" [destroySubject]=\"destroySubject\" name=\"custom\"></relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            @for(inputMeta of inputsMeta?.relationsOptions?.inputs; track inputMeta)\n            {\n                <div class=\"input\">\n                    <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"inputMeta.name\" [parent]=\"this\"></relation-node-input>\n                    <div>{{inputMeta.name}}</div>\n                </div>\n            }\n        </div>\n\n        <div class=\"outputs\">\n            @for(outputMeta of outputsMeta?.relationsOptions?.outputs; track outputMeta)\n            {\n                <div class=\"output\">\n                    <div>{{outputMeta.name}}</div>\n                    <relation-node-output [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" [name]=\"outputMeta.name\" [parent]=\"this\"></relation-node-output>\n                </div>\n            }\n        </div>\n    </div>\n</div>","import {Component, ChangeDetectionStrategy, inject} from '@angular/core';\nimport {MetadataStorage} from '@anglr/dynamic';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationsNodeHeaderSAComponent, RelationNodeOutputSAComponent, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\n\nimport {CustomRelationRelationsOptions} from '../customRelation.options';\nimport {ComponentInputsRelationsOptions} from '../../componentInputs';\nimport {ComponentOutputsRelationsOptions} from '../../componentOutputs';\nimport {getInputs, getOutputs} from '../customRelation.utils';\n\n/**\n * Relations node component for custom relation\n */\n@Component(\n{\n    selector: 'custom-relation-node',\n    templateUrl: 'customRelationNode.component.html',\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomRelationNodeSAComponent extends RelationsNodeBase<CustomRelationRelationsOptions> implements RelationsNode<CustomRelationRelationsOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Storage for relations metadata\n     */\n    protected relationsMetadataStorage: MetadataStorage<RelationsNodeMetadata[]> = inject(RELATIONS_METADATA_STORAGE);\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Metadata that contains information about available inputs\n     */\n    protected inputsMeta: RelationsNodeMetadata<ComponentInputsRelationsOptions>|undefined;\n\n    /**\n     * Metadata that contains information about available outputs\n     */\n    protected outputsMeta: RelationsNodeMetadata<ComponentOutputsRelationsOptions>|undefined;\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    public override async initialize(): Promise<void>\n    {\n        if(!this.metadata)\n        {\n            return;\n        }\n\n        this.metadata.relationsOptions = \n        {\n            name: this.metadata.name,\n            id: this.metadata.id,\n        };\n\n        const relations = await this.relationsMetadataStorage?.getMetadata(this.metadata.name) ?? [];\n\n        this.inputsMeta = getInputs(relations);\n        this.outputsMeta = getOutputs(relations);\n    }\n}","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {CustomRelationNodeSAComponent} from '../node/customRelationNode.component';\n\n/**\n * Custom relation relations metadata\n */\nexport class CustomRelationRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        group: 'Relations',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = CustomRelationNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}"],"names":["i0","ctx_r0","nodePosition","zoomLevel","inputMeta_r2","name","outputMeta_r7","ctx_r1","CustomRelationNodeSAComponent","RelationsNodeBase","constructor","relationsMetadataStorage","inject","RELATIONS_METADATA_STORAGE","initialize","_this","metadata","relationsOptions","id","relations","getMetadata","inputsMeta","getInputs","outputsMeta","getOutputs","t","selectors","standalone","features","decls","vars","consts","template","rf","ctx","CustomRelationNodeSAComponent_For_5_Template","CustomRelationNodeSAComponent_For_8_Template","destroySubject","inputs","outputs","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","RelationNodeOutputSAComponent","encapsulation","changeDetection","CustomRelationRelationsEditorMetadata","metaInfo","group","nodeDefinition","Object","freeze","this"],"sourceRoot":""}