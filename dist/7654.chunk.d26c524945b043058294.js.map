{"version":3,"file":"7654.chunk.d26c524945b043058294.js","mappings":"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","sources":["webpack://ng-universal-demo/../css-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleItemsProvider/cssDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../css-components/src/services/cssDynamicModuleTypesProvider/cssDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../css-components/src/misc/providers.ts","webpack://ng-universal-demo/../css-components/src/misc/utils.ts","webpack://ng-universal-demo/./app/services/demoLayoutPackageManager/demoLayoutPackageManager.service.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditorDragPreview/layoutEditorDragPreview.component.html","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCorePreviewTemplate/dndCorePreviewTemplate.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/components/dndCorePreview/dndCorePreview.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutEditor/layoutEditor.component.ts","webpack://ng-universal-demo/../layout-editor/src/services/layoutDesignerDynamicModuleItemsProvider/layoutDesignerDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/services/defaultDynamicModuleTypesProvider/defaultDynamicModuleTypesProvider.service.ts","webpack://ng-universal-demo/../layout-editor/src/misc/extractors/layoutDesignerType.extractor.ts","webpack://ng-universal-demo/../layout-editor/src/misc/providers.ts","webpack://ng-universal-demo/../layout-editor/src/misc/transforms/layoutDesignerComponentTransform.ts","webpack://ng-universal-demo/../layout-editor/src/misc/types.ts","webpack://ng-universal-demo/../layout-editor/src/misc/utils.ts","webpack://ng-universal-demo/../layout-editor/src/modules/dynamicLayoutEditor.module.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.types.ts","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.options.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.ts","webpack://ng-universal-demo/../layout/src/components/notFoundLayoutType/notFoundLayoutType.component.html","webpack://ng-universal-demo/../layout/src/directives/layoutComponentRenderer/layoutComponentRenderer.directive.ts","webpack://ng-universal-demo/../layout/src/misc/providers.ts","webpack://ng-universal-demo/../layout/src/misc/utils.ts","webpack://ng-universal-demo/../layout/src/modules/dynamicLayout.module.ts","webpack://ng-universal-demo/../src/misc/extractors/extensionsExports.extractor.ts"],"sourcesContent":["var map = {\n\t\"./styleBlock/type\": [\n\t\t92030,\n\t\t1934,\n\t\t7412\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 24405;\nmodule.exports = webpackAsyncContext;","import {Inject, Injectable, Optional} from '@angular/core';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Logger, LOGGER} from '@anglr/common';\n\n/**\n * Dynamic module items provider for css module items\n */\n@Injectable()\nexport class CssDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'css-components':\n            {\n                try\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/css-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('CssDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Dynamic module types provider, for css types\n */\n@Injectable()\nexport class CssDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'css-components':\n                    return await import('@anglr/dynamic/css-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('CssDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {ClassProvider} from '@angular/core';\nimport {LAYOUT_COMPONENTS_MODULE_PROVIDERS} from '@anglr/dynamic/layout';\nimport {LAYOUT_MODULE_TYPES_PROVIDERS} from '@anglr/dynamic/layout-editor';\n\nimport {CssDynamicModuleItemsProvider, CssDynamicModuleTypesProvider} from '../services';\n\n/**\n * Provider for css package layout components provider\n */\nexport const CSS_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: CssDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for css dynamic layout module types provider\n */\nexport const CSS_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: CssDynamicModuleTypesProvider,\n    multi: true\n};","import {Provider} from '@angular/core';\nimport {provideStaticPackageSource} from '@anglr/dynamic';\n\nimport {CSS_LAYOUT_COMPONENTS_PROVIDER, CSS_LAYOUT_MODULE_TYPES_PROVIDER} from './providers';\n\n/**\n * Providers for layout css subpackage\n */\nexport function provideCssLayout(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n    ];\n}\n\n/**\n * Providers for layout editor css subpackage\n */\nexport function provideCssLayoutEditor(): Provider[]\n{\n    return [\n        CSS_LAYOUT_COMPONENTS_PROVIDER,\n        CSS_LAYOUT_MODULE_TYPES_PROVIDER,\n        provideStaticPackageSource('css-components'),\n    ];\n}\n\n/**\n * Providers for layout relations editor css subpackage\n */\nexport function provideCssLayoutRelationsEditor(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}\n\n/**\n * Providers for layout relations css subpackage\n */\nexport function provideCssLayoutRelations(): Provider[]\n{\n    return [\n        ...provideCssLayout(),\n    ];\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Layout package manager for demo app\n */\n@Injectable()\nexport class DemoLayoutPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('LAYOUT_PACKAGES_STORE');\n    }\n}","import {Component, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\n/**\n * Component used for displaying layout editor drag preview\n */\n@Component(\n{\n    selector: 'layout-editor-drag-preview',\n    templateUrl: 'layoutEditorDragPreview.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorDragPreviewSAComponent\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Layout metadata for dragged component\n     */\n    @Input()\n    public layoutMetadata?: LayoutComponentMetadata|null;\n}","<span class=\"dynamic-semi-bold\">{{layoutMetadata?.name}}</span><span class=\"dynamic-margin-left-extra-small dynamic-small-text\">#{{layoutMetadata?.displayName || layoutMetadata?.id}}</span>","import {Directive, Input, TemplateRef} from '@angular/core';\n\nimport {DndCorePreviewTemplateContext} from './dndCorePreviewTemplate.context';\n\n/**\n * Directive that marks attached element as html 5 drag preview template\n */\n@Directive(\n{\n    selector: '[dndCorePreviewTemplate]'\n})\nexport class DndCorePreviewTemplateDirective\n{\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type of drag data\n     */\n    @Input('dndCorePreviewTemplateType')\n    public type: string|undefined|null;\n\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<DndCorePreviewTemplateContext>,)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: DndCorePreviewTemplateDirective, _ctx: unknown): _ctx is DndCorePreviewTemplateContext\n    {\n        return true;\n    }\n}","import {Component, ChangeDetectionStrategy, EmbeddedViewRef, ContentChild, TemplateRef, ViewContainerRef, OnInit, OnDestroy} from '@angular/core';\nimport {DndService} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {DndCorePreviewTemplateContext, DndCorePreviewTemplateDirective, LayoutDragItem} from '../../directives';\n\n/**\n * Component used for displaying drag preview\n */\n@Component(\n{\n    selector: 'dnd-core-drag-preview',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DndCorePreviewComponent implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of view for drag preview\n     */\n    protected dragPreviewView: EmbeddedViewRef<DndCorePreviewTemplateContext>|undefined|null;\n\n    /**\n     * Instance of html element for drag preview\n     */\n    protected dragPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of dnd core preview template\n     */\n    @ContentChild(DndCorePreviewTemplateDirective, {static: true, read: TemplateRef<DndCorePreviewTemplateContext>})\n    protected dndCorePreviewTemplate?: TemplateRef<DndCorePreviewTemplateContext>;\n\n    //######################### constructor #########################\n    constructor(protected viewContainer: ViewContainerRef,\n                protected dnd: DndService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.dnd\n            .dragLayer<LayoutDragItem>(this.initSubscriptions)\n            .listen(monitor => ({\n                                    dragging: monitor.isDragging(),\n                                    item: monitor.getItem(),\n                                    coordinates: monitor.getClientOffset(),\n                                    type: monitor.getItemType(),\n                                }))\n            .subscribe(itm =>\n            {\n                if(!itm.dragging)\n                {\n                    this.removeDragPreview();\n\n                    return;\n                }\n\n                if(!itm.item)\n                {\n                    return;\n                }\n\n                this.dragPreviewElement ??= this.renderDragPreview(itm.item);\n\n                if(this.dragPreviewElement)\n                {\n                    this.dragPreviewElement.style.position = 'fixed';\n                    this.dragPreviewElement.style.top = `${itm.coordinates?.y}px`;\n                    this.dragPreviewElement.style.left = `${itm.coordinates?.x}px`;\n                    this.dragPreviewElement.style.zIndex = '21312';\n                }\n            }));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.removeDragPreview();\n    }\n\n    //######################### protected methods #########################\n    \n    /**\n     * Renders drag preview and returns html element\n     */\n    protected renderDragPreview(dragData: LayoutDragItem): HTMLElement|null\n    {\n        if(!this.dndCorePreviewTemplate)\n        {\n            return null;\n        }\n\n        this.dragPreviewView = this.viewContainer.createEmbeddedView(this.dndCorePreviewTemplate, {$implicit: dragData});\n        this.dragPreviewElement = this.dragPreviewView.rootNodes[0];\n        this.dragPreviewView.detectChanges();\n\n        return this.dragPreviewElement ?? null;\n    }\n\n    /**\n     * Removes rendered drag preview\n     */\n    protected removeDragPreview(): void\n    {\n        this.dragPreviewElement?.remove();\n        this.dragPreviewView?.destroy();\n        this.dragPreviewElement = null;\n        this.dragPreviewView = null;\n    }\n}","<div class=\"dynamic-flex-row dynamic-margin-top-big dynamic-flex-1\">\n    <mat-tab-group>\n        <mat-tab label=\"Hierarchy\">\n            <components-tree></components-tree>\n        </mat-tab>\n\n        <mat-tab label=\"Palette\">\n            <package-manager></package-manager>\n            <components-palette></components-palette>\n        </mat-tab>\n    </mat-tab-group>\n\n    <div class=\"dynamic-flex-1 layout-content dynamic-thin-scrollbar\">\n        <ng-container [layoutComponentRenderer]=\"metadata\"></ng-container>\n    </div>\n\n    <properties-editor></properties-editor>\n</div>\n\n<dnd-core-drag-preview>\n    <layout-editor-drag-preview class=\"mat-elevation-z4\" *dndCorePreviewTemplate=\"let data\" [layoutMetadata]=\"data.dragData.metadata\"></layout-editor-drag-preview>\n</dnd-core-drag-preview>","import {Component, ChangeDetectionStrategy, Input, OnDestroy, OnChanges, SimpleChanges, Inject, OnInit, ChangeDetectorRef, Optional} from '@angular/core';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {HostDisplayFlexStyle} from '@anglr/common';\nimport {EditorHotkeys, MetadataHistoryManager, PackageManagerModule} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {ComponentsPaletteSAComponent} from '../componentsPalette/componentsPalette.component';\nimport {ComponentsTreeSAComponent} from '../componentsTree/componentsTree.component';\nimport {PropertiesEditorSAComponent} from '../propertiesEditor/propertiesEditor.component';\nimport {LAYOUT_DESIGNER_COMPONENT_TRANSFORM} from '../../misc/providers';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndBusService, LayoutDndCoreModule} from '../../modules';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\n\n/**\n * Component that represents layout editor with palette, tree and properties\n */\n@Component(\n{\n    selector: 'layout-editor',\n    templateUrl: 'layoutEditor.component.html',\n    styles: [HostDisplayFlexStyle],\n    providers:\n    [\n        LAYOUT_DESIGNER_COMPONENT_TRANSFORM,\n        DndBusService,\n    ],\n    standalone: true,\n    imports:\n    [\n        ComponentsTreeSAComponent,\n        ComponentsPaletteSAComponent,\n        PropertiesEditorSAComponent,\n        LayoutDndCoreModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutComponentRendererSADirective,\n        PackageManagerModule,\n        MatTabsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutEditorSAComponent implements OnDestroy, OnChanges, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Metadata that are used for rendering\n     */\n    @Input()\n    public metadata: LayoutComponentMetadata|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(@Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                protected changeDetector: ChangeDetectorRef,\n                @Optional() protected hotkeys?: EditorHotkeys,)\n    {\n        hotkeys?.init();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.history.pop.subscribe(metadata =>\n        {\n            this.metadata = metadata;\n            this.changeDetector.detectChanges();\n        }));\n\n        if(this.hotkeys)\n        {\n            this.initSubscriptions.add(this.hotkeys.undo.subscribe(() => this.history.undo()));\n            this.initSubscriptions.add(this.hotkeys.redo.subscribe(() => this.history.redo()));\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<LayoutEditorSAComponent>('metadata') in changes)\n        {\n            this.history.clean();\n            \n            if(this.metadata)\n            {\n                this.history.setInitialState(this.metadata);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n        this.hotkeys?.destroy();\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicModuleProvider, DynamicModule, DynamicItemSource} from '@anglr/dynamic';\n\n/**\n * Dynamic module items provider for built-in layout designer components\n */\n@Injectable()\nexport class LayoutDesignerDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        //only works with layout-editor\n        if(source.package != '@anglr/dynamic/layout-editor')\n        {\n            return null;\n        }\n\n        try\n        {\n            this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n            if(source.name == 'layout-designer')\n            {\n                return await import('../../components/layoutDesigner/type');\n            }\n        }\n        catch(e)\n        {\n            this._logger?.warn('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found, reason:' + e, {name: source.name, package: source.package});\n        }\n\n        this._logger?.debug('LayoutDesignerDynamicModuleItemsProvider: item {@item} was not found', {name: source.name, package: source.package});\n\n        return null;\n    }\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DynamicItemSource, DynamicModule, DynamicModuleProvider} from '@anglr/dynamic';\n\n/**\n * Default dynamic module types provider, for built-in types\n */\n@Injectable()\nexport class DefaultDynamicModuleTypesProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        try\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: trying to get types for module {@module}', {moduleName: source.package});\n\n            switch(source.package)\n            {\n                case 'basic-components':\n                    return await import('@anglr/dynamic/basic-components/types');\n                case 'material-components':\n                    return await import('@anglr/dynamic/material-components/types');\n                default:\n                    return null;\n            }\n        }\n        catch(e)\n        {\n            this._logger?.debug('DefaultDynamicModuleTypesProvider: module {@module} was not found, reason: ' + e, {moduleName: source.package});\n        }\n\n        return null;\n    }\n}","import {defaultExportExtractor, DynamicItemDefData, DynamicItemExtensions, DynamicModuleDataExtractorFn, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LayoutEditorDesignerTypeType} from '../../decorators';\n\n/**\n * Extracts layout designer type which is on decorated type exported by module exports as default export \n */\nexport const layoutDesignerTypeExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData&DynamicItemExtensions> = async (module, logger) =>\n{\n    const def = (await defaultExportExtractor(module, logger));\n    const ext = (await extensionsExportsExtractor(module, logger));\n    const localModule = def?.data as LayoutEditorDesignerTypeType;\n\n    logger?.debug('layoutDesignerTypeExtractor: trying to extract default dynamic data');\n\n    if(!localModule?.layoutEditorDesignerType)\n    {\n        return null;\n    }\n\n    const type = await localModule?.layoutEditorDesignerType;\n\n    if(type)\n    {\n        return {\n            data: type,\n            childExtensions: ext?.childExtensions,\n            extensions: ext?.extensions\n        };\n    }\n\n    return null;\n};","import {ClassProvider, ExistingProvider, FactoryProvider, inject, Optional, ValueProvider} from '@angular/core';\nimport {defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, MetadataHistoryManager, METADATA_STATE_MANAGER} from '@anglr/dynamic';\nimport {LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS, LAYOUT_COMPONENT_TRANSFORM} from '@anglr/dynamic/layout';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {DefaultDynamicModuleTypesProvider, LayoutDesignerDynamicModuleItemsProvider, LayoutEditorMetadataManager} from '../services';\nimport {LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES, LAYOUT_HISTORY_MANAGER, LAYOUT_MODULE_TYPES_DATA_EXTRACTORS, LAYOUT_MODULE_TYPES_LOADER, LAYOUT_MODULE_TYPES_PROVIDERS} from './tokens';\nimport {layoutDesignerComponentTransform} from './transforms/layoutDesignerComponentTransform';\nimport {LayoutPropertyMetadata} from './types';\nimport {isLayoutModuleTypes} from './utils';\nimport {layoutDesignerTypeExtractor} from './extractors';\n\n/**\n * Provider for designer layout components extractor\n */\nexport const DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  layoutDesignerTypeExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout designer components providers\n */\nexport const LAYOUT_DESIGNER_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: LayoutDesignerDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for LAYOUT_COMPONENT_TRANSFORM, which allows transformation for layout designer component\n */\nexport const LAYOUT_DESIGNER_COMPONENT_TRANSFORM: ValueProvider =\n{\n    provide: LAYOUT_COMPONENT_TRANSFORM,\n    useValue: layoutDesignerComponentTransform\n};\n\n/**\n * Provider for default dynamic layout module types provider\n */\nexport const DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_PROVIDERS,\n    useClass: DefaultDynamicModuleTypesProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout module types extractor\n */\nexport const DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout editor property metadata\n */\nexport const LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER: ValueProvider =\n{\n    provide: LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES,\n    useValue:\n    [\n        LayoutPropertyMetadata\n    ]\n};\n\n/**\n * Provider for layout module types loader\n */\nexport const LAYOUT_MODULE_TYPES_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_MODULE_TYPES_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(LAYOUT_MODULE_TYPES_PROVIDERS),\n                                            inject(LAYOUT_MODULE_TYPES_DATA_EXTRACTORS),\n                                            isLayoutModuleTypes,\n                                            inject(LOGGER, {optional: true}) ?? undefined,\n                                            true)\n};\n\n/**\n * Provider for layout history manager state\n */\nexport const LAYOUT_HISTORY_MANAGER_STATE: ExistingProvider =\n{\n    provide: METADATA_STATE_MANAGER,\n    useExisting: LayoutEditorMetadataManager,\n};\n\n/**\n * Provider for layout history manager\n */\nexport const LAYOUT_HISTORY_MANAGER_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_HISTORY_MANAGER,\n    useClass: MetadataHistoryManager\n};","import {LayoutComponentMetadata, LayoutComponentTransform} from '@anglr/dynamic/layout';\n\nimport {LayoutDesignerComponentOptions} from '../../components/layoutDesigner/layoutDesigner.options';\nimport {LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX} from '../constants';\n\n/**\n * Transformation function for layout designer component metadata\n * @param metadata - Metadata to be transformed\n */\nexport const layoutDesignerComponentTransform: LayoutComponentTransform = function(metadata: LayoutComponentMetadata): LayoutComponentMetadata\n{\n    return {\n        id: `${metadata.id}${LAYOUT_DESIGNER_COMPONENT_ID_SUFFIX}`,\n        package: '@anglr/dynamic/layout-editor',\n        name: 'layout-designer',\n        options: <LayoutDesignerComponentOptions>\n        {\n            typeMetadata: metadata\n        }\n    };\n};","\nimport {LayoutPropertyDescriptionData, LayoutPropertyNameData, LayoutPropertyValuesData} from '../decorators';\n\n/**\n * Default built-in property types\n */\nexport type DefaultKnownPropertyTypes = 'textarea'|'inputString'|'inputNumber'|'inputSize'|'inputBoolean'|'selectValue'|'selectValues';\n\n/**\n * Minimal layout editor property metadata\n */\nexport type LayoutEditorPropertyMetadata<TValues = any> = LayoutPropertyDescriptionData&LayoutPropertyNameData&LayoutPropertyValuesData<TValues>;\n\n/**\n * Symbol defining property storing layout properties metadata\n */\nexport const LayoutPropertyMetadata = Symbol('LayoutPropertyMetadata');\n","import {Provider} from '@angular/core';\nimport {DefaultDynamicPackage, DynamicItemLoaderValidatorFn, provideStaticPackageSource} from '@anglr/dynamic';\nimport {provideLayout} from '@anglr/dynamic/layout';\nimport {isBlank} from '@jscrpt/common';\n\nimport {LayoutModuleTypes} from '../components';\nimport {DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR, DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR, DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER, LAYOUT_DESIGNER_COMPONENTS_PROVIDER, LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER, LAYOUT_HISTORY_MANAGER_STATE, LAYOUT_HISTORY_MANAGER_PROVIDER, LAYOUT_MODULE_TYPES_LOADER_PROVIDER} from './providers';\nimport {DragActiveService, LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager, LayoutEditorPropertyMetadataExtractor} from '../services';\n\n/**\n * Default providers for layout editor subpackage, including providers for layout subpackage\n * @param designerLayout - Indication whether provide extractor for layout designer types, defaults to true\n * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n */\nexport function provideLayoutEditor(designerLayout: boolean = true, packages: DefaultDynamicPackage[] = ['basic-components', 'material-components']): Provider[]\n{\n    return [\n        ...designerLayout ? [DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR] : [],\n        ...provideLayout(),\n        LAYOUT_DESIGNER_COMPONENTS_PROVIDER,\n        DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER,\n        DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR,\n        LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER,\n        LAYOUT_MODULE_TYPES_LOADER_PROVIDER,\n        LayoutEditorMetadataExtractor,\n        LayoutEditorPropertyMetadataExtractor,\n        LayoutEditorMetadataManager,\n        DragActiveService,\n        LayoutComponentsIteratorService,\n        LAYOUT_HISTORY_MANAGER_PROVIDER,\n        LAYOUT_HISTORY_MANAGER_STATE,\n        ...packages.map(pkg => provideStaticPackageSource(pkg)),\n    ];\n}\n\n/**\n * Checks whether data is layout module types\n * @param data - Data to be checked\n */\nexport const isLayoutModuleTypes: DynamicItemLoaderValidatorFn<LayoutModuleTypes> = function(data): data is LayoutModuleTypes\n{\n    if(isBlank(data?.data) || !Array.isArray(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {DynamicLayoutModule} from '@anglr/dynamic/layout';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {LayoutEditorSAComponent} from '../components';\nimport {provideLayoutEditor} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutEditorSAComponent,\n    ],\n    exports:\n    [\n        LayoutEditorSAComponent,\n        DynamicLayoutModule,\n    ],\n})\nexport class DynamicLayoutEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutEditorModule extended with providers\n     * @param designerLayout - Indication whether provide extractor for layout designer types\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(designerLayout: boolean = true,\n                                packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicLayoutEditorModule>\n    {\n        return {\n            ngModule: DynamicLayoutEditorModule,\n            providers:\n            [\n                provideLayoutEditor(designerLayout, packages),\n            ]\n        };\n    }\n}","/**\n * Defines behavior what should happen if rendered layout component type was not found\n */\nexport enum MissingTypeBehavior\n{\n    /**\n     * Shows special not found component as *placeholder*\n     */\n    ShowNotFound,\n\n    /**\n     * Ignores missing component, silently continues\n     */\n    Ignore,\n\n    /**\n     * Throws javascript error with missing component error\n     */\n    ThrowError\n}","import {isPresent} from '@jscrpt/common';\n\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\n\n/**\n * Options for LayoutComponentRendererDirective\n */\nexport class LayoutComponentRendererDirectiveOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * Describes what should happen if layout component type described in metadata was not found\n     */\n    public missingTypeBehavior: MissingTypeBehavior = MissingTypeBehavior.ShowNotFound;\n\n    //######################### constructor #########################\n    constructor(missingTypeBehavior?: MissingTypeBehavior)\n    {\n        if(isPresent(missingTypeBehavior))\n        {\n            this.missingTypeBehavior = missingTypeBehavior;\n        } \n    }\n}","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {HostDisplayBlockStyle} from '@anglr/common';\n\n/**\n * Component used for displaying not found layout type placeholder\n */\n@Component(\n{\n    selector: 'not-found-layout-type',\n    templateUrl: 'notFoundLayoutType.component.html',\n    styles: [HostDisplayBlockStyle],\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotFoundLayoutTypeSAComponent \n{\n}","<div>\n    <span class=\"fas fa-minus-circle\"></span>\n    <span>NOT FOUND</span>\n    <span class=\"fas fa-minus-circle\"></span>\n</div>","import {ComponentRef, Directive, EmbeddedViewRef, EventEmitter, Inject, Injector, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, ValueProvider, ViewContainerRef} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {addSimpleChange, DynamicItemExtensionType, DynamicItemLoader, SCOPE_ID} from '@anglr/dynamic';\nimport {nameof} from '@jscrpt/common';\n\nimport {LayoutComponentRendererDirectiveOptions} from './layoutComponentRenderer.options';\nimport {MissingTypeBehavior} from './layoutComponentRenderer.types';\nimport {NotFoundLayoutTypeSAComponent} from '../../components';\nimport {LayoutComponent, LayoutComponentMetadata, LayoutComponentTransform} from '../../interfaces';\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENT_CHILD_EXTENSIONS, LAYOUT_COMPONENT_TRANSFORM} from '../../misc/tokens';\nimport {LayoutComponentDef} from '../../misc/types';\n\n//TODO: refactor input, output names\n\n/**\n * Renders layout component from metadata\n */\n@Directive(\n{\n    selector: '[layoutComponentRenderer]',\n    exportAs: 'layoutComponentRenderer',\n    providers: \n    [\n        <ValueProvider>\n        {\n            provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n            useValue: null,\n        }\n    ],\n    standalone: true\n})\nexport class LayoutComponentRendererSADirective<TComponent extends LayoutComponent<TComponentOptions> = any, TComponentOptions = any> implements OnChanges, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Created component reference\n     */\n    protected ɵComponentRef: ComponentRef<TComponent>|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Type that should be dynamically created into current container\n     */\n    @Input('layoutComponentRenderer')\n    public componentMetadata: LayoutComponentMetadata<TComponentOptions>|undefined|null = null;\n\n    /**\n     * Custom injector used as parent for layout components tree\n     */\n    @Input('layoutComponentRendererInjector')\n    public customInjector: Injector|undefined|null;\n\n    /**\n     * Disables component metadata transformer\n     */\n    @Input('layoutComponentRendererDisableTransformer')\n    public disableTransformer: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when rendered component changes\n     */\n    @Output('layoutComponentRendererComponentChange')\n    public componentChange: EventEmitter<ComponentRef<TComponent>|null> = new EventEmitter<ComponentRef<TComponent>|null>();\n\n    /**\n     * Occurs when components element changes\n     */\n    @Output()\n    public componentElementChange: EventEmitter<HTMLElement|null> = new EventEmitter<HTMLElement|null>();\n\n    //######################### protected properties #########################\n\n    /**\n     * Instance of dynamically created component\n     */\n    protected get component(): TComponent|null\n    {\n        if(!this.ɵComponentRef)\n        {\n            return null;\n        }\n\n        return this.ɵComponentRef.instance;\n    }\n\n    //######################### public properties #########################\n\n    /**\n     * Gets component ref of created component or null\n     */\n    public get componentRef(): ComponentRef<TComponent>|null\n    {\n        return this.ɵComponentRef;\n    }\n\n    //######################### constructor #########################\n    constructor(protected viewContainerRef: ViewContainerRef,\n                @Inject(LAYOUT_COMPONENTS_LOADER) protected loader: DynamicItemLoader<LayoutComponentDef>,\n                @Inject(LAYOUT_COMPONENT_CHILD_EXTENSIONS) @Optional() @SkipSelf() protected childExtensions?: DynamicItemExtensionType[]|null,\n                @Inject(SCOPE_ID) @Optional() protected scopeId?: string,\n                @Optional() protected options?: LayoutComponentRendererDirectiveOptions,\n                @Inject(LAYOUT_COMPONENT_TRANSFORM) @Optional() protected metadataTransformer?: LayoutComponentTransform,\n                @Inject(LOGGER) @Optional() protected logger?: Logger,)\n    {\n        if(!this.options || !(this.options instanceof LayoutComponentRendererDirectiveOptions))\n        {\n            this.options = new LayoutComponentRendererDirectiveOptions();\n        }\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public async ngOnChanges(changes: SimpleChanges): Promise<void>\n    {\n        this.logger?.debug('LayoutComponentRendererSADirective: rendering component {@id}', {id: this.componentMetadata?.id});\n\n        this.ngOnDestroy();\n        this.viewContainerRef.clear();\n\n        // component metadata is present\n        if(nameof<LayoutComponentRendererSADirective<TComponent, TComponentOptions>>('componentMetadata') in changes && this.componentMetadata)\n        {\n            const injector = this.customInjector ?? this.viewContainerRef.injector;\n            let componentMetadata = this.componentMetadata;\n            const scopeId = this.componentMetadata.scope;\n\n            if(this.metadataTransformer && !this.disableTransformer)\n            {\n                componentMetadata = this.metadataTransformer(this.componentMetadata, injector);\n            }\n            \n            const layoutComponentType = await this.loader.loadItem(componentMetadata);\n\n            if(!layoutComponentType)\n            {\n                this.logger?.warn('LayoutComponentRendererSADirective: Unable to find layout component type {@type}', {name: componentMetadata.name, package: componentMetadata.package});\n\n                switch(this.options?.missingTypeBehavior)\n                {\n                    default:\n                    //case MissingTypeBehavior.ShowNotFound:\n                    {\n                        this.viewContainerRef.createComponent(NotFoundLayoutTypeSAComponent);\n\n                        break;\n                    }\n                    case MissingTypeBehavior.Ignore:\n                    {\n                        //do nothing\n\n                        break;\n                    }\n                    case MissingTypeBehavior.ThrowError:\n                    {\n                        throw new Error(`LayoutComponentRendererSADirective: Unable to find layout component type Name: ${componentMetadata.name} Package: ${componentMetadata.package}`);\n                    }\n                }\n\n                return;\n            }\n\n            const usedInjector = Injector.create(\n            {\n                parent: injector,\n                providers:\n                [\n                    <ValueProvider>\n                    {\n                        provide: SCOPE_ID,\n                        useValue: scopeId ?? this.scopeId ?? null,\n                    },\n                    <ValueProvider>\n                    {\n                        provide: LAYOUT_COMPONENT_CHILD_EXTENSIONS,\n                        useValue: layoutComponentType.childExtensions,\n                    }\n                ]\n            });\n\n            this.ɵComponentRef = this.viewContainerRef.createComponent(layoutComponentType.data,\n                                                                       {\n                                                                           injector: usedInjector,\n                                                                       }) as ComponentRef<TComponent>;\n\n            this.logger?.debug('LayoutComponentRendererSADirective: component rendered {@id}', {id: componentMetadata?.id});\n            const component = this.component;\n\n            if(component)\n            {\n                //registers extensions and child extensions\n                component.registerExtensions(\n                [\n                    ...this.childExtensions?.map(itm => new itm(componentMetadata)) ?? [],\n                    ...layoutComponentType?.extensions?.map(itm => new itm(componentMetadata)) ?? [],\n                ]);\n\n                const changes: SimpleChanges = {};\n                addSimpleChange<LayoutComponent>(changes, 'options', componentMetadata.options, component.options, true);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: setting options for component {@id}', {id: componentMetadata?.id});\n                component.options = componentMetadata.options;\n                \n                this.logger?.debug('LayoutComponentRendererSADirective: setting changes for component {@id}', {id: componentMetadata?.id});\n                await component.ngOnChanges?.(changes);\n\n                this.logger?.debug('LayoutComponentRendererSADirective: initializing component {@id}', {id: componentMetadata?.id});\n                await component.ngOnInit?.();\n\n                this.logger?.debug('LayoutComponentRendererSADirective: invalidating component visuals {@id}', {id: componentMetadata?.id});\n                component.invalidateVisuals();\n                this.ɵComponentRef?.changeDetectorRef.markForCheck();\n\n                this.componentElementChange.next((this.ɵComponentRef?.hostView as EmbeddedViewRef<unknown>).rootNodes[0] as HTMLElement);\n                this.componentChange.next(this.ɵComponentRef);\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this.ɵComponentRef)\n        {\n            this.logger?.debug('LayoutComponentRendererSADirective: destroying component {@id}', {id: this.componentMetadata?.id, designer: this.disableTransformer});\n    \n            this.ɵComponentRef?.destroy();\n            this.ɵComponentRef = null;\n            this.componentChange.next(null);\n            this.componentElementChange.next(null);\n        }\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {DefaultDynamicModuleItemsProvider, defaultExportExtractor, DynamicItemLoader, DynamicModuleDataExtractor, extensionsExportsExtractor} from '@anglr/dynamic';\n\nimport {LAYOUT_COMPONENTS_LOADER, LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS, LAYOUT_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {isLayoutComponentDef} from './utils';\n\n/**\n * Provider for default package layout components provider\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default layout components extractor\n */\nexport const DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  defaultExportExtractor,\n                                                  extensionsExportsExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for layout components loader\n */\nexport const LAYOUT_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: LAYOUT_COMPONENTS_LOADER,\n    useFactory: () =>\n    {\n        return new DynamicItemLoader(inject(LAYOUT_COMPONENTS_MODULE_PROVIDERS),\n                                     inject(LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                     isLayoutComponentDef,\n                                     inject(LOGGER, {optional: true}) ?? undefined);\n    }\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isPresent, isType} from '@jscrpt/common';\n\nimport {LayoutComponentDef} from './types';\nimport {DEFAULT_LAYOUT_COMPONENTS_PROVIDER, DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR, LAYOUT_COMPONENTS_LOADER_PROVIDER} from './providers';\n\n/**\n * Checks whether data is layout component def\n * @param data - Data to be checked\n */\nexport const isLayoutComponentDef: DynamicItemLoaderValidatorFn<LayoutComponentDef> = function(data): data is LayoutComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.childExtensions) && (!Array.isArray(data.childExtensions) || data.childExtensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    if(isPresent(data?.extensions) && (!Array.isArray(data.extensions) || data.extensions.some(itm => !isType(itm))))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for layout subpackage\n */\nexport function provideLayout(): Provider[]\n{\n    return [\n        LAYOUT_COMPONENTS_LOADER_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_PROVIDER,\n        DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {LayoutComponentRendererSADirective} from '../directives';\nimport {provideLayout} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic layout rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        LayoutComponentRendererSADirective,\n    ],\n    exports:\n    [\n        LayoutComponentRendererSADirective,\n    ]\n})\nexport class DynamicLayoutModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicLayoutModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicLayoutModule>\n    {\n        return {\n            ngModule: DynamicLayoutModule,\n            providers:\n            [\n                provideLayout(),\n            ]\n        };\n    }\n}","import {isJsObject} from '@jscrpt/common';\n\nimport {DynamicItemExtensions, DynamicItemExtensionType, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with extensions named exports\n */\ninterface ɵDynamicModuleNamedExtensions extends DynamicModule\n{\n    /**\n     * Extensions applied directly to self or object storing extensions and child extensions\n     */\n    extensions?: DynamicItemExtensionType[]|DynamicItemExtensions;\n\n    /**\n     * Extensions applied to children\n     */\n    childExtensions?: DynamicItemExtensionType[];\n}\n\n/**\n * Extracts dynamic item extensions which are exported as named exports of module\n */\nexport const extensionsExportsExtractor: DynamicModuleDataExtractorFn<DynamicItemExtensions> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleNamedExtensions;\n    const extensionsObject = localModule.extensions as DynamicItemExtensions;\n\n    logger?.debug('extensionsExportsExtractor: trying to extract dynamic item extensions');\n\n    //extensions stored as object\n    if(extensionsObject && isJsObject(extensionsObject) && (extensionsObject.extensions || extensionsObject.childExtensions))\n    {\n        return {\n            extensions: extensionsObject.extensions,\n            childExtensions: extensionsObject.childExtensions,\n        };\n    }\n\n    if(localModule.childExtensions || localModule.extensions)\n    {\n        return {\n            extensions: localModule.extensions as DynamicItemExtensionType[],\n            childExtensions: localModule.childExtensions,\n        };\n    }\n\n    return null;\n};\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","CssDynamicModuleItemsProvider","constructor","_logger","tryToGet","source","package","debug","name","i0","LOGGER","factory","CssDynamicModuleTypesProvider","moduleName","CSS_LAYOUT_COMPONENTS_PROVIDER","provide","LAYOUT_COMPONENTS_MODULE_PROVIDERS","useClass","multi","CSS_LAYOUT_MODULE_TYPES_PROVIDER","LAYOUT_MODULE_TYPES_PROVIDERS","provideCssLayout","provideCssLayoutEditor","provideStaticPackageSource","provideCssLayoutRelationsEditor","provideCssLayoutRelations","DemoLayoutPackageManager","PackageManager","super","LayoutEditorDragPreviewSAComponent","selectors","inputs","layoutMetadata","standalone","features","decls","vars","consts","template","DndCorePreviewTemplateDirective","_dir","_ctx","type","DndCorePreviewComponent","viewContainer","dnd","initSubscriptions","Subscription","ngOnInit","this","add","dragLayer","listen","monitor","dragging","isDragging","item","getItem","coordinates","getClientOffset","getItemType","subscribe","itm","dragPreviewElement","renderDragPreview","style","position","top","y","left","x","zIndex","removeDragPreview","ngOnDestroy","unsubscribe","dragData","dndCorePreviewTemplate","dragPreviewView","createEmbeddedView","$implicit","rootNodes","detectChanges","remove","destroy","contentQueries","TemplateRef","LayoutEditorSAComponent","history","changeDetector","hotkeys","metadata","init","pop","undo","redo","ngOnChanges","changes","nameof","clean","setInitialState","LAYOUT_HISTORY_MANAGER","LAYOUT_DESIGNER_COMPONENT_TRANSFORM","DndBusService","ComponentsTreeSAComponent","ComponentsPaletteSAComponent","PropertiesEditorSAComponent","LayoutDndCoreModule","i2","LayoutComponentRendererSADirective","PackageManagerModule","i4","MatTabsModule","i5","styles","changeDetection","LayoutDesignerDynamicModuleItemsProvider","warn","DefaultDynamicModuleTypesProvider","layoutDesignerTypeExtractor","logger","def","defaultExportExtractor","ext","extensionsExportsExtractor","localModule","data","layoutEditorDesignerType","childExtensions","extensions","DESIGNER_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_MODULE_DATA_EXTRACTORS","useFactory","DynamicModuleDataExtractor","deps","Optional","LAYOUT_DESIGNER_COMPONENTS_PROVIDER","LAYOUT_COMPONENT_TRANSFORM","useValue","options","typeMetadata","DYNAMIC_LAYOUT_MODULE_TYPES_PROVIDER","DEFAULT_LAYOUT_MODULE_TYPES_EXTRACTOR","LAYOUT_MODULE_TYPES_DATA_EXTRACTORS","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES_PROVIDER","LAYOUT_EDITOR_PROPERTY_METADATA_PROPERTIES","LayoutPropertyMetadata","LAYOUT_MODULE_TYPES_LOADER_PROVIDER","LAYOUT_MODULE_TYPES_LOADER","DynamicItemLoader","inject","isLayoutModuleTypes","optional","undefined","LAYOUT_HISTORY_MANAGER_STATE","METADATA_STATE_MANAGER","useExisting","LayoutEditorMetadataManager","LAYOUT_HISTORY_MANAGER_PROVIDER","MetadataHistoryManager","Symbol","provideLayoutEditor","designerLayout","packages","provideLayout","LayoutEditorMetadataExtractor","LayoutEditorPropertyMetadataExtractor","DragActiveService","LayoutComponentsIteratorService","pkg","isBlank","Array","isArray","DynamicLayoutEditorModule","ngModule","providers","DynamicLayoutModule","MissingTypeBehavior","LayoutComponentRendererDirectiveOptions","missingTypeBehavior","ShowNotFound","isPresent","NotFoundLayoutTypeSAComponent","viewContainerRef","loader","scopeId","metadataTransformer","componentMetadata","disableTransformer","componentChange","EventEmitter","componentElementChange","component","ɵComponentRef","instance","componentRef","clear","injector","customInjector","scope","layoutComponentType","loadItem","createComponent","Ignore","ThrowError","usedInjector","Injector","parent","SCOPE_ID","LAYOUT_COMPONENT_CHILD_EXTENSIONS","registerExtensions","addSimpleChange","invalidateVisuals","changeDetectorRef","markForCheck","next","hostView","designer","LAYOUT_COMPONENTS_LOADER","outputs","exportAs","DEFAULT_LAYOUT_COMPONENTS_PROVIDER","DefaultDynamicModuleItemsProvider","DEFAULT_LAYOUT_COMPONENTS_EXTRACTOR","LAYOUT_COMPONENTS_LOADER_PROVIDER","isLayoutComponentDef","isType","some","extensionsObject","isJsObject"],"sourceRoot":""}