{"version":3,"file":"3409.chunk.e412fdbe9cf19cfba42a.js","mappings":"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","sources":["webpack://ng-universal-demo/./app/services/staticComponentsRegister/staticComponentsRegister.service.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/editor/editor.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/editor/editor.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relations/relations.component.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relations/relations.component.html","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relationsWithEditor.routes.ts","webpack://ng-universal-demo/./app/pages/+relationsWithEditor/relationsWithEditor.module.ts","webpack://ng-universal-demo/./app/services/demoRelationsPackageManager/demoRelationsPackageManager.service.ts","webpack://ng-universal-demo/../relations-editor/src/modules/dynamicRelationsEditor.module.ts","webpack://ng-universal-demo/../relations/src/misc/providers.ts","webpack://ng-universal-demo/../relations/src/misc/utils.ts","webpack://ng-universal-demo/../relations/src/modules/dynamicRelations.module.ts","webpack://ng-universal-demo/../../../../src/internal/observable/never.ts","webpack://ng-universal-demo/../../../../router/src/decorators/componentRoute.decorator.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/directives/goBack/goBack.directive.ts","webpack://ng-universal-demo/../../../../src/modules/goBack/modules/goBack.module.ts","webpack://ng-universal-demo/../../../../src/cdk/drag-drop/drag-drop-module.ts","webpack://ng-universal-demo/../../../../packages/common/src/pipes/keyvalue_pipe.ts","webpack://ng-universal-demo/../../../src/decorators/debounceCall.decorator.ts"],"sourcesContent":["import {Injectable, Type} from '@angular/core';\nimport {StaticComponentsRegister as Register} from '@anglr/dynamic/relations-editor';\nimport {Dictionary} from '@jscrpt/common';\n\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\n\n/**\n * Static components register for demo app\n */\n@Injectable()\nexport class StaticComponentsRegister extends Register\n{\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected getDefinedTypes(): Dictionary<Type<any>>\n    {\n        const result: Dictionary<Type<any>> = {};\n\n        result[RelationsResultSAComponent.relationsId] = RelationsResultSAComponent;\n        result[RelationsSampleClickSAComponent.relationsId] = RelationsSampleClickSAComponent;\n\n        return result;\n    }\n}","import {Component, ChangeDetectionStrategy, ClassProvider, FactoryProvider} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {provideRelationsEditorWithStatic, RelationsNodeManager, RelationsNodeMetadata} from '@anglr/dynamic/relations-editor';\nimport {provideTinyMceRelationsEditor} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsRelationsEditor} from '@anglr/dynamic/handlebars-components';\nimport {RELATIONS_METADATA_STORAGE} from '@anglr/dynamic/relations';\nimport {EditorHotkeys, MetadataStorage, PackageManager} from '@anglr/dynamic';\n\nimport {DemoData} from '../../../services/demoData';\nimport {StaticComponentsRegister} from '../../../services/staticComponentsRegister/staticComponentsRegister.service';\nimport {DemoRelationsPackageManager} from '../../../services/demoRelationsPackageManager/demoRelationsPackageManager.service';\n\n/**\n * Layout editor component\n */\n@Component(\n{\n    selector: 'editor-view',\n    templateUrl: 'editor.component.html',\n    providers:\n    [\n        EditorHotkeys,\n        <FactoryProvider>\n        {\n            provide: RELATIONS_METADATA_STORAGE,\n            useFactory: () => new MetadataStorage<RelationsNodeMetadata[]>(() => []),\n        },\n        provideRelationsEditorWithStatic(StaticComponentsRegister),\n        provideTinyMceRelationsEditor(),\n        provideHandlebarsRelationsEditor(),\n        <ClassProvider>\n        {\n            provide: PackageManager,\n            useClass: DemoRelationsPackageManager,\n        },\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: 'editor'})\nexport class EditorComponent\n{\n    //######################### protected properties - template bindings #########################\n\n    protected metadata: RelationsNodeMetadata[] = DemoData.relationsStaticWithEditorDemo;\n\n    //######################### constructor #########################\n    constructor(private _manager: RelationsNodeManager,)\n    {\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    protected save(): void\n    {\n        DemoData.relationsStaticWithEditorDemo = this._manager.getMetadata();\n    }\n}\n","<div class=\"flex-row\">\n    <button class=\"btn btn-primary margin-left-extra-small\" type=\"button\" goBack>\n        <span>go back</span>\n    </button>\n\n    <button class=\"btn btn-primary\" type=\"button\" (click)=\"save()\">\n        <span>save</span>\n    </button>\n</div>\n\n<relations-editor class=\"flex-1\" [metadata]=\"metadata\"></relations-editor>","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {ComponentRoute} from '@anglr/common/router';\nimport {provideRelations, RelationsManager} from '@anglr/dynamic/relations';\nimport {provideTinyMceRelations} from '@anglr/dynamic/tinymce-components';\nimport {provideHandlebarsRelations} from '@anglr/dynamic/handlebars-components';\n\nimport {DemoData} from '../../../services/demoData';\n\n//TODO: check why relations does not work after returning from editor\n\n/**\n * Page for displaying relations\n */\n@Component(\n{\n    selector: 'relations-view',\n    templateUrl: 'relations.component.html',\n    // styleUrls: ['relations.component.scss'],\n    providers:\n    [\n        provideRelations(),\n        provideTinyMceRelations(),\n        provideHandlebarsRelations(),\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n@ComponentRoute({path: ''})\nexport class RelationsComponent\n{\n    //######################### constructor #########################\n    constructor(private _relationsManager: RelationsManager,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this._relationsManager.setRelations(DemoData.relationsStaticWithEditorDemo);\n    }\n}","<div class=\"margin-bottom-big\">\n    <a routerLink=\"/relationsWithEditor/editor\">editor</a>\n</div>\n\n<div>\n    <div class=\"bold\">relations sample click</div>\n    <relations-sample-click></relations-sample-click>\n</div>\n\n<div>\n    <div class=\"bold\">relations result</div>\n    <relations-result></relations-result>\n</div>","import {EditorComponent} from './editor/editor.component';\nimport {RelationsComponent} from './relations/relations.component';\n\nexport const components =\n[\n    RelationsComponent,\n    EditorComponent,\n];","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router';\nimport {GoBackModule} from '@anglr/common';\nimport {ModuleRoutes} from '@anglr/common/router';\nimport {DynamicRelationsModule} from '@anglr/dynamic/relations';\nimport {DynamicRelationsEditorModule} from '@anglr/dynamic/relations-editor';\n\nimport {components} from './relationsWithEditor.routes';\nimport {RelationsResultSAComponent, RelationsSampleClickSAComponent} from '../../components';\nimport {createStoreDataServiceFactory} from '../../misc/factories';\n\n/**\n * Module for relations with editor samples\n */\n@NgModule(\n{\n    imports:\n    [\n        RouterModule,\n        GoBackModule,\n        DynamicRelationsModule,\n        DynamicRelationsEditorModule,\n        RelationsSampleClickSAComponent,\n        RelationsResultSAComponent,\n    ],\n    declarations:\n    [\n        ...components,\n    ],\n    providers:\n    [\n        createStoreDataServiceFactory('RELATIONS_TMP'),\n    ],\n})\n@ModuleRoutes(components)\nexport class RelationsWithEditorModule\n{\n}","import {Injectable} from '@angular/core';\nimport {PackageManager} from '@anglr/dynamic';\n\n/**\n * Relations package manager for demo app\n */\n@Injectable()\nexport class DemoRelationsPackageManager extends PackageManager\n{\n    //######################### constructor #########################\n    constructor()\n    {\n        super('RELATIONS_PACKAGES_STORE');\n    }\n}","import {ModuleWithProviders, NgModule, Type} from '@angular/core';\nimport {DefaultDynamicPackage} from '@anglr/dynamic';\n\nimport {RelationsEditorSAComponent} from '../components';\nimport {provideRelationsEditor, provideRelationsEditorWithStatic} from '../misc/utils';\nimport {StaticComponentsRegister} from '../services';\n\n/**\n * Module contains components, directives, pipes for dynamic relations editor rendering\n */\n@NgModule(\n{\n    imports:\n    [\n        RelationsEditorSAComponent,\n    ],\n    exports:\n    [\n        RelationsEditorSAComponent,\n    ],\n})\nexport class DynamicRelationsEditorModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withProviders(packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditor(packages),\n            ]\n        };\n    }\n\n    /**\n     * Creates DynamicRelationsEditorModule extended with providers for static components\n     * @param staticRegister - Type that represents implementation of static components register\n     * @param packages - Array of default packages to be used, if omitted all built-in packages are used\n     */\n    public static withStaticComponents(staticRegister: Type<StaticComponentsRegister>, packages?: DefaultDynamicPackage[]): ModuleWithProviders<DynamicRelationsEditorModule>\n    {\n        return {\n            ngModule: DynamicRelationsEditorModule,\n            providers:\n            [\n                provideRelationsEditorWithStatic(staticRegister, packages),\n            ]\n        };\n    }\n}","import {ClassProvider, FactoryProvider, inject, Optional} from '@angular/core';\nimport {DefaultDynamicModuleItemsProvider, DynamicItemLoader, DynamicModuleDataExtractor} from '@anglr/dynamic';\nimport {LOGGER, Logger} from '@anglr/common';\n\nimport {RELATIONS_COMPONENTS_LOADER, RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS, RELATIONS_COMPONENTS_MODULE_PROVIDERS} from './tokens';\nimport {relationsExportExtractor} from './extractors';\nimport {isRelationsComponentDef} from './utils';\n\n/**\n * Provider for default package relations components provider\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_PROVIDER: ClassProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_PROVIDERS,\n    useClass: DefaultDynamicModuleItemsProvider,\n    multi: true\n};\n\n/**\n * Provider for default relations components extractor\n */\nexport const DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS,\n    useFactory: (logger?: Logger) =>\n    {\n        return new DynamicModuleDataExtractor([\n                                                  relationsExportExtractor,\n                                              ],\n                                              logger);\n    },\n    deps: [[new Optional(), LOGGER]],\n    multi: true\n};\n\n/**\n * Provider for relations components loader\n */\nexport const RELATIONS_COMPONENTS_LOADER_PROVIDER: FactoryProvider =\n{\n    provide: RELATIONS_COMPONENTS_LOADER,\n    useFactory: () => new DynamicItemLoader(inject(RELATIONS_COMPONENTS_MODULE_PROVIDERS),\n                                            inject(RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS),\n                                            isRelationsComponentDef,\n                                            inject(LOGGER, {optional: true}) ?? undefined)\n};","import {Provider} from '@angular/core';\nimport {DynamicItemLoaderValidatorFn} from '@anglr/dynamic';\nimport {isBlank, isType} from '@jscrpt/common';\n\nimport {RelationsComponentDef} from './types';\nimport {DEFAULT_RELATIONS_COMPONENTS_PROVIDER, DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR, RELATIONS_COMPONENTS_LOADER_PROVIDER} from './providers';\nimport {RelationsComponentManager, RelationsManager, RelationsProcessor} from '../services';\n\n/**\n * Checks whether data is relations component def\n * @param data - Data to be checked\n */\nexport const isRelationsComponentDef: DynamicItemLoaderValidatorFn<RelationsComponentDef> = function(data): data is RelationsComponentDef\n{\n    //type is required and must be type\n    if(isBlank(data?.data) || !isType(data.data))\n    {\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Default providers for relations subpackage\n */\nexport function provideRelations(): Provider[]\n{\n    return [\n        DEFAULT_RELATIONS_COMPONENTS_PROVIDER,\n        DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR,\n        RELATIONS_COMPONENTS_LOADER_PROVIDER,\n        RelationsComponentManager,\n        RelationsManager,\n        RelationsProcessor,\n    ];\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {provideRelations} from '../misc/utils';\n\n/**\n * Module contains components, directives, pipes for dynamic relations rendering\n */\n@NgModule(\n{\n})\nexport class DynamicRelationsModule\n{\n    //######################### public methods #########################\n\n    /**\n     * Creates DynamicRelationsModule extended with providers\n     */\n    public static withProviders(): ModuleWithProviders<DynamicRelationsModule>\n    {\n        return {\n            ngModule: DynamicRelationsModule,\n            providers:\n            [\n                provideRelations(),\n            ]\n        };\n    }\n}",null,"import {Route} from '@angular/router';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Extended type with route definition\n */\nexport interface RouteDecoratedComponent\n{\n    /**\n     * Definition of routes that are assigned to this type\n     */\n    routeValues: Route[];\n}\n\n/**\n * Type that represents options that can be passed to control represented by model property\n */\nexport type ComponentRouteDefinition = Omit<Route, keyof Pick<Route, 'component'>>;\n\n/**\n * Defines route for component on which is this decorator applied\n * @param route - route Definition of route, does not require component to be set\n */\nexport function ComponentRoute(route: ComponentRouteDefinition): ClassDecorator\n{\n\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const rt = route as Route;\n\n        rt.component = <any>target;\n        \n        const routeDecoratedComponent: RouteDecoratedComponent = <any>target;\n\n        if(isBlank(routeDecoratedComponent.routeValues))\n        {\n            Object.defineProperty(target, \n                                  'routeValues', \n                                  {\n                                      enumerable: true,\n                                      configurable: false,\n                                      writable: false,\n                                      value: []\n                                  });\n        }\n\n        routeDecoratedComponent.routeValues.push(rt);\n        \n        return target;\n    };\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}","import {Directive, HostListener} from '@angular/core';\nimport {Location} from '@angular/common';\n\n/**\n * Directive that performs browser back button action on click\n */\n@Directive(\n{\n    selector: '[goBack]'\n})\nexport class GoBackDirective\n{\n    //######################### constructor #########################\n    constructor(private _location: Location)\n    {\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Navigates back in browser\n     * @param event - Mouse event that occured\n     */\n    @HostListener('click', ['$event'])\n    public goBack(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._location.back();\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {GoBackDirective} from '../directives';\n\n/**\n * Module for GoBack directive\n */\n@NgModule(\n{\n    declarations:\n    [\n        GoBackDirective\n    ],\n    exports:\n    [\n        GoBackDirective\n    ]\n})\nexport class GoBackModule\n{\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkScrollableModule,\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [DragDrop],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this\n * keyvalue pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'keyvalue',\n  pure: false,\n  standalone: true,\n})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ!: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n  private compareFn: (a: KeyValue<any, any>, b: KeyValue<any, any>) => number = defaultComparator;\n\n  /*\n   * NOTE: when the `input` value is a simple Record<K, V> object, the keys are extracted with\n   * Object.keys(). This means that even if the `input` type is Record<number, V> the keys are\n   * compared/returned as `string`s.\n   */\n  transform<K, V>(\n      input: ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform<K extends number, V>(\n      input: Record<K, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\n  transform(\n      input: null|undefined,\n      compareFn?: (a: KeyValue<unknown, unknown>, b: KeyValue<unknown, unknown>) => number): null;\n  transform<K, V>(\n      input: ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K extends number, V>(\n      input: Record<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>|null;\n  transform<K extends string, V>(\n      input: Record<K, V>|ReadonlyMap<K, V>|null|undefined,\n      compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>|null;\n  transform<K, V>(\n      input: undefined|null|{[key: string]: V, [key: number]: V}|ReadonlyMap<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n    const compareFnChanged = compareFn !== this.compareFn;\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue!));\n      });\n    }\n    if (differChanges || compareFnChanged) {\n      this.keyValues.sort(compareFn);\n      this.compareFn = compareFn;\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","import {Func} from '../types/functions';\r\nimport {isFunction, isPresent} from '../utils/lang';\r\n\r\n/**\r\n * Adds special functionality to method call, that debounce method call for specified time\r\n * @param delay - Number of miliseconds that delays function call\r\n */\r\nexport function DebounceCall(delay: number): MethodDecorator\r\n{\r\n    return function(_target: Object, propertyKey: string|symbol, descriptor: PropertyDescriptor)\r\n    {\r\n        let timeout: number;\r\n        const originalValue: Func = descriptor.value ?? descriptor.get?.();\r\n\r\n        if(!isFunction(originalValue))\r\n        {\r\n            throw new Error(`Unable to apply @DebounceCall() decorator to '${propertyKey.toString()}', it is not a method.`);\r\n        }\r\n\r\n        descriptor.value = function(...args: unknown[]): void\r\n        {\r\n            if(isPresent(timeout))\r\n            {\r\n                clearTimeout(timeout);\r\n            }\r\n\r\n            timeout = setTimeout(() =>\r\n            {\r\n                originalValue.apply(this, args);\r\n            }, delay) as any;\r\n        };\r\n\r\n        return descriptor;\r\n    };\r\n}"],"names":["StaticComponentsRegister","Register","getDefinedTypes","result","RelationsResultSAComponent","RelationsSampleClickSAComponent","t","factory","EditorComponent","constructor","_manager","metadata","DemoData","save","this","getMetadata","i0","selectors","features","EditorHotkeys","provide","RELATIONS_METADATA_STORAGE","useFactory","MetadataStorage","provideRelationsEditorWithStatic","provideTinyMceRelationsEditor","provideHandlebarsRelationsEditor","PackageManager","useClass","DemoRelationsPackageManager","decls","vars","consts","template","ctx","ComponentRoute","path","RelationsNodeManager","RelationsComponent","_relationsManager","ngOnInit","setRelations","provideRelations","provideTinyMceRelations","provideHandlebarsRelations","RelationsManager","components","RelationsWithEditorModule","createStoreDataServiceFactory","imports","RouterModule","GoBackModule","DynamicRelationsModule","DynamicRelationsEditorModule","ModuleRoutes","super","packages","ngModule","providers","provideRelationsEditor","staticRegister","RelationsEditorSAComponent","DEFAULT_RELATIONS_COMPONENTS_PROVIDER","RELATIONS_COMPONENTS_MODULE_PROVIDERS","DefaultDynamicModuleItemsProvider","multi","DEFAULT_RELATIONS_COMPONENTS_EXTRACTOR","RELATIONS_COMPONENTS_MODULE_DATA_EXTRACTORS","logger","DynamicModuleDataExtractor","relationsExportExtractor","deps","Optional","LOGGER","RELATIONS_COMPONENTS_LOADER_PROVIDER","RELATIONS_COMPONENTS_LOADER","DynamicItemLoader","inject","isRelationsComponentDef","optional","undefined","data","isBlank","isType","RelationsComponentManager","RelationsProcessor","NEVER","Observable","noop","route","target","rt","component","routeDecoratedComponent","routeValues","Object","defineProperty","enumerable","configurable","writable","value","push","AsRequiredTypePipe","transform","defaultValue","_valueHash","GoBackDirective","_location","goBack","event","preventDefault","stopPropagation","back","i1","DragDropModule","DragDrop","CdkScrollableModule","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","input","Map","differ","find","create","differChanges","diff","compareFnChanged","forEachItem","r","key","currentValue","sort","keyValueA","keyValueB","a","b","aString","String","bString","DebounceCall","delay","_target","propertyKey","descriptor","timeout","originalValue","get","isFunction","Error","toString","args","isPresent","clearTimeout","setTimeout","apply"],"sourceRoot":""}