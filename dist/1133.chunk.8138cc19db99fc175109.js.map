{"version":3,"file":"1133.chunk.8138cc19db99fc175109.js","mappings":"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","sources":["webpack://ng-universal-demo/../basic-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/./app/components/relationsResult/node/relationsResultNode.component.ts","webpack://ng-universal-demo/./app/components/relationsResult/node/relationsResultNode.component.html","webpack://ng-universal-demo/./app/components/relationsResult/metadata/relationsResult.relationsMetadata.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeEndpointBase.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.html","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeHeader/relationsNodeHeader.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeInput/relationsNodeInput.component.ts","webpack://ng-universal-demo/../relations-editor/src/components/relationsNodeOutput/relationsNodeOutput.component.ts","webpack://ng-universal-demo/../relations-editor/src/misc/tokens.ts","webpack://ng-universal-demo/../relations/src/decorators/pureRelationsComponent/pureRelationsComponent.decorator.ts","webpack://ng-universal-demo/../src/misc/extractors/defaultExport.extractor.ts","webpack://ng-universal-demo/../src/misc/utils.ts","webpack://ng-universal-demo/../src/services/defaultDynamicModuleItemsProvider/defaultDynamicModuleItemsProvider.service.ts","webpack://ng-universal-demo/../src/services/dynamicItemLoader/dynamicItemLoader.service.ts","webpack://ng-universal-demo/../src/services/dynamicModuleDataExtractor/dynamicModuleDataExtractor.service.ts","webpack://ng-universal-demo/../material-components/src/dynamicItems/ lazy ^\\.\\/.*\\/type$ namespace object","webpack://ng-universal-demo/../../../src/utils/async.ts"],"sourcesContent":["var map = {\n\t\"./button/type\": [\n\t\t4999,\n\t\t4999\n\t],\n\t\"./gridPanel/type\": [\n\t\t28229,\n\t\t8229\n\t],\n\t\"./gridPanelCell/type\": [\n\t\t24229,\n\t\t4229\n\t],\n\t\"./htmlBlock/type\": [\n\t\t57195,\n\t\t7195\n\t],\n\t\"./ifBlock/type\": [\n\t\t23234,\n\t\t3234\n\t],\n\t\"./negation/type\": [\n\t\t82937,\n\t\t2937\n\t],\n\t\"./rest/type\": [\n\t\t97496,\n\t\t7496\n\t],\n\t\"./sampleChange/type\": [\n\t\t37243,\n\t\t7243\n\t],\n\t\"./sampleSource/type\": [\n\t\t36736,\n\t\t6736\n\t],\n\t\"./stackPanel/type\": [\n\t\t54335,\n\t\t4335\n\t],\n\t\"./textBlock/type\": [\n\t\t88127,\n\t\t8127\n\t],\n\t\"./toggleButton/type\": [\n\t\t77964,\n\t\t7964\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 78391;\nmodule.exports = webpackAsyncContext;","import {Component, ChangeDetectionStrategy} from '@angular/core';\nimport {RelationsNode, RelationsNodeBase, RelationNodeInputSAComponent, RelationNodeOutputSAComponent, RelationsNodeHeaderSAComponent, RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER} from '@anglr/dynamic/relations-editor';\n\n/**\n * Relations node component for relations result\n */\n@Component(\n{\n    selector: 'relations-sample-node',\n    templateUrl: 'relationsResultNode.component.html',\n    // styleUrls: ['relationsResultNode.component.scss'],\n    standalone: true,\n    imports:\n    [\n        RelationsNodeHeaderSAComponent,\n        RelationNodeInputSAComponent,\n        RelationNodeOutputSAComponent,\n    ],\n    providers:\n    [\n        RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsResultNodeSAComponent extends RelationsNodeBase implements RelationsNode\n{\n}","<relations-node-header>{{metadata?.id}}</relations-node-header>\n\n<div class=\"node-content\">\n    <div class=\"inputs-outputs\">\n        <div class=\"inputs\">\n            <div class=\"input\">\n                <relation-node-input [parentCoordiantes]=\"nodePosition\" [zoomLevel]=\"zoomLevel\" name=\"vstup\" [parent]=\"this\"></relation-node-input>\n                <div>vstup</div>\n            </div>\n        </div>\n    \n        <div class=\"outputs\">\n        </div>\n    </div>\n</div>","import {Type} from '@angular/core';\nimport {RelationsEditorMetadataDescriptor, RelationsEditorMetadataInfo, RelationsNode} from '@anglr/dynamic/relations-editor';\n\nimport {RelationsResultNodeSAComponent} from '../node/relationsResultNode.component';\n\n/**\n * Relations result relations metadata\n */\nexport class RelationsResultRelationsEditorMetadata implements RelationsEditorMetadataDescriptor\n{\n    //######################### public properties - implementation of RelationsEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: RelationsEditorMetadataInfo =\n    {\n        name: 'Relations result',\n        description: 'Relations result node',\n        group: 'Sample component',\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public nodeDefinition: Type<RelationsNode> = RelationsResultNodeSAComponent;\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {HostListener, ViewChildren, QueryList, ChangeDetectorRef, ElementRef, SimpleChanges, Directive, Inject, Optional} from '@angular/core';\nimport {Dictionary, nameof} from '@jscrpt/common';\nimport {Observable, Subject} from 'rxjs';\n\nimport {Coordinates, RelationsInput, RelationsNode, RelationsNodeDestroySubject, RelationsNodeMetadata, RelationsOutput} from '../interfaces';\nimport {RelationNodeOutputSAComponent} from './relationsNodeOutput/relationsNodeOutput.component';\nimport {RelationNodeInputSAComponent} from './relationsNodeInput/relationsNodeInput.component';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../misc/tokens';\n\n/**\n * Base class for relations node components\n */\n@Directive()\nexport abstract class RelationsNodeBase<TOptions = any, TEditorOptions = any> implements RelationsNode<TOptions, TEditorOptions>\n{\n    //######################### protected properties #########################\n\n    /**\n     * Indication whether is node initialized\n     */\n    protected initialized: boolean = false;\n\n    /**\n     * Indication whether user is dragging\n     */\n    protected isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected lastMouseDownPosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position on last mouse down event\n     */\n    protected lastMouseDownNodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Node position\n     */\n    protected nodePosition: Coordinates =\n    {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * Array of all available outputs\n     */\n    protected ɵAllOutputs: readonly RelationsOutput[] = [];\n\n    /**\n     * Object storing inputs by their names\n     */\n    protected ɵInputs: Dictionary<RelationsInput> = {};\n \n    /**\n     * Object storing outputs by their names\n     */\n    protected ɵOutputs: Dictionary<RelationsOutput> = {};\n\n    /**\n     * Subject used for destroying node by user\n     */\n    protected destroySubject: Subject<void> = new Subject<void>();\n\n    //######################### protected properties - view children #########################\n\n    /**\n     * Relations node inputs\n     */\n    @ViewChildren(RelationNodeInputSAComponent)\n    protected inputsChildren!: QueryList<RelationsInput>;\n\n    /**\n     * Relations node outputs\n     */\n    @ViewChildren(RelationNodeOutputSAComponent)\n    protected outputsChildren!: QueryList<RelationsOutput>;\n\n    //######################### public properties - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public zoomLevel: number = 1;\n\n    /**\n     * @inheritdoc\n     */\n    public get id(): string\n    {\n        return this.metadata?.id ?? '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public metadata: RelationsNodeMetadata<TOptions, TEditorOptions>|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get allOutputs(): readonly RelationsOutput[]\n    {\n        return this.ɵAllOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get inputs(): Dictionary<RelationsInput>\n    {\n        return this.ɵInputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get outputs(): Dictionary<RelationsOutput>\n    {\n        return this.ɵOutputs;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get destroy(): Observable<void>\n    {\n        return this.destroySubject.asObservable();\n    }\n\n    //######################### constructor #########################\n    constructor(protected changeDetector: ChangeDetectorRef,\n                protected element: ElementRef<HTMLElement>,\n                @Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() destroySubject?: RelationsNodeDestroySubject,)\n    {\n        if(destroySubject)\n        {\n            destroySubject.destroy = this.destroySubject;\n        }\n\n        this.element.nativeElement.classList.add('relations-node');\n\n        this.updatePosition();\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        //initial change of metadata\n        if(nameof<RelationsNodeBase>('metadata') in changes && this.metadata)\n        {\n            if(this.metadata.nodeMetadata?.coordinates)\n            {\n                this.nodePosition = this.metadata.nodeMetadata.coordinates;\n                this.updatePosition();\n            }\n\n            this.metadataSet();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsNode #########################\n\n    /**\n     * @inheritdoc\n     */\n    public invalidateVisuals(): void\n    {\n        this.changeDetector.detectChanges();\n\n        if(!this.initialized)\n        {\n            this.initialized = true;\n\n            this.initEndpoints();\n        }\n    }\n\n    //######################### protected methods methods - host listeners #########################\n\n    /**\n     * Mouse down event\n     * @param event\n     */\n    @HostListener('mousedown', ['$event'])\n    protected onMouseDown(event: MouseEvent): void\n    {\n        this.isDragging = true;\n        this.lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this.lastMouseDownNodePosition =\n        {\n            x: this.nodePosition.x,\n            y: this.nodePosition.y\n        };\n\n        event.stopImmediatePropagation();\n    }\n\n    /**\n     * Mouse move event\n     * @param event\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected onMouseMove(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.nodePosition =\n            {\n                x: this.lastMouseDownNodePosition.x + (event.clientX - this.lastMouseDownPosition.x) * 1/this.zoomLevel,\n                y: this.lastMouseDownNodePosition.y + (event.clientY - this.lastMouseDownPosition.y) * 1/this.zoomLevel,\n            };\n\n            this.updatePosition();\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this.updateRelations();\n        }\n    }\n\n    /**\n     * Mouse up event\n     * @param event\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected onMouseUp(event: MouseEvent): void\n    {\n        if (this.isDragging)\n        {\n            this.isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize endpoints\n     */\n    protected initEndpoints(): void\n    {\n        const updateInputs = () =>\n        {\n            this.ɵInputs = {};\n\n            this.inputsChildren?.forEach(input =>\n            {\n                if(input.name)\n                {\n                    this.ɵInputs[input.name] = input;\n                }\n            });\n\n            Object.freeze(this.ɵInputs);\n        };\n\n        const updateOutputs = () =>\n        {\n            this.ɵAllOutputs = this.outputsChildren.toArray();\n            this.ɵOutputs = {};\n\n            this.outputsChildren?.forEach(output =>\n            {\n                if(output.name)\n                {\n                    this.ɵOutputs[output.name] = output;\n                }\n            });\n\n            Object.freeze(this.ɵOutputs);\n        };\n\n        this.inputsChildren?.changes.subscribe(() => updateInputs());\n        this.outputsChildren?.changes.subscribe(() => updateOutputs());\n\n        updateInputs();\n        updateOutputs();\n    }\n\n    /**\n     * Updates node relations\n     */\n    protected updateRelations(): void\n    {\n        this.inputsChildren.forEach(input =>\n        {\n            input.updateRelation();\n        });\n\n        this.outputsChildren.forEach(output =>\n        {\n            output.updateRelation();\n        });\n    }\n\n    /**\n     * Updates node position\n     */\n    protected updatePosition(): void\n    {\n        this.element.nativeElement.style.left = `${this.nodePosition.x}px`;\n        this.element.nativeElement.style.top = `${this.nodePosition.y}px`;\n\n        if(this.metadata?.nodeMetadata?.coordinates)\n        {\n            this.metadata.nodeMetadata.coordinates.x = this.nodePosition.x;\n            this.metadata.nodeMetadata.coordinates.y = this.nodePosition.y;\n        }\n    }\n\n    /**\n     * Allows code to be called after metadata were set\n     */\n    protected metadataSet(): void\n    {\n    }\n}","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\nimport {Coordinates, RelationsEndpoint, RelationsNode} from '../interfaces';\nimport {NodeRelationPath} from '../misc/nodeRelationPath';\nimport {RelationsNodeManager} from '../services';\nimport {RelationsCanvasSAComponent} from './relationsCanvas/relationsCanvas.component';\n\n/**\n * Base class for relations node endpoints (inputs/outputs)\n */\n@Directive()\nexport abstract class RelationNodeEndpointBase implements RelationsEndpoint, OnInit\n{\n    //######################### protected properties #########################\n\n    /**\n     * Node relation\n     */\n    protected _relation: NodeRelationPath|null|undefined;\n\n    /**\n     * Indication whether component is dragging\n     */\n    protected _isDragging: boolean = false;\n\n    /**\n     * Last mouse down position\n     */\n    protected _lastMouseDownPosition: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    //######################### public properties - implementation of RelationsEndpoint #########################\n\n    /**\n     * @inheritdoc\n     */\n    @Input()\n    public name: string|undefined|null;\n\n    /**\n     * @inheritdoc\n     */\n    public get parentId(): string\n    {\n        return this.parent?.id ?? '';\n    }\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Parent zoom level\n     */\n    @Input()\n    public zoomLevel: number = 1;\n\n    /**\n     * Parent node coordinates\n     */\n    @Input()\n    public parentCoordiantes: Coordinates = \n    {\n        x: 0,\n        y: 0\n    };\n\n    /**\n     * Instance of parent node\n     */\n    @Input()\n    public parent: RelationsNode|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _relationManager: RelationsNodeManager,\n                protected _canvas: RelationsCanvasSAComponent,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.parent)\n        {\n            throw new Error('Every input or output endpoint must have parent specified');\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * @inheritdoc\n     */\n    public getCoordinates(): Coordinates\n    {\n        return {\n            x: this.parentCoordiantes.x + this._element.nativeElement.offsetLeft + this._element.nativeElement.offsetWidth/2,\n            y: this.parentCoordiantes.y + this._element.nativeElement.offsetTop + this._element.nativeElement.offsetHeight/2\n        };\n    }\n\n    /**\n     * Updates relation coordinates\n     */\n    public abstract updateRelation(): void;\n}","<div class=\"header-content\"><ng-content></ng-content></div>\n<div *ngIf=\"destroySubject?.destroy\" class=\"destroy-icon\" (click)=\"destroySubject?.destroy?.next()\">x</div>","import {Component, ChangeDetectionStrategy, Inject, Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationsNodeDestroySubject} from '../../interfaces';\nimport {RELATIONS_NODE_DESTROY_SUBJECT} from '../../misc/tokens';\n\n/**\n * Component used for displaying relations node header\n */\n@Component(\n{\n    selector: 'relations-node-header',\n    templateUrl: 'relationsNodeHeader.component.html',\n    // styleUrls: ['relationsNodeHeader.component.scss'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationsNodeHeaderSAComponent\n{\n    //######################### constructor #########################\n    constructor(@Inject(RELATIONS_NODE_DESTROY_SUBJECT) @Optional() protected destroySubject?: RelationsNodeDestroySubject,)\n    {\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsInput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {MouseButton} from '../../misc/enums';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node input\n */\n@Component(\n{\n    selector: 'relation-node-input',\n    template: '',\n    styleUrls: ['relationsNodeInput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeInputSAComponent extends RelationNodeEndpointBase implements RelationsInput, OnDestroy\n{\n    //######################### private properties #########################\n\n    /**\n     * Temporary relation path when updating existing relation\n     */\n    private _tempRelation: NodeRelationPath|null|undefined;\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relation)\n        {\n            this._relation.destroy();\n        }\n    }\n\n    //######################### public methods - implementation of RelationsInput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public addRelation(relation: NodeRelationPath): boolean\n    {\n        if (this._relation)\n        {\n            //Same relation\n            if (this._relation.start?.x === relation.start?.x &&\n                this._relation.start?.y === relation.start?.y)\n            {\n                return false;\n            }\n\n            this._relation.destroy();\n        }\n\n        this._relation = relation;\n        \n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endRelation(relation: NodeRelationPath): void\n    {\n        if(this.addRelation(relation))\n        {\n            this.updateRelation();\n        }\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relation\n     */\n    public updateRelation(): void\n    {\n        if (!this._relation)\n        {\n            return;\n        }\n\n        this._relation.end = this.getCoordinates();\n        this._relation.input = this;\n        this._relation.invalidateVisuals();\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse enter event, marks input as active\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseenter', ['$event'])\n    protected _onMouseEnter(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(this);\n        }\n    }\n\n    /**\n     * Mouse leave event, clears marked active input\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mouseleave', ['$event'])\n    protected _onMouseLeave(event: MouseEvent): void\n    {\n        if (event.buttons === MouseButton.LEFT)\n        {\n            this._relationManager.setActiveInput(null);\n        }\n    }\n\n    /**\n     * Mouse down event, starts dragging\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: MouseEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._tempRelation = this._relation;\n        this._relation = null;\n        this._isDragging = true;\n    }\n\n    /**\n     * Mouse move event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._tempRelation)\n            {\n                this._tempRelation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition?.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition?.y) * 1/this.zoomLevel\n                };\n    \n                this._tempRelation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event on whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: MouseEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            this._tempRelation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {Component, ChangeDetectionStrategy, HostListener, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {RelationNodeEndpointBase} from '../relationsNodeEndpointBase';\nimport {RelationsOutput} from '../../interfaces';\nimport {NodeRelationPath} from '../../misc/nodeRelationPath';\nimport {INVALIDATE_DROP} from '../../misc/constants';\n\n/**\n * Component used to display relation node output\n */\n@Component(\n{\n    selector: 'relation-node-output',\n    template: '',\n    styleUrls: ['relationsNodeOutput.component.css'],\n    standalone: true,\n    imports:\n    [\n        CommonModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RelationNodeOutputSAComponent extends RelationNodeEndpointBase implements RelationsOutput, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Relations\n     */\n    protected _relations: NodeRelationPath[] = [];\n\n    //######################### public properties - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public get relations(): NodeRelationPath[]\n    {\n        return this._relations;\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._relations)\n        {\n            const relations = [...this._relations];\n\n            for(const relation of relations)\n            {\n                relation.destroy();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of RelationsOutput #########################\n\n    /**\n     * @inheritdoc\n     */\n    public startRelation(): NodeRelationPath\n    {\n        const relation = this._canvas.createRelation();\n\n        relation.start = this.getCoordinates();\n        relation.output = this;\n\n        relation.destroying.subscribe(() =>\n        {\n            const index = this._relations.indexOf(relation);\n\n            if(index >= 0)\n            {\n                this._relations.splice(index, 1);\n            }\n        });\n\n        this._relations.push(relation);\n\n        return relation;\n    }\n\n    //######################### public methods - overrides #########################\n\n    /**\n     * Updates node output relations\n     */\n    public updateRelation(): void\n    {\n        if (!this._relations)\n        {\n            return;\n        }\n\n        for (const relation of this._relations)\n        {\n            relation.start = this.getCoordinates();\n            relation.invalidateVisuals();\n        }\n    }\n\n    //######################### protected methods - host listeners #########################\n\n    /**\n     * Mouse down event, creates new relation\n     * @param event - Mouse event that occured\n     */\n    @HostListener('mousedown', ['$event'])\n    protected _onMouseDown(event: DragEvent): void\n    {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n\n        this._isDragging = true;\n        this._lastMouseDownPosition =\n        {\n            x: event.clientX,\n            y: event.clientY\n        };\n\n        this._relation = this.startRelation();\n    }\n\n    /**\n     * Mouse move event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mousemove', ['$event'])\n    protected _onMouseMove(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            if (this._relation)\n            {\n                this._relation.end =\n                {\n                    x: this.getCoordinates().x + (event.clientX - this._lastMouseDownPosition.x) * 1/this.zoomLevel,\n                    y: this.getCoordinates().y + (event.clientY - this._lastMouseDownPosition.y) * 1/this.zoomLevel\n                };\n\n                this._relation.invalidateVisuals();\n            }\n        }\n    }\n\n    /**\n     * Mouse up event - whole window\n     * @param event - Mouse event that occured\n     */\n    @HostListener('window:mouseup', ['$event'])\n    protected _onMouseUp(event: DragEvent): void\n    {\n        if (this._isDragging)\n        {\n            this._isDragging = false;\n            event.stopImmediatePropagation();\n            event.preventDefault();\n\n            this._relation?.invalidateVisuals(INVALIDATE_DROP);\n        }\n    }\n}","import {InjectionToken} from '@angular/core';\nimport {DynamicItemLoader, DynamicModuleDataExtractor, DynamicModuleProvider} from '@anglr/dynamic';\nimport {Observable} from 'rxjs';\n\nimport {RelationsModuleTypes, RelationsNodeDef} from './types';\nimport {RelationsNodeDestroySubject} from '../interfaces';\n\n/**\n * Injection token for relations module types data extractors\n */\nexport const RELATIONS_MODULE_TYPES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_MODULE_TYPES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations module types providers\n */\nexport const RELATIONS_MODULE_TYPES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_MODULE_TYPES_PROVIDERS');\n\n/**\n * Injection token for relations module types loader\n */\nexport const RELATIONS_MODULE_TYPES_LOADER: InjectionToken<DynamicItemLoader<RelationsModuleTypes>> = new InjectionToken<DynamicItemLoader<RelationsModuleTypes>>('RELATIONS_MODULE_TYPES_LOADER');\n\n/**\n * Injection token for relations nodes data extractors\n */\nexport const RELATIONS_NODES_DATA_EXTRACTORS: InjectionToken<DynamicModuleDataExtractor[]> = new InjectionToken<DynamicModuleDataExtractor[]>('RELATIONS_NODES_DATA_EXTRACTORS');\n\n/**\n * Injection token for relations nodes providers\n */\nexport const RELATIONS_NODES_PROVIDERS: InjectionToken<DynamicModuleProvider[]> = new InjectionToken<DynamicModuleProvider[]>('RELATIONS_NODES_PROVIDERS');\n\n/**\n * Injection token for relations nodes loader\n */\nexport const RELATIONS_NODES_LOADER: InjectionToken<DynamicItemLoader<RelationsNodeDef>> = new InjectionToken<DynamicItemLoader<RelationsNodeDef>>('RELATIONS_NODES_LOADER');\n\n/**\n * Injection token for observables that allows refreshing of nodes palatte items\n */\nexport const REFRESH_PALETTE_OBSERVABLES: InjectionToken<Observable<void>[]> = new InjectionToken<Observable<void>[]>('REFRESH_PALETTE_OBSERVABLES');\n\n/**\n * Injection token allowing obtaining of relations node destroy subject\n */\nexport const RELATIONS_NODE_DESTROY_SUBJECT: InjectionToken<RelationsNodeDestroySubject> = new InjectionToken<RelationsNodeDestroySubject>('RELATIONS_NODE_DESTROY_SUBJECT');\n","import {Type} from '@angular/core';\n\nimport {RelationsComponent} from '../../interfaces';\n\n/**\n * Defines identification of relations component type\n */\ninterface ɵRelationsComponentTypeId\n{\n    /**\n     * Indication that this component is relations component\n     */\n    __ɵɵRelationsComponent: boolean;\n}\n\n/**\n * Tests object whether it is RelationsComponent type\n * @param obj - Object to be tested\n */\nexport function isRelationsComponentType(obj: unknown): obj is Type<RelationsComponent>\n{\n    const trgt = obj as ɵRelationsComponentTypeId;\n\n    return !!trgt.__ɵɵRelationsComponent;\n}\n\n/**\n * Marks component as pure relations component, cant be used on component that is also layout component!\n */\nexport function PureRelationsComponent(): ClassDecorator\n{\n    return function <TFunction extends Function> (target: TFunction): TFunction\n    {\n        const trgt = target as unknown as ɵRelationsComponentTypeId;\n\n        trgt.__ɵɵRelationsComponent = true;\n\n        return target;\n    };\n}","import {isPresent} from '@jscrpt/common';\n\nimport {DynamicItemDefData, DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from '../../services';\n\n/**\n * Module with default export\n */\ninterface ɵDynamicModuleWithDefault<TData = any> extends DynamicModule\n{\n    /**\n     * Default export value\n     */\n    default?: TData;\n}\n\n/**\n * Extracts dynamic data which is module exports as default export\n */\nexport const defaultExportExtractor: DynamicModuleDataExtractorFn<DynamicItemDefData> = (module, logger) =>\n{\n    const localModule = module as ɵDynamicModuleWithDefault;\n\n    logger?.debug('defaultExportExtractor: trying to extract default dynamic data');\n\n    if(isPresent(localModule.default))\n    {\n        return {\n            data: localModule.default\n        };\n    }\n\n    return null;\n};","import {SimpleChange, SimpleChanges} from '@angular/core';\n\n/**\n * Adds simple change into simple changes object\n * @param changes - Object with changes to be added to\n * @param key - Key under wich should be change stored\n * @param currentValue - Current value that is being changed\n * @param previousValue - Previous value that is being changed\n * @param firstChange - Indication whether is first change, defaults to false\n */\nexport function addSimpleChange<TObj, TValue = any>(changes: SimpleChanges, key: Extract<keyof TObj, string>, currentValue: TValue|undefined|null, previousValue: TValue|undefined|null, firstChange: boolean = false): void\n{\n    changes[key] = <SimpleChange>\n    {\n        currentValue,\n        previousValue,\n        firstChange,\n        isFirstChange: () => firstChange,\n    };\n}","import {Inject, Injectable, Optional} from '@angular/core';\nimport {Logger, LOGGER} from '@anglr/common';\n\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleProvider} from '../dynamicItemLoader/dynamicItemLoader.interface';\n\n/**\n * Dynamic module items provider for built-in module items\n */\n@Injectable()\nexport class DefaultDynamicModuleItemsProvider implements DynamicModuleProvider\n{\n    //######################### constructor #########################\n    constructor(@Inject(LOGGER) @Optional() protected _logger?: Logger,)\n    {\n    }\n\n    //######################### public methods - implementation of DynamicItemLoaderProvider #########################\n\n    /**\n     * @inheritdoc\n     */\n    public async tryToGet(source: DynamicItemSource): Promise<DynamicModule|null>\n    {\n        switch(source.package)\n        {\n            case 'basic-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n\n                    const dynamicItemModule = await import(`@anglr/dynamic/basic-components/dynamicItems/${source.name}/type`);\n\n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            case 'material-components':\n            {\n                try\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: trying to get item {@item}', {name: source.name, package: source.package});\n        \n                    const dynamicItemModule = await import(`@anglr/dynamic/material-components/dynamicItems/${source.name}/type`);\n        \n                    return dynamicItemModule;\n                }\n                catch(e)\n                {\n                    this._logger?.debug('DefaultDynamicModuleItemsProvider: item {@item} was not found, reason: ' + e, {name: source.name, package: source.package});\n                }\n\n                break;\n            }\n            default:\n            {\n                return null;\n            }\n        }\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, resolvePromiseOr} from '@jscrpt/common';\n\nimport {DynamicModuleProvider, DynamicItemLoaderValidatorFn} from './dynamicItemLoader.interface';\nimport {DynamicModule, DynamicItemSource} from '../../interfaces';\nimport {DynamicModuleDataExtractor} from '../dynamicModuleDataExtractor/dynamicModuleDataExtractor.service';\n\n//TODO: make no chace dynamic, observable\n\n/**\n * Service used for loading dynamic items\n */\nexport class DynamicItemLoader<TDynamicItemDef = any>\n{\n    //######################### protected cache #########################\n\n    /**\n     * Cached dynamic items definition\n     */\n    protected cachedDynamicItems: Dictionary<TDynamicItemDef|null> = {};\n\n    //######################### constructors #########################\n    constructor(protected providers: DynamicModuleProvider[],\n                protected extractors: DynamicModuleDataExtractor<TDynamicItemDef>[],\n                protected validatorFn: DynamicItemLoaderValidatorFn<TDynamicItemDef>,\n                protected logger?: Logger,\n                protected noCache?: boolean,)\n    {\n        //providers is not an array\n        if(!Array.isArray(this.providers))\n        {\n            this.logger?.error('DynamicItemLoader: missing providers!');\n\n            this.providers = [];\n        }\n\n        //extractors is not an array\n        if(!Array.isArray(this.extractors))\n        {\n            this.logger?.error('DynamicItemLoader: missing extractors!');\n\n            this.extractors = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Loads dynamic item, or null if not found\n     * @param source - Definition of source for dynamic item\n     */\n    public async loadItem(source: DynamicItemSource): Promise<TDynamicItemDef|null>\n    {\n        let dynamicModule: DynamicModule|null = null;\n        const cacheId = `${source.package}-${source.name}`;\n\n        //try to get from cache\n        if(cacheId in this.cachedDynamicItems && !this.noCache)\n        {\n            this.logger?.verbose('DynamicItemLoader: Loading from cache {@source}', {name: source.name, package: source.package});\n\n            return this.cachedDynamicItems[cacheId];\n        }\n\n        //loops all providers, return result from first that returns non null value\n        for(const provider of this.providers)\n        {\n            const asyncDynamicModule = provider.tryToGet(source);\n\n            if(asyncDynamicModule)\n            {\n                dynamicModule = await resolvePromiseOr(asyncDynamicModule);\n            }\n            else\n            {\n                dynamicModule = null;\n            }\n\n            if(dynamicModule)\n            {\n                break;\n            }\n        }\n\n        //no module found\n        if(!dynamicModule)\n        {\n            this.logger?.debug('DynamicItemLoader: Failed to get dynamic module {@source}', {name: source.name, package: source.package});\n\n            return null;\n        }\n\n        //loops all extractors, return result from first that returns non null value\n        for(const extractor of this.extractors)\n        {\n            const dynamicItem = await extractor.tryToExtract(dynamicModule);\n\n            if(dynamicItem)\n            {\n                this.cachedDynamicItems[cacheId] = this.validatorFn(dynamicItem) ? dynamicItem : null; \n\n                if(!this.cachedDynamicItems[cacheId])\n                {\n                    this.logger?.warn('DynamicItemLoader: Found dynamic item {@source} is not of requested type', {name: source.name, package: source.package});        \n                }\n\n                return this.cachedDynamicItems[cacheId];\n\n            }\n        }\n\n        this.logger?.debug('DynamicItemLoader: Failed to extract dynamic item {@source}', {name: source.name, package: source.package});\n\n        this.cachedDynamicItems[cacheId] = null;\n\n        return null;\n    }\n}","import {Logger} from '@anglr/common';\nimport {Dictionary, extend, resolvePromiseOr, isEmptyObject} from '@jscrpt/common';\n\nimport {DynamicModule} from '../../interfaces';\nimport {DynamicModuleDataExtractorFn} from './dynamicModuleDataExtractor.interface';\n\n/**\n * Extractor used for extracting dynamic data from dynamic module\n */\nexport class DynamicModuleDataExtractor<TData extends Dictionary<any> = any>\n{\n    //######################### constructor #########################\n\n    /**\n     * Creates new instance of DynamicModuleDataExtractor\n     * @param _extractorFunctions - Array of extractor functions used to create result\n     * @param _logger - Instance of logger used for logging, optional\n     */\n    constructor(protected _extractorFunctions: DynamicModuleDataExtractorFn[],\n                protected _logger?: Logger,)\n    {\n        //extractor functions is not an array\n        if(!Array.isArray(this._extractorFunctions))\n        {\n            this._logger?.error('DynamicModuleDataExtractor: missing extractor functions!');\n\n            this._extractorFunctions = [];\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Tries to extract dynamic data from dynamic module\n     * @param module - Module containing dynamic data\n     */\n    public async tryToExtract(module: DynamicModule): Promise<TData|null>\n    {\n        const result: TData = {} as any;\n\n        for(const fn of this._extractorFunctions)\n        {\n            extend(true, result, await resolvePromiseOr(fn(module, this._logger)));\n        }\n\n        if(isEmptyObject(result))\n        {\n            return null;\n        }\n\n        return result;\n    }\n}","var map = {\n\t\"./checkbox/type\": [\n\t\t67309,\n\t\t294,\n\t\t7309\n\t],\n\t\"./datepicker/type\": [\n\t\t2229,\n\t\t3167,\n\t\t9101,\n\t\t4262,\n\t\t6038,\n\t\t2229\n\t],\n\t\"./numberField/type\": [\n\t\t39310,\n\t\t3167,\n\t\t4262,\n\t\t9310\n\t],\n\t\"./period/type\": [\n\t\t40059,\n\t\t3167,\n\t\t4262,\n\t\t59\n\t],\n\t\"./radio/type\": [\n\t\t84978,\n\t\t5613,\n\t\t4978\n\t],\n\t\"./select/type\": [\n\t\t68235,\n\t\t3167,\n\t\t5887,\n\t\t8235\n\t],\n\t\"./textField/type\": [\n\t\t98865,\n\t\t3167,\n\t\t4262,\n\t\t8865\n\t],\n\t\"./textarea/type\": [\n\t\t18226,\n\t\t3167,\n\t\t4262,\n\t\t8226\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 15033;\nmodule.exports = webpackAsyncContext;","import {PromiseOr} from '../types/async';\n\n/**\n * Resolves `PromiseOr` value\n * @param value - Value to be solved\n */\nexport async function resolvePromiseOr<TResult>(value: PromiseOr<TResult>): Promise<TResult>\n{\n    if(value instanceof Promise)\n    {\n        return await value;\n    }\n\n    return value;\n}\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","RelationsResultNodeSAComponent","RelationsNodeBase","t","selectors","standalone","features","RELATIONS_NODE_DESTROY_SUBJECT_PROVIDER","i0","decls","vars","consts","template","ctx","RelationsNodeHeaderSAComponent","RelationNodeInputSAComponent","encapsulation","changeDetection","RelationsResultRelationsEditorMetadata","constructor","metaInfo","name","description","group","nodeDefinition","freeze","this","changeDetector","element","destroySubject","initialized","isDragging","lastMouseDownPosition","x","y","lastMouseDownNodePosition","nodePosition","Subject","zoomLevel","destroy","nativeElement","classList","add","updatePosition","metadata","allOutputs","ɵAllOutputs","inputs","ɵInputs","outputs","ɵOutputs","asObservable","ngOnChanges","changes","nameof","nodeMetadata","coordinates","metadataSet","invalidateVisuals","detectChanges","initEndpoints","onMouseDown","event","clientX","clientY","stopImmediatePropagation","onMouseMove","preventDefault","updateRelations","onMouseUp","updateInputs","inputsChildren","forEach","input","updateOutputs","outputsChildren","toArray","output","subscribe","updateRelation","style","left","top","RELATIONS_NODE_DESTROY_SUBJECT","viewQuery","RelationNodeOutputSAComponent","RelationNodeEndpointBase","_element","_relationManager","_canvas","_isDragging","_lastMouseDownPosition","parentCoordiantes","parentId","parent","ngOnInit","getCoordinates","offsetLeft","offsetWidth","offsetTop","offsetHeight","ctx_r1","ngContentSelectors","CommonModule","i1","ngOnDestroy","_relation","addRelation","relation","start","endRelation","end","_onMouseEnter","buttons","MouseButton","setActiveInput","_onMouseLeave","_onMouseDown","_tempRelation","_onMouseMove","_onMouseUp","INVALIDATE_DROP","hostBindings","styles","_relations","relations","startRelation","createRelation","destroying","index","indexOf","splice","push","RELATIONS_MODULE_TYPES_DATA_EXTRACTORS","InjectionToken","RELATIONS_MODULE_TYPES_PROVIDERS","RELATIONS_MODULE_TYPES_LOADER","RELATIONS_NODES_DATA_EXTRACTORS","RELATIONS_NODES_PROVIDERS","RELATIONS_NODES_LOADER","REFRESH_PALETTE_OBSERVABLES","isRelationsComponentType","obj","__ɵɵRelationsComponent","PureRelationsComponent","target","defaultExportExtractor","logger","localModule","debug","isPresent","default","data","addSimpleChange","key","currentValue","previousValue","firstChange","isFirstChange","DefaultDynamicModuleItemsProvider","_logger","tryToGet","source","package","LOGGER","factory","DynamicItemLoader","providers","extractors","validatorFn","noCache","cachedDynamicItems","Array","isArray","error","loadItem","dynamicModule","cacheId","verbose","provider","asyncDynamicModule","resolvePromiseOr","extractor","dynamicItem","tryToExtract","warn","DynamicModuleDataExtractor","_extractorFunctions","result","fn","extend","isEmptyObject","all","slice","value"],"sourceRoot":""}