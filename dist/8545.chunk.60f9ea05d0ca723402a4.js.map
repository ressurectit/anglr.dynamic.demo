{"version":3,"file":"8545.chunk.60f9ea05d0ca723402a4.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/formGroupProperty.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/decorators/modelPropertyMetadata.decorator.ts","webpack://ng-universal-demo/../../../../forms/src/misc/formModel/misc/defaults.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../node_modules/@anglr/common/src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/components/tooltip/tooltip.component.html","webpack://ng-universal-demo/../../../../src/modules/tooltip/misc/tokens.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltipTemplate/tooltipTemplate.directive.ts","webpack://ng-universal-demo/../../../../src/modules/tooltip/directives/tooltip/tooltip.directive.ts","webpack://ng-universal-demo/../../../../src/services/position/position.utils.ts"],"sourcesContent":["import {FormGroup} from '@angular/forms';\n\nimport {ModelPropertyMetadata} from './modelPropertyMetadata.decorator';\n\n/**\n * Defines property value as FormGroup\n */\nexport function FormGroupProperty(): PropertyDecorator\n{\n    return ModelPropertyMetadata(\n    {\n        type: FormGroup\n    });\n}","import {Dictionary, nameof} from '@jscrpt/common';\n\nimport {ModelDecoratorMetadata} from '../interfaces/modelDecoratorMetadata';\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\nimport {ɵDefaultPropertyMetadata} from '../misc/defaults';\n\n/**\n * Defines metadata for model property\n * @param metadata - Metadata for model property, used for creating form\n */\nexport function ModelPropertyMetadata<TArgs extends Dictionary<any> = any,\n                                      TModel = any>(metadata: ModelPropertyDecoratorMetadata<TArgs>): PropertyDecorator\n{\n    return function(target: Object, propertyKey: string|symbol): void\n    {\n        const trgt = target as ModelDecoratorMetadata<TModel>;\n\n        if(!trgt.ɵControlsMetadata)\n        {\n            Object.defineProperty(trgt, nameof<ModelDecoratorMetadata>('ɵControlsMetadata'),\n            {\n                value: {},\n                writable: false,\n                enumerable: false,\n                configurable: false\n            });\n        }\n\n        //keep current validators\n        const originValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.validators ?? [];\n        const originAsyncValidators = trgt.ɵControlsMetadata[propertyKey as keyof TModel]?.asyncValidators ?? [];\n\n        //merge all other values\n        trgt.ɵControlsMetadata[propertyKey as keyof TModel] = \n        {\n            ...ɵDefaultPropertyMetadata,\n            ...trgt.ɵControlsMetadata[propertyKey as keyof TModel],\n            ...metadata\n        };\n\n        //merge validators\n        const propertyMetadata = trgt.ɵControlsMetadata[propertyKey as keyof TModel];\n\n        propertyMetadata.validators =\n        [\n            ...originValidators,\n            ...propertyMetadata.validators,\n        ];\n\n        propertyMetadata.asyncValidators =\n        [\n            ...originAsyncValidators,\n            ...propertyMetadata.asyncValidators,\n        ];\n    };\n}","import {FormControl} from '@angular/forms';\n\nimport {ModelPropertyDecoratorMetadata} from '../interfaces/modelPropertyDecoratorMetadata';\n\n/**\n * Default value for property metadata\n */\nexport const ɵDefaultPropertyMetadata: ModelPropertyDecoratorMetadata =\n{\n    asyncValidators: [],\n    validators: [],\n    disabled: false,\n    type: FormControl,\n    childType: FormControl,\n    args: {}\n};","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}",null,"import {Component, ChangeDetectionStrategy, TemplateRef, ChangeDetectorRef, ElementRef, HostListener} from '@angular/core';\n\nimport {TooltipTemplateContext} from '../../directives';\nimport {TooltipRenderer} from '../../misc/tooltip.interface';\n\n/**\n * Component used for displaying tooltip content\n */\n@Component(\n{\n    selector: 'tooltip-popup',\n    templateUrl: 'tooltip.component.html',\n    styleUrls: ['tooltip.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent<TData = any> implements TooltipRenderer<TData>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Called when mouse enter tooltip component, hover\n     */\n    protected _enterFn: () => void = () => null;\n\n    /**\n     * Called when mouse leaves tooltip component\n     */\n    protected _leaveFn: () => void = () => null;\n\n    //######################### public properties - implementation of TooltipRenderer #########################\n\n    /**\n     * Data that are rendered in tooltip\n     */\n    public data: TData|null|undefined;\n\n    /**\n     * Template used for rendering tooltip\n     */\n    public template: TemplateRef<TooltipTemplateContext<TData>>|null|undefined;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    public allowHtml: boolean = false;\n\n    /**\n     * Css class that is applied to tooltip renderer component\n     */\n    public cssClass: string|null|undefined;\n\n    //######################### constructor #########################\n    constructor(protected _changeDetector: ChangeDetectorRef,\n                protected _element: ElementRef<HTMLElement>)\n    {\n    }\n\n    //######################### public methods - implementation of TooltipRenderer #########################\n\n    /**\n     * Registers handlers that allows reaction to entering or leaving tooltip\n     * @param enter - Called when mouse enter tooltip component, hover\n     * @param leave - Called when mouse leaves tooltip component\n     */\n    public registerHoverEvents(enter: () => void, leave: () => void): void\n    {\n        this._enterFn = enter;\n        this._leaveFn = leave;\n    }\n\n    /**\n     * Explicitly runs invalidation of content (change detection)\n     */\n    public invalidateVisuals(): void\n    {\n        if(this.cssClass)\n        {\n            this._element.nativeElement.classList.add(this.cssClass);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse enter event over tooltip\n     * @internal\n     */\n    @HostListener('mouseenter')\n    public mouseEnter(): void\n    {\n        this._enterFn();\n    }\n\n    /**\n     * Handles mouse leave event over tooltip\n     * @internal\n     */\n    @HostListener('mouseleave')\n    public mouseLeave(): void\n    {\n        this._leaveFn();\n    }\n}","<div *ngIf=\"!template && !allowHtml\">{{data}}</div>\r\n<div *ngIf=\"!template && allowHtml\" [innerHTML]=\"data\"></div>\r\n\r\n<ng-template [ngIf]=\"template\">\r\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: data}\"></ng-container>\r\n</ng-template>","import {InjectionToken} from '@angular/core';\n\nimport {TooltipOptions} from './tooltip.interface';\n\n/**\n * Injection token used for injecting tooltip options\n */\nexport const TOOLTIP_OPTIONS: InjectionToken<Partial<TooltipOptions>> = new InjectionToken<Partial<TooltipOptions>>('TOOLTIP_OPTIONS');\n","import {Directive, TemplateRef} from '@angular/core';\n\nimport {TooltipTemplateContext} from './tooltipTemplate.context';\n\n/**\n * Directive used for obtaining custom tooltip template\n */\n@Directive(\n{\n    selector: '[tooltipTemplate]'\n})\nexport class TooltipTemplateDirective<TData = any>\n{\n    //######################### constructor #########################\n    constructor(public template: TemplateRef<TooltipTemplateContext<TData>>)\n    {\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Allows typechecking for template\n     */\n    static ngTemplateContextGuard(_dir: TooltipTemplateDirective, _ctx: unknown): _ctx is TooltipTemplateContext\n    {\n        return true;\n    }\n}","import {ComponentRef, ContentChild, Directive, ElementRef, EmbeddedViewRef, HostListener, Inject, Injector, Input, OnChanges, OnDestroy, Optional, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {AnimationBuilder, AnimationFactory} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {fadeInAnimation, fadeOutAnimation} from '@anglr/animations';\nimport {extend, isBlank, isPresent, nameof} from '@jscrpt/common';\n\nimport {TooltipComponent} from '../../components/tooltip/tooltip.component';\nimport {TooltipOptions, TooltipRenderer} from '../../misc/tooltip.interface';\nimport {TOOLTIP_OPTIONS} from '../../misc/tokens';\nimport {applyPositionResult, Position, PositionOffset, PositionPlacement} from '../../../../services/position';\nimport {TooltipTemplateDirective} from '../tooltipTemplate/tooltipTemplate.directive';\nimport {TooltipTemplateContext} from '../tooltipTemplate/tooltipTemplate.context';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Default options for tooltip\n */\nconst defaultOptions: TooltipOptions =\n{\n    delay: 200,\n    position:\n    {\n        offset: PositionOffset.MouseEnter,\n        placement: PositionPlacement.TopStart\n    },\n    allowSelection: false,\n    tooltipRenderer: TooltipComponent,\n    tooltipCssClass: null,\n    stopPropagation: false,\n    enterAnimation: fadeInAnimation,\n    exitAnimation: fadeOutAnimation,\n};\n\n/**\n * Directive used for rendering tooltip\n */\n@Directive(\n{\n    selector: '[tooltip]'\n})\nexport class TooltipDirective<TData = any> implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of component used for rendering tooltip\n     */\n    protected _tooltipComponent?: ComponentRef<TooltipRenderer<TData>>;\n\n    /**\n     * Instance of HTML element for tooltip renderer\n     */\n    protected _tooltipElement?: HTMLElement;\n\n    /**\n     * Animation factory used for enter animation of tooltip\n     */\n    protected _enterAnimation: AnimationFactory;\n\n    /**\n     * Animation factory used for exit animation of tooltip\n     */\n    protected _exitAnimation: AnimationFactory;\n\n    /**\n     * Instance of options provided for this tooltip\n     */\n    protected _options: TooltipOptions;\n\n    /**\n     * Indication whether there is active show tooltip request\n     */\n    protected _showRequest: boolean = false;\n\n    /**\n     * Indication whether keep open tooltip component\n     */\n    protected _keepOpen: boolean = false;\n\n    /**\n     * Timeout that is used for handling mouse move\n     */\n    protected _timeout: number|null = null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Tooltip text that is displayed, or any data that could be passed to template\n     */\n    @Input()\n    public tooltip?: TData;\n\n    /**\n     * Indication whether are html tags allowed in tooltip text\n     */\n    @Input()\n    public allowHtml: boolean = false;\n\n    /**\n     * Instance of tooltip template that is used for rendering\n     */\n    @Input()\n    public template?: TemplateRef<TooltipTemplateContext<TData>>;\n\n    /**\n     * Options used for displaying tooltip\n     */\n    @Input()\n    public get tooltipOptions(): Partial<TooltipOptions>\n    {\n        return this._options;\n    }\n    public set tooltipOptions(value: Partial<TooltipOptions>)\n    {\n        this._options = extend(true, {}, this._options, value);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    /**\n     * Gets or sets indication whether is tooltip visible, if has boolean value, mouse events cant override this\n     */\n    @Input()\n    public tooltipVisible?: boolean;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of template from element content, used for rendering\n     */\n    @ContentChild(TooltipTemplateDirective)\n    public tooltipTemplateChild?: TooltipTemplateDirective;\n\n    //######################### constructor #########################\n    constructor(protected _viewContainerRef: ViewContainerRef,\n                protected _injector: Injector,\n                protected _element: ElementRef<HTMLElement>,\n                protected _animationsPlayer: AnimationBuilder,\n                @Inject(DOCUMENT) protected _document: Document,\n                @Inject(POSITION) protected _position: Position,\n                @Optional() @Inject(TOOLTIP_OPTIONS) options?: Partial<TooltipOptions>,)\n    {\n        this._options = extend(true, {}, defaultOptions, options);\n\n        this._enterAnimation = this._animationsPlayer.build(this._options.enterAnimation);\n        this._exitAnimation = this._animationsPlayer.build(this._options.exitAnimation);\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<TooltipDirective>('tooltipVisible') in changes)\n        {\n            if(this.tooltipVisible)\n            {\n                this._showTooltip();\n            }\n            else\n            {\n                this._hideTooltip();\n            }\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        if(this._timeout)\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._destroyTooltip();\n    }\n\n    //######################### public methods - host #########################\n\n    /**\n     * Handles mouse leave event, hover ends\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mouseleave', ['$event'])\n    public mouseLeave(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        if(isBlank(this.tooltipVisible))\n        {\n            setTimeout(() =>\n            {\n                if(!this._keepOpen)\n                {\n                    this._showRequest = false;\n                    this._hideTooltip();\n                }\n            }, 10);\n        }\n    }\n\n    /**\n     * Handles mouse move event, displaying tooltip\n     * @param event - Mouse event that occured\n     * @internal\n     */\n    @HostListener('mousemove', ['$event'])\n    public mouseMove(event: MouseEvent): void\n    {\n        if(this._options.stopPropagation)\n        {\n            event.stopPropagation();\n        }\n\n        this._showRequest = true;\n\n        //do nothing if tooltip is visible\n        if(this._tooltipComponent || isPresent(this.tooltipVisible))\n        {\n            return;\n        }\n\n        if(isPresent(this._timeout))\n        {\n            clearTimeout(this._timeout);\n        }\n\n        this._timeout = setTimeout(() =>\n        {\n            this._timeout = null;\n\n            if(this._showRequest)\n            {\n                this._showTooltip(event);\n\n                this._showRequest = false;\n            }\n        }, this._options.delay) as any;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Shows tooltip\n     * @param event - Mouse event\n     */\n    protected _showTooltip(event?: MouseEvent): void\n    {\n        this._createTooltip();\n\n        //if element was not created do nothing\n        if(!this._tooltipElement)\n        {\n            return;\n        }\n\n        this._showData();\n\n        this._position.placeElement(this._tooltipElement,\n                                    this._element.nativeElement,\n                                    {\n                                        placement: this._options.position.placement,\n                                        offset: this._options.position.offset,\n                                        flip: true,\n                                        mouseEvent: event,\n                                        autoUpdate: false\n                                    })\n            .toPromise()\n            .then(result => applyPositionResult(result));\n    }\n\n    /**\n     * Hides tooltip\n     */\n    protected _hideTooltip(): void\n    {\n        this._destroyTooltip();\n    }\n\n    /**\n     * Destroys tooltip component\n     */\n    protected _destroyTooltip(): void\n    {\n        if(this._tooltipComponent)\n        {\n            const component = this._tooltipComponent;\n            const element = this._tooltipElement;\n\n            const exitAnimation = this._exitAnimation.create(element);\n\n            exitAnimation.onDone(() =>\n            {\n                component.destroy();\n                exitAnimation.destroy();\n            });\n            \n            this._tooltipComponent = undefined;\n            this._tooltipElement = undefined;\n\n            exitAnimation.play();\n        }\n    }\n\n    /**\n     * Creates tooltip renderer component\n     */\n    protected _createTooltip(): void\n    {\n        // 0. Destroys tooltip if it exists\n        this._destroyTooltip();\n\n        // 1. Create a component reference from the component\n        this._tooltipComponent = this._viewContainerRef\n            .createComponent(this._options.tooltipRenderer,\n                             {\n                                 injector: this._injector\n                             });\n\n        // 3. Get DOM element from component\n        this._tooltipElement = (this._tooltipComponent.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        // 4. Append DOM element to the body\n        this._document.body.appendChild(this._tooltipElement);\n        this._enterAnimation.create(this._tooltipElement).play();\n    }\n\n    /**\n     * Sets data to tooltip component and shows them\n     */\n    protected _showData(): void\n    {\n        if(this._tooltipComponent)\n        {\n            this._tooltipComponent.instance.allowHtml = this.allowHtml;\n            this._tooltipComponent.instance.data = this.tooltip;\n            this._tooltipComponent.instance.template = this.template ?? this.tooltipTemplateChild?.template;\n            this._tooltipComponent.instance.cssClass = this._options.tooltipCssClass;\n\n            this._tooltipComponent.instance.registerHoverEvents(() =>\n                                                                {\n                                                                    if(this._options.allowSelection)\n                                                                    {\n                                                                        this._keepOpen = true;\n                                                                        this._showRequest = false;\n                                                                    }\n                                                                },\n                                                                () =>\n                                                                {\n                                                                    setTimeout(() =>\n                                                                    {\n                                                                        this._keepOpen = false;\n\n                                                                        if(!this._showRequest)\n                                                                        {\n                                                                            this._hideTooltip();\n                                                                        }\n\n                                                                        this._showRequest = false;\n                                                                    }, 5);\n                                                                });\n\n            this._tooltipComponent.instance.invalidateVisuals();\n        }\n    }\n\n    //######################### ng language server #########################\n    \n    /**\n     * Custom input type for `tooltip` input\n     */\n    public static ngAcceptInputType_tooltip: any;\n}","import {PositionResult} from './position.interface';\n\n/**\n * Applies `PositionResult` to target element\n * @param result - Result of positioning process to be applied\n */\nexport function applyPositionResult(result: PositionResult<HTMLElement>): void\n{\n    Object.assign(result.target.style,\n                  {\n                      top: '0',\n                      left: '0',\n                      transform: `translate(${result.x}px, ${result.y}px)`,\n                  });\n}\n"],"names":["FormGroupProperty","metadata","type","FormGroup","target","propertyKey","trgt","ɵControlsMetadata","Object","defineProperty","nameof","value","writable","enumerable","configurable","originValidators","validators","originAsyncValidators","asyncValidators","ɵDefaultPropertyMetadata","propertyMetadata","disabled","FormControl","childType","args","AsFormControlPipe","constructor","_logger","transform","_valueHash","isBlank","this","warn","LOGGER","TooltipComponent","_changeDetector","_element","_enterFn","_leaveFn","allowHtml","registerHoverEvents","enter","leave","invalidateVisuals","cssClass","nativeElement","classList","add","detectChanges","mouseEnter","mouseLeave","i0","i1","TOOLTIP_OPTIONS","InjectionToken","TooltipTemplateDirective","template","_dir","_ctx","defaultOptions","delay","position","offset","PositionOffset","placement","PositionPlacement","allowSelection","tooltipRenderer","tooltipCssClass","stopPropagation","enterAnimation","fadeInAnimation","exitAnimation","fadeOutAnimation","TooltipDirective","_viewContainerRef","_injector","_animationsPlayer","_document","_position","options","_showRequest","_keepOpen","_timeout","_options","extend","_enterAnimation","build","_exitAnimation","tooltipOptions","ngOnChanges","changes","tooltipVisible","_showTooltip","_hideTooltip","ngOnDestroy","clearTimeout","_destroyTooltip","event","setTimeout","mouseMove","_tooltipComponent","isPresent","_createTooltip","_tooltipElement","_showData","placeElement","flip","mouseEvent","autoUpdate","toPromise","then","result","applyPositionResult","component","element","create","onDone","destroy","undefined","play","createComponent","injector","hostView","rootNodes","body","appendChild","instance","data","tooltip","tooltipTemplateChild","DOCUMENT","POSITION","assign","style","top","left","x","y"],"sourceRoot":""}