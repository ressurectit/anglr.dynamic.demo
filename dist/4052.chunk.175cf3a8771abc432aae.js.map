{"version":3,"file":"4052.chunk.175cf3a8771abc432aae.js","mappings":"sQAUM,MAAOA,EA0BTC,YAAYC,GAhBL,KAAAC,YAAqC,EAQrC,KAAAC,MAA+B,EAWlCC,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BH,EAC9B,GApBDK,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,eACnBC,EAAAA,EAAAA,GAA0B,6DAC1BC,EAAAA,EAAAA,GAA8C,iBAC/C,kEAQAH,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,SACnBC,EAAAA,EAAAA,GAA0B,kEAC1BC,EAAAA,EAAAA,GAA8C,iBAC/C,2DAkBE,MAAOC,EAaTV,YAAYC,GAHL,KAAAU,KAA8B,KAMjCP,EAAAA,GAAAA,KAAqBC,KAArBD,CAA2BH,EAC9B,GAPDK,EAAAA,EAAAA,IAAAA,EAHCC,EAAAA,EAAAA,GAAmB,SACnBC,EAAAA,EAAAA,GAA0B,gCAC1BC,EAAAA,EAAAA,GAA8C,gBAC/C,0DC9CE,MAAOG,EA+ETZ,cAxEO,KAAAa,SACP,CACIC,KAAM,QACNC,YAAa,gEACbC,MAAO,SACPC,gBACA,CACIC,mBACA,CACI,CACIC,UAAWC,EAAAA,EACXC,mBACA,CACIC,EAAAA,IAGR,CACIH,UAAWpB,EACXsB,mBACA,EACIE,EAAAA,EAAAA,GAA6C,CAAC,aAAc,YAIxEC,wBACA,CACI,CACIL,UAAWT,EACXW,mBACA,EACIE,EAAAA,EAAAA,GAA0D,CAAC,cAUxE,KAAAE,cAAwF,CAACC,EAAUC,EAASC,KAE/GD,EAAQE,WAARF,EAAQE,SAAa,IACrBF,EAAQE,SAASC,OAAOF,EAAO,EAAGF,EAAlC,EAMG,KAAAK,gBAA+E,KAAM,EAKrF,KAAAC,eAAgGL,GAAWA,GAASE,UAAY,GAKhI,KAAAI,iBAAgFN,KAAaA,GAASzB,WAKtG,KAAAgC,iBAAkE,CAACC,EAAIR,KAE1EA,EAAQE,WAARF,EAAQE,SAAa,IACrB,MAAMD,EAAQD,EAAQE,SAASO,WAAUC,GAAOA,EAAIF,KAAOA,IAC3DR,EAAQE,SAASC,OAAOF,EAAO,EAA/B,EAMAU,OAAOC,OAAOlC,KACjB,E,6FCnFC,MAAOmC,EAGTxC,YAAgDyC,GAAA,KAAAA,QAAAA,CAE/C,CASMC,UAAkBzC,EAA+C0C,GAEpE,OAAGC,EAAAA,EAAAA,IAAQ3C,GAEA,KAGRA,aAAiB4C,EAAAA,GAET5C,GAGXI,KAAKoC,SAASK,KAAK,iDAEZ,KACV,E,iCA7BQN,GAAAA,EAAAA,EAGuBO,EAAAA,GAAMA,I,0CAH7BP,E,2DCHP,MAAOQ,EAQFN,UAAUzC,EAA6BgD,EAAqBN,GAE/D,OAAO1C,GAASgD,CACnB,E,iCAXQD,E,uCAAAA,E","sources":["webpack://ng-universal-demo/../basic-components/src/stackPanel/metadata/stackPanel.model.ts","webpack://ng-universal-demo/../basic-components/src/stackPanel/metadata/stackPanel.layoutMetadata.ts","webpack://ng-universal-demo/../../../../forms/src/modules/formPipes/pipes/asFormControl/asFormControl.pipe.ts","webpack://ng-universal-demo/../../../../src/modules/castPipes/pipes/asRequired/asRequired.pipe.ts"],"sourcesContent":["import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {DefaultKnownPropertyTypes, LayoutPropertyDescription, LayoutPropertyName, LayoutPropertyType} from '@anglr/dynamic/layout-editor';\nimport {mapValuesToThis} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionOptions} from '../stackPanelExtensions.options';\n\n/**\n * Stack panel model for properties editor\n */\nexport class StackPanelModel implements StackPanelComponentOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Horizontal')\n    @LayoutPropertyDescription('Indication whether display stacked elements horizontally')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public horizontal: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Wrap')\n    @LayoutPropertyDescription('Indication whether wrap children if there is not enough space')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputBoolean')\n    public wrap: boolean|undefined|null = false;\n\n    /**\n     * @inheritdoc\n     */\n    public children: LayoutComponentMetadata[]|undefined|null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelComponentOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}\n\n/**\n * Stack panel flex extension model for properties editor\n */\nexport class StackPanelFlexExtensionModel implements StackPanelFlexExtensionOptions\n{\n    //######################### public properties #########################\n\n    /**\n     * @inheritdoc\n     */\n    @LayoutPropertyName('Flex')\n    @LayoutPropertyDescription('Definition of flex behavior')\n    @LayoutPropertyType<DefaultKnownPropertyTypes>('inputString')\n    public flex: string|undefined|null = null;\n\n    //######################### constructor #########################\n    constructor(value: StackPanelFlexExtensionOptions|undefined|null)\n    {\n        //TODO: remove ! when fixed in common\n        mapValuesToThis.bind(this)(value!);\n    }\n}","import {LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {ComponentStylingModel, ComponentStylingPropertiesControlComponent, genericPropertiesControlFor, LayoutEditorMetadataDescriptor, LayoutEditorMetadataInfo} from '@anglr/dynamic/layout-editor';\nimport {Action, Func} from '@jscrpt/common';\n\nimport {StackPanelComponentOptions} from '../stackPanel.options';\nimport {StackPanelFlexExtensionModel, StackPanelModel} from './stackPanel.model';\n\n/**\n * Stack panel layout metadata\n */\nexport class StackPanelLayoutEditorMetadata implements LayoutEditorMetadataDescriptor<StackPanelComponentOptions>\n{\n    //######################### public properties - implementation of LayoutEditorMetadataDescriptor #########################\n\n    /**\n     * @inheritdoc\n     */\n    public metaInfo?: LayoutEditorMetadataInfo =\n    {\n        name: 'Stack',\n        description: 'Layout component that stacks items horizontally or vertically',\n        group: 'Layout',\n        optionsMetadata:\n        {\n            propertiesMetadata:\n            [\n                {\n                    modelType: ComponentStylingModel,\n                    propertiesControls: \n                    [\n                        ComponentStylingPropertiesControlComponent,\n                    ],\n                },\n                {\n                    modelType: StackPanelModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelModel>(['horizontal', 'wrap'])\n                    ],\n                },\n            ],\n            childPropertiesMetadata:\n            [\n                {\n                    modelType: StackPanelFlexExtensionModel,\n                    propertiesControls: \n                    [\n                        genericPropertiesControlFor<StackPanelFlexExtensionModel>(['flex'])\n                    ],\n                },\n            ]\n        }\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public addDescendant?: Action<[LayoutComponentMetadata, StackPanelComponentOptions, number]> = (metadata, options, index) =>\n    {\n        options.children ??= [];\n        options.children.splice(index, 0, metadata);\n    };\n\n    /**\n     * @inheritdoc\n     */\n    public canDropMetadata?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = () => true;\n\n    /**\n     * @inheritdoc\n     */\n    public getDescendants?: Func<LayoutComponentMetadata[], [StackPanelComponentOptions|undefined|null]> = options => options?.children ?? [];\n\n    /**\n     * @inheritdoc\n     */\n    public isHorizontalDrop?: Func<boolean, [StackPanelComponentOptions|undefined|null]> = options => !!options?.horizontal;\n\n    /**\n     * @inheritdoc\n     */\n    public removeDescendant?: Action<[string, StackPanelComponentOptions]> = (id, options) =>\n    {\n        options.children ??= [];\n        const index = options.children.findIndex(itm => itm.id === id);\n        options.children.splice(index, 1);\n    }\n\n    //######################### constructor #########################\n    constructor()\n    {\n        Object.freeze(this);\n    }\n}","import {Inject, Optional, Pipe} from '@angular/core';\nimport {AbstractControl, FormControl} from '@angular/forms';\nimport {Logger, LOGGER} from '@anglr/common';\nimport {isBlank} from '@jscrpt/common';\n\n/**\n * Tries to convert `AbstractControl` to `FormControl`\n */\n@Pipe({name: 'asFormControl'})\nexport class AsFormControlPipe\n{\n    //######################### constructors #########################\n    constructor(@Optional() @Inject(LOGGER) private _logger?: Logger)\n    {\n    }\n\n    //######################### public methods - implementation of PipeTransform #########################\n\n    /**\n     * Allows casting of `AbstractControl` to `FormControl`\n     * @param value - `AbstractControl` to be cast to `FormControl`\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform<TModel>(value: AbstractControl<TModel>|null|undefined, _valueHash?: any): FormControl<TModel>|null\n    {\n        if(isBlank(value))\n        {\n            return null;\n        }\n\n        if(value instanceof FormControl)\n        {\n            return value as FormControl<TModel>;\n        }\n\n        this._logger?.warn('Failed to cast AbstractControl to FormControl');\n\n        return null;\n    }\n}","import {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Transforms type to required from nullable or undefined type\n */\n@Pipe({name: 'asRequired'})\nexport class AsRequiredTypePipe<TType> implements PipeTransform\n{\n    /**\n     * Transforms type to required from nullable or undefined type\n     * @param value - Value to be transformed\n     * @param defaultValue - Default value to be used if undefined or null\n     * @param _valueHash - Parameter that can be used to change value, indicates that pipe input value has changed\n     */\n    public transform(value: TType|null|undefined, defaultValue: TType, _valueHash?: any): TType\n    {\n        return value ?? defaultValue;\n    }\n}"],"names":["StackPanelModel","constructor","value","horizontal","wrap","mapValuesToThis","this","__decorate","LayoutPropertyName","LayoutPropertyDescription","LayoutPropertyType","StackPanelFlexExtensionModel","flex","StackPanelLayoutEditorMetadata","metaInfo","name","description","group","optionsMetadata","propertiesMetadata","modelType","ComponentStylingModel","propertiesControls","ComponentStylingPropertiesControlComponent","genericPropertiesControlFor","childPropertiesMetadata","addDescendant","metadata","options","index","children","splice","canDropMetadata","getDescendants","isHorizontalDrop","removeDescendant","id","findIndex","itm","Object","freeze","AsFormControlPipe","_logger","transform","_valueHash","isBlank","FormControl","warn","LOGGER","AsRequiredTypePipe","defaultValue"],"sourceRoot":""}