{"version":3,"file":"8282.chunk.eac5922bd6e0fb3e43cc.js","mappings":"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","sources":["webpack://ng-universal-demo/../../../../src/modules/position/modules/position.module.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerMinDimension/designerMinDimension.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/copyDesignerStyles/copyDesignerStyles.directive.ts","webpack://ng-universal-demo/../layout-editor/src/directives/bodyRender/bodyRender.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesignerOverlayFor/layoutDesignerOverlayFor.component.html","webpack://ng-universal-demo/../../../../src/modules/position/directives/positionTo/positionTo.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/directives/dndCoreDesigner/dndCoreDesigner.directive.ts","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.html","webpack://ng-universal-demo/../layout-editor/src/components/layoutDesigner/layoutDesigner.component.ts","webpack://ng-universal-demo/../layout-editor/src/directives/designerDropzone/designerDropzone.directive.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/modules/layoutDndCore.module.ts","webpack://ng-universal-demo/../layout-editor/src/modules/layoutDndCore/services/dndBus/dndBus.service.ts"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {PositionToDirective} from '../directives/positionTo/positionTo.directive';\n\n/**\n * Module for position to directive\n */\n@NgModule(\n{\n    imports:\n    [\n    ],\n    declarations:\n    [\n        PositionToDirective\n    ],\n    exports:\n    [\n        PositionToDirective\n    ]\n})\nexport class PositionModule\n{\n}\n","import {ContentChild, Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {nameof} from '@jscrpt/common';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\n\n/**\n * Applies min dimensions to designed element, so it can be visible event when it is empty\n */\n@Directive(\n{\n    selector: '[designerMinWidth]',\n    standalone: true\n})\nexport class DesignerMinDimensionSADirective implements OnInit, OnDestroy, OnChanges\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Indication whether is min dimensions active\n     */\n    protected active: boolean = false;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Html element of dynamic component\n     */\n    protected element: HTMLElement|undefined|null;\n\n    /**\n     * Minimal height of element\n     */\n    protected minHeight: string = '';\n\n    /**\n     * Minimal width of element\n     */\n    protected minWidth: string = '';\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is flow of this component horizontal or vertical\n     */\n    @Input()\n    public horizontal: boolean = false;\n\n    /**\n     * Indication whether can drop children inside of this\n     */\n    @Input()\n    public canDrop: boolean = false;\n\n    /**\n     * Layout editor metadata\n     */\n    @Input()\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(changes =>\n        {\n            for(const change of changes)\n            {\n                if(change.target instanceof HTMLElement)\n                {\n                    this.updatedDimensions(change.target);\n                }\n            }\n        });\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.observer?.disconnect();\n\n                return;\n            }\n\n            this.element = element;\n            this.init();\n        }));\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n    \n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if(nameof<DesignerMinDimensionSADirective>('editorMetadata') in changes)\n        {\n            this.init();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Initialize watching for children\n     */\n    protected init(): void\n    {\n        if(!this.element || !this.editorMetadata)\n        {\n            return;\n        }\n\n        const element = this.editorMetadata.getChildrenContainer?.(this.element) as HTMLElement ?? this.element;\n\n        this.minHeight = element.style.minHeight;\n        this.minWidth = element.style.minWidth;\n        \n        this.updatedDimensions(element);\n\n        this.observer?.observe(element,\n        {\n            childList: true,\n        });\n    }\n\n    /**\n     * Updates min dimensions if empty\n     * @param element - Element to be checked for changes\n     */\n    protected updatedDimensions(element: HTMLElement): void\n    {\n        const nodesArray: ChildNode[] = [];\n        element.childNodes.forEach(node => nodesArray.push(node));\n\n        const contentsLength = nodesArray.filter(itm => itm.nodeName != '#comment').length;\n\n        if((contentsLength && !this.active) ||\n           (!contentsLength && this.active))\n        {\n            return;\n        }\n\n        //deactivate, children are present\n        if(contentsLength)\n        {\n            //only placeholder is present\n            if(element.children.length === 1 && element.children.item(0)?.classList.contains('drag-placeholder'))\n            {\n                return;\n            }\n\n            this.active = false;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.minWidth;\n            }\n            else\n            {\n                element.style.minHeight = this.minHeight;\n            }\n        }\n        //activate, children are not present\n        else\n        {\n            this.active = true;\n\n            if(this.horizontal)\n            {\n                element.style.minWidth = this.canDrop ? '30px' : '10px';\n            }\n            else\n            {\n                element.style.minHeight = this.canDrop ? '30px' : '10px';\n            }\n        }\n    }\n}","import {Directive, ElementRef, Input} from '@angular/core';\nimport {LayoutComponentMetadata} from '@anglr/dynamic/layout';\n\nimport {LayoutEditorMetadataExtractor} from '../../services';\n\n//TODO: remove, do it more generic\n\n/**\n * Copies designer styles that should be applied to element\n */\n@Directive(\n{\n    selector: '[copyDesignerStyles]',\n    exportAs: 'copyDesignerStyles',\n    standalone: true\n})\nexport class CopyDesignerStylesSADirective<TOptions = any>\n{\n    //######################### protected fields #########################\n\n    /**\n     * Designed component metadata\n     */\n    public _metadata: LayoutComponentMetadata<TOptions>|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Designed component metadata\n     */\n    @Input('copyDesignerStyles')\n    public get metadata(): LayoutComponentMetadata<TOptions>|undefined|null\n    {\n        return this._metadata;\n    }\n    public set metadata(value: LayoutComponentMetadata<TOptions>|undefined|null)\n    {\n        this._metadata = value;\n\n        this._copyDesignerStyles();\n    }\n\n    //######################### constructor #########################\n    constructor(protected _element: ElementRef<HTMLElement>,\n                protected _metadataExtractor: LayoutEditorMetadataExtractor,)\n    {\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Copies designer styles if necessary\n     */\n    protected async _copyDesignerStyles(): Promise<void>\n    {\n        if(!this._metadata)\n        {\n            return;\n        }\n\n        const metadata = await this._metadataExtractor.extractMetadata(this._metadata);\n        const applyDesignerStyles = metadata?.applyDesignerStyles;\n\n        if(applyDesignerStyles)\n        {\n            applyDesignerStyles(this._metadata.options, this._element.nativeElement.style);\n        }\n    }\n}","import {Directive, EmbeddedViewRef, Inject, OnDestroy, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Renders element into body directly at the end\n */\n@Directive(\n{\n    selector: '[bodyRender]',\n    standalone: true\n})\nexport class BodyRenderSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Instance of created embedded view\n     */\n    protected view: EmbeddedViewRef<void>|undefined|null;\n\n    /**\n     * Instance of created element\n     */\n    protected element: HTMLElement|undefined|null;\n\n    //######################### constructor #########################\n    constructor(protected template: TemplateRef<void>,\n                protected viewContainer: ViewContainerRef,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.view = this.viewContainer\n            .createEmbeddedView(this.template);\n\n        this.element = this.view.rootNodes[0] as HTMLElement;\n        this.document.body.appendChild(this.element);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.element?.remove();\n        this.element = null;\n        this.view?.destroy();\n        this.view = null;\n    }\n}","import {Component, ChangeDetectionStrategy, ElementRef, EmbeddedViewRef, OnInit, OnDestroy, Input, ChangeDetectorRef} from '@angular/core';\nimport {LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {Subscription} from 'rxjs';\n\nimport {LiveEventService} from '../../services';\n\n/**\n * Component displaying layout designer layout overlay\n */\n@Component(\n{\n    selector: '[layoutDesignerOverlayFor]',\n    templateUrl: 'layoutDesignerOverlayFor.component.html',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerOverlayForSAComponent implements OnInit, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Instance of mutation observer\n     */\n    protected observer?: MutationObserver;\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Instance of element that is monitored\n     */\n    protected htmlElement: HTMLElement|undefined;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @Input('layoutDesignerOverlayFor')\n    public layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### constructor #########################\n    constructor(protected element: ElementRef<HTMLElement>,\n                protected changeDetector: ChangeDetectorRef,\n                protected liveEvents: LiveEventService,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.observer = new MutationObserver(() => this.changeDetector.detectChanges());\n\n        //TODO: make this working, use existing html element\n        this.htmlElement = (this.layoutComponentRendererDirective?.componentRef?.hostView as EmbeddedViewRef<any>)?.rootNodes?.[0];\n\n        if(this.htmlElement)\n        {\n            this.observer?.observe(this.htmlElement, {attributeFilter: ['style']});\n        }\n\n        this.initSubscriptions.add(this.liveEvents.enabledChange.subscribe(() => this.toggleLiveEvents()));\n        this.toggleLiveEvents();\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.observer?.disconnect();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Toggles live events for element\n     */\n    protected toggleLiveEvents(): void\n    {\n        if(this.liveEvents.enabled)\n        {\n            this.element.nativeElement.style.pointerEvents = 'none';\n        }\n        else\n        {\n            this.element.nativeElement.style.pointerEvents = 'all';\n        }\n    }\n}","<div class=\"margin-top-div\" [style.height]=\"htmlElement?.style?.marginTop\"></div>\n<div class=\"margin-bottom-div\" [style.height]=\"htmlElement?.style?.marginBottom\"></div>\n<div class=\"margin-left-div\" [style.width]=\"htmlElement?.style?.marginLeft\"></div>\n<div class=\"margin-right-div\" [style.width]=\"htmlElement?.style?.marginRight\"></div>\n<div class=\"padding-top-div\" [style.height]=\"htmlElement?.style?.paddingTop\"></div>\n<div class=\"padding-bottom-div\" [style.height]=\"htmlElement?.style?.paddingBottom\"></div>\n<div class=\"padding-left-div\" [style.width]=\"htmlElement?.style?.paddingLeft\"></div>\n<div class=\"padding-right-div\" [style.width]=\"htmlElement?.style?.paddingRight\"></div>\n<div class=\"border-top-div\" [style.height]=\"htmlElement?.style?.borderTop\"></div>\n<div class=\"border-bottom-div\" [style.height]=\"htmlElement?.style?.borderBottom\"></div>\n<div class=\"border-left-div\" [style.width]=\"htmlElement?.style?.borderLeft\"></div>\n<div class=\"border-right-div\" [style.width]=\"htmlElement?.style?.borderRight\"></div>","import {Directive, Input, ElementRef, OnChanges, SimpleChanges, Inject, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport {nameof, isPresent, isString, Func1, NoopAction} from '@jscrpt/common';\n\nimport {applyPositionResult, Position, PositionPlacement, PositionOptions, PositionOffsetString, PositionOffsets, PositionArguments, AutoUpdateOptions} from '../../../../services/position';\nimport {POSITION} from '../../../../types/tokens';\n\n/**\n * Sets position of attached element relative to provided element\n */\n@Directive(\n{\n    selector: '[positionTo]'\n})\nexport class PositionToDirective implements OnChanges, OnDestroy\n{\n    //######################### protected fields #########################\n\n    /**\n     * Position placement value\n     */\n    protected ɵPlacement: PositionPlacement|undefined|null;\n\n    /**\n     * Html element which is used as source for positioning\n     */\n    protected ɵSource: HTMLElement|undefined|null;\n\n    /**\n     * Method used for disposing auto positioning\n     */\n    protected dispose: NoopAction|undefined|null;\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Gets or sets html element which is used as source for positioning\n     */\n    @Input('positionTo')\n    public get source(): HTMLElement|undefined|null\n    {\n        return this.ɵSource;\n    }\n    public set source(value: HTMLElement|undefined|null)\n    {\n        if(value instanceof ElementRef)\n        {\n            this.ɵSource = (value as ElementRef).nativeElement;\n\n            return;\n        }\n\n        this.ɵSource = value;\n    }\n\n    /**\n     * Gets or sets position placement value\n     */\n    @Input()\n    public get placement(): PositionPlacement|undefined|null\n    {\n        return this.ɵPlacement;\n    }\n    public set placement(value: PositionPlacement|undefined|null)\n    {\n        if(isString(value))\n        {\n            this.ɵPlacement = PositionPlacement[value as keyof typeof PositionPlacement];\n\n            return;\n        }\n\n        this.ɵPlacement = value;\n    }\n\n    /**\n     * Offset which allows moving target element along the cross axis of placement, or any chosed direction\n     */\n    @Input()\n    public offset: PositionOffsetString|number|PositionOffsets|Func1<number|PositionOffsets, PositionArguments> = 'None';\n\n    /**\n     * Indication whether set up 'auto updating' of position\n     */\n    @Input()\n    public autoUpdate: boolean|AutoUpdateOptions = true;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when flip occurs during positioning\n     */\n    @Output()\n    public flip: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Occurs when element was positioned\n     */\n    @Output()\n    public done: EventEmitter<void> = new EventEmitter<void>();\n\n    //######################### constructor #########################\n    constructor(protected target: ElementRef<HTMLElement>,\n                @Inject(POSITION) protected position: Position)\n    {\n    }\n\n    //######################### public methods - implementation of OnChanges #########################\n\n    /**\n     * Called when input value changes\n     */\n    public ngOnChanges(changes: SimpleChanges): void\n    {\n        if((nameof<PositionToDirective>('source') in changes ||\n            nameof<PositionToDirective>('placement') in changes) &&\n           isPresent(this.source))\n        {\n            this._applyPosition();\n        }\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.dispose?.();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Applies position according to specified parameters to specified elements\n     */\n    protected _applyPosition(): void\n    {\n        if(!this.ɵSource)\n        {\n            return;\n        }\n\n        const options: Partial<PositionOptions> =\n        {\n            flip: true,\n            autoUpdate: this.autoUpdate,\n            offset: this.offset,\n        };\n\n        if(this.ɵPlacement)\n        {\n            options.placement = this.ɵPlacement;\n        }\n\n        this.dispose?.();\n\n        this.position.placeElement(this.target.nativeElement,\n                                    this.ɵSource,\n                                    options)\n            .subscribe(result =>\n            {\n                this.dispose = result.dispose;\n\n                applyPositionResult(result);\n\n                if(result.flip)\n                {\n                    this.flip.emit();\n                }\n\n                this.done.emit();\n            });\n    }\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `placement` input\n     */\n    public static ngAcceptInputType_placement: PositionPlacement|undefined|null|keyof typeof PositionPlacement;\n\n    //######################### ng language server #########################\n\n    /**\n     * Custom input type for `source` input\n     */\n    public static ngAcceptInputType_source: HTMLElement|ElementRef<HTMLElement>;\n}\n","import {ContentChild, Directive, ElementRef, EventEmitter, Inject, Injector, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {LayoutComponentMetadata, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {BindThis, isBlank, isPresent} from '@jscrpt/common';\nimport {DndService, DragSource, DropTarget, DropTargetMonitor} from '@ng-dnd/core';\nimport {filter, Subscription} from 'rxjs';\n\nimport {LayoutComponentDragData} from '../../../../interfaces';\nimport {DragActiveService, LayoutEditorMetadataManager} from '../../../../services';\nimport {DndBusService, DropPlaceholderPreview} from '../../services';\nimport {LayoutDragItem, LayoutDropResult} from './dndCoreDesigner.interface';\n// import {registerDropzoneOverlay} from '../../misc/utils';\n\n/**\n * Directive used for initializing and handling dnd core functionality for layout designer\n */\n@Directive(\n{\n    selector: '[dndCoreDesigner]',\n    exportAs: 'dndCoreDesigner',\n})\nexport class DndCoreDesignerDirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Current metadata for this component\n     */\n    protected get metadata(): LayoutComponentMetadata\n    {\n        if(!this.dragData.metadata)\n        {\n            throw new Error('DndCoreDesignerDirective: invalid drag data without metadata!');\n        }\n\n        return this.dragData.metadata;\n    }\n\n    /**\n     * Gets indication whether component can accept drop\n     */\n    protected get canDrop(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.canDrop ?? false;\n    }\n\n    /**\n     * Gets indication whether component children flow is horizontal\n     */\n    protected get horizontal(): boolean\n    {\n        return this.manager.getComponent(this.metadata.id)?.horizontal ?? false;\n    }\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    /**\n     * Subscription for placeholder connection to DOM\n     */\n    protected placeholderConnection: Subscription|undefined|null;\n\n    /**\n     * Subscription for container connection to DOM\n     */\n    protected containerConnection: Subscription|undefined|null;\n\n    /**\n     * Current component element\n     */\n    protected componentElement: HTMLElement|undefined|null;\n\n    /**\n     * Element that represents placeholder preview\n     */\n    protected placeholderPreviewElement: HTMLElement|undefined|null;\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected placeholderDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                  {\n                                                                                                      canDrop: () => true,\n                                                                                                      drop: monitor =>\n                                                                                                      {\n                                                                                                          const item = monitor.getItem();\n                                                                                                          let index = this.bus.dropPlaceholderPreviewIndex;\n\n                                                                                                          if(item && isPresent(item.dragData.index) && isPresent(index))\n                                                                                                          {\n                                                                                                              //same parent and higher index\n                                                                                                              if(index > item.dragData.index)\n                                                                                                              {\n                                                                                                                  index--;\n                                                                                                              }\n                                                                                                          }\n\n                                                                                                          return <LayoutDropResult>{\n                                                                                                              index,\n                                                                                                              id: this.metadata?.id,\n                                                                                                          };\n                                                                                                      },\n                                                                                                  }, this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    protected containerDrop: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                                {\n                                                                                                    canDrop: monitor => this.canDropAncestors()[0] && monitor.isOver({shallow: true}),\n                                                                                                    drop: monitor =>\n                                                                                                    {\n                                                                                                        const [index, id] = this.getFixedDropCoordinates(monitor, false);\n\n                                                                                                        return <LayoutDropResult>{\n                                                                                                            index,\n                                                                                                            id,\n                                                                                                        };\n                                                                                                    },\n                                                                                                    hover: monitor =>\n                                                                                                    {\n                                                                                                        if(monitor.isOver({shallow: true}))\n                                                                                                        {\n                                                                                                            const [index, parentId] = this.getDropCoordinates(monitor, false);\n\n                                                                                                            if(isBlank(index) || isBlank(parentId))\n                                                                                                            {\n                                                                                                                return;\n                                                                                                            }\n\n                                                                                                            this.bus.setDropPlaceholderPreview(\n                                                                                                            {\n                                                                                                                index,\n                                                                                                                parentId,\n                                                                                                                placeholder:\n                                                                                                                {\n                                                                                                                    height: 0,\n                                                                                                                    width: 0\n                                                                                                                }\n                                                                                                            });\n                                                                                                        }\n                                                                                                    }\n                                                                                                }, this.initSubscriptions);\n\n    /**\n     * Gets element that represents container that contains children\n     */\n    protected get containerElement(): Element|undefined|null\n    {\n        if(!this.componentElement)\n        {\n            return;\n        }\n\n        const component = this.manager.getComponent(this.metadata.id);\n\n        if(!component?.editorMetadata?.getChildrenContainer)\n        {\n            return this.componentElement;\n        }\n\n        return component.editorMetadata.getChildrenContainer(this.componentElement) ?? this.componentElement;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of layout component renderer\n     */\n    @ContentChild(LayoutComponentRendererSADirective, {static: true})\n    protected layoutComponentRendererDirective?: LayoutComponentRendererSADirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Drag source used for dragging component\n     */\n    public drag: DragSource<LayoutDragItem, LayoutDropResult> = this.dnd.dragSource('COMPONENT',\n                                                                                    {\n                                                                                        beginDrag: () =>\n                                                                                        {\n                                                                                            this.draggingSvc.setDragging(true);\n                                                                                            this.designerElement.nativeElement.classList.add('is-dragged');\n\n                                                                                            return {\n                                                                                                dragData: this.dragData,\n                                                                                            };\n                                                                                        },\n                                                                                        canDrag: () => !this.dragDisabled,\n                                                                                        endDrag: monitor =>\n                                                                                        {\n                                                                                            //dropped outside of any dropzone\n                                                                                            if(!monitor.didDrop())\n                                                                                            {\n                                                                                                this.designerElement.nativeElement.classList.remove('is-dragged');\n                                                                                            }\n                                                                                            //dropped into drop zone\n                                                                                            else\n                                                                                            {\n                                                                                                const item = monitor.getItem();\n                                                                                                const dropResult = monitor.getDropResult();\n\n                                                                                                if(!item)\n                                                                                                {\n                                                                                                    return;\n                                                                                                }\n\n                                                                                                item.dragData.index = dropResult.index;\n\n                                                                                                this.bus.setDropData(\n                                                                                                {\n                                                                                                    data: item.dragData,\n                                                                                                    id: dropResult.id,\n                                                                                                });\n                                                                                            }\n\n                                                                                            this.bus.setDropPlaceholderPreview(null);\n                                                                                            this.draggingSvc.setDragging(false);\n                                                                                        },\n                                                                                    },\n                                                                                    this.initSubscriptions);\n\n    /**\n     * Drop zone target that handles drop of component\n     */\n    public dropzone: DropTarget<LayoutDragItem, LayoutDropResult> = this.dnd.dropTarget(['COMPONENT', 'METADATA'],\n                                                                                        {\n                                                                                            canDrop: monitor => (this.canDrop || this.canDropAncestors()[0]) && monitor.isOver({shallow: true}),\n                                                                                            drop: monitor =>\n                                                                                            {\n                                                                                                const [index, id] = this.getFixedDropCoordinates(monitor, this.canDrop);\n\n                                                                                                return <LayoutDropResult>{\n                                                                                                    index,\n                                                                                                    id\n                                                                                                };\n                                                                                            },\n                                                                                            hover: monitor =>\n                                                                                            {\n                                                                                                if(monitor.isOver({shallow: true}) && monitor.canDrop())\n                                                                                                {\n                                                                                                    const [index, parentId] = this.getDropCoordinates(monitor, this.canDrop);\n\n                                                                                                    if(isBlank(index) || isBlank(parentId))\n                                                                                                    {\n                                                                                                        return;\n                                                                                                    }\n\n                                                                                                    this.bus.setDropPlaceholderPreview(\n                                                                                                    {\n                                                                                                        index,\n                                                                                                        parentId,\n                                                                                                        placeholder:\n                                                                                                        {\n                                                                                                            height: 0,\n                                                                                                            width: 0\n                                                                                                        }\n                                                                                                    });\n                                                                                                }\n                                                                                            }\n                                                                                        }, this.initSubscriptions);\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Html element that represents dropzone\n     */\n    @Input()\n    public dropzoneElement!: HTMLElement;\n\n    /**\n     * Instance of drag data for this component\n     */\n    @Input('dndCoreDesigner')\n    public dragData!: LayoutComponentDragData;\n\n    /**\n     * Indication whether is drag disabled\n     */\n    @Input()\n    public dragDisabled: boolean = false;\n\n    //######################### public properties - outputs #########################\n\n    /**\n     * Occurs when metadata are dropped here\n     */\n    @Output()\n    public dropMetadata: EventEmitter<LayoutComponentDragData> = new EventEmitter<LayoutComponentDragData>();\n\n    //######################### constructor #########################\n    constructor(protected dnd: DndService,\n                protected designerElement: ElementRef<HTMLElement>,\n                protected draggingSvc: DragActiveService,\n                protected manager: LayoutEditorMetadataManager,\n                protected bus: DndBusService,\n                protected zone: NgZone,\n                protected injector: Injector,\n                @Inject(DOCUMENT) protected document: Document,)\n    {\n        this.connectDropToContainer();\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n\n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        if(!this.dropzoneElement)\n        {\n            throw new Error('DndCoreDesignerDirective: missing dropzone element!');\n        }\n\n        if(!this.dragData)\n        {\n            throw new Error('DndCoreDesignerDirective: missing drag data!');\n        }\n\n        this.initSubscriptions.add(this.layoutComponentRendererDirective?.componentElementChange.subscribe(element =>\n        {\n            if(!element)\n            {\n                this.componentElement = null;\n\n                return;\n            }\n\n            this.componentElement = element;\n        }));\n\n        this.initSubscriptions.add(this.bus\n                                       .dropDataChange\n                                       .pipe(filter(itm => itm.id === this.metadata.id))\n                                       .subscribe(itm => this.dropMetadata.emit(itm.data)));\n\n        this.initSubscriptions.add(this.bus\n                                       .oldDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(() =>\n                                       {\n                                           this.placeholderPreviewElement?.remove();\n                                           this.placeholderPreviewElement = null;\n                                       }));\n\n        this.initSubscriptions.add(this.bus\n                                       .newDropPlaceholderPreviewChange\n                                       .pipe(filter(itm => itm.parentId === this.metadata.id))\n                                       .subscribe(this.showPlaceholderPreview));\n\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.dropzone, this.dropzoneElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n        // this.initSubscriptions.add(registerDropzoneOverlay(this.containerDrop, this.designerElement.nativeElement, this.injector, this.dragData));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n\n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n\n        this.placeholderConnection?.unsubscribe();\n        this.placeholderConnection = null;\n\n        this.containerConnection?.unsubscribe();\n        this.containerConnection = null;\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Gets drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        //can drop in itself// for now drop at index 0\n        if(canDrop)\n        {\n            return this.getDropCoordinatesForChildren(monitor);\n        }\n\n        //else get index from descendant\n        const [canDropAncestor, ancestorId, id] = this.canDropAncestors();\n\n        //this should not happen\n        if(!canDropAncestor || isBlank(ancestorId))\n        {\n            return [null, null];\n        }\n\n        const parentComponent = this.manager.getComponent(ancestorId);\n        const componentIndex = this.manager.getComponent(id)?.index ?? 0;\n        const item = monitor.getItem();\n\n        if(item && isPresent(item.dragData.index))\n        {\n            //is over itself\n            if(item.dragData.metadata?.id === this.metadata.id)\n            {\n                return [item.dragData.index, item.dragData.parentId ?? ''];\n            }\n        }\n\n        if(!parentComponent)\n        {\n            return [null, null];\n        }\n\n        return [componentIndex + this.getIndexIncrement(monitor, parentComponent.horizontal), ancestorId];\n    }\n\n    /**\n     * Gets coordinates calculated for children of this component\n     * @param monitor - Monitor containing information about current drag drop state\n     */\n    protected getDropCoordinatesForChildren(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>): [number|null, string|null]\n    {\n        const getHalf = (element: Element) =>\n        {\n            const rect = element.children[0].getBoundingClientRect();\n            const position = this.horizontal ? rect.x : rect.y;\n            const half = (this.horizontal ? rect.width : rect.height) / 2;\n\n            return position + half;\n        };\n\n        if(!this.containerElement)\n        {\n            return [null, null];\n        }\n\n        let index = 0;\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return [null, null];\n        }\n\n        const position = this.horizontal ? offset.x : offset.y;\n\n        for(let x = 0; x < this.containerElement.children.length; x++)\n        {\n            const child = this.containerElement.children[x];\n\n            //do nothing for placeholder\n            if(child.classList.contains('drag-placeholder'))\n            {\n                continue;\n            }\n\n            //return index if less than half\n            if(position <= getHalf(child))\n            {\n                return [index, this.metadata.id];\n            }\n\n            index++;\n        }\n\n        return [index, this.metadata.id];\n    }\n\n    /**\n     * Gets fixed drop coordinates\n     * @param monitor - Monitor containing information about current drag drop state\n     * @param canDrop - Indication whether can drop can occur on monitor itself\n     */\n    protected getFixedDropCoordinates(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, canDrop: boolean): [number|null, string|null]\n    {\n        const [index, id] = this.getDropCoordinates(monitor, canDrop);\n        let usedIndex = index;\n        const item = monitor.getItem();\n\n        if(item && isPresent(usedIndex) && isPresent(item.dragData.index))\n        {\n            //same parent and higher index\n            if(id === item.dragData.parentId &&\n                usedIndex > item.dragData.index)\n            {\n                usedIndex--;\n            }\n        }\n\n        return [usedIndex, id];\n    }\n\n    /**\n     * Gets index increment\n     * @param monitor - Monitor to be used for obtaining information about index\n     * @param horizontal - Indication whether are items horizontaly oriented\n     */\n    protected getIndexIncrement(monitor: DropTargetMonitor<LayoutDragItem, LayoutDropResult>, horizontal: boolean): number\n    {\n        const rect = this.dropzoneElement.getBoundingClientRect();\n        const offset = monitor.getClientOffset();\n\n        if(!offset)\n        {\n            return 0;\n        }\n\n        const position = horizontal ? offset.x - rect.x : offset.y - rect.y;\n        const half = horizontal ? rect.width / 2 : rect.height / 2;\n\n        if(position <= half)\n        {\n            return 0;\n        }\n        else\n        {\n            return 1;\n        }\n    }\n\n    /**\n     * Shows placeholder preview at specified location\n     * @param preview - Instance of preview data\n     */\n    @BindThis\n    protected showPlaceholderPreview(preview: DropPlaceholderPreview): void\n    {\n        if(!this.containerElement)\n        {\n            return;\n        }\n\n        this.placeholderPreviewElement ??= this.document.createElement('div');\n        this.placeholderPreviewElement.classList.add('drag-placeholder');\n        this.placeholderPreviewElement.remove();\n\n        this.connectDropToPlaceholder();\n        this.containerElement.insertBefore(this.placeholderPreviewElement, this.containerElement.children[preview.index]);\n    }\n\n    /**\n     * Connects placeholder preview element to placeholder drop\n     */\n    protected connectDropToPlaceholder(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.placeholderConnection?.unsubscribe();\n\n            if(this.placeholderPreviewElement)\n            {\n                this.placeholderConnection = this.placeholderDrop.connectDropTarget(this.placeholderPreviewElement);\n            }\n        });\n    }\n\n    /**\n     * Connects container element to container drop\n     */\n    protected connectDropToContainer(): void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            this.containerConnection?.unsubscribe();\n            this.containerConnection = this.containerDrop.connectDropTarget(this.designerElement.nativeElement);\n        });\n    }\n\n    /**\n     * Gets indication whether any of ancestors can accept drop, also returns id of that ancestor\n     * @param id - Id of component whose parent will be tested, if not specified id of this component will be used\n     */\n    protected canDropAncestors(id?: string): [boolean, string|null, string]\n    {\n        if(isBlank(id))\n        {\n            id = this.metadata.id;\n        }\n\n        const component = this.manager.getComponentDef(id);\n\n\n        if(!component?.parent)\n        {\n            return [false, null, id];\n        }\n\n        if(component.parent.component.canDrop)\n        {\n            return [true, component.parent.component.id, id];\n        }\n        else\n        {\n            return this.canDropAncestors(component.parent.component.id);\n        }\n    }\n}","<div class=\"designer-overlay\" \n     #layoutDesigner\n     #dndCore=\"dndCoreDesigner\"\n     [dndCoreDesigner]=\"{metadata: renderedType, parentId: parent?.renderedType?.id, index: index}\"\n     [dropzoneElement]=\"layoutDropzone\"\n     [dragDisabled]=\"dragDisabled\"\n     [dragSource]=\"dndCore.drag\"\n     [noHTML5Preview]=\"true\"\n     (dropMetadata)=\"addDescendant($event)\"\n     [copyDesignerStyles]=\"renderedType\"\n     (mouseleave)=\"hideOverlay($event)\"\n     (mouseover)=\"showOverlay($event)\"\n     (click)=\"selectComponent($event)\"\n     (dblclick)=\"unselectComponent($event)\">\n    <div class=\"designer-dropzone\"\n         #layoutDropzone\n         designerMinWidth\n         [canDrop]=\"canDrop\"\n         [editorMetadata]=\"editorMetadata\"\n         [horizontal]=\"parent?.horizontal ?? false\"\n         [dropTarget]=\"dndCore.dropzone\"\n         [isDropZone]=\"canDrop\">\n        <ng-template #renderer=\"layoutComponentRenderer\" [layoutComponentRenderer]=\"renderedType\" [layoutComponentRendererDisableTransformer]=\"true\"></ng-template>\n\n        <ng-container *ngIf=\"highlighted || selected\">\n            <div class=\"designer-overlay-border\"></div>\n            <div class=\"designer-overlay-layout\" [layoutDesignerOverlayFor]=\"renderer\"></div>\n\n            <div class=\"designer-overlay-title\"\n                 *bodyRender\n                 [positionTo]=\"layoutDesigner\"\n                 placement=\"TopStart\">{{editorMetadata?.metaInfo?.name ?? renderedType?.name}}</div>\n\n            <ng-container *ngIf=\"!!parent && parent.editorMetadata?.removeDescendant\">\n                <div *bodyRender\n                     class=\"designer-overlay-remove\"\n                     [positionTo]=\"layoutDesigner\"\n                     [offset]=\"{mainAxis: -18, alignmentAxis: -6}\"\n                     placement=\"TopEnd\"\n                     (click)=\"remove()\">\n                    <span class=\"fas fa-times\"></span>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n","import {Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, SkipSelf, Optional, Inject, OnDestroy, Injector, ViewChild} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Logger, LOGGER, PositionModule} from '@anglr/common';\nimport {LayoutComponent, LayoutComponentMetadata} from '@anglr/dynamic/layout';\nimport {LayoutComponentBase, LayoutComponentRendererSADirective} from '@anglr/dynamic/layout';\nimport {MetadataHistoryManager, SCOPE_ID} from '@anglr/dynamic';\nimport {isPresent} from '@jscrpt/common';\nimport {DndModule} from '@ng-dnd/core';\nimport {Subscription} from 'rxjs';\n\nimport {LayoutDesignerComponentOptions} from './layoutDesigner.options';\nimport {BodyRenderSADirective, CopyDesignerStylesSADirective, DesignerDropzoneSADirective, DesignerMinDimensionSADirective} from '../../directives';\nimport {LayoutComponentsIteratorService, LayoutEditorMetadataExtractor, LayoutEditorMetadataManager} from '../../services';\nimport {LayoutEditorDragPreviewSAComponent} from '../layoutEditorDragPreview/layoutEditorDragPreview.component';\nimport {LayoutDesignerOverlayForSAComponent} from '../layoutDesignerOverlayFor/layoutDesignerOverlayFor.component';\nimport {LayoutEditorMetadataDescriptor} from '../../decorators';\nimport {LAYOUT_HISTORY_MANAGER} from '../../misc/tokens';\nimport {DndCoreDesignerDirective, LayoutDndCoreModule} from '../../modules';\nimport {LayoutComponentDragData} from '../../interfaces';\n\n/**\n * Component used as designer component wrapper for layout component\n */\n@Component(\n{\n    selector: 'layout-designer-component',\n    templateUrl: 'layoutDesigner.component.html',\n    standalone: true,\n    imports:\n    [\n        //TODO: cleanup\n        CommonModule,\n        PositionModule,\n        LayoutEditorDragPreviewSAComponent,\n        LayoutDesignerOverlayForSAComponent,\n        DesignerMinDimensionSADirective,\n        CopyDesignerStylesSADirective,\n        LayoutComponentRendererSADirective,\n        DesignerDropzoneSADirective,\n        BodyRenderSADirective,\n        DndModule,\n        LayoutDndCoreModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LayoutDesignerSAComponent extends LayoutComponentBase<LayoutDesignerComponentOptions> implements LayoutComponent<LayoutDesignerComponentOptions>, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### protected properties - template bindings #########################\n\n    /**\n     * Indication whether is component selected\n     */\n    protected get selected(): boolean\n    {\n        return this.layoutEditorMetadataManager.selectedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Indication whether is component highlighted\n     */\n    protected get highlighted(): boolean\n    {\n        return this.layoutEditorMetadataManager.highlightedComponent === this.options?.typeMetadata.id;\n    }\n\n    /**\n     * Metadata for rendered type\n     */\n    protected renderedType: LayoutComponentMetadata|undefined|null;\n\n    //######################### protected properties - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override get element(): ElementRef<HTMLElement>\n    {\n        return this.designerElement;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override get extensionsOptions(): any|undefined|null\n    {\n        return this.options?.typeMetadata.options;\n    }\n\n    //######################### protected properties - children #########################\n\n    /**\n     * Instance of designer div element\n     */\n    @ViewChild('layoutDesigner', {static: true})\n    protected designerElement!: ElementRef<HTMLElement>;\n\n    //######################### public properties - children #########################\n\n    /**\n     * Instance of designer dnd core directive\n     */\n    @ViewChild('dndCoreDesigner', {static: true})\n    public dndCoreDesigner!: DndCoreDesignerDirective;\n\n    //######################### public properties #########################\n\n    /**\n     * Indication whether drag is disabled for component\n     */\n    public get dragDisabled(): boolean\n    {\n        return !this.parent || !!this.editorMetadata?.metaInfo?.dragDisabled;\n    }\n\n    /**\n     * Indication whether item can be dropped here\n     */\n    public canDrop: boolean = false;\n\n    /**\n     * Indication whether drop list is horizontally oriented\n     */\n    public horizontal: boolean = false;\n\n    /**\n     * Component identifier\n     */\n    public get id(): string\n    {\n        return this.options?.typeMetadata?.id ?? '';\n    }\n\n    /**\n     * Index of current layout designer in its parent\n     */\n    public index: number = 0;\n\n    /**\n     * Layout editor metadata\n     */\n    public editorMetadata: LayoutEditorMetadataDescriptor|null = null;\n\n    //######################### constructor #########################\n    constructor(changeDetector: ChangeDetectorRef,\n                element: ElementRef<HTMLElement>,\n                injector: Injector,\n                protected metadataExtractor: LayoutEditorMetadataExtractor,\n                protected layoutEditorMetadataManager: LayoutEditorMetadataManager,\n                protected iteratorSvc: LayoutComponentsIteratorService,\n                @Inject(LAYOUT_HISTORY_MANAGER) protected history: MetadataHistoryManager<LayoutComponentMetadata>,\n                @Optional() @Inject(SCOPE_ID) protected scopeId?: string,\n                @Inject(LOGGER) @Optional() logger?: Logger,\n                @SkipSelf() @Optional() protected parent?: LayoutDesignerSAComponent,)\n    {\n        super(changeDetector, element, injector, logger);\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public override ngOnDestroy(): void\n    {\n        this.logger?.debug('LayoutDesignerSAComponent: Destroying component {@data}', {id: this.options?.typeMetadata.id});\n\n        this.initSubscriptions.unsubscribe();\n\n        super.ngOnDestroy();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.unregisterLayoutDesignerComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    //######################### public methods #########################\n\n    /**\n     * Adds descentant component metadata to this component metadata\n     * @param dragData - Data from drag n drop event\n     */\n    public addDescendant(dragData: LayoutComponentDragData): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        const parentId = dragData.parentId;\n        this.logger?.debug('LayoutDesignerSAComponent: Adding descendant {@data}', {id: dragData.metadata?.id, parent: this.options.typeMetadata.id});\n\n        if(!dragData.metadata)\n        {\n            this.logger?.warn('LayoutDesignerSAComponent: Missing metadata while adding descendant');\n\n            return;\n        }\n\n        //already added to tree, removing old reference\n        if(parentId)\n        {\n            this.history.disable();\n            this.layoutEditorMetadataManager.getComponent(parentId)?.removeDescendant(dragData.metadata?.id);\n            this.history.enable();\n        }\n\n        this.editorMetadata?.addDescendant?.(dragData?.metadata, this.options.typeMetadata.options, dragData.index ?? 0);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    /**\n     * Removes descendant metadata from this component metadata\n     * @param id - Id of descendant to be removed\n     */\n    public removeDescendant(id: string): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.logger?.debug('LayoutDesignerSAComponent: Removing descendant {@data}', {id: this.options.typeMetadata.id, child: id});\n\n        this.editorMetadata?.removeDescendant?.(id, this.options.typeMetadata.options);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.renderedType = {...this.options.typeMetadata};\n        this.changeDetector.markForCheck();\n        this.history.getNewState();\n    }\n\n    //######################### protected methods - template bindings #########################\n\n    /**\n     * Shows designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected showOverlay(event: Event): void\n    {\n        this.logger?.verbose('LayoutDesignerComponent: Showing overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.highlightComponent(this.options?.typeMetadata.id);\n    }\n\n    /**\n     * Hides designer overlay\n     * @param event - Mouse event that occured\n     */\n    protected hideOverlay(event: Event): void\n    {\n        if(isPresent(this.parent))\n        {\n            return;\n        }\n\n        this.logger?.verbose('LayoutDesignerComponent: Hiding overlay for {@type}', {name: this.options?.typeMetadata.name, id: this.options?.typeMetadata.id});\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.cancelHighlightedComponent();\n    }\n\n    /**\n     * Marks component as selected\n     * @param event - Event that occured\n     */\n    protected selectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if(this.options)\n        {\n            this.layoutEditorMetadataManager.selectComponent(this.options.typeMetadata.id);\n        }\n    }\n\n    /**\n     * Unselects selected component\n     * @param event - Event that occured\n     */\n    protected unselectComponent(event: MouseEvent): void\n    {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.layoutEditorMetadataManager.unselectComponent();\n    }\n\n    /**\n     * Removes itself from tree\n     */\n    protected remove(): void\n    {\n        if(!this.parent || !this.options)\n        {\n            return;\n        }\n\n        this.parent.removeDescendant(this.options.typeMetadata.id);\n    }\n\n    //######################### protected methods - overrides #########################\n\n    /**\n     * @inheritdoc\n     */\n    protected override async onInit(): Promise<void>\n    {\n        await super.onInit();\n\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.options.typeMetadata.scope = this.scopeId;\n\n        if(this.parent?.options)\n        {\n            for await(const child of this.iteratorSvc.getChildrenIteratorFor(this.parent.options?.typeMetadata))\n            {\n                if(this.options.typeMetadata.id === child.metadata.id)\n                {\n                    this.index = child.index;\n\n                    break;\n                }\n            }\n        }\n\n        //TODO: optimize\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.selectedChange.subscribe(() => this.changeDetector.detectChanges()));\n        this.initSubscriptions.add(this.layoutEditorMetadataManager.highlightedChange.subscribe(() => this.changeDetector.detectChanges()));\n\n        this.editorMetadata = await this.metadataExtractor.extractMetadata(this.options.typeMetadata);\n        this.canDrop = this.editorMetadata?.canDropMetadata?.(this.options.typeMetadata.options) ?? false;\n        this.layoutEditorMetadataManager.registerLayoutDesignerComponent(this, this.options.typeMetadata.id, this.parent?.options?.typeMetadata.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected override onOptionsSet(): void\n    {\n        if(!this.options)\n        {\n            return;\n        }\n\n        this.renderedType = {...this.options.typeMetadata};\n        this.horizontal = this.editorMetadata?.isHorizontalDrop?.(this.options.typeMetadata.options) ?? false;\n    }\n}","import {Directive, ElementRef, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {DragActiveService} from '../../services';\n\n/**\n * Directive that adds special changes for designer dropzone\n */\n@Directive(\n{\n    selector: '.designer-dropzone',\n    standalone: true,\n})\nexport class DesignerDropzoneSADirective implements OnInit, OnDestroy\n{\n    //######################### protected properties #########################\n\n    /**\n     * Subscriptions created during initialization\n     */\n    protected initSubscriptions: Subscription = new Subscription();\n\n    //######################### public properties - inputs #########################\n\n    /**\n     * Indication whether is this enabled drop zone\n     */\n    @Input()\n    public isDropZone: boolean = false;\n\n    //######################### constructor #########################\n    constructor(protected draggingSvc: DragActiveService,\n                protected element: ElementRef<HTMLElement>,)\n    {\n    }\n\n    //######################### public methods - implementation of OnInit #########################\n    \n    /**\n     * Initialize component\n     */\n    public ngOnInit(): void\n    {\n        this.initSubscriptions.add(this.draggingSvc.draggingChange.subscribe(() => this.processDragValue()));\n    }\n\n    //######################### public methods - implementation of OnDestroy #########################\n    \n    /**\n     * Called when component is destroyed\n     */\n    public ngOnDestroy(): void\n    {\n        this.initSubscriptions.unsubscribe();\n    }\n\n    //######################### protected methods #########################\n\n    /**\n     * Process drag current value and sets css classes\n     */\n    protected processDragValue(): void\n    {\n        //relate to https://stackoverflow.com/a/20734159\n        //Need to wait before manipulating with DOM because browser can trigger dragend if dragged node is out of mouse position\n        setTimeout(() =>\n        {\n            if(this.draggingSvc.dragging && this.isDropZone)\n            {\n                this.element.nativeElement.classList.add('drag-active');\n            }\n            else\n            {\n                this.element.nativeElement.classList.remove('drag-active');\n            }\n        });\n    }\n}","import {NgModule} from '@angular/core';\n\nimport {DndCorePreviewComponent} from '../components';\nimport {DndCoreDesignerDirective, DndCorePaletteItemDirective, DndCorePreviewTemplateDirective, DndCoreTreeItemDirective} from '../directives';\n\n/**\n * Module used for handling layout dnd core stuff\n */\n@NgModule(\n{\n    declarations:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n    exports:\n    [\n        DndCorePreviewComponent,\n        DndCoreDesignerDirective,\n        DndCorePaletteItemDirective,\n        DndCorePreviewTemplateDirective,\n        DndCoreTreeItemDirective,\n    ],\n})\nexport class LayoutDndCoreModule\n{\n}","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {DropPlaceholderPreview, DropTargetData} from './dndBus.interface';\n\n/**\n * Service that serves as communication bus for dnd\n */\n@Injectable()\nexport class DndBusService\n{\n    //######################### protected fields #########################\n    \n    /**\n     * Used for emitting drop data changes\n     */\n    protected dropDataChangeSubject: Subject<DropTargetData> = new Subject<DropTargetData>();\n\n    /**\n     * Current value of drop placeholder preview\n     */\n    protected dropPlaceholderPreview: DropPlaceholderPreview|null = null;\n\n    /**\n     * Used for emitting when new drop placeholder preview should be displayed\n     */\n    protected newDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n\n    /**\n     * Used for emitting when old drop placeholder preview should be removed\n     */\n    protected oldDropPlaceholderPreviewSubject: Subject<DropPlaceholderPreview> = new Subject<DropPlaceholderPreview>();\n    \n    //######################### public properties #########################\n    \n    /**\n     * Occurs when drop data changes\n     */\n    public get dropDataChange(): Observable<DropTargetData>\n    {\n        return this.dropDataChangeSubject.asObservable();\n    }\n\n    /**\n     * Occurs when new drop placeholder preview should be displayed\n     */\n    public get newDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.newDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Occurs when old drop placeholder preview should be removed\n     */\n    public get oldDropPlaceholderPreviewChange(): Observable<DropPlaceholderPreview>\n    {\n        return this.oldDropPlaceholderPreviewSubject\n            .asObservable();\n    }\n\n    /**\n     * Gets current drop placeholder preview index\n     */\n    public get dropPlaceholderPreviewIndex(): number|null\n    {\n        return this.dropPlaceholderPreview?.index ?? null;\n    }\n    \n    //######################### public methods #########################\n    \n    /**\n     * Sets drop data new value\n     * @param data - Value of data that changed\n     */\n    public setDropData(data: DropTargetData): void\n    {\n        this.dropDataChangeSubject.next(data);\n    }\n\n    /**\n     * Sets drop placeholder preview\n     * @param data - Data for new drop placeholder preview\n     */\n    public setDropPlaceholderPreview(data: DropPlaceholderPreview|null): void\n    {\n        //nothing has changed\n        if(data?.index === this.dropPlaceholderPreview?.index && data?.parentId === this.dropPlaceholderPreview?.parentId)\n        {\n            return;\n        }\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.oldDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n\n        this.dropPlaceholderPreview = data;\n\n        if(this.dropPlaceholderPreview)\n        {\n            this.newDropPlaceholderPreviewSubject.next(this.dropPlaceholderPreview);\n        }\n    }\n}"],"names":["PositionModule","DesignerMinDimensionSADirective","constructor","active","initSubscriptions","Subscription","minHeight","minWidth","horizontal","canDrop","editorMetadata","ngOnInit","this","observer","MutationObserver","changes","change","target","HTMLElement","updatedDimensions","add","layoutComponentRendererDirective","componentElementChange","subscribe","element","init","disconnect","ngOnChanges","nameof","ngOnDestroy","unsubscribe","getChildrenContainer","style","observe","childList","nodesArray","childNodes","forEach","node","push","contentsLength","filter","itm","nodeName","length","children","item","classList","contains","selectors","contentQueries","LayoutComponentRendererSADirective","CopyDesignerStylesSADirective","metadata","_metadata","value","_copyDesignerStyles","_element","_metadataExtractor","applyDesignerStyles","extractMetadata","options","nativeElement","inputs","exportAs","standalone","BodyRenderSADirective","template","viewContainer","document","view","createEmbeddedView","rootNodes","body","appendChild","remove","destroy","DOCUMENT","LayoutDesignerOverlayForSAComponent","changeDetector","liveEvents","detectChanges","htmlElement","componentRef","hostView","attributeFilter","enabledChange","toggleLiveEvents","enabled","pointerEvents","features","attrs","decls","vars","consts","i0","PositionToDirective","position","offset","autoUpdate","flip","EventEmitter","done","source","ɵSource","ElementRef","placement","ɵPlacement","isString","PositionPlacement","isPresent","_applyPosition","dispose","placeElement","result","applyPositionResult","emit","POSITION","DndCoreDesignerDirective","dragData","Error","manager","getComponent","id","containerElement","componentElement","component","dnd","designerElement","draggingSvc","bus","zone","injector","placeholderDrop","dropTarget","drop","monitor","getItem","index","dropPlaceholderPreviewIndex","containerDrop","canDropAncestors","isOver","shallow","getFixedDropCoordinates","hover","parentId","getDropCoordinates","isBlank","setDropPlaceholderPreview","placeholder","height","width","drag","dragSource","beginDrag","setDragging","canDrag","dragDisabled","endDrag","didDrop","dropResult","getDropResult","setDropData","data","dropzone","dropMetadata","connectDropToContainer","dropzoneElement","dropDataChange","pipe","oldDropPlaceholderPreviewChange","placeholderPreviewElement","newDropPlaceholderPreviewChange","showPlaceholderPreview","placeholderConnection","containerConnection","getDropCoordinatesForChildren","canDropAncestor","ancestorId","parentComponent","componentIndex","getIndexIncrement","getHalf","rect","getBoundingClientRect","x","y","getClientOffset","child","usedIndex","preview","createElement","connectDropToPlaceholder","insertBefore","runOutsideAngular","connectDropTarget","getComponentDef","parent","__decorate","BindThis","LayoutDesignerSAComponent","LayoutComponentBase","selected","layoutEditorMetadataManager","selectedComponent","typeMetadata","highlighted","highlightedComponent","extensionsOptions","metaInfo","metadataExtractor","iteratorSvc","history","scopeId","logger","super","debug","unregisterLayoutDesignerComponent","addDescendant","disable","removeDescendant","enable","canDropMetadata","renderedType","markForCheck","getNewState","warn","showOverlay","event","verbose","name","preventDefault","stopPropagation","highlightComponent","hideOverlay","cancelHighlightedComponent","selectComponent","unselectComponent","onInit","scope","getChildrenIteratorFor","selectedChange","highlightedChange","registerLayoutDesignerComponent","onOptionsSet","isHorizontalDrop","LAYOUT_HISTORY_MANAGER","SCOPE_ID","LOGGER","viewQuery","ctx","CommonModule","DesignerDropzoneSADirective","DndModule","LayoutDndCoreModule","encapsulation","changeDetection","isDropZone","draggingChange","processDragValue","setTimeout","dragging","DndBusService","dropDataChangeSubject","Subject","dropPlaceholderPreview","newDropPlaceholderPreviewSubject","oldDropPlaceholderPreviewSubject","asObservable","next","factory"],"sourceRoot":""}